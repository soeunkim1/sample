/*
 * App URI: app/ccs/extCcsCLectEvalType
 * Source Location: app/ccs/extCcsCLectEvalType.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/ccs/extCcsCLectEvalType", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./extCcsCLectEvalType.xtm"/>
			
			/**
			 * 강의평가설문유형배치
			 * @class extCcsCLectEvalType
			 * @author 박갑수 at 2016. 5. 11
			 */
			var extCcsCLectEvalType = function() {
				var moPage = new Page();
				
				var moPObject = new PObject();
				
				// 객체검색팝업 호출
				moPObject.moIdsForStdCmnPObjSch = [
				{
					controlId			:	"btnDeptNm",
					iCd					:	"",
					iNm					:	"ipbDeptNm",
					iObjDivRcd			:	["CC009OG", "CC009SA"],
					iStartObject    	:   "",
					iOtDivRcd			:	"",
					iOtIsTreeView	:	"",
					iLanDivRcd		:	"/root/resOnLoad/strLanDivRcd",
					iKeyDate			:	"/root/keyDateMap/ST_DT",
					iKeyEndDate		:	"",
					oObjDivRcd		:	"/root/reqKey/strObjDivRcd",
					oCd					:	"/root/reqKey/strDeptCd",
					oCdNm				:	"ipbDeptNm",
					oBegDt				:	"",
					oEndDt				:	"",
					oLanDivRcd		:	"",
					func 					:  function(){}
				}];
				
				// 학문분야검색
				moPObject.moIdsForStdCcsPDclExtendPopup = [
				{
					controlId 			: "btnDclRcd",
					iLanDivRcd 		: "",
					iRefKey 			: "",				
					iCmpDivRcd 		: "cbbCmpDivRcd",
					iDclRcdCd 		: "",
					iDclRcdNm 		: "",					
					iReadOnlyYn 		: "",
					iStdDclRcdYn 	: "",											//학문분야 표준임포트 사용여부
					oOutDclRcdNm 	: "ipbDclRcdNm",						//학문분야 이름
					oOutDclRcdCd 	: "/root/reqDclRcd/strDclRcd",		//학문분야 배열코드															
					func : function(poParam) {
					}
				}];
				
				// 학년도 학기를 원래데이터로 되돌리기위한 변수
				var msSchYearRcd = "";
				var msSmtRcd = "";
				
				/**
				 * @desc import 헤더 초기화
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc onLoad 실행
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onModelConstructDone_ExtCcsCLectEvalType = function() {
					// 리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptCcsOpenSub"]);
					// 검색조건 초기 설정
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", ["grpData"]);
					
					// 서브미션 호출
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							
							util.Control.redraw(app, ["cbbSchYearRcd", "cbbSmtRcd", "cbbCmpDivRcd", "cbbSbCatRcd", "cbbLectTypeRcd", "cbbLectEvalTypeRcd", "cbbLectEvalTypeRcdBat", "cbbSbLvlRcd", "cbbBatDiv"]);
						}
					}, true);
				};
				
				/**
				 * @desc [cbbSchYearRcd]학년도 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onValueChanged_CbbSchYearRcd = function() {
					// 학사력 체크 및 해당 학년도 학기에 해당하는 기준일자 조회
					doChangeYearSmt("year");
				};
				
				/**
				 * @desc [cbbSmtRcd]학기 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onValueChanged_CbbSmtRcd = function() {
					// 학사력 체크 및 해당 학년도 학기에 해당하는 기준일자 조회
					doChangeYearSmt("smt");
				};
				
				/**
				 * @desc 학사력 체크 및 해당 학년도 학기에 해당하는 기준일자 조회
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				function doChangeYearSmt(psDiv) {
					//strCommand: date 
					util.Submit.send(app, "subDate", function(pbSuccess){
						if(pbSuccess){
							msSchYearRcd = util.DataMap.getValue(app, "dmKeyDateMap", "YEAR");
							msSmtRcd = util.DataMap.getValue(app, "dmKeyDateMap", "SMT");
							
						// Exception 발생시
						}else {
							if(psDiv == "year"){
								util.Control.setValue(app, "cbbSchYearRcd", msSchYearRcd);
							}else if(psDiv == "smt"){
								util.Control.setValue(app, "cbbSmtRcd", msSmtRcd);
							}
						}
					});
				};
				
				/**
				 * @desc [btnDeptNm]소속(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onClick_BtnDeptNm = function(sender) {
					// 객체검색팝업 호출
					doOnClickStdCmnPObjSch(sender);
				};
				
				/**
				 * @desc [ipbDeptNm]소속 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onValueChanged_IpbDeptNm = function(sender) {
					// 리피트 변경사항 체크
					if(util.Grid.isModified(app, ["grdCcsOpenSub"])){
						return false;
					}
					
					// 값변경시 객체검색팝업 호출
					doOnChangeStdCmnPObjSch(sender);
				};
				
				/**
				 * @desc [btnSearch]조회 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onClick_BtnSearch = function() {
					// 작업영역 리피트 변경 내역 체크
					if(util.Grid.isModified(app, "", "CRM")){
						return false;
					}
				
					// 조회조건 필수 체크
					if(!util.validate(app, ["cbbSchYearRcd", "cbbSmtRcd", "ipbDeptNm"])){
						return false;
					}
			
					// 조회
					doList(function(pbSuccess) {
						if (pbSuccess){
							// 조회 : "조회되었습니다." header 메세지 표시
							util.Msg.notify(app, "NLS.INF.M024");
						}
					});
				};
				
				/**
				 * @desc 강의평가설문유형배치 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				function doList(poCallBackFunc) {
					
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdCcsOpenSub");
							
							// 조회 후 콜백함수 수행
							if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
						}
					});
				};
				
				/**
				 * @desc [btnRestore]작업취소 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onClick_BtnRestore = function() {
					// 작업취소
					util.Grid.restoreRow(app, "grdCcsOpenSub");
				};
				
				/**
				 * @desc [btnSave]작업저장 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onClick_BtnSave = function() {
					// 작업저장
					doSave();
				};
				
				/**
				 * @desc 강의평가설문유형배치 변경사항 저장
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				function doSave() {
					
					// 리피트 변경사항 체크
					if(!util.Grid.isModified(app, ["grdCcsOpenSub"], "MSG")){
						return false;
					}
			
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccess){
						if(pbSuccess){
							doList(function(pbListSuccess) {
								// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
								if (pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
							});
						}
					});
				};
				
				/**
				 * @desc [btnBatch]설문Batch onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onClick_BtnBatch = function() {
					// 리피트 변경사항 체크
					if(util.Grid.isModified(app, ["grdCcsOpenSub"])){
						// "변경된 사항이 있습니다. 작업저장 혹은 취소 후 실행해 주시기 바랍니다." 메시지
						util.Msg.alert("NLS-WRN-M014");
						
						return false;
					}
					
					var vsTitle = ExtControl.getTextValue("btnBatch");
					// "설문Batch 을(를) 처리하시겠습니까?" 메시지
					if(util.Msg.confirm("NLS-CRM-M018", [vsTitle]) ){
						// "설문Batch
						doAllBat();
					}
				};
				
				/**
				 * @desc 설문Batch
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				function doAllBat() {
					//strCommand: allBat 
					util.Submit.send(app, "subAllBat", function(pbSuccess){
						if(pbSuccess){
							// 조회
							doList(function(pbSuccess) {
								if (pbSuccess){
									// "처리되었습니다." 헤더 메시지
									util.Msg.notify(app, "NLS.INF.M003");
								}
							});
						}else {
							// "처리가 취소되었습니다." 헤더 메시지
							util.Msg.notify(app, "NLS.INF.M013");
						}
					});
				};
				
				/**
				 * @desc [btnDclRcd]학문분야(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onClick_BtnDclRcd = function(sender) {
					// 이수구분
					var vsCmpDivRcd = util.Control.getValue(app, "cbbCmpDivRcd");
			
					if(ValueUtil.isNull(vsCmpDivRcd)){
						var vsCmpDivRcdTitle = ExtControl.getTextValue("lblCmpDivRcd");
						// 학문분야 선택 시 조회조건의 이수구분은 필수 입력 항목입니다.
						util.Msg.alert("NLS-CCS-M079");
					}else {
						// 학문분야검색팝업 호출
						doOnClickStdCcsPDclExtendPopup(sender);
					}
				};
				
				/**
				 * @desc 학문분야 일괄추가
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onClick_BtnPlus = function() {
					// 리피트 변경사항 체크
					if(util.Grid.isModified(app, ["grdCcsOpenSub"])){
						// "변경된 사항이 있습니다. 작업저장 혹은 취소 후 실행해 주시기 바랍니다." 메시지
						util.Msg.alert("NLS-WRN-M014");
						
						return false;
					}
					
					// 조회조건 필수 체크
					if(!util.validate(app, ["ipbDclRcdNm"])){
						return false;
					}
					
					var vsTitle = NLS.CCS.DCLRCDADD;
					// 학문분야 일괄추가 을(를) 처리하시겠습니까?" 메시지
					if(util.Msg.confirm("NLS-CRM-M018", [vsTitle]) ){
						// 추가[ADD], 삭제[DEL]
						util.DataMap.setValue(app, "dmReqDclRcd", "strDclRcdDiv", "ADD");
						// 학문분야 일괄추가삭제
						doDclRcdAddDel();
					}
				};
				
				/**
				 * @desc 학문분야 일괄추가삭제
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				function doDclRcdAddDel() {
					//strCommand: dclRcdAddDel 
					util.Submit.send(app, "subDclRcdAddDel", function(pbSuccess){
						if(pbSuccess){
							// 조회
							doList(function(pbSuccess) {
								if (pbSuccess){
									// "처리되었습니다." 헤더 메시지
									util.Msg.notify(app, "NLS.INF.M003");
								}
							});
						}else {
							// "처리가 취소되었습니다." 헤더 메시지
							util.Msg.notify(app, "NLS.INF.M013");
						}
					});
				};
				
				/**
				 * @desc 학문분야 일괄삭제
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onClick_BtnMinus = function() {
					// 리피트 변경사항 체크
					if(util.Grid.isModified(app, ["grdCcsOpenSub"])){
						// "변경된 사항이 있습니다. 작업저장 혹은 취소 후 실행해 주시기 바랍니다." 메시지
						util.Msg.alert("NLS-WRN-M014");
						
						return false;
					}
					
					// 조회조건 필수 체크
					if(!util.validate(app, ["ipbDclRcdNm"])){
						return false;
					}
					
					var vsTitle = NLS.CCS.DCLRCDDEL;
					// 학문분야 일괄삭제 을(를) 처리하시겠습니까?" 메시지
					if(util.Msg.confirm("NLS-CRM-M018", [vsTitle]) ){
						// 추가[ADD], 삭제[DEL]
						util.DataMap.setValue(app, "dmReqDclRcd", "strDclRcdDiv", "DEL");
						// 학문분야 일괄추가삭제
						doDclRcdAddDel();
					}
				};
				
				/**
				 * @desc [cbbCmpDivRcd]이수구분 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onValueChanged_CbbCmpDivRcd = function() {
					// 이수구분값 변성시 학문분야 초기화
					util.DataMap.setValue(app, "dmReqDclRcd", "strDclRcd", "");
					util.DataMap.setValue(app, "dmReqDclRcd", "strDclRcdNm", "");
					util.Control.redraw(app, ["ipbDclRcdNm"]);
				};
				
				
				/**
				 * @desc [cbbBatDiv]일괄처리구분 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onValueChanged_CbbBatDiv = function() {
					// 컬럼명칭으로 구분
					var vsBatDiv = util.Control.getValue(app, "cbbBatDiv");
					
					util.DataMap.setValue(app, "dmReqKey", "strValue", "");
					
					if(ValueUtil.isNull(vsBatDiv)){
						util.Control.setVisible(app, false, ["ckbBatCtl", "cbbBatCtl", "ipbBatCtl"]);
					}else {
						
						// 컨트롤구분(CHECK, COMBO, INPUT)
						var vsCdPrp2 = ExtInstance.getValue("/root/resOnLoad/batDivList/row", "CD_PRP2" , "child::CD_PRP1='"+ vsBatDiv +"'");
						
						// CHECK
						if(ValueUtil.fixNull(vsCdPrp2) == "CHECK"){
							
							// 체크박스 라벨
							var vsCdPrp4 = ExtInstance.getValue("/root/resOnLoad/batDivList/row", "CD_PRP4" , "child::CD_PRP1='"+ vsBatDiv +"'");
							
							util.Control.setVisible(app, true, ["ckbBatCtl"]);
							util.Control.setVisible(app, false, ["cbbBatCtl", "ipbBatCtl"]);
							
							if(!ValueUtil.isNull(vsCdPrp4)){
								util.DataSet.setValue(app, "dsBatDivCheckList", "CD_NM", vsCdPrp4, "1");
			
								util.Control.redraw(app, ["ckbBatCtl"]);
							}
							
						// CMOBO
						}else if(ValueUtil.fixNull(vsCdPrp2) == "COMBO"){
							
							// 콤보코드
							var vsCdPrp3 = ExtInstance.getValue("/root/resOnLoad/batDivList/row", "CD_PRP3" , "child::CD_PRP1='"+ vsBatDiv +"'");
							
							util.Control.setVisible(app, true, ["cbbBatCtl"]);
							util.Control.setVisible(app, false, ["ckbBatCtl", "ipbBatCtl"]);
							
							util.DataMap.setValue(app, "dmReqBatDiv", "strCdCls", vsCdPrp3);
							
							if(!ValueUtil.isNull(vsCdPrp3)){
								// 콤보코드목록 구성
								//strCommand: batDivCd 
								util.Submit.send(app, "subBatDivCd", function(pbSuccess){
									if(pbSuccess){
										util.Control.redraw(app, ["cbbBatCtl"]);
									}
								});
							}
							
						// INPUT
						}else {
							
							util.Control.setVisible(app, true, ["ipbBatCtl"]);
							util.Control.setVisible(app, false, ["ckbBatCtl", "cbbBatCtl"]);
						}
					}
				};
				
				/**
				 * @desc [btnAllBatch]일괄처리 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				moPage.onClick_BtnAllBatch = function() {
					// 리피트 변경사항 체크
					if(util.Grid.isModified(app, ["grdCcsOpenSub"])){
						// "변경된 사항이 있습니다. 작업저장 혹은 취소 후 실행해 주시기 바랍니다." 메시지
						util.Msg.alert("NLS-WRN-M014");
						
						return false;
					}
					
					// 일괄처리구분 필수 체크
					if(!util.validate(app, ["cbbBatDiv"])){
						return false;
					}
					
					// @을(를) 처리하시겠습니까?
					var vnIdx = util.SelectCtl.getSelectedIndex(app, "cbbBatDiv");
					var vsValue = util.SelectCtl.getLabel(app, "cbbBatDiv", vnIdx);
							
					if(util.Msg.confirm("NLS-CRM-M018", [vsValue]) ){
						// 일괄처리
						doAllBatProc();
					}
				};
				
				/**
				 * @desc 일괄처리
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 11
				 */
				function doAllBatProc() {
					//strCommand: allBatProc 
					util.Submit.send(app, "subAllBatProc", function(pbSuccess){
						if(pbSuccess){
							// 조회
							doList(function(pbSuccess) {
								if (pbSuccess){
									// "처리되었습니다." 헤더 메시지
									util.Msg.notify(app, "NLS.INF.M003");
								}
							});
						}else {
							// "처리가 취소되었습니다." 헤더 메시지
							util.Msg.notify(app, "NLS.INF.M013");
						}
					});
				};
			
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsBatDivList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"},
					{"name": "CD_PRP2"},
					{"name": "CD_PRP3"},
					{"name": "CD_PRP4"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsSbCatRcdList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsLectTypeRcdList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsLectEvalTypeRcd");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsSchYearRcdList");
			dataSet_5.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsSmtRcdList");
			dataSet_6.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsSbDivRcdList");
			dataSet_7.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsSbLvlRcdList");
			dataSet_8.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			
			var dataSet_9 = new cpr.data.DataSet("dsCcsOpenSub");
			dataSet_9.parseData({
				"info": "CCS_OPEN_SUB@SCH_YEAR_RCD,SMT_RCD,SA_CD,SA_OBJ_DIV_RCD,CU_CD,CU_OBJ_DIV_RCD,SB_CD,SB_OBJ_DIV_RCD,DIVCLS_CD",
				"columns": [
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"},
					{"name": "SA_CD"},
					{"name": "SA_CD_NM"},
					{"name": "SA_OBJ_DIV_RCD"},
					{"name": "CU_CD"},
					{"name": "CU_OBJ_DIV_RCD"},
					{"name": "SB_CD"},
					{"name": "SB_CD_NM"},
					{"name": "SB_OBJ_DIV_RCD"},
					{"name": "DIVCLS_CD"},
					{"name": "DIVCLS_NM"},
					{"name": "REF_KEY"},
					{"name": "PNT"},
					{"name": "THEO_TC"},
					{"name": "EPAC_TC"},
					{"name": "LECT_TIME_CNT"},
					{"name": "REC_SCALE_RCD_NM"},
					{"name": "LECT_TYPE_RCD"},
					{"name": "LECT_EVAL_TYPE_RCD"},
					{"name": "CMP_DIV_RCD"},
					{"name": "SB_CAT_RCD"},
					{"name": "SB_LVL_RCD"},
					{"name": "LECT_EVAL_XCP_YN"},
					{"name": "PROF_NM"},
					{"name": "DCL_RCD_CD"},
					{"name": "DCL_RCD_NM"},
					{"name": "SB_DIV_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_9);
			
			var dataSet_10 = new cpr.data.DataSet("dsBatDivComboList");
			dataSet_10.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_10);
			
			var dataSet_11 = new cpr.data.DataSet("dsBatDivCheckList");
			dataSet_11.parseData({
				"columns": [{"name": "CD_NM"}],
				"rows": []
			});
			app.register(dataSet_11);
			var dataMap_1 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					},
					{
						"name": "cmpDivRcdList",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqKey");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strDeptNm",
						"dataType": "string"
					},
					{
						"name": "strDeptCd",
						"dataType": "string"
					},
					{
						"name": "strObjDivRcd",
						"dataType": "string"
					},
					{
						"name": "strCmpDivRcd",
						"dataType": "string"
					},
					{
						"name": "strSbCatRcd",
						"dataType": "string"
					},
					{
						"name": "strSbCd",
						"dataType": "string"
					},
					{
						"name": "strSbNm",
						"dataType": "string"
					},
					{
						"name": "strLectTypeRcd",
						"dataType": "string"
					},
					{
						"name": "strLectEvalTypeRcd",
						"dataType": "string"
					},
					{
						"name": "strTheoTc",
						"dataType": "string"
					},
					{
						"name": "strEpacTc",
						"dataType": "string"
					},
					{
						"name": "strTheoEpacTc",
						"dataType": "string"
					},
					{
						"name": "strLectEvalXcpYn",
						"dataType": "string"
					},
					{
						"name": "strRecScaleRcdPN",
						"dataType": "string"
					},
					{
						"name": "strLectEvalTypeRcdNull",
						"dataType": "string"
					},
					{
						"name": "strSbLvlRcd",
						"dataType": "string"
					},
					{
						"name": "strBatDiv",
						"dataType": "string"
					},
					{
						"name": "strValue",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmKeyDateMap");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "BEF_DT",
						"dataType": "string"
					},
					{
						"name": "YEAR",
						"dataType": "string"
					},
					{
						"name": "SMT",
						"dataType": "string"
					},
					{
						"name": "END_DT",
						"dataType": "string"
					},
					{
						"name": "ST_DT",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmReqDclRcd");
			dataMap_4.parseData({
				"columns" : [
					{
						"name": "strDclRcd",
						"dataType": "string"
					},
					{
						"name": "strDclRcdNm",
						"dataType": "string"
					},
					{
						"name": "strDclRcdDiv",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_4);
			
			var dataMap_5 = new cpr.data.DataMap("dmReqLectEvalTypeRcd");
			dataMap_5.parseData({
				"columns" : [{
					"name": "strLectEvalTypeRcdBat",
					"dataType": "string"
				}]
			});
			app.register(dataMap_5);
			
			var dataMap_6 = new cpr.data.DataMap("dmReqBatDiv");
			dataMap_6.parseData({
				"columns" : [{
					"name": "strCdCls",
					"dataType": "string"
				}]
			});
			app.register(dataMap_6);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/ccs/ExtCcsLectEvalType/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_5, false);
			submission_1.addResponseData(dataSet_6, false);
			submission_1.addResponseData(dataMap_3, false);
			submission_1.addResponseData(dataMap_1, false);
			submission_1.addResponseData(dataSet_8, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_7, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subDate");
			submission_2.action = "/cmn/StdCmnDateTime/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_3);
			submission_2.addResponseData(dataMap_3, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subList");
			submission_3.action = "/ccs/ExtCcsLectEvalType/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_2);
			submission_3.addRequestData(dataMap_3);
			submission_3.addResponseData(dataSet_9, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subSave");
			submission_4.action = "/ccs/ExtCcsLectEvalType/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataSet_9);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subAllBat");
			submission_5.action = "/ccs/ExtCcsLectEvalType/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataMap_2);
			submission_5.addRequestData(dataMap_3);
			submission_5.addRequestData(dataMap_5);
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("subAllBatProc");
			submission_6.action = "/ccs/ExtCcsLectEvalType/";
			submission_6.mediaType = "application/x-www-form-urlencoded";
			submission_6.addRequestData(dataMap_2);
			submission_6.addRequestData(dataMap_3);
			submission_6.addRequestData(dataMap_5);
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("subDclRcdAddDel");
			submission_7.action = "/ccs/ExtCcsLectEvalType/";
			submission_7.mediaType = "application/x-www-form-urlencoded";
			submission_7.addRequestData(dataMap_2);
			submission_7.addRequestData(dataMap_3);
			submission_7.addRequestData(dataMap_4);
			app.register(submission_7);
			
			var submission_8 = new cpr.protocols.Submission("subBatDivCd");
			submission_8.action = "/ccs/ExtCcsLectEvalType/";
			submission_8.mediaType = "application/x-www-form-urlencoded";
			submission_8.addRequestData(dataMap_6);
			submission_8.addResponseData(dataSet_10, false);
			app.register(submission_8);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaStdCmnPobjSch");
			cpr.core.App.load("app/cmn/impStdCmnPObjSch", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "680px",
				"left": "5px",
				"width": "100px",
				"height": "25px"
			});
			
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1158px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optSchYearRcd");
				output_1.value = "";
				output_1.style.setClasses(["require"]);
				output_1.bind("value").toLanguage("UI-GLS-SCH_YEAR");
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "90px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbSchYearRcd");
				comboBox_1.enabled = false;
				comboBox_1.userAttr({"require": "Y"});
				comboBox_1.bind("fieldLabel").toExpression("#optSchYearRcd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmKeyDateMap"), "YEAR");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("선택", ""));
					comboBox_1.setItemSet(app.lookup("dsSchYearRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				if(typeof onCbbSchYearRcdSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onCbbSchYearRcdSelectionChange);
				}
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "100px",
					"width": "100px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optSmtRcd");
				output_2.value = "";
				output_2.style.setClasses(["require"]);
				output_2.bind("value").toLanguage("UI-GLS-SMT");
				container.addChild(output_2, {
					"top": "5px",
					"left": "210px",
					"width": "90px",
					"height": "25px"
				});
				var comboBox_2 = new cpr.controls.ComboBox("cbbSmtRcd");
				comboBox_2.enabled = false;
				comboBox_2.userAttr({"require": "Y"});
				comboBox_2.bind("fieldLabel").toExpression("#optSmtRcd.value");
				comboBox_2.bind("value").toDataMap(app.lookup("dmKeyDateMap"), "SMT");
				(function(comboBox_2){
					comboBox_2.addItem(new cpr.controls.Item("선택", ""));
					comboBox_2.setItemSet(app.lookup("dsSmtRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_2);
				if(typeof onCbbSmtRcdSelectionChange == "function") {
					comboBox_2.addEventListener("selection-change", onCbbSmtRcdSelectionChange);
				}
				container.addChild(comboBox_2, {
					"top": "5px",
					"left": "305px",
					"width": "100px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optDeptNm");
				output_3.value = "";
				output_3.style.setClasses(["require"]);
				output_3.bind("value").toLanguage("UI-GLS-ASGN");
				container.addChild(output_3, {
					"top": "5px",
					"left": "415px",
					"width": "90px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbDeptNm");
				inputBox_1.maxLength = 100;
				inputBox_1.userAttr({"require": "Y"});
				inputBox_1.bind("fieldLabel").toExpression("#optDeptNm.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strDeptNm");
				if(typeof onIpbDeptNmValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbDeptNmValueChange);
				}
				container.addChild(inputBox_1, {
					"top": "5px",
					"left": "510px",
					"width": "120px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnDeptNm");
				button_2.value = "";
				button_2.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnDeptNmClick == "function") {
					button_2.addEventListener("click", onBtnDeptNmClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "630px",
					"width": "20px",
					"height": "25px"
				});
				var output_4 = new cpr.controls.Output("optCmpDivRcd");
				output_4.value = "";
				output_4.bind("value").toLanguage("UI-DB-SUB_GBN_RCD");
				container.addChild(output_4, {
					"top": "5px",
					"left": "660px",
					"width": "110px",
					"height": "25px"
				});
				var comboBox_3 = new cpr.controls.ComboBox("cbbCmpDivRcd");
				comboBox_3.bind("fieldLabel").toExpression("#optCmpDivRcd.value");
				comboBox_3.bind("value").toDataMap(app.lookup("dmReqKey"), "strCmpDivRcd");
				(function(comboBox_3){
					comboBox_3.addItem(new cpr.controls.Item("전체", ""));
					comboBox_3.setItemSet(app.lookup("dsCmpDivRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_3);
				if(typeof onCbbCmpDivRcdSelectionChange == "function") {
					comboBox_3.addEventListener("selection-change", onCbbCmpDivRcdSelectionChange);
				}
				container.addChild(comboBox_3, {
					"top": "5px",
					"left": "775px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_4 = new cpr.controls.ComboBox("cbbSbCatRcd");
				comboBox_4.bind("fieldLabel").toExpression("#optSbCatRcd.value");
				comboBox_4.bind("value").toDataMap(app.lookup("dmReqKey"), "strSbCatRcd");
				(function(comboBox_4){
					comboBox_4.addItem(new cpr.controls.Item("전체", ""));
					comboBox_4.setItemSet(app.lookup("dsSbCatRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_4);
				container.addChild(comboBox_4, {
					"top": "5px",
					"left": "980px",
					"width": "100px",
					"height": "25px"
				});
				var output_5 = new cpr.controls.Output("optSbCatRcd");
				output_5.value = "";
				output_5.bind("value").toLanguage("UI-SCR-SUBCATGR");
				container.addChild(output_5, {
					"top": "5px",
					"left": "885px",
					"width": "90px",
					"height": "25px"
				});
				var output_6 = new cpr.controls.Output("optSbCd");
				output_6.value = "";
				output_6.bind("value").toLanguage("UI-DB-SB_CD");
				container.addChild(output_6, {
					"top": "30px",
					"left": "5px",
					"width": "91px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbSbCd");
				inputBox_2.maxLength = 10;
				inputBox_2.bind("fieldLabel").toExpression("#optSbCd.value");
				inputBox_2.bind("value").toDataMap(app.lookup("dmReqKey"), "strSbCd");
				container.addChild(inputBox_2, {
					"top": "30px",
					"left": "100px",
					"width": "100px",
					"height": "25px"
				});
				var inputBox_3 = new cpr.controls.InputBox("ipbSbNm");
				inputBox_3.maxLength = 100;
				inputBox_3.bind("fieldLabel").toExpression("#optSbNm.value");
				inputBox_3.bind("value").toDataMap(app.lookup("dmReqKey"), "strSbNm");
				container.addChild(inputBox_3, {
					"top": "30px",
					"left": "305px",
					"width": "100px",
					"height": "25px"
				});
				var output_7 = new cpr.controls.Output("optSbNm");
				output_7.value = "";
				output_7.bind("value").toLanguage("UI-DB-SB_NM");
				container.addChild(output_7, {
					"top": "30px",
					"left": "210px",
					"width": "90px",
					"height": "25px"
				});
				var output_8 = new cpr.controls.Output("optLectTypeRcd");
				output_8.value = "";
				output_8.bind("value").toLanguage("UI-DB-LECT_TYPE_RCD_NM");
				container.addChild(output_8, {
					"top": "30px",
					"left": "415px",
					"width": "90px",
					"height": "25px"
				});
				var comboBox_5 = new cpr.controls.ComboBox("cbbLectTypeRcd");
				comboBox_5.bind("fieldLabel").toExpression("#optLectTypeRcd.value");
				comboBox_5.bind("value").toDataMap(app.lookup("dmReqKey"), "strLectTypeRcd");
				(function(comboBox_5){
					comboBox_5.addItem(new cpr.controls.Item("전체", ""));
					comboBox_5.setItemSet(app.lookup("dsLectTypeRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_5);
				container.addChild(comboBox_5, {
					"top": "30px",
					"left": "510px",
					"width": "140px",
					"height": "25px"
				});
				var output_9 = new cpr.controls.Output("optLectEvalTypeRcd");
				output_9.value = "";
				output_9.bind("value").toLanguage("UI-DB-LECEVALTYPE");
				container.addChild(output_9, {
					"top": "30px",
					"left": "660px",
					"width": "110px",
					"height": "25px"
				});
				var comboBox_6 = new cpr.controls.ComboBox("cbbLectEvalTypeRcd");
				comboBox_6.bind("fieldLabel").toExpression("#optLectEvalTypeRcd.value");
				comboBox_6.bind("value").toDataMap(app.lookup("dmReqKey"), "strLectEvalTypeRcd");
				(function(comboBox_6){
					comboBox_6.addItem(new cpr.controls.Item("전체", ""));
					comboBox_6.setItemSet(app.lookup("dsLectEvalTypeRcd"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_6);
				container.addChild(comboBox_6, {
					"top": "30px",
					"left": "775px",
					"width": "100px",
					"height": "25px"
				});
				var checkBox_1 = new cpr.controls.CheckBox("ckbTheoTc");
				checkBox_1.value = "";
				checkBox_1.trueValue = "Y";
				checkBox_1.falseValue = "";
				checkBox_1.text = "이론시수";
				checkBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strTheoTc");
				container.addChild(checkBox_1, {
					"top": "55px",
					"left": "5px",
					"width": "75px",
					"height": "25px"
				});
				var checkBox_2 = new cpr.controls.CheckBox("ckbEpacTc");
				checkBox_2.value = "";
				checkBox_2.trueValue = "Y";
				checkBox_2.falseValue = "";
				checkBox_2.text = "실습시수";
				checkBox_2.bind("value").toDataMap(app.lookup("dmReqKey"), "strEpacTc");
				container.addChild(checkBox_2, {
					"top": "55px",
					"left": "85px",
					"width": "75px",
					"height": "25px"
				});
				var checkBox_3 = new cpr.controls.CheckBox("ckbTheoEpacTc");
				checkBox_3.value = "";
				checkBox_3.trueValue = "Y";
				checkBox_3.falseValue = "";
				checkBox_3.text = "시수없음";
				checkBox_3.bind("value").toDataMap(app.lookup("dmReqKey"), "strTheoEpacTc");
				container.addChild(checkBox_3, {
					"top": "55px",
					"left": "165px",
					"width": "75px",
					"height": "25px"
				});
				var checkBox_4 = new cpr.controls.CheckBox("ckbLectEvalXcpYn");
				checkBox_4.value = "";
				checkBox_4.trueValue = "Y";
				checkBox_4.falseValue = "";
				checkBox_4.text = "강의평가제외";
				checkBox_4.bind("value").toDataMap(app.lookup("dmReqKey"), "strLectEvalXcpYn");
				container.addChild(checkBox_4, {
					"top": "55px",
					"left": "415px",
					"width": "110px",
					"height": "25px"
				});
				var checkBox_5 = new cpr.controls.CheckBox("ckbRecScaleRcdPN");
				checkBox_5.value = "";
				checkBox_5.trueValue = "Y";
				checkBox_5.falseValue = "";
				checkBox_5.text = "P/F과목제외";
				checkBox_5.bind("value").toDataMap(app.lookup("dmReqKey"), "strRecScaleRcdPN");
				container.addChild(checkBox_5, {
					"top": "55px",
					"left": "530px",
					"width": "110px",
					"height": "25px"
				});
				var checkBox_6 = new cpr.controls.CheckBox("ckbLectEvalTypeRcdNull");
				checkBox_6.value = "";
				checkBox_6.trueValue = "Y";
				checkBox_6.falseValue = "";
				checkBox_6.text = "강의평가설문유형 미입력 과목";
				checkBox_6.bind("value").toDataMap(app.lookup("dmReqKey"), "strLectEvalTypeRcdNull");
				container.addChild(checkBox_6, {
					"top": "55px",
					"left": "645px",
					"width": "230px",
					"height": "25px"
				});
				var output_10 = new cpr.controls.Output("optSbLvlRcd");
				output_10.value = "";
				output_10.bind("value").toLanguage("UI-GLS-SHYR");
				container.addChild(output_10, {
					"top": "30px",
					"left": "885px",
					"width": "90px",
					"height": "25px"
				});
				var comboBox_7 = new cpr.controls.ComboBox("cbbSbLvlRcd");
				comboBox_7.bind("fieldLabel").toExpression("#optSbLvlRcd.value");
				comboBox_7.bind("value").toDataMap(app.lookup("dmReqKey"), "strSbLvlRcd");
				(function(comboBox_7){
					comboBox_7.setItemSet(app.lookup("dsSbLvlRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_7);
				container.addChild(comboBox_7, {
					"top": "30px",
					"left": "980px",
					"width": "100px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "82px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-LECTATTENDEND");
				container.addChild(userDefinedControl_2, {
					"top": "37px",
					"left": "5px",
					"width": "315px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnRestore");
				button_3.value = "";
				button_3.style.setClasses(["btn-restore"]);
				button_3.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_3.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_3, {
					"top": "37px",
					"left": "1093px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "";
				button_4.style.setClasses(["btn-save"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"top": "37px",
					"left": "1158px",
					"width": "60px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button("btnBatch");
				button_5.value = "";
				button_5.style.setClasses(["btn-commit"]);
				button_5.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnBatchClick == "function") {
					button_5.addEventListener("click", onBtnBatchClick);
				}
				container.addChild(button_5, {
					"top": "10px",
					"left": "1132px",
					"width": "80px",
					"height": "25px"
				});
				var output_11 = new cpr.controls.Output("optLectEvalTypeRcdBat");
				output_11.value = "";
				output_11.bind("value").toLanguage("UI-DB-LECEVALTYPE");
				container.addChild(output_11, {
					"top": "10px",
					"left": "834px",
					"width": "148px",
					"height": "25px"
				});
				var comboBox_8 = new cpr.controls.ComboBox("cbbLectEvalTypeRcdBat");
				comboBox_8.bind("fieldLabel").toExpression("#optLectEvalTypeRcdBat.value");
				comboBox_8.bind("value").toDataMap(app.lookup("dmReqLectEvalTypeRcd"), "strLectEvalTypeRcdBat");
				(function(comboBox_8){
					comboBox_8.setItemSet(app.lookup("dsLectEvalTypeRcd"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_8);
				container.addChild(comboBox_8, {
					"top": "10px",
					"left": "987px",
					"width": "140px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCcsOpenSub");
				grid_1.init({
					"dataSet": app.lookup("dsCcsOpenSub"),
					"columns": [
						{"width": "25px"},
						{"width": "40px"},
						{"width": "100px"},
						{"width": "70px"},
						{"width": "115px"},
						{"width": "50px"},
						{"width": "115px"},
						{"width": "90px"},
						{"width": "80px"},
						{"width": "67px"},
						{"width": "75px"},
						{"width": "75px"},
						{"width": "75px"},
						{"width": "52px"},
						{"width": "40px"},
						{"width": "40px"},
						{"width": "40px"},
						{"width": "60px"},
						{"width": "90px"},
						{"width": "180px"},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						},
						{
							"width": "150px",
							"visible": false
						},
						{"width": "100px"},
						{
							"width": "120px",
							"visible": false
						},
						{
							"width": "120px",
							"visible": false
						},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "110px",
							"visible": false
						},
						{
							"width": "135px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SA_CD_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SUBNUM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SB_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-DIVCLS_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-LECEVALTYPE");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-EXPYN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SUB_GBN_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SUB_GBN_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SUBCATGR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-LECT_TYPE_RCD_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-REC_SCALE_RCD_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SHYR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PNT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-THEO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-PRAC");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-LECT_TIME_CNT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-CHARGPROF");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-DCL");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 20},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SCH_YEAR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 21},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 22},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SA_CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 23},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SA_OBJ_DIV_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 24},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SUBGRPCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 25},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SUBGRPOBJDIS");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 26},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SUBOBJDIS");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 27},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-DIVCLS_CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 28},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-OPEN_SUB_REF_KEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 29},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-DCL_RCD");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.control = (function(){
										var output_12 = new cpr.controls.Output();
										output_12.style.css({
											"text-align" : "center"
										});
										return output_12;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "SA_CD_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "SB_CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "SB_CD_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "DIVCLS_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "LECT_EVAL_TYPE_RCD";
									cell.control = (function(){
										var comboBox_9 = new cpr.controls.ComboBox("gdCbbLectEvalTypeRcd");
										(function(comboBox_9){
											comboBox_9.setItemSet(app.lookup("dsLectEvalTypeRcd"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_9);
										comboBox_9.bind("value").toDataColumn("LECT_EVAL_TYPE_RCD");
										return comboBox_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "LECT_EVAL_XCP_YN";
									cell.control = (function(){
										var checkBox_7 = new cpr.controls.CheckBox("gdCkbLectEvalXcpYn");
										checkBox_7.value = "";
										checkBox_7.trueValue = "Y";
										checkBox_7.falseValue = "";
										checkBox_7.text = "";
										checkBox_7.style.css({
											"text-align" : "center"
										});
										checkBox_7.bind("value").toDataColumn("LECT_EVAL_XCP_YN");
										return checkBox_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "SB_DIV_RCD";
									cell.control = (function(){
										var comboBox_10 = new cpr.controls.ComboBox("gdCbbSbDivRcd");
										(function(comboBox_10){
											comboBox_10.setItemSet(app.lookup("dsSbDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_10);
										comboBox_10.bind("value").toDataColumn("SB_DIV_RCD");
										return comboBox_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "CMP_DIV_RCD";
									cell.control = (function(){
										var comboBox_11 = new cpr.controls.ComboBox("gdCbbCmpDivCd");
										comboBox_11.enabled = false;
										comboBox_11.hideButton = true;
										comboBox_11.userAttr({"require": "Y"});
										(function(comboBox_11){
											comboBox_11.addItem(new cpr.controls.Item("선택", ""));
											comboBox_11.setItemSet(app.lookup("dsCmpDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_11);
										comboBox_11.bind("value").toDataColumn("CMP_DIV_RCD");
										return comboBox_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "SB_CAT_RCD";
									cell.control = (function(){
										var comboBox_12 = new cpr.controls.ComboBox("gdCbbSbCatRcd");
										comboBox_12.enabled = false;
										comboBox_12.hideButton = true;
										(function(comboBox_12){
											comboBox_12.setItemSet(app.lookup("dsSbCatRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_12);
										comboBox_12.bind("value").toDataColumn("SB_CAT_RCD");
										return comboBox_12;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "LECT_TYPE_RCD";
									cell.control = (function(){
										var comboBox_13 = new cpr.controls.ComboBox("gdCbbLectTypeRcd");
										comboBox_13.enabled = false;
										comboBox_13.hideButton = true;
										(function(comboBox_13){
											comboBox_13.setItemSet(app.lookup("dsLectTypeRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_13);
										comboBox_13.bind("value").toDataColumn("LECT_TYPE_RCD");
										return comboBox_13;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "REC_SCALE_RCD_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "SB_LVL_RCD";
									cell.control = (function(){
										var comboBox_14 = new cpr.controls.ComboBox("gdCbbSbLvlRcd");
										comboBox_14.enabled = false;
										comboBox_14.hideButton = true;
										(function(comboBox_14){
											comboBox_14.setItemSet(app.lookup("dsSbLvlRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_14);
										comboBox_14.bind("value").toDataColumn("SB_LVL_RCD");
										return comboBox_14;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "PNT";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.columnName = "THEO_TC";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.columnName = "EPAC_TC";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.columnName = "LECT_TIME_CNT";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.columnName = "PROF_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.columnName = "DCL_RCD_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 20},
								"configurator": function(cell){
									cell.columnName = "SCH_YEAR_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 21},
								"configurator": function(cell){
									cell.columnName = "SMT_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 22},
								"configurator": function(cell){
									cell.columnName = "SA_CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 23},
								"configurator": function(cell){
									cell.columnName = "SA_OBJ_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 24},
								"configurator": function(cell){
									cell.columnName = "CU_CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 25},
								"configurator": function(cell){
									cell.columnName = "CU_OBJ_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 26},
								"configurator": function(cell){
									cell.columnName = "SB_OBJ_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 27},
								"configurator": function(cell){
									cell.columnName = "DIVCLS_CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 28},
								"configurator": function(cell){
									cell.columnName = "REF_KEY";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 29},
								"configurator": function(cell){
									cell.columnName = "DIVCLS_CD";
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "63px",
					"left": "5px",
					"width": "1213px",
					"height": "480px"
				});
				var output_13 = new cpr.controls.Output("optDclRcdNm");
				output_13.value = "";
				output_13.style.setClasses(["require"]);
				output_13.bind("value").toLanguage("UI-GLS-DCL");
				container.addChild(output_13, {
					"top": "10px",
					"left": "444px",
					"width": "110px",
					"height": "25px"
				});
				var inputBox_4 = new cpr.controls.InputBox("ipbDclRcdNm");
				inputBox_4.readOnly = true;
				inputBox_4.maxLength = 100;
				inputBox_4.userAttr({"require": "Y"});
				inputBox_4.bind("fieldLabel").toExpression("#optDclRcdNm.value");
				inputBox_4.bind("value").toDataMap(app.lookup("dmReqDclRcd"), "strDclRcdNm");
				container.addChild(inputBox_4, {
					"top": "10px",
					"left": "559px",
					"width": "155px",
					"height": "25px"
				});
				var button_6 = new cpr.controls.Button("btnDclRcd");
				button_6.value = "";
				button_6.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnDclRcdClick == "function") {
					button_6.addEventListener("click", onBtnDclRcdClick);
				}
				container.addChild(button_6, {
					"top": "10px",
					"left": "714px",
					"width": "20px",
					"height": "25px"
				});
				var button_7 = new cpr.controls.Button("btnPlus");
				button_7.value = "";
				button_7.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnPlusClick == "function") {
					button_7.addEventListener("click", onBtnPlusClick);
				}
				container.addChild(button_7, {
					"top": "10px",
					"left": "739px",
					"width": "20px",
					"height": "25px"
				});
				var button_8 = new cpr.controls.Button("btnMinus");
				button_8.value = "";
				button_8.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnMinusClick == "function") {
					button_8.addEventListener("click", onBtnMinusClick);
				}
				container.addChild(button_8, {
					"top": "10px",
					"left": "764px",
					"width": "20px",
					"height": "25px"
				});
				var output_14 = new cpr.controls.Output("optBatDiv");
				output_14.value = "";
				output_14.bind("value").toLanguage("UI-DB-LECEVALTYPE");
				container.addChild(output_14, {
					"top": "10px",
					"left": "8px",
					"width": "90px",
					"height": "25px"
				});
				var comboBox_15 = new cpr.controls.ComboBox("cbbBatDiv");
				comboBox_15.userAttr({"require": "Y"});
				comboBox_15.bind("fieldLabel").toExpression("#optBatDiv.value");
				comboBox_15.bind("value").toDataMap(app.lookup("dmReqKey"), "strBatDiv");
				(function(comboBox_15){
					comboBox_15.addItem(new cpr.controls.Item("선택", ""));
					comboBox_15.setItemSet(app.lookup("dsBatDivList"), {
						"label": "CD_NM",
						"value": "CD_PRP1"
					});
				})(comboBox_15);
				if(typeof onCbbBatDivSelectionChange == "function") {
					comboBox_15.addEventListener("selection-change", onCbbBatDivSelectionChange);
				}
				container.addChild(comboBox_15, {
					"top": "10px",
					"left": "102px",
					"width": "120px",
					"height": "25px"
				});
				var button_9 = new cpr.controls.Button("btnAllBatch");
				button_9.value = "";
				button_9.style.setClasses(["btn-commit"]);
				button_9.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnAllBatchClick == "function") {
					button_9.addEventListener("click", onBtnAllBatchClick);
				}
				container.addChild(button_9, {
					"top": "10px",
					"left": "333px",
					"width": "60px",
					"height": "25px"
				});
				var checkBoxGroup_1 = new cpr.controls.CheckBoxGroup("ckbBatCtl");
				checkBoxGroup_1.visible = false;
				checkBoxGroup_1.fixedWidth = false;
				checkBoxGroup_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strValue");
				(function(checkBoxGroup_1){
					checkBoxGroup_1.setItemSet(app.lookup("dsBatDivCheckList"), {
						"label": "CD_NM",
						"value": "CD"
					})
				})(checkBoxGroup_1);
				container.addChild(checkBoxGroup_1, {
					"top": "10px",
					"left": "228px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_16 = new cpr.controls.ComboBox("cbbBatCtl");
				comboBox_16.visible = false;
				comboBox_16.bind("value").toDataMap(app.lookup("dmReqKey"), "strValue");
				(function(comboBox_16){
					comboBox_16.setItemSet(app.lookup("dsBatDivComboList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_16);
				container.addChild(comboBox_16, {
					"top": "10px",
					"left": "228px",
					"width": "100px",
					"height": "25px"
				});
				var inputBox_5 = new cpr.controls.InputBox("ipbBatCtl");
				inputBox_5.visible = false;
				inputBox_5.maxLength = 100;
				inputBox_5.bind("value").toDataMap(app.lookup("dmReqKey"), "strValue");
				container.addChild(inputBox_5, {
					"top": "10px",
					"left": "228px",
					"width": "100px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "122px",
				"left": "5px",
				"width": "1225px",
				"height": "548px"
			});
			
			var embeddedApp_2 = new cpr.controls.EmbeddedApp("emaDclRcdExtend");
			cpr.core.App.load("app/ccs/impDclRcdExtend", function(app) {
				if(app){
					embeddedApp_2.app = app;
				}
			});
			container.addChild(embeddedApp_2, {
				"top": "680px",
				"left": "115px",
				"width": "100px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "강의평가설문유형배치";
	cpr.core.Platform.INSTANCE.register(app);
})();
