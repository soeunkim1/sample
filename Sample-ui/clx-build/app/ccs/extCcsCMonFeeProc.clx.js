/*
 * App URI: app/ccs/extCcsCMonFeeProc
 * Source Location: app/ccs/extCcsCMonFeeProc.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/ccs/extCcsCMonFeeProc", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./extCcsCMonFeeProc.xtm"/>
			
			/**
			 * 개설분반관리
			 * @class extCcsCTlsnDivclsMng
			 * @author 박갑수 at 2016. 4. 25
			 */
			var extCcsCMonFeeProc = function() {
				var moPage = new Page();
				
				// 임포트용 데이터 통신 오브젝트
				var moPObject = new Page();
				
				
				// 학년도 학기를 원래데이터로 되돌리기위한 변수
				var msSchYearRcd = "";
				var msSmtRcd = "";
				
				/**
				 * @desc import 헤더 초기화
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 4. 25
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc onLoad 실행
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 4. 25
				 */
				moPage.onModelConstructDone_ExtCcsCTlsnDivclsMng = function() {
					
					
					
					// 서브미션 호출
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							
							var vsCutDt = util.DataMap.getValue(app, "dmResOnLoad", "strCutDt");
							var vsMm = vsCutDt.substring(5,6);
							
							vsMm = ValueUtil.fixNumber(vsMm);
							util.DataMap.setValue(app, "dmReqKey", "strMm", vsMm);
							
							
							util.Control.redraw(app, ["cbbSchYearRcd", "cbbSmtRcd", "cbbMm"]);
							
							//ExtSelectCtl.selectItem("cbbMm", 0);
							
						}
					}, true);
				};
				
				/**
				 * @desc [cbbSchYearRcd]학년도 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 4. 25
				 */
				moPage.onValueChanged_CbbSchYearRcd = function() {
					// 학사력 체크 및 해당 학년도 학기에 해당하는 기준일자 조회
					doChangeYearSmt("year");
					
				};
				
				/**
				 * @desc [cbbSmtRcd]학기 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 4. 25
				 */
				moPage.onValueChanged_CbbSmtRcd = function() {
					// 학사력 체크 및 해당 학년도 학기에 해당하는 기준일자 조회
					doChangeYearSmt("smt");
					
				};
				
				/**
				 * @desc 학사력 체크 및 해당 학년도 학기에 해당하는 기준일자 조회
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 4. 25
				 */
				function doChangeYearSmt(psDiv) {
					//strCommand: date 
					util.Submit.send(app, "subDate", function(pbSuccess){
						if(pbSuccess){				
							msSchYearRcd = util.DataMap.getValue(app, "dmKeyDateMap", "YEAR");
							msSmtRcd = util.DataMap.getValue(app, "dmKeyDateMap", "SMT");
							
							
						// Exception 발생시
						}else {
							if(psDiv == "year"){
								util.Control.setValue(app, "cbbSchYearRcd", msSchYearRcd);
							}else if(psDiv == "smt"){
								util.Control.setValue(app, "cbbSmtRcd", msSmtRcd);
							}
						}
					});
				};
				
				
				
				
				
				
				/*
					강사료를 계산처리 한다.
				*/	
				moPage.onClick_BtnSaDivclsBat = function() {
					
					// 조회조건 필수체크
					if(!util.validate(app, ["cbbSchYearRcd", "cbbSmtRcd", "cbbMm"])){
						return false;
					}
					
					
					
					if(util.Msg.confirm("NLS-CRM-M034", [ComMsg.getMsg(NLS.CCS.EXT055)]) ){
						page.doSaveByBatch();
					}
					
					
					
				}
				
				/*
					강사료를 계산한다.
				*/
				function doSaveByBatch(psStep){
					
					
					
					if(ValueUtil.isNull(psStep)){
						psStep = "0";
					}
					
					util.DataMap.setValue(app, "dmReqKey", "strStep", psStep);
					//strCommand: saveByBatch 
					util.Submit.send(app, "subSaveByBatch", function(pbSuccess){
						if(pbSuccess){
							var vsMsg = util.DataMap.getValue(app, "dmResList", "strMsg");
							if(!ValueUtil.isNull(vsMsg)){
								if(util.Msg.confirm("NLS-CRM-M034", [vsMsg]) ){
									var vsStep = util.DataMap.getValue(app, "dmReqKey", "strStep");
									return page.doSaveByBatch(vsStep);
								}else{
									return false;
								}
							}else{
								// 처리되었습니다.
								util.Msg.alert("NLS-INF-M003");					
							}			
						}
					});
					
				}
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsListStaffSubGrpRcd");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsSmtRcdList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsDayNightDivRcdList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsSchYearRcdList");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsCuList");
			dataSet_5.parseData({
				"columns": [
					{"name": "OBJ_CD_NM"},
					{"name": "OBJ_CD"},
					{"name": "PATH"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsListWkdtyRcd");
			dataSet_6.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsListWeekSeq");
			dataSet_7.parseData({
				"columns": [
					{"name": "WEEK_SEQ"},
					{"name": "PRT_WEEK_SEQ"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsListDutyTime");
			dataSet_8.parseData({
				"columns": [
					{"name": "DUTY_DIV_RCD"},
					{"name": "DUTY_TIME_CNT"},
					{"name": "CALC_DIV_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			
			var dataSet_9 = new cpr.data.DataSet("dsMapProfObjNo");
			dataSet_9.parseData({
				"columns": [
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"},
					{"name": "PROF_OBJ_NO"},
					{"name": "DUTY_TIME_CNT"},
					{"name": "DUTY_DIV_RCD"},
					{"name": "CHAG_TIME_CNT"},
					{"name": "DAY_TIME_CNT"},
					{"name": "NIGHT_TIME_CNT"},
					{"name": "IN_DAY_CNT"},
					{"name": "IN_NIGHT_CNT"},
					{"name": "CONSI_IN_CNT"},
					{"name": "CONSI_OUT_CNT"},
					{"name": "ADD_DAY_TIME_CNT"},
					{"name": "ADD_NIGHT_TIME_CNT"},
					{"name": "ADD_IN_DAY_CNT"},
					{"name": "ADD_IN_NIGHT_CNT"},
					{"name": "ADD_CONSI_IN_CNT"},
					{"name": "ADD_CONSI_OUT_CNT"},
					{"name": "ADD_CONT"},
					{"name": "EXPT_RSN"},
					{"name": "OG_NM"},
					{"name": "PROF_OBJ_NM"},
					{"name": "WKDTY_NM"},
					{"name": "DUTY_DIV_RCD_NM"},
					{"name": "STAFF_NO"},
					{"name": "PROF_WK_DIV_NM"}
				],
				"rows": []
			});
			app.register(dataSet_9);
			
			var dataSet_10 = new cpr.data.DataSet("dsFrfDetail");
			dataSet_10.parseData({
				"columns": [
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"},
					{"name": "PROF_OBJ_NO"},
					{"name": "MM"},
					{"name": "DUTY_TIME_CNT"},
					{"name": "DUTY_DIV_RCD"},
					{"name": "CHAG_TIME_CNT"},
					{"name": "DAY_TIME_CNT"},
					{"name": "NIGHT_TIME_CNT"},
					{"name": "IN_DAY_CNT"},
					{"name": "IN_NIGHT_CNT"},
					{"name": "CONSI_IN_CNT"},
					{"name": "CONSI_OUT_CNT"},
					{"name": "ADD_DAY_TIME_CNT"},
					{"name": "ADD_NIGHT_TIME_CNT"},
					{"name": "ADD_IN_DAY_CNT"},
					{"name": "ADD_IN_NIGHT_CNT"},
					{"name": "ADD_CONSI_IN_CNT"},
					{"name": "ADD_CONSI_OUT_CNT"},
					{"name": "ESS_DAY_TIME_CNT"},
					{"name": "ESS_NIGHT_TIME_CNT"},
					{"name": "ESS_IN_DAY_CNT"},
					{"name": "ESS_IN_NIGHT_CNT"},
					{"name": "ESS_CONSI_IN_CNT"},
					{"name": "ESS_CONSI_OUT_CNT"},
					{"name": "TOT_TIME_CNT"},
					{"name": "ST_WEEK"},
					{"name": "END_WEEK"},
					{"name": "REMARK"},
					{"name": "EXPT_RSN_CONT"},
					{"name": "PROF_OBJ_NM"},
					{"name": "WKDTY_NM"},
					{"name": "OG_NM"},
					{"name": "STAFF_NO"},
					{"name": "WKGRD_NM"},
					{"name": "PROF_DIV_NM"},
					{"name": "STAFF_SUB_GRP_RCD"},
					{"name": "STAFF_SUB_GRP_NM"}
				],
				"rows": []
			});
			app.register(dataSet_10);
			
			var dataSet_11 = new cpr.data.DataSet("dsMain");
			dataSet_11.parseData({
				"columns": [
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"},
					{"name": "PROF_OBJ_NO"},
					{"name": "MM"},
					{"name": "DUTY_TIME_CNT"},
					{"name": "DUTY_DIV_RCD"},
					{"name": "CHAG_TIME_CNT"},
					{"name": "DAY_TIME_CNT"},
					{"name": "NIGHT_TIME_CNT"},
					{"name": "IN_DAY_CNT"},
					{"name": "IN_NIGHT_CNT"},
					{"name": "CONSI_IN_CNT"},
					{"name": "CONSI_OUT_CNT"},
					{"name": "ADD_DAY_TIME_CNT"},
					{"name": "ADD_NIGHT_TIME_CNT"},
					{"name": "ADD_IN_DAY_CNT"},
					{"name": "ADD_IN_NIGHT_CNT"},
					{"name": "ADD_CONSI_IN_CNT"},
					{"name": "ADD_CONSI_OUT_CNT"},
					{"name": "ESS_DAY_TIME_CNT"},
					{"name": "ESS_NIGHT_TIME_CNT"},
					{"name": "ESS_IN_DAY_CNT"},
					{"name": "ESS_IN_NIGHT_CNT"},
					{"name": "ESS_CONSI_IN_CNT"},
					{"name": "ESS_CONSI_OUT_CNT"},
					{"name": "TOT_TIME_CNT"},
					{"name": "ST_WEEK"},
					{"name": "END_WEEK"},
					{"name": "REMARK"},
					{"name": "EXPT_RSN_CONT"},
					{"name": "PROF_OBJ_NM"},
					{"name": "WKDTY_NM"},
					{"name": "OG_NM"},
					{"name": "STAFF_NO"},
					{"name": "WKGRD_NM"},
					{"name": "PROF_DIV_NM"},
					{"name": "STAFF_SUB_GRP_NM"},
					{"name": "STAFF_SUB_GRP_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_11);
			var dataMap_1 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					},
					{
						"name": "strCutDt",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqKey");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strStaffSubGrpRcd",
						"dataType": "string"
					},
					{
						"name": "strStep",
						"dataType": "string"
					},
					{
						"name": "strProfObjNo",
						"dataType": "string"
					},
					{
						"name": "strMm",
						"dataType": "string"
					},
					{
						"name": "strStWeek",
						"dataType": "string"
					},
					{
						"name": "strEndWeek",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmResList");
			dataMap_3.parseData({
				"columns" : [{
					"name": "strMsg",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmKeyDateMap");
			dataMap_4.parseData({
				"columns" : [
					{
						"name": "BEF_DT",
						"dataType": "string"
					},
					{
						"name": "YEAR",
						"dataType": "string"
					},
					{
						"name": "SMT",
						"dataType": "string"
					},
					{
						"name": "ST_DT",
						"dataType": "string"
					},
					{
						"name": "END_DT",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_4);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/ccs/ExtCcsMonFeeProc/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataMap_1, false);
			submission_1.addResponseData(dataSet_6, false);
			submission_1.addResponseData(dataMap_4, false);
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/ccs/ExtCcsMonFeeProc/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_2);
			submission_2.addRequestData(dataMap_4);
			submission_2.addResponseData(dataSet_11, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subDate");
			submission_3.action = "/cmn/StdCmnDateTime/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_4);
			submission_3.addResponseData(dataMap_4, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subSaveByBatch");
			submission_4.action = "/ccs/ExtCcsMonFeeProc/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_4);
			submission_4.addRequestData(dataMap_2);
			submission_4.addResponseData(dataMap_3, false);
			submission_4.addResponseData(dataMap_2, false);
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output("optSchYearRcd");
				output_1.value = "";
				output_1.style.setClasses(["require"]);
				output_1.bind("value").toLanguage("UI-GLS-SCH_YEAR");
				container.addChild(output_1, {
					"top": "15px",
					"left": "15px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbSchYearRcd");
				comboBox_1.userAttr({"require": "Y"});
				comboBox_1.bind("fieldLabel").toExpression("#optSchYearRcd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmKeyDateMap"), "YEAR");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("선택", ""));
					comboBox_1.setItemSet(app.lookup("dsSchYearRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				if(typeof onCbbSchYearRcdSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onCbbSchYearRcdSelectionChange);
				}
				container.addChild(comboBox_1, {
					"top": "15px",
					"left": "100px",
					"width": "90px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optSmtRcd");
				output_2.value = "";
				output_2.style.setClasses(["require"]);
				output_2.bind("value").toLanguage("UI-GLS-SMT");
				container.addChild(output_2, {
					"top": "15px",
					"left": "200px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_2 = new cpr.controls.ComboBox("cbbSmtRcd");
				comboBox_2.userAttr({"require": "Y"});
				comboBox_2.bind("fieldLabel").toExpression("#optSmtRcd.value");
				comboBox_2.bind("value").toDataMap(app.lookup("dmKeyDateMap"), "SMT");
				(function(comboBox_2){
					comboBox_2.addItem(new cpr.controls.Item("선택", ""));
					comboBox_2.setItemSet(app.lookup("dsSmtRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_2);
				if(typeof onCbbSmtRcdSelectionChange == "function") {
					comboBox_2.addEventListener("selection-change", onCbbSmtRcdSelectionChange);
				}
				container.addChild(comboBox_2, {
					"top": "15px",
					"left": "285px",
					"width": "90px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optSmtRcd2");
				output_3.value = "";
				output_3.style.setClasses(["require"]);
				output_3.bind("value").toLanguage("UI-GLS-SMT");
				container.addChild(output_3, {
					"top": "15px",
					"left": "384px",
					"width": "96px",
					"height": "25px"
				});
				var comboBox_3 = new cpr.controls.ComboBox("cbbMm");
				comboBox_3.bind("value").toDataMap(app.lookup("dmReqKey"), "strMm");
				(function(comboBox_3){
					comboBox_3.addItem(new cpr.controls.Item("1월", "1"));
					comboBox_3.addItem(new cpr.controls.Item("2월", "2"));
					comboBox_3.addItem(new cpr.controls.Item("3월", "3"));
					comboBox_3.addItem(new cpr.controls.Item("4월", "4"));
					comboBox_3.addItem(new cpr.controls.Item("5월", "5"));
					comboBox_3.addItem(new cpr.controls.Item("6월", "6"));
					comboBox_3.addItem(new cpr.controls.Item("7월", "7"));
					comboBox_3.addItem(new cpr.controls.Item("8월", "8"));
					comboBox_3.addItem(new cpr.controls.Item("9월", "9"));
					comboBox_3.addItem(new cpr.controls.Item("10월", "10"));
					comboBox_3.addItem(new cpr.controls.Item("11월", "11"));
					comboBox_3.addItem(new cpr.controls.Item("12월", "12"));
				})(comboBox_3);
				container.addChild(comboBox_3, {
					"top": "15px",
					"left": "485px",
					"width": "130px",
					"height": "26px"
				});
				var button_1 = new cpr.controls.Button("btnSaDivclsBat");
				button_1.value = "";
				button_1.style.setClasses(["btn-commit"]);
				button_1.bind("value").toLanguage("UI-SCR-SADIVCLSBAT");
				if(typeof onBtnSaDivclsBatClick == "function") {
					button_1.addEventListener("click", onBtnSaDivclsBatClick);
				}
				container.addChild(button_1, {
					"top": "15px",
					"left": "624px",
					"width": "110px",
					"height": "25px"
				});
				var output_4 = new cpr.controls.Output("label2");
				output_4.value = "[업무순서] 책임시수 기준관리 -> 강의시수 산정내역관리 -> 월별 강의시수 관리 -> 월별 강사료 계산\n\n[작업주의] 강사료 재계산은 급여계산이 되기 전까지는 가능하나, 급여지급이 완료 된 이후에는 불가능 합니다.";
				container.addChild(output_4, {
					"top": "60px",
					"left": "5px",
					"width": "840px",
					"height": "65px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "635px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "개설분반관리";
	cpr.core.Platform.INSTANCE.register(app);
})();
