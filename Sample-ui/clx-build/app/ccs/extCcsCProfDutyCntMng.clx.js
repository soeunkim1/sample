/*
 * App URI: app/ccs/extCcsCProfDutyCntMng
 * Source Location: app/ccs/extCcsCProfDutyCntMng.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/ccs/extCcsCProfDutyCntMng", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./extCcsCProfDutyCntMng.xtm"/>
			
			/**
			 * 교원별 책임시수관리
			 * @class extCcsCProfDutyCntMng
			 * @author 박갑수 at 2016. 8. 30
			 */
			var extCcsCProfDutyCntMng = function() {
				var moPage = new Page();
				
				var moPObject = new PObject();
				
				// 객체검색팝업 호출
				moPObject.moIdsForStdCmnPObjSch = [
				{
					controlId			:	"btnOgNm",
					iCd					:	"",
					iNm					:	"ipbOgNm",
					iObjDivRcd			:	["CC009OG"],
					iStartObject    	:   "",
					iOtDivRcd			:	"",
					iOtIsTreeView	:	"",
					iLanDivRcd		:	"/root/resOnLoad/strLanDivRcd",
					iKeyDate			:	"/root/keyDateMap/END_DT",
					iKeyEndDate		:	"",
					oObjDivRcd		:	"",
					oCd					:	"/root/reqKey/strOgCd",
					oCdNm				:	"ipbOgNm",
					oBegDt				:	"",
					oEndDt				:	"",
					oLanDivRcd		:	"",
					func 					:  function(){}
				}];
				
				/**
				 * @desc import 헤더 초기화
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc onLoad 실행
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onModelConstructDone_ExtCcsCProfDutyCntMng = function() {
							// 리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptExtCcsProfDuty"]);
					// 검색조건 초기 설정
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", ["grpData"]);
					
					// 서브미션 호출
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							
							util.DataMap.setValue(app, "dmReqKey", "strStatusRcd", "CF00501");
							
							util.Control.redraw(app, ["cbbStaffGrpRcd", "cbbStaffSubGrpRcd", "cbbStatusRcd"]);
							
							util.Control.setFocus(app, "ipbRepNm");
						}
					}, true);
				};
				
				/**
				 * @desc [cbbStaffGrpRcd]교직원그룹 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onValueChanged_CbbStaffGrpRcd = function() {
					var vsStaffGrpRcd = util.Control.getValue(app, "cbbStaffGrpRcd");
					
					//교직원그룹값에 따른 필터 처리
					if(!ValueUtil.fixNull(vsStaffGrpRcd)){
						util.Control.redraw(app, ["cbbStaffSubGrpRcd"]);
					}else{
						ExtSelectCtl.cascadeList("cbbStaffGrpRcd", "cbbStaffSubGrpRcd", "CD_PRP1");
					}
					//교직원하위그룹값에 전체값 세팅
					var vsStaffSubGrpRcd =util.Control.getValue(app, "cbbStaffSubGrpRcd");
					// 빈값("") 또는 null이 아니면 [전체]를 선택하도록 한다. 
					if (!ValueUtil.isNull(vsStaffSubGrpRcd)) {
						// 0번째 index인 [전체] 선택하도록 함.
						util.SelectCtl.selectItem(app, "cbbStaffSubGrpRcd", 0);
					}
				};
				
				/**
				 * @desc [btnOgNm]행정부서(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 5. 9
				 */
				moPage.onClick_BtnOgNm = function(sender) {
					// 객체검색팝업 호출
					doOnClickStdCmnPObjSch(sender);
				};
				
				/**
				 * @desc [ipbOgNm]행정부서 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onValueChanged_IpbOgNm = function(sender) {
					// 리피트 변경사항 체크
					if(util.Grid.isModified(app, ["grdExtCcsProfDuty"])){
						return false;
					}
					
					// 값변경시 객체검색팝업 호출
					doOnChangeStdCmnPObjSch(sender);
				};
				
				/**
				 * @desc [ipbStaffNo]교직원번호 onKeyDown 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onKeyDown_IpbStaffNo = function(strKeyType, strKeyStatus) {
					var vsStDt = util.Control.getValue(app, "dipStDt");
					var vsEndDt = util.Control.getValue(app, "dipEndDt");
					
					// 엔터키 입력시 조회 && 필수값 입력시조회
					if(e.keyCode == cpr.events.KeyCode.ENTER && !ValueUtil.isNull(vsStDt) && !ValueUtil.isNull(vsEndDt)){
						// 검색 실행.
						model.dispatch("btnSearch","DOMActivate");
					}
				};
				
				/**
				 * @desc [ipbRepNm]이름 onKeyDown 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onKeyDown_IpbRepNm = function(strKeyType, strKeyStatus) {
					var vsStDt = util.Control.getValue(app, "dipStDt");
					var vsEndDt = util.Control.getValue(app, "dipEndDt");
					var vsRepNm	= util.Control.getValue(app, "ipbRepNm");
					
					// 엔터키 입력시 조회 && 필수값 입력시조회
					if(e.keyCode == cpr.events.KeyCode.ENTER &&  ( (!ValueUtil.isNull(vsStDt) && !ValueUtil.isNull(vsEndDt)) || !ValueUtil.isNull(vsRepNm) )   ){
						// 검색 실행.
						model.dispatch("btnSearch","DOMActivate");
					}
				};
				
				/**
				 * @desc [ckbRetireYn]정년퇴직여부 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onValueChanged_CkbRetireYn = function() {
					var vsCkbRetireYn = util.Control.getValue(app, "ckbRetireYn");
					
					if(ValueUtil.isNull(vsCkbRetireYn)){
						util.Control.setValue(app, "dipStDt", "");
						util.Control.setValue(app, "dipEndDt", "");
						util.Control.setVisible(app, false, ["lblPeriod", "dipStDt", "lblDtDiv", "dipEndDt"]);
					}else {
						util.Control.setValue(app, "dipStDt", util.DataMap.getValue(app, "dmKeyDateMap", "ST_DT"));
						util.Control.setValue(app, "dipEndDt", util.DataMap.getValue(app, "dmKeyDateMap", "END_DT"));
						util.Control.setVisible(app, true, ["lblPeriod", "dipStDt", "lblDtDiv", "dipEndDt"]);
					}
				};
				
				/**
				 * @desc [ipbRepNm]재직기간(시작) onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onValueChanged_DipStDt = function() {
					if(!doCheckDate("ST_DT")){
						util.Control.setValue(app, "dipStDt", "");
					}
				};
				
				/**
				 * @desc [ipbRepNm]재직기간(종료) onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onValueChanged_DipEndDt = function() {
					if(!doCheckDate("END_DT")){
						util.Control.setValue(app, "dipEndDt", "");
					}
				};
				
				/**
				 * @desc 시작일이 종료일보다 크거나 종료일이 시작일보다 작은지 검사
				 * @param psColNm		(필수) 날짜컬럼명
				 * @return boolean
				 * @author 박갑수 at 2016. 8. 30
				 */
				function doCheckDate(psColNm){
					// 유효성 true or false
					var vbValid = true;
			
					// 시작일자
					var vsStDt = util.Control.getValue(app, "dipStLsnDt").substring(0, 8);
					// 종료일자
					var vsEndDt = util.Control.getValue(app, "dipEndLsnDt").substring(0, 8);
					
					// 시작일 유효성 체크
					if(psColNm == "ST_DT"){
						if(!ValueUtil.isNull(vsEndDt) && vsStDt > vsEndDt){
							// "시작일이 종료일 보다 클 수 없습니다." 메시지 출력
							util.Msg.alert("NLS-CSS-M063");
							vbValid = false;
							return vbValid;
						}
			
					// 종료일 유효성 체크
					} else if(psColNm == "END_DT"){
						if(!ValueUtil.isNull(vsStDt) && vsStDt > vsEndDt){
							util.Msg.alert("NLS-CSS-M064");
							vbValid = false;
							return vbValid;
						}
					}
					
					return vbValid;
				};
				
				/**
				 * @desc [btnSearch]조회 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 28
				 */
				moPage.onClick_BtnSearch = function() {
					// 작업영역 리피트 변경 내역 체크
					if(util.Grid.isModified(app, "", "CRM")){
						return false;
					}
					
					var vsCkbRetireYn = util.Control.getValue(app, "ckbRetireYn");
					
					if(!ValueUtil.isNull(vsCkbRetireYn)){
						if(!util.validate(app, ["dipStDt", "dipEndDt"])){
							return false;
						}
					}
			
					// 조회
					doList(function(pbSuccess) {
						if (pbSuccess){
							// 조회 : "조회되었습니다." header 메세지 표시
							util.Msg.notify(app, "NLS.INF.M024");
						}
					});
				};
				
				/**
				 * @desc 교원 목록 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				function doList(poCallBackFunc) {
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdExtCcsProfDuty");
						}
						
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				};
			
				/**
				 * @desc [btnRestore]작업취소 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onClick_BtnRestore = function() {
					// 해당 리피트 상태 초기화
					util.Grid.restoreRow(app, "grdExtCcsProfDuty");
				};
				
				/**
				 * @desc [btnSave]작업저장 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onClick_BtnSave = function() {
					// 작업저장
					doSave();
				};
				
				/**
				 * @desc 교원목록 변경사항 저장
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				function doSave() {
					
					// 리피트 변경사항 체크
					if(!util.Grid.isModified(app, ["grdExtCcsProfDuty"], "MSG")){
						return false;
					}
			
					// 리피트 Validation Check
					if(!util.validate(app, "grdExtCcsProfDuty")) return false;
			
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccess){
						if(pbSuccess){
							doList(function(pbListSuccess) {
								// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
								if (pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
							});
						}
					});
				};
				
				/**
				 * @desc [rhCkbSelect]패널 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onValueChanged_RhCkbSelect = function() {
					// 리피트 패널 설정
			//TO-BE: <ExtRepeat.selectedAllPanel> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.selectedAllPanel("rhCkbSelect");
				};
				
				/**
				 * @desc [rdIpbDutyTimeCnt]책임시수 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onValueChanged_RdIpbDutyTimeCnt = function() {
					ValidUtil.checkIntegerDecimal("rdIpbDutyTimeCnt", 2, 0, true);
				};
			
				/**
				 * @desc [btnDutyTimeCnt]책임시수산정 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 8. 30
				 */
				moPage.onClick_BtnDutyTimeCnt = function() {
					// 교직원그룹
					var vsStaffGrpRcd = util.Control.getValue(app, "cbbStaffGrpRcd");
					// 상태구분
					var vsStatusRcd = util.Control.getValue(app, "cbbStatusRcd");
			
					if(ValueUtil.isNull(vsStaffGrpRcd) || ValueUtil.isNull(vsStatusRcd)){
						// 책임시수산정 시 조회조건의 교직원그룹, 상태구분은 필수입력 항목입니다.
						util.Msg.alert("NLS-CCS-EXT056");
					}else {
						var vsCtlNm = ExtControl.getTextValue("btnDutyTimeCnt");
						
						var vsStaffGrpRcdNm = ExtInstance.getValue("/root/resOnLoad/staffGrpRcdList/row", "CD_NM" , "child::CD='"+vsStaffGrpRcd+"'");
						var vsStatusRcdNm = ExtInstance.getValue("/root/resOnLoad/statusRcdList/row", "CD_NM" , "child::CD='"+vsStatusRcd+"'");
						
						var vsTitle = "(" + vsStaffGrpRcdNm + ", " + vsStatusRcdNm + ") " + vsCtlNm;
						
						// 책임시수산정 을(를) 처리하시겠습니까?" 메시지
						if(!util.Msg.confirm("NLS-CRM-M018", [vsTitle]) ){
							return false;
						}else {
							//strCommand: dutyCntBat 
							util.Submit.send(app, "subDutyCntBat", function(pbSuccess){
								if(pbSuccess){
									doList(function(pbListSuccess) {
										// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
										if (pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
									});
								}
							});
						}
					}
				};
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsStaffGrpRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsStaffSubGrpRcdList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsStatusRcdList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsExtCcsProfDuty");
			dataSet_4.parseData({
				"info": "EXT_CCS_PROF_DUTY@PROF_OBJ_NO",
				"columns": [
					{"name": "STAFF_NO"},
					{"name": "REP_NM"},
					{"name": "WKGRD_NM"},
					{"name": "WKDTY_NM"},
					{"name": "STAT_NM"},
					{"name": "OG_NM"},
					{"name": "PROF_OBJ_NO"},
					{"name": "DUTY_TIME_CNT"},
					{"name": "NEW_YN"},
					{"name": "DUTY_DIV_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			var dataMap_1 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_1.parseData({
				"columns" : [{
					"name": "strLanDivRcd",
					"dataType": "string"
				}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqKey");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strStaffGrpRcd",
						"dataType": "string"
					},
					{
						"name": "strStaffSubGrpRcd",
						"dataType": "string"
					},
					{
						"name": "strStatusRcd",
						"dataType": "string"
					},
					{
						"name": "strOgNm",
						"dataType": "string"
					},
					{
						"name": "strOgCd",
						"dataType": "string"
					},
					{
						"name": "strStaffNo",
						"dataType": "string"
					},
					{
						"name": "strRepNm",
						"dataType": "string"
					},
					{
						"name": "strStDt",
						"dataType": "string"
					},
					{
						"name": "strEndDt",
						"dataType": "string"
					},
					{
						"name": "strRetireYn",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmKeyDateMap");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "BEF_DT",
						"dataType": "string"
					},
					{
						"name": "YEAR",
						"dataType": "string"
					},
					{
						"name": "SMT",
						"dataType": "string"
					},
					{
						"name": "ST_DT",
						"dataType": "string"
					},
					{
						"name": "END_DT",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/ccs/ExtCcsProfDutyCntMng/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataMap_3, false);
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataMap_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/ccs/ExtCcsProfDutyCntMng/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_3);
			submission_2.addRequestData(dataMap_2);
			submission_2.addResponseData(dataSet_4, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/ccs/ExtCcsProfDutyCntMng/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_4);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subDutyCntBat");
			submission_4.action = "/ccs/ExtCcsProfDutyCntMng/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_3);
			submission_4.addRequestData(dataMap_2);
			submission_4.addResponseData(dataSet_4, false);
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optStaffNo");
				output_1.value = "";
				output_1.bind("value").toLanguage("UI-SCR-STAFFNO");
				container.addChild(output_1, {
					"top": "30px",
					"left": "5px",
					"width": "95px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optStaffGrpRcd");
				output_2.value = "";
				output_2.bind("value").toLanguage("UI-GLS-STAFFSUBGROUPCD");
				container.addChild(output_2, {
					"top": "5px",
					"left": "5px",
					"width": "95px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbStaffGrpRcd");
				comboBox_1.multiple = true;
				comboBox_1.bind("fieldLabel").toExpression("#optStaffGrpRcd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strStaffGrpRcd");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("전체", ""));
					comboBox_1.setItemSet(app.lookup("dsStaffGrpRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				if(typeof onCbbStaffGrpRcdSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onCbbStaffGrpRcdSelectionChange);
				}
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "105px",
					"width": "105px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbStaffNo");
				inputBox_1.maxLength = 10;
				inputBox_1.bind("fieldLabel").toExpression("#optStaffNo.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strStaffNo");
				if(typeof onIpbStaffNoKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbStaffNoKeydown);
				}
				container.addChild(inputBox_1, {
					"top": "30px",
					"left": "105px",
					"width": "105px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optRepNm");
				output_3.value = "";
				output_3.bind("value").toLanguage("UI-DB-NM");
				container.addChild(output_3, {
					"top": "30px",
					"left": "220px",
					"width": "105px",
					"height": "25px"
				});
				var output_4 = new cpr.controls.Output("optStaffSubGrpRcd");
				output_4.value = "";
				output_4.bind("value").toLanguage("UI-SCR-LANKEY");
				container.addChild(output_4, {
					"top": "5px",
					"left": "220px",
					"width": "105px",
					"height": "25px"
				});
				var comboBox_2 = new cpr.controls.ComboBox("cbbStaffSubGrpRcd");
				comboBox_2.bind("fieldLabel").toExpression("#optStaffSubGrpRcd.value");
				comboBox_2.bind("value").toDataMap(app.lookup("dmReqKey"), "strStaffSubGrpRcd");
				(function(comboBox_2){
					comboBox_2.addItem(new cpr.controls.Item("전체", ""));
					comboBox_2.setItemSet(app.lookup("dsStaffSubGrpRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_2);
				container.addChild(comboBox_2, {
					"top": "5px",
					"left": "330px",
					"width": "105px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbRepNm");
				inputBox_2.maxLength = 100;
				inputBox_2.bind("fieldLabel").toExpression("#optRepNm.value");
				inputBox_2.bind("value").toDataMap(app.lookup("dmReqKey"), "strRepNm");
				if(typeof onIpbRepNmKeydown == "function") {
					inputBox_2.addEventListener("keydown", onIpbRepNmKeydown);
				}
				container.addChild(inputBox_2, {
					"top": "30px",
					"left": "330px",
					"width": "105px",
					"height": "25px"
				});
				var output_5 = new cpr.controls.Output("optOgNm");
				output_5.value = "";
				output_5.bind("value").toLanguage("UI-GLS-OG");
				container.addChild(output_5, {
					"top": "5px",
					"left": "670px",
					"width": "105px",
					"height": "25px"
				});
				var output_6 = new cpr.controls.Output("optStatusRcd");
				output_6.value = "";
				output_6.bind("value").toLanguage("UI-SCR-STATDIV");
				container.addChild(output_6, {
					"top": "5px",
					"left": "445px",
					"width": "105px",
					"height": "25px"
				});
				var comboBox_3 = new cpr.controls.ComboBox("cbbStatusRcd");
				comboBox_3.bind("fieldLabel").toExpression("#optStatusRcd.value");
				comboBox_3.bind("value").toDataMap(app.lookup("dmReqKey"), "strStatusRcd");
				(function(comboBox_3){
					comboBox_3.addItem(new cpr.controls.Item("전체", ""));
					comboBox_3.setItemSet(app.lookup("dsStatusRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_3);
				container.addChild(comboBox_3, {
					"top": "5px",
					"left": "555px",
					"width": "105px",
					"height": "25px"
				});
				var inputBox_3 = new cpr.controls.InputBox("ipbOgNm");
				inputBox_3.maxLength = 100;
				inputBox_3.bind("fieldLabel").toExpression("#optOgNm.value");
				inputBox_3.bind("value").toDataMap(app.lookup("dmReqKey"), "strOgNm");
				if(typeof onIpbOgNmValueChange == "function") {
					inputBox_3.addEventListener("value-change", onIpbOgNmValueChange);
				}
				container.addChild(inputBox_3, {
					"top": "5px",
					"left": "780px",
					"width": "120px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnOgNm");
				button_2.value = "";
				button_2.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnOgNmClick == "function") {
					button_2.addEventListener("click", onBtnOgNmClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "900px",
					"width": "20px",
					"height": "25px"
				});
				var output_7 = new cpr.controls.Output("optPeriod");
				output_7.value = "";
				output_7.style.setClasses(["require"]);
				output_7.bind("value").toLanguage("UI-SCR-STATDIV");
				container.addChild(output_7, {
					"top": "30px",
					"left": "555px",
					"width": "106px",
					"height": "25px"
				});
				var dateInput_1 = new cpr.controls.DateInput("dipStDt");
				dateInput_1.visible = false;
				dateInput_1.userAttr({"require": "Y"});
				dateInput_1.bind("fieldLabel").toExpression("#optPeriod.value");
				dateInput_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strStDt");
				if(typeof onDipStDtValueChange == "function") {
					dateInput_1.addEventListener("value-change", onDipStDtValueChange);
				}
				container.addChild(dateInput_1, {
					"top": "30px",
					"left": "665px",
					"width": "90px",
					"height": "25px"
				});
				var dateInput_2 = new cpr.controls.DateInput("dipEndDt");
				dateInput_2.visible = false;
				dateInput_2.userAttr({"require": "Y"});
				dateInput_2.bind("fieldLabel").toExpression("#optPeriod.value");
				dateInput_2.bind("value").toDataMap(app.lookup("dmReqKey"), "strEndDt");
				if(typeof onDipEndDtValueChange == "function") {
					dateInput_2.addEventListener("value-change", onDipEndDtValueChange);
				}
				container.addChild(dateInput_2, {
					"top": "30px",
					"left": "770px",
					"width": "90px",
					"height": "25px"
				});
				var output_8 = new cpr.controls.Output("optDtDiv");
				output_8.value = "~";
				container.addChild(output_8, {
					"top": "30px",
					"left": "755px",
					"width": "15px",
					"height": "25px"
				});
				var checkBox_1 = new cpr.controls.CheckBox("ckbRetireYn");
				checkBox_1.value = "";
				checkBox_1.trueValue = "Y";
				checkBox_1.falseValue = "";
				checkBox_1.text = "정년퇴직여부";
				checkBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strRetireYn");
				if(typeof onCkbRetireYnValueChange == "function") {
					checkBox_1.addEventListener("value-change", onCkbRetireYnValueChange);
				}
				container.addChild(checkBox_1, {
					"top": "30px",
					"left": "445px",
					"width": "105px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "57px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-LECTLIST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "205px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdExtCcsProfDuty");
				grid_1.init({
					"dataSet": app.lookup("dsExtCcsProfDuty"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "100px"},
						{"width": "150px"},
						{"width": "200px"},
						{"width": "120px"},
						{"width": "120px"},
						{"width": "100px"},
						{"width": "80px"},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "120px",
							"visible": false
						},
						{
							"width": "80px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-PROFNUM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-NAME");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-ASGN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-WKGRD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-WKDTY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-STAT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-DUTY_TIME_CNT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PROF_NO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-OBJNO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-WKDTYCD");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_9 = new cpr.controls.Output();
										output_9.style.css({
											"text-align" : "center"
										});
										return output_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "STAFF_NO";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "REP_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "OG_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "WKGRD_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "WKDTY_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "STAT_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "DUTY_TIME_CNT";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("gdIpbDutyTimeCnt");
										numberEditor_1.spinButton = false;
										numberEditor_1.format = "99";
										numberEditor_1.bind("value").toDataColumn("DUTY_TIME_CNT");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "NEW_YN";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "PROF_OBJ_NO";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "DUTY_DIV_RCD";
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1213px",
					"height": "538px"
				});
				var button_3 = new cpr.controls.Button("btnRestore");
				button_3.value = "";
				button_3.style.setClasses(["btn-restore"]);
				button_3.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_3.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "1093px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "";
				button_4.style.setClasses(["btn-save"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "1158px",
					"width": "60px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button("btnDutyTimeCnt");
				button_5.value = "";
				button_5.style.setClasses(["btn-commit"]);
				button_5.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnDutyTimeCntClick == "function") {
					button_5.addEventListener("click", onBtnDutyTimeCntClick);
				}
				container.addChild(button_5, {
					"top": "5px",
					"left": "1008px",
					"width": "80px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "97px",
				"left": "5px",
				"width": "1225px",
				"height": "573px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaStdCmnPobjSch");
			cpr.core.App.load("app/cmn/impStdCmnPObjSch", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "675px",
				"left": "5px",
				"width": "100px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "교원별 책임시수관리";
	cpr.core.Platform.INSTANCE.register(app);
})();
