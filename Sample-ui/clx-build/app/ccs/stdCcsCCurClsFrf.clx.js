/*
 * App URI: app/ccs/stdCcsCCurClsFrf
 * Source Location: app/ccs/stdCcsCCurClsFrf.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/ccs/stdCcsCCurClsFrf", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCcsCCurClsFrf.xtm"/>
			
			/**
			 * 교과과정관리
			 * @class stdCcsCCurClsFrf
			 * @author 박갑수 at 2016. 2. 1
			 * 2016. 2. 2 박갑수 - 동서울대 이수과정 사용X : 사용시 테스트 필요함.
			 */
			var stdCcsCCurClsFrf = function() {
				var moPage = new Page();
				
				// 임포트용 데이터 통신 오브젝트
				var moPObject = new Page();
				
				// 탭 정의
				var TAB = {
					// 데이터관리
					MANAGE	: "tabManage",
					// 이력관리
					HIS    		: "tabHistory"
				};
						
				// 탭버튼 정의
				var TAB_BTN = {
					tabManage	: "tabBtnManage",
					tabHistory		: "tabBtnHistory"
				};
				
				// 객체검색팝업 호출
				moPObject.moIdsForStdCmnPObjSch = [
				{
					controlId			:	"btnSaCd",
					iCd					:	"",
					iNm					:	"ipbSaCd",
					iObjDivRcd			:	["CC009SA"],
					iStartObject    	:   "",
					iOtDivRcd			:	"",
					iOtIsTreeView	:	"",
					iLanDivRcd		:	"",
					iKeyDate			:	"dipKeyDate",
					iKeyEndDate		:	"",
					oObjDivRcd		:	"",
					oCd					:	"/root/reqKey/strSaCd",
					oCdNm				:	"ipbSaCd",
					oBegDt				:	"",
					oEndDt				:	"",
					oLanDivRcd		:	"",
					func 					:  function(poRtnValue){
						// 검색조건이 있을경우 조회
						var vsSaNm = util.DataMap.getValue(app, "dmReqKey", "strSaNm");
						var vsKeyDate = util.DataMap.getValue(app, "dmReqKey", "strKeyDate");
							
						// 학사부서 입력시 이수과정목록, 교과그룹목록 GET
						doSpCuList(function(pbSuccess) {
							if (pbSuccess){			
								if(ValueUtil.isNull(vsSaNm)){
									// 값 초기화
									util.Control.setValue(app, "cbbSpCd", "");
									util.Control.setValue(app, "cbbCuCd", "");
									util.Control.setValue(app, "ipbSbNm", "");
									util.DataMap.setValue(app, "dmReqKey", "strSbCd", "");
								}
							}
						});
					}
				}];
				
				// 교과목검색팝업 호출
				moPObject.moIdsForStdCcsPSubPopup = [
				{
					 controlId					: "btnSbCd",			
					 iEndYn						: "",						
					 iLanDivRcd				: "",					
					 iKeyDate					: "dipKeyDate",		
					 iSbCd						: "",			
					 iSbNm						: "ipbSbNm",
					 iCmpDivRcd				: "", 			
					 iSpvsDeptCd				: "/root/reqKey/strSaCd",		
					 iSpvsDeptNm			: "ipbSaCd",		
					 iObjDivRcd				: "CC009SA",
					 oSbCd						: "/root/reqKey/strSbCd",			
					 oObjDivRcd				: "/root/resPopup/strObjDivRcd",			
					 oStDt						: "",			
					 oEndDt						: "",			
					 oLanDivRcd				: "",			
					 oRefKey					: "/root/resPopup/strRefKey",			
					 oSbNm					: "ipbSbNm",			
					 oShortNm					: "",			
					 oSbCatRcd				: "/root/resPopup/strSbCatRcd",			
					 oSbDivRcd				: "/root/resPopup/strSbDivRcd",			
					 oPnt							: "/root/resPopup/strPnt",
					 oTheoTc					: "/root/resPopup/strTheoTc",		
					 oEpacTc					: "/root/resPopup/strEpacTc",	
					 oSpvsColgCd			: "",			
					 oSpvsDeptCd			: "",			
					 oSpvsDeptNm			: "",		
					 oCmpDivRcd				: "/root/resPopup/strCmpDivRcd",			
					 oRecScaleRcd			: "/root/resPopup/strRecScaleRcd",		
					 oSbTypeRcd				: "/root/resPopup/strSbTypeRcd",		
					 oSbLvlRcd				: "/root/resPopup/strLvlRcd",		
					 oEvalMethodRcd		: "/root/resPopup/strEvalMethodRcd",		
					 oLectTypeRcd			: "/root/resPopup/strLectTypeRcd",	
					 oSbSmry					: "",		
					 oRegFeeXcpYn			: "",	
					 oSbAmt					: "",		
					 oCmpDivRcdNm		: "",		
					 oSbCatRcdNm			: "",	
					 oReTlsnYnRcd			: "/root/resPopup/strReTlsnYnRcd",
					 func : function(poParam) {
						// 검색조건이 있을경우 조회
						var vsSaNm = util.DataMap.getValue(app, "dmReqKey", "strSaNm");
						var vsKeyDate = util.DataMap.getValue(app, "dmReqKey", "strKeyDate");
						var vsSbNm = util.DataMap.getValue(app, "dmReqKey", "strSbNm");
						if(!ValueUtil.isNull(vsSaNm) && !ValueUtil.isNull(vsKeyDate) && !ValueUtil.isNull(vsSbNm)){
							util.Header.clickSearch(app);
						}
					}
				 },
				 {
					 controlId					: "btnFrfSbCd",			
					 iEndYn						: "",						
					 iLanDivRcd				: "",					
					 iKeyDate					: "dipKeyDate",		
					 iSbCd						: "",			
					 iSbNm						: "ipbFrfSbNm",
					 iCmpDivRcd				: "", 		
					 iSpvsDeptCd				: "",		
					 iSpvsDeptNm			: "",		
					 iObjDivRcd				: "",		
					 oSbCd						: "ipbFrfSbCd",			
					 oObjDivRcd				: "ipbFrfSbObjDIvRcd",			
					 oStDt						: "",
					 oEndDt						: "",
					 oLanDivRcd				: "",
					 oRefKey					: "",			
					 oSbNm					: "ipbFrfSbNm",			
					 oShortNm					: "",			
					 oSbCatRcd				: "cbbFrfSbCatRcd",			
					 oSbDivRcd				: "cbbFrfSbDivRcd",			
					 oPnt							: "/root/resPopup/strFrfPnt",
					 oTheoTc					: "/root/resPopup/strFrfTheoTc",		
					 oEpacTc					: "/root/resPopup/strFrfEpacTc",	
					 oSpvsColgCd			: "",			
					 oSpvsDeptCd			: "",			
					 oSpvsDeptNm			: "",		
					 oCmpDivRcd				: "/root/resPopup/strFrfCmpDivRcd",			
					 oRecScaleRcd			: "cbbFrfRecScaleRcd",		
					 oSbTypeRcd				: "cbbFrfSbTypeRcd",		
					 oSbLvlRcd				: "/root/resPopup/strLvlRcd",		
					 oEvalMethodRcd		: "cbbEvalMethodRcd",		
					 oLectTypeRcd			: "cbbFrfLectTypeRcd",	
					 oSbSmry					: "",		
					 oRegFeeXcpYn			: "",	
					 oSbAmt					: "",		
					 oCmpDivRcdNm		: "",		
					 oSbCatRcdNm			: "",	
					 oReTlsnYnRcd			: "cbbFrfReTlsnYnRcd",
					 func : function(poParam) {
						 // 이수구분 임시 인스턴스값으로 받아 프리폼에 세팅 : 팝업값 세팅시 이수구분의 ValueChange 이벤트로인해 리피터에 해당값이 반영 안됨. (학점, 이론, 실습)
						 var vnIdx = util.Grid.getIndex(app, "grdCcsCurCls");
						util.FreeForm.setValue(app, "frfCcsCurCls", "CMP_DIV_RCD", util.DataMap.getValue(app, "dmResPopup", "strFrfCmpDivRcd"), false, true);
						util.Grid.setCellValue(app, "grdCcsCurCls", "CMP_DIV_RCD", util.DataMap.getValue(app, "dmResPopup", "strFrfCmpDivRcd"), vnIdx);
						
						util.FreeForm.setValue(app, "frfCcsCurCls", "PNT", util.DataMap.getValue(app, "dmResPopup", "strFrfPnt"), false, true);
						util.Grid.setCellValue(app, "grdCcsCurCls", "PNT", util.DataMap.getValue(app, "dmResPopup", "strFrfPnt"), vnIdx);
						
						var vsTheoTc = util.DataMap.getValue(app, "dmResPopup", "strFrfTheoTc");
						util.FreeForm.setValue(app, "frfCcsCurCls", "THEO_TC", vsTheoTc, false, true);
						util.Grid.setCellValue(app, "grdCcsCurCls", "THEO_TC", vsTheoTc, vnIdx);
						
						var vsEpacTc = util.DataMap.getValue(app, "dmResPopup", "strFrfEpacTc");
						util.FreeForm.setValue(app, "frfCcsCurCls", "EPAC_TC", vsEpacTc, false, true);
						util.Grid.setCellValue(app, "grdCcsCurCls", "EPAC_TC", vsEpacTc, vnIdx);
						
						var vsLectTimeCnt = ValueUtil.fixNumber(vsTheoTc) + ValueUtil.fixNumber(vsEpacTc);
						util.FreeForm.setValue(app, "frfCcsCurCls", "LECT_TIME_CNT", vsLectTimeCnt, false, true);
						util.Grid.setCellValue(app, "grdCcsCurCls", "LECT_TIME_CNT", vsLectTimeCnt, vnIdx);
						
						var vsSbLvlRcd = util.FreeForm.getValue(app, "frfCcsCurCls", "SB_LVL_RCD");
						if(ValueUtil.isNull(vsSbLvlRcd)){
							util.FreeForm.setValue(app, "frfCcsCurCls", "SB_LVL_RCD" , util.DataMap.getValue(app, "dmResPopup", "strLvlRcd"), false, true);
							util.Grid.setCellValue(app, "grdCcsCurCls", "SB_LVL_RCD", util.DataMap.getValue(app, "dmResPopup", "strLvlRcd"), vnIdx);
						}
						
						// 기등록된 교과과정인지 확인(교과그룹코드, 교과목코드, 시작일자, 종료일자)
						doChkCurCls();
						
						ExtModel.dispatch("cbbFrfCmpDivRcd", "xforms-value-changed");
					}
				 }];
				
				// 학문분야검색
				moPObject.moIdsForStdCcsPDclExtendPopup = [
				{
					controlId 			: "btnFrfDclRcd",
					iLanDivRcd 		: "",
					iRefKey 			: "ipbFrfRefKey",				
					iCmpDivRcd 		: "cbbFrfCmpDivRcd",
					iDclRcdCd 		: "ipbFrfDclRcd",
					iDclRcdNm 		: "ipbFrfDclRcdNm",					
					iReadOnlyYn 		: "",
					iStdDclRcdYn 	: "",							//학문분야 표준임포트 사용여부
					oOutDclRcdNm 	: "ipbFrfDclRcdNm",	//학문분야 이름
					oOutDclRcdCd 	: "ipbFrfDclRcd",			//학문분야 배열코드															
					func : function(poParam) {
						var vsDclRcd = util.FreeForm.getValue(app, "frfCcsCurCls", "DCL_RCD_CD");
						
						var vnIdx = util.Grid.getIndex(app, "grdCcsCurCls");
						
						if(ValueUtil.fixNull(vsDclRcd).indexOf("CA21240") != -1){
							
							// 평가방법 : 절대평가[CA21001]
							util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", "CA21001");
							util.Grid.setCellValue(app, "grdCcsCurCls", "EVAL_METHOD_RCD", "CA21001", vnIdx);
						}else {
							
							// 평가방법 : 상대평가[CA21002]
							util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", "CA21002");
							util.Grid.setCellValue(app, "grdCcsCurCls", "EVAL_METHOD_RCD", "CA21002", vnIdx);
						}
					}
				},
				{
					controlId 			: "btnDclRcd",
					iLanDivRcd 		: "",
					iRefKey 			: "",				
					iCmpDivRcd 		: "cbbCmpDivRcd",
					iDclRcdCd 		: "",
					iDclRcdNm 		: "",					
					iReadOnlyYn 		: "",
					iStdDclRcdYn 	: "",											//학문분야 표준임포트 사용여부
					oOutDclRcdNm 	: "ipbDclRcdNm",						//학문분야 이름
					oOutDclRcdCd 	: "/root/reqDclRcd/strDclRcd",		//학문분야 배열코드															
					func : function(poParam) {
						
					}
				}];
				
				// 학사구조관리에서 교과목관리페이지 호출시, 서브페이지용 파라미터
				moPObject.moAcademicStructure = {
					// Academic Structure의 서브페이지용 파라미터
					mode     	: "",
					treeNode 	: null,
					name     	: "",
					objType  	: "",
					objCd    	: "",
					year     		: "",
					smt      		: "",
					keyDate  	: ""
				};
				
				/**
				 * @desc 학사구조관리에서 교과그룹관리페이지 호출시 OnLoad 이벤트
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 1. 29
				 */
				function doOnLoadWithAcademicStructure() {
					var voParentPage = ExtSubPage.getParent();
					var voParentParam = voParentPage.callScriptVal("moAcademicStructure");
					
					for (var key in  voParentParam ) {
						moAcademicStructure [key] = voParentParam[key];
					}
					
					var voParam = moAcademicStructure;
					
					// Academic Structure 모드가 지정되어 있는 경우에만
					if (voParam.mode) {
						var vnTop = util.Control.getStyleAttr(app, "grpData", "top");
						var vnLeft = util.Control.getStyleAttr(app, "grpData", "left");
						var vnGrpDataHeight = util.Control.getStyleAttr(app, "grpData", "height");
						var vnGrpDataDtlHeight = util.Control.getStyleAttr(app, "grpDataDtl", "height");
						var vnWidth = util.Control.getStyleAttr(app, "grpData", "width");
						
						vnTop = vnTop.replace(/[^0-9]/g, '');
						vnLeft = vnLeft.replace(/[^0-9]/g, '');
						vnGrpDataHeight = vnGrpDataHeight.replace(/[^0-9]/g, '');
						vnGrpDataDtlHeight = vnGrpDataDtlHeight.replace(/[^0-9]/g, '');
						vnWidth = vnWidth.replace(/[^0-9]/g, '');
						
						var vnHeight = String(Number(vnGrpDataHeight) + Number(vnGrpDataDtlHeight) + 5);
						
						var vsCallFunc =  "doCropPageToControl(null, "+ vnTop + ", " + vnLeft + ", " +  vnHeight + ", " + vnWidth+")";
						voParentPage.callScriptVal( vsCallFunc);
						
						// 검색조건 세팅
						util.Control.setValue(app, "dipKeyDate",voParam.keyDate);
						util.Control.setValue(app, "dipKeyDateHistory",voParam.keyDate);
						
						util.DataMap.setValue(app, "dmReqKey", "strAsMode",voParam.mode);
						util.DataMap.setValue(app, "dmReqKey", "strObjCd",voParam.objCd);
						
						// 서브미션 호출
						//strCommand: getUpSaCd 
						util.Submit.send(app, "subGetUpSaCd", function(pbSuccess){
							if(pbSuccess){
								util.Control.setValue(app, "ipbSaCd", util.DataMap.getValue(app, "dmReqKey", "strSaCd"));
								
								//strCommand: getUpSaCd 
								util.Submit.send(app, "subGetUpSaCd", function(pbSuccess){
									if(pbSuccess){
										doSpCuList();
										//조회
										util.Header.clickSearch(app);
									}
								});
							}
						});
					}
				};
				
				/**
				 * @desc 작업저장시 학사구조관리의 콜백메서드 실행
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 1. 29
				 */
				function doSaveWithAcademicStructure() {
					var voParam = moAcademicStructure;
							
					if(voParam.mode){
						var voParentPage = ExtSubPage.getParent();
			
						voParentPage.callScriptVal("callbackAcademicStructureSubPageSave()");
					}
				};
				
				/**
				 * @desc 헤더메시지 표시(부모창이 있는 경우 부모의 헤더에 메시지 표시)
				 * @param 메시지
				 * @return 
				 * @author 박갑수 at 2016. 3. 9
				 */
				function doSetMsgStatus(psMsg) {
					var voParam = moAcademicStructure;
					
					//부모페이지가 있는 경우 부모페이지의 헤더에 표시한다.
					if(voParam.mode){
						var voParentPage = ExtSubPage.getParent();
						var vsCallFunc =  "util.Msg.notify(app,  "'"+ psMsg + "'" )";
						voParentPage.callScriptVal(vsCallFunc);
					
					} else {
						util.Msg.notify(app, "psMsg");
					}
				};
				
				/**
				 * @desc import 헤더 초기화
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc onLoad 실행
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onModelConstructDone_StdCcsCCurClsFrf = function() {
					// 리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptCcsCurCls", "rptCcsCurClsHistory"]);
					// 검색조건 초기 설정
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", ["grpData", "grpDataDtl"]);
					//3.첫번째 탭으로 로딩
					util.Tab.setSelectedTabItem(app, "tabMain", TAB.MANAGE);
					// 기준일자 조회하는 내부 팝업 호출을 위한 단위시스템코드 설정
					setUnitSystem("CCS");
					
					// 서브미션 호출
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, ["dipKeyDate", "cbbSbLvlRcd", "cbbEstPrdRcd", "cbbCmpDivRcd"]);
							
							// 학사부서관리 호출시
							doOnLoadWithAcademicStructure();
							
							util.Control.setFocus(app, "ipbSaCd");
						}
					}, true);
				};
				
				/**
				 * @desc 이수과정, 교과그룹목록 조회
				 * @param poCallBackFunc 콜백정의, 교과목코드
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				function doSpCuList(poCallBackFunc, psCuCd) {
					//strCommand: getSaSpCu 
					util.Submit.send(app, "subSpCuList", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, ["cbbSpCd", "cbbCuCd"]);
							util.SelectCtl.selectItem(app, "cbbCuCd", 0);
							util.SelectCtl.selectItem(app, "cbbSpCd", 0);
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
						}
					});
				};
				
				/**
				 * @desc [btnYearSmt]기준일자(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onClick_BtnYearSmt = function() {
					//기준일자 임포트(달력컨트롤ID,임포트ID)
					doOnclickSchYearSmt("dipKeyDate","impSchYearSmt");
				};
				
				 /**
				 * @desc [ipbSaCd]부서명(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onClick_BtnSaCd = function(sender) {
					// 객체검색팝업 호출
					doOnClickStdCmnPObjSch(sender);
				};
				
				/**
				 * @desc [ipbSaCd]부서명 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onValueChanged_IpbSaCd = function(sender) {
					// 리피트 변경사항 체크
					if(util.Grid.isModified(app, ["grdCcsCurCls"])){
						return false;
					}
					
					// 값변경시 객체검색팝업 호출
					doOnChangeStdCmnPObjSch(sender);
				};
				
				/**
				 * @desc [btnSbCd]교과목명(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onClick_BtnSbCd = function(sender) {
					// 교과목검색팝업 호출
					doOnClickStdCcsPSubPopup(sender);
				};
				
				
				/**
				 * @desc [ipbSbNm]교과목명 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onValueChanged_IpbSbNm = function(sender) {
					// 리피트 변경사항 체크
					if(util.Grid.isModified(app, ["grdCcsCurCls"])){
						return false;
					}
					
					// 값변경시 교과목검색팝업 호출
					doOnChangeStdCcsPSubPopup(sender);
				};
				
				/**
				 * @desc [cbbSpCd]이수과정 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				 moPage.onValueChanged_CbbSpCd = function() {
					// 이수과정에따른 교과그룹값 필터링
					var vsSpCd = util.Control.getValue(app, "cbbSpCd");
					if(!ValueUtil.isNull(vsSpCd)){
						vsSpCd = "CC009SP" + vsSpCd;
					}
					
					ExtSelectCtl.setInsBind("cbbCuCd", "[contains(PATH, '"+ vsSpCd +"')]");
				};
			
				/**
				 * @desc [btnSearch]조회 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onClick_BtnSearch = function() {
					 // 작업영역 리피트 변경 내역 체크
					if(util.Grid.isModified(app, "", "CRM")){
						return false;
					}
					
					// 조회조건 필수 체크
					if(!util.validate(app, ["dipKeyDate", "ipbSaCd"])){
						return false;
					}
					
					// 폐기일자 조회조건의 기준일자와 동일하게 세팅
					var vsKeyDate = util.Control.getValue(app, "dipKeyDate");
					util.Control.setValue(app, "dipKeyDateHistory", vsKeyDate);
			
					// 조회
					doList(function(pbSuccess) {
						if (pbSuccess){
							// 조회 : "조회되었습니다." header 메세지 표시
							doSetMsgStatus(NLS.INF.M024);
						}
					});
				};
			
				/**
				 * @desc 교과과정목록 조회
				 * @param poCallBackFunc 콜백정의, 교과목코드
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				function doList(poCallBackFunc) {
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess){
						if(pbSuccess){
							
							util.Control.redraw(app, "grdCcsCurCls");
							
							// 폐기처리로 인해 데이터가 없어질경우 [데이터관리] 텝으로 이동하기 위함.
							var vsRefKey = util.DataMap.getValue(app, "dmReqSelRow", "strTmpRefKey");
							var vnLength = ExtInstance.getNodeListLength("/root/resList/rptCcsCurCls/row[child::REF_KEY = '"+ vsRefKey +"']");
							if(ValueUtil.isNull(vsRefKey) || vnLength == 0){
								if(util.Grid.getRowCount(app, "grdCcsCurCls") == 0){
									// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
									doCompareFrfEnable();
								}
								// ExtModel.dispatch("tabBtnManage","DOMActivate");
							}
						}
						
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				};
				
				/**
				 * @desc [rptCcsCurCls]교과과정목록 onRowSelect 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onRowSelect_RptCcsCurCls = function() {
					var vsTab = util.Tab.getSelectedId(app, "tabMain");
					var vsIndex = "";
					
					if(vsTab=="tabManage"){
						vsIndex = TAB.MANAGE;
						
						// 기등록된 교과과정인지 확인(교과그룹코드, 교과목코드, 시작일자, 종료일자)
						doChkCurCls();
					}else if(vsTab=="tabHistory"){
						vsIndex =TAB.HIS;
					}
					
					var voSelectRowIdx = util.Grid.getIndex(app, "grdCcsCurCls");
					util.DataMap.setValue(app, "dmReqSelRow", "strSbCd", util.Grid.getCellValue(app, "grdCcsCurCls", "SB_CD"  ,voSelectRowIdx));		// 교과목코드
					util.DataMap.setValue(app, "dmReqSelRow", "strSaCd", util.Grid.getCellValue(app, "grdCcsCurCls", "SA_CD"  ,voSelectRowIdx)); 		// 학사부서코드
					util.DataMap.setValue(app, "dmReqSelRow", "strCuCd", util.Grid.getCellValue(app, "grdCcsCurCls", "CU_CD"  ,voSelectRowIdx)); 		// 교과그룹코드
					util.DataMap.setValue(app, "dmReqSelRow", "strRefKey", util.Grid.getCellValue(app, "grdCcsCurCls", "REF_KEY"  ,voSelectRowIdx)); 	// 참조키
					
					// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
					doCompareFrfEnable();
					
					doTabChange(vsIndex);
				};
				
				/**
				 * @desc  마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
				 *			    1. index가 지정되지 않았을 경우
				 *			    2. 현재 index의 로우가 삭제 상태일 경우 
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				function doCompareFrfEnable() {
					// 신규시 제어 컬럼
					var vaEnableCtl = ["ipbFrfSbNm", "btnFrfSbCd"];
					
					// 마스터 로우 없을경우 프리폼 리셋
					if(!util.Grid.getIndex(app, "grdCcsCurCls")){
						util.Control.reset(app, "frfCcsCurCls");
						util.Control.setValue(app, "lblWarn", "");
					}
					
					if( (!util.Grid.getIndex(app, "grdCcsCurCls")) 
						|| util.Grid.getRowState(app, "grdCcsCurCls") == cpr.data.tabledata.RowState.DELETED) {
							
						util.Control.setEnable(app, false, ["frfCcsCurCls"]);
						
					} else {
						util.Control.setEnable(app, true, ["frfCcsCurCls"]);	
						
						var vsFlgGbn = util.Grid.getCellValue(app, "grdCcsCurCls", "FLAG_GBN", util.Grid.getIndex(app, "grdCcsCurCls"));
						// 신규 상태에따른 프리폼항목 제어
						if(util.Grid.getRowState(app, "grdCcsCurCls") == cpr.data.tabledata.RowState.INSERTED && ValueUtil.fixNull(vsFlgGbn) != "C"){
							util.Control.setEnable(app, true, vaEnableCtl);	
						}else {
							util.Control.setEnable(app, false, vaEnableCtl);	
						}
					}
				};
				
				/**
				 * @desc 탭 변경시
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				function doTabChange(psCaseId) {
					// 선택된 TAB
					var vsSelTabId = util.Tab.getSelectedId(app, "tabMain");
					
					// 1. 현재 선택된 탭의 상태 체크
					switch (vsSelTabId) {
						// 1-1. 데이터관리
						
						case TAB.MANAGE : {
							if(psCaseId != TAB.MANAGE){
								// 데이터관리 변경내역 있는 경우
								if(util.Grid.isModified(app, ["grdCcsCurCls"], "CRM") ){
									// tab 이동 하지 않음
									ExtTab.setTabBtn("tabMain", TAB_BTN[vsSelTabId]);
									return false;
								}else{
									// 교과목 목록 변경이 일어난 후 다른탭으로 이동시 프리폼 리셋 처리
									if(util.Grid.isModified(app, ["grdCcsCurCls"])){
										// 교과목 목록 리셋
										util.Grid.revertAllData(app, "grdCcsCurCls");
										// 교과목 리셋
										util.Control.reset(app, "frfCcsCurCls");
									}
								}
							}					
							break;
						}
						
						// 1-2. 이력관리  버튼 선택
						case TAB.HIS : {
							// 이력관리 리피트 변경내역 있는 경우
							if(util.Grid.isModified(app, ["grdCcsCurClsHistory"], "CRM")){
								// tab 이동 하지 않음
								ExtTab.setTabBtn("tabMain", TAB_BTN[vsSelTabId]);
								
								return false;
							}else{
								if(util.Grid.isModified(app, ["grdCcsCurClsHistory"]) ){
									// 이력 목록 리셋
									util.Grid.revertAllData(app, "grdCcsCurClsHistory");
								}
							}
																							
							break;
						}
					}
				
					// 2. 탭변경
					util.Tab.setSelectedTabItem(app, "tabMain", psCaseId);
					// 3. 탭변경 후 처리 로직
					switch (psCaseId) {
						// 3-1. 데이터관리 조회
						case TAB.MANAGE : {
							// 교과목 상세 조회
							doListDtl();
							
							break;
						}
						// 3-2. 이력관리 조회
						case TAB.HIS : {
							// 교과목목록 선택된 ROW 검사
							var voSelectRowIdx = util.Grid.getIndex(app, "grdCcsCurCls");
			
							if (!voSelectRowIdx) {
								// 데이터관리 프리폼 초기화
								util.Control.reset(app, "frfCcsCurCls");
								// 데이터관리  tab으로 이동
								ExtTab.setTabBtn("tabMain", TAB_BTN.tabManage);
								util.Tab.setSelectedTabItem(app, "tabMain", TAB.MANAGE);
								
								return;
							}
							
							// 이력조회
							doListHistory();
							
							break;
						}
					}
				};
				
				/**
				 * @desc [tabBtnManage]데이터관리 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onClick_TabBtnManage = function() {
					doTabChange(TAB.MANAGE);
				};
				
				/**
				 * @desc [tabBtnHistory]이력관리 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onClick_TabBtnHistory = function() {
					doTabChange(TAB.HIS);
				};
				
				/**
				 * @desc 교과과정(프리폼) 조회
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				function doListDtl() {
					
					// 교과목 포커싱된 인덱스
					var vnIndex = util.Grid.getIndex(app, "grdCcsCurCls");
					
					// 리피트 특정 row 데이터를 프리폼 copy
			//TO-BE: <ExtRepeat.copyRowForm> 그리드-프리폼인 경우에는 selection바인딩으로 처리하기 때문에 불필요함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.copyRowForm("rptCcsCurCls","frfCcsCurCls", vnIndex);
				};
				
				/**
				 * @desc [cbbFrfSpCd]이수과정 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onValueChanged_CbbFrfSpCd = function() {
					// 이수과정에따른 교과그룹값 필터링
					var vsSpCd = util.Control.getValue(app, "cbbFrfSpCd");
					if(!ValueUtil.isNull(vsSpCd)){
						vsSpCd = "CC009SP" + vsSpCd;
					}
			
					ExtSelectCtl.setInsBind("cbbFrfCuCd", "[contains(PATH, '"+ vsSpCd +"')]");
				};
				
				/**
				 * @desc [btnFrfSbCd]교과목명(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onClick_BtnFrfSbCd = function(sender) {
					// 교과목검색팝업 호출
					doOnClickStdCcsPSubPopup(sender);
				};
				
				/**
				 * @desc [ipbFrfSbNm]교과목명 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onValueChanged_IpbFrfSbNm = function(sender) {
					// 값변경시 교과목검색팝업 호출
					doOnChangeStdCcsPSubPopup(sender);
				};
				
				/**
				 * @desc [cbbFrfCmpDivRcd]이수구분 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onValueChanged_CbbFrfCmpDivRcd = function() {
					// 학문분야 초기화
					util.FreeForm.setValue(app, "frfCcsCurCls", "DCL_RCD_NM", "");
					util.FreeForm.setValue(app, "frfCcsCurCls", "DCL_RCD_CD", "");
					
					var vnIdx = util.Grid.getIndex(app, "grdCcsCurCls");
					
					var vsCmpDivRcd = util.FreeForm.getValue(app, "frfCcsCurCls", "CMP_DIV_RCD");
					
					// 교직전공[CA20121]. 교직교양[CA20122]
					if(ValueUtil.fixNull(vsCmpDivRcd) == "CA20121" || ValueUtil.fixNull(vsCmpDivRcd) == "CA20122"){
						
						// 평가방법 : 절대평가[CA21001]
						util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", "CA21001");
						util.Grid.setCellValue(app, "grdCcsCurCls", "EVAL_METHOD_RCD", "CA21001", vnIdx);
					}else {
						
						// 평가방법 : 상대평가[CA21002], 상대평가유형 : 상대평가[CD20901]
						util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", "CA21002");
						util.Grid.setCellValue(app, "grdCcsCurCls", "EVAL_METHOD_RCD", "CA21002", vnIdx);
					}
				};
				
				
				/**
				 * @desc [btnFrfDclRcd]학문분야(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onClick_BtnFrfDclRcd = function(sender) {
					// 학문분야검색팝업 호출
					doOnClickStdCcsPDclExtendPopup(sender);
				};
			
				/**
				 * @desc [frfCcsCurCls]교과과정 onUpdate 이벤트
				 * @param pbStatus Boolean
				 * @return  
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onUpdate_FrfCcsCurCls = function() {
					// 프리폼 업데이트내용 그리드 반영
			//TO-BE: <ExtFreeForm.updateToRpt> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtFreeForm.updateToRpt("rptCcsCurCls", "frfCcsCurCls");
				};
				
				/**
				 * @desc [btnCopy]복사 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onClick_BtnCopy = function() {
					
					var vnOrgRowIdx = util.Grid.getIndex(app, "grdCcsCurCls");
					// 마스터 리피트 row 선택여부 체크
					if(vnOrgRowIdx == "0"){
						
						var vsMsgParam = util.Grid.getTitle(app, "grdCcsCurClsCcsCurCls");
						// "@(을)를 선택해주세요" 메시지 출력
						util.Msg.alert("NLS-INF-M045", [vsMsgParam]);
						return;
					}
					
					// 마스터 row(대상) 변경내역 체크
					var vsUptStatus = util.Grid.getCellValue(app, "grdCcsCurCls", "UPT_STATUS", vnOrgRowIdx);
					if(util.Grid.isModified(app, ["grdCcsCurCls"])){
						var vsMsgParam = ExtControl.getTextValue("lblTitleFrfCcsCurCls");
						// "@의 시점 복사 작업은 [작업저장]후 진행하시기 바랍니다." 메시지 출력			
						util.Msg.alert("NLS-CCS-M062", [vsMsgParam]);
						return;
					}
					
					// 종료일자
					var vsEndDt = util.Grid.getCellValue(app, "grdCcsCurCls", "END_DT", vnOrgRowIdx).substring(0, 8);
					var vsKeyDate = util.DataMap.getValue(app, "dmReqKey", "strKeyDate").substring(0, 8);
					
					// 폐기여부 확인
					if(Number(vsEndDt) <= Number(vsKeyDate)){
						var vsMsgParam = ExtControl.getTextValue("lblTitleFrfCcsCurCls");
						// "폐기된 @은(는) 복사할 수 없습니다. 이력관리 탭에서 복구해주시기 바랍니다." 메시지 출력.
						util.Msg.alert("NLS-WRN-M208", [vsMsgParam]);
						return;
					}
					
					var voNextRow   = util.Grid.insertRow(app, "grdCcsCurCls");
					
					// 교과목 상세 조회
					doListDtl();
					
					// 값 복사
					ExtRepeat.copyToRowData("rptCcsCurCls", vnOrgRowIdx, "rptCcsCurCls", voNextRow);
					
					// 값복사후 Row의 내용 프리폼 반영을위해
					util.Grid.selectRow(app, "grdCcsCurCls", voNextRow);
					
					util.Grid.setCellValue(app, "grdCcsCurCls", "UPT_STATUS", "N", voNextRow);
					
					// 기본값 세팅
					// 시작일자 : 조회조건 기준일자
					util.FreeForm.setValue(app, "frfCcsCurCls", "ST_DT", vsKeyDate+"000000");
					
					// 종료일자 : 99991231
					util.FreeForm.setValue(app, "frfCcsCurCls", "END_DT", "99991231000000");
					
					// 참조키 : ""
					util.FreeForm.setValue(app, "frfCcsCurCls", "REF_KEY", "");
					
					// FLAG_GBN : C
					var vsFlagGbn = "C";
					util.Grid.setCellValue(app, "grdCcsCurCls", "FLAG_GBN", vsFlagGbn, voNextRow);
							
				};
				
				/**
				 * @desc [btnNew]신규 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onClick_BtnNew = function() {
					
					var voChildList = ExtInstance.getNodeListLength("/root/resList/rptCcsCurCls/row[child::FLAG_GBN = 'C']");
					if(voChildList != null && voChildList > 0 ){
						//-- 복사기능 처리내역이 있습니다. 작업저장 후 진행 하시기 바랍니다.
						util.Msg.alert("NLS-CCS-M072");
						return;
					}
			
					// 신규로우 추가
					var vnIdx = util.Grid.insertRow(app, "grdCcsCurCls");
					
					// 신규 Defalut값 설정
					// 시작일자 : 조회조건 기준일자
					var vsStDt = util.DataMap.getValue(app, "dmReqKey", "strKeyDate");
					util.FreeForm.setValue(app, "frfCcsCurCls", "ST_DT", vsStDt);
					
					// 종료일자 : 99991231000000
					var vsEndDt = "99991231000000";
					util.FreeForm.setValue(app, "frfCcsCurCls", "END_DT", vsEndDt);
					
					// 교과목 객체구분코드 : 교과목[CC009SB]
					util.FreeForm.setValue(app, "frfCcsCurCls", "SB_OBJ_DIV_RCD", "CC009SB");
					
					// 이수과정 객체구분코드 : 이수과정[CC009SP]  --> 2016. 2. 1. 박갑수 - 동서울대 이수과정 사용안함.
			//		ExtRepeat.setValue("rptCcsCurCls", "SP_OBJ_DIV_RCD", "CC009SP", vnIdx);
					
					// 교과그룹 객체구분코드 : 교과그룹[CC009CU]
					util.Grid.setCellValue(app, "grdCcsCurCls", "CU_OBJ_DIV_RCD", "CC009CU", vnIdx);
					
					// 학사부서 객체구분코드 : 교과목[CC009SA]
					util.Grid.setCellValue(app, "grdCcsCurCls", "SA_OBJ_DIV_RCD", "CC009SA", vnIdx);
					
					// 강의평가제외 : Y
					//ExtFreeForm.setValue("frfCcsCurCls", "LECT_EVAL_XCP_YN", "Y");
					
					// 주간분반수 : 1
					util.FreeForm.setValue(app, "frfCcsCurCls", "DAY_DIVCLS_CNT", "1");
				
					// 수강신청정원1~4 : 0       -->  2016. 2. 4 박갑수 속도문제로인한 서버단 처리
					util.FreeForm.setValue(app, "frfCcsCurCls", "TLSN_REQ_CAPA1", "50", false, true);
					// 프리폼 이벤트있는항목 리피터에도 세팅
				    util.Grid.setCellValue(app, "grdCcsCurCls", "TLSN_REQ_CAPA1", "50", vnIdx);
					
			//		ExtFreeForm.setValue("frfCcsCurCls", "TLSN_REQ_CAPA2", "0");
			//		ExtFreeForm.setValue("frfCcsCurCls", "TLSN_REQ_CAPA3", "0");
			//		ExtFreeForm.setValue("frfCcsCurCls", "TLSN_REQ_CAPA4", "0");
					
					var vsSbCd = util.DataMap.getValue(app, "dmReqKey", "strSbCd");
					// 조회조건의 교과목이 입력되어있다면 신규시 조회조건값으로 세팅
					if(!ValueUtil.isNull(vsSbCd)){
						// 교과목코드, 명 : 조회조건
						util.FreeForm.setValue(app, "frfCcsCurCls", "SB_CD", vsSbCd);
						util.FreeForm.setValue(app, "frfCcsCurCls", "SB_CD_NM", util.DataMap.getValue(app, "dmReqKey", "strSbNm"), false, true);
						util.Grid.setCellValue(app, "grdCcsCurCls", "SB_CD_NM", util.DataMap.getValue(app, "dmReqKey", "strSbNm"), vnIdx);
						
						// 그외 : 조회조건값(교과목검색팝업 리턴값) 세팅
						util.FreeForm.setValue(app, "frfCcsCurCls", "SB_CAT_RCD", util.DataMap.getValue(app, "dmResPopup", "strSbCatRcd"));
						util.FreeForm.setValue(app, "frfCcsCurCls", "REC_SCALE_RCD", util.DataMap.getValue(app, "dmResPopup", "strRecScaleRcd"));
						util.FreeForm.setValue(app, "frfCcsCurCls", "SB_TYPE_RCD", util.DataMap.getValue(app, "dmResPopup", "strSbTypeRcd"));
						util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", util.DataMap.getValue(app, "dmResPopup", "strEvalMethodRcd"));
						util.FreeForm.setValue(app, "frfCcsCurCls", "LECT_TYPE_RCD", util.DataMap.getValue(app, "dmResPopup", "strLectTypeRcd"));
						util.FreeForm.setValue(app, "frfCcsCurCls", "RE_TLSN_YN_RCD", util.DataMap.getValue(app, "dmResPopup", "strReTlsnYnRcd"));
						
						var vsCmpDivRcd = util.DataMap.getValue(app, "dmResPopup", "strCmpDivRcd");
						
						util.FreeForm.setValue(app, "frfCcsCurCls", "CMP_DIV_RCD", vsCmpDivRcd, false, true);
						
						// 교직전공, 교직교양일경우 평가방법 - 절대평가[CA21001] else 상대평가[CA21002]
						if(ValueUtil.fixNull(vsCmpDivRcd) == "CA20121" || ValueUtil.fixNull(vsCmpDivRcd) == "CA20122"){
							util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", "CA21001");
							util.Grid.setCellValue(app, "grdCcsCurCls", "EVAL_METHOD_RCD", "CA21001", vnIdx);
						}else {
							util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", "CA21002");
							util.Grid.setCellValue(app, "grdCcsCurCls", "EVAL_METHOD_RCD", "CA21002", vnIdx);
						}
						
						
						util.FreeForm.setValue(app, "frfCcsCurCls", "PNT", util.DataMap.getValue(app, "dmResPopup", "strPnt"), false, true);
						var vsTheoTc = util.DataMap.getValue(app, "dmResPopup", "strTheoTc");
						util.FreeForm.setValue(app, "frfCcsCurCls", "THEO_TC", vsTheoTc, false, true);
						var vsEpacTc = util.DataMap.getValue(app, "dmResPopup", "strEpacTc");
						util.FreeForm.setValue(app, "frfCcsCurCls", "EPAC_TC", vsEpacTc, false, true);
						
						var vsLectTimeCnt = ValueUtil.fixNumber(vsTheoTc) + ValueUtil.fixNumber(vsEpacTc);
						util.FreeForm.setValue(app, "frfCcsCurCls", "LECT_TIME_CNT", vsLectTimeCnt, false, true);
						
						
						// 프리폼 이벤트있는항목 리피터에도 세팅
						util.Grid.setCellValue(app, "grdCcsCurCls", "CMP_DIV_RCD", util.DataMap.getValue(app, "dmResPopup", "strCmpDivRcd"), vnIdx);
						util.Grid.setCellValue(app, "grdCcsCurCls", "PNT", util.DataMap.getValue(app, "dmResPopup", "strPnt"), vnIdx);
						util.Grid.setCellValue(app, "grdCcsCurCls", "THEO_TC", vsTheoTc, vnIdx);
						util.Grid.setCellValue(app, "grdCcsCurCls", "EPAC_TC", vsEpacTc, vnIdx);
						util.Grid.setCellValue(app, "grdCcsCurCls", "LECT_TIME_CNT", vsLectTimeCnt, vnIdx);
					}else {
						// 평가방법 : 상대평가[CA21002]
						util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", "CA21002");
						util.Grid.setCellValue(app, "grdCcsCurCls", "EVAL_METHOD_RCD", "CA21002", vnIdx);
						
						// 성적스케일 : 4.5(표준)[CD10106]
						util.FreeForm.setValue(app, "frfCcsCurCls", "REC_SCALE_RCD", "CD10106", false, true);
						util.Grid.setCellValue(app, "grdCcsCurCls", "REC_SCALE_RCD", "CD10106", vnIdx);
						
						// 강의유형 : 오프라인[CA209LECT]
						util.FreeForm.setValue(app, "frfCcsCurCls", "LECT_TYPE_RCD", "CA209LECT", false, true);
						util.Grid.setCellValue(app, "grdCcsCurCls", "LECT_TYPE_RCD", "CA209LECT", vnIdx);
					}
					
					// 학년 : 조회조건
					util.FreeForm.setValue(app, "frfCcsCurCls", "SB_LVL_RCD", util.Control.getValue(app, "cbbSbLvlRcd"), false, true);
					util.Grid.setCellValue(app, "grdCcsCurCls", "SB_LVL_RCD", util.Control.getValue(app, "cbbSbLvlRcd"), vnIdx);
					// 개설시기 : 조회조건
					util.FreeForm.setValue(app, "frfCcsCurCls", "EST_PRD_RCD", util.Control.getValue(app, "cbbEstPrdRcd"), false, true);
					util.Grid.setCellValue(app, "grdCcsCurCls", "EST_PRD_RCD", util.Control.getValue(app, "cbbEstPrdRcd"), vnIdx);
					
					// 이수구분코드 : 조회조건
					util.FreeForm.setValue(app, "frfCcsCurCls", "SP_CD", util.DataMap.getValue(app, "dmReqKey", "strSpCd"));
					// 교과그룹코드 : 조회조건
					util.FreeForm.setValue(app, "frfCcsCurCls", "CU_CD", util.DataMap.getValue(app, "dmReqKey", "strCuCd"));
					util.Grid.setCellValue(app, "grdCcsCurCls", "CU_CD", util.DataMap.getValue(app, "dmReqKey", "strCuCd"), vnIdx);
					
					// 학사부서코드 : 조회조건
					util.Grid.setCellValue(app, "grdCcsCurCls", "SA_CD", util.DataMap.getValue(app, "dmReqKey", "strSaCd"), vnIdx);
					
					// FLAG_GBN : N
					var vsFlagGbn = "N";
					util.Grid.setCellValue(app, "grdCcsCurCls", "FLAG_GBN", vsFlagGbn, vnIdx);
				};
				
				/**
				 * @desc [btnDel]삭제 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onClick_BtnDel = function() {
					
					var voChildList = ExtInstance.getNodeListLength("/root/resList/rptCcsCurCls/row[child::FLAG_GBN = 'C']");		
					if(voChildList != null && voChildList >0 ){
						var vsFlgGbn = util.Grid.getCellValue(app, "grdCcsCurCls", "FLAG_GBN", util.Grid.getIndex(app, "grdCcsCurCls"));
						if(vsFlgGbn != "C"){
							//--복사기능 처리내역이 있습니다. 작업저장 후 진행 하시기 바랍니다.
							util.Msg.alert("NLS-CCS-M072");
							return;
						}
						
					}
					
					
					// 삭제
					util.Grid.deleteRow(app, "grdCcsCurCls");
					// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
					doCompareFrfEnable();
				};
				
				/**
				 * @desc [btnRestore]작업취소 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onClick_BtnRestore = function() {
					// 작업취소
					util.Grid.restoreRow(app, "grdCcsCurCls");
					// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
					doCompareFrfEnable();
					// 취소내용 프리폼 반영
			//TO-BE: <ExtRepeat.copyRowForm> 그리드-프리폼인 경우에는 selection바인딩으로 처리하기 때문에 불필요함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.copyRowForm("rptCcsCurCls", "frfCcsCurCls");
				};
			
				/**
				 * @desc [btnSave]작업저장 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				moPage.onClick_BtnSave = function() {
					// 작업저장
					doSave();
				};
				
				/**
				 * @desc 교과과정목록 변경사항 저장
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 26
				 */
				function doSave() {
					
					// 리피트 변경사항 체크
					if(!util.Grid.isModified(app, ["grdCcsCurCls"], "MSG")){
						return false;
					}
					
					// 리피트 Validation Check
					if(!util.validate(app, "grdCcsCurCls")) return false;
			
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccess){
						if(pbSuccess){
							
							doSaveWithAcademicStructure();
							
							//조회건수가 0건이면 프리폼이 내역이 반영되지 않기 떄문
							util.Control.reset(app, "frfCcsCurCls");
							
							doList(function(pbListSuccess) {
								// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
								if (pbListSuccess) doSetMsgStatus(NLS.INF.M025);
							});
						}else {
							// "저장중 오류가 발생하였습니다." 메시지 표시
							doSetMsgStatus(NLS.WRN.M119);
							util.Tab.setSelectedTabItem(app, "tabMain", TAB.MANAGE);
						}
					});
				};
				
				/**
				 * @desc 히스토리(이력)목록 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author 박갑수 at 2016. 2. 1
				 */
				function doListHistory(poCallBackFunc) {
					
					var vsHisDate = util.DataMap.getValue(app, "dmReqKey", "strKeyDateHistory");
					var vsKeyDate = util.DataMap.getValue(app, "dmReqKey", "strKeyDate");
					
					// 폐기/복구일자 모두 지워졌을 경우 조회조건 기준일자 셋팅
					if(vsHisDate ==""){
						util.DataMap.setValue(app, "dmReqKey", "strKeyDateHistory", vsKeyDate);
					}
					
					// 폐기/복구일자 defalut세팅
					util.Control.redraw(app, "dipKeyDateHistory"); 
					
					// 이력관리 조회 서브이션 
					//strCommand: listHistory 
					util.Submit.send(app, "subListHistory", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdCcsCurClsHistory");
						}
						
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				};
				
				/**
				 * @desc [btnYearSmtHis]폐기/복구일자(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onClick_BtnYearSmtHis = function() {
					// 기준일자 임포트(달력컨트롤ID,임포트ID)
					doOnclickSchYearSmt("dipKeyDateHistory", "impSchYearSmt");
				};
				
				/**
				 * @desc [btnDisUse]폐기 onClick 이벤트
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onClick_BtnDisUse = function() {
					// 교과목 폐기
					doDisUseHistory();
				};
				
				/**
				 * @desc 교과목 폐기
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				function doDisUseHistory() {
					// 9999레코드를  조회조건의 학기의 (시작일자 - 1초) 로 업데이트 = 해당학기까지 유효한 데이타
					var vnCnt =  util.Grid.getRowCount(app, "grdCcsCurClsHistory");
			
					// 폐기/복구일자 유효성 체크
					if(!util.validate(app, "dipKeyDateHistory")) return false;
					// 조회조건 기준일자 : 마스터 포커스용
					var vsSchKeyDate = util.DataMap.getValue(app, "dmReqKey", "strKeyDate").substring(0, 8);
					
					var vnMaxRowIdx   = null;
					var vnMaxEndDt 	= null;
					for (var i = 0; i < vnCnt; i++) {
						var vnRowIdx = i+1;
						
						var vsEndDt = util.Grid.getCellValue(app, "grdCcsCurClsHistory", "END_DT", vnRowIdx).substring(0, 8);
						if (vsEndDt == "99991231") {
							vnMaxEndDt 		= vsEndDt;
							vnMaxRowIdx   	= vnRowIdx;
							
							break;
						}
					}
					
					// 1. 종료일자가 99991231이 아닐때, 폐기 불가
					if (vnMaxRowIdx == null) {
						// "폐기 가능한 데이터가 없습니다." 메시지 표시
						util.Msg.alert("NLS-INF-M029");
						return;
					}
					
					// 99991231가 있는 로우의 시작일
					var vsStDt   = util.Grid.getCellValue(app, "grdCcsCurClsHistory", "ST_DT", vnMaxRowIdx).substring(0, 8);
					var vsKeyDate = util.Control.getValue(app, "dipKeyDateHistory").substring(0, 8);
					var vsBefDate = moPage.getBefDate(vsKeyDate).substring(0, 8);
					
					if (vsStDt >= vsBefDate) {
						// 폐기 가능한 데이터가 없습니다.
						util.Msg.alert("NLS-INF-M029");
						return;
					}
					
					// 전날자로 타겟로우의 종료일자 업데이트
					var vsMsgDate = vsBefDate.substring(0, 4) + NLS.NSCR.YEAR + vsBefDate.substring(4, 6) + NLS.NSCR.MONTH + vsBefDate.substring(6, 8) + NLS.NSCR.DAY;
					
					// "@부로 폐기합니다. \n진행하시겠습니까?" 메시지
					if(util.Msg.confirm("NLS-CRM-M047", [vsMsgDate]) ){
						util.Grid.setCellValue(app, "grdCcsCurClsHistory", "END_DT", vsBefDate + "000000", vnMaxRowIdx);
						util.Grid.selectRow(app, "grdCcsCurClsHistory", vnMaxRowIdx, true);
						
						/*
							그리드에 pk_colvalues를 넣는다.
							조회 후 찾아주기 위함.
							var vsSchKeyDate = util.DataMap.getValue(app, "dmReqKey", "strKeyDate");
						*/
						if(vsSchKeyDate+"000000" >= vsStDt+"000000"){
							moPage.setCcsCurClsPkColRowValue("rptCcsCurClsHistory");
						}else{
							moPage.setCcsCurClsPkColRowValue("rptCcsCurCls");
						}
						
						doSaveHis();
					}
				};
				
				/**
				 * @desc 마스터 그리드의 pk_colvalues 값 세팅
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 12
				 */
				moPage.setCcsCurClsPkColRowValue = function(vpRptDetail){
					var vcRptCcsSub = model.getControl("rptCcsCurCls");
					var vsPkColValues = ExtRepeat.getPKColRowValues(vpRptDetail);					
					if(!ValueUtil.isNull(vsPkColValues)){
						vcRptCcsSub.pk_values = vsPkColValues;
					}
				};
				
				/**
				 * @desc 기준일 이전날짜 추출
				 * @param 기준일
				 * @return  기준일 이전일
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.getBefDate = function(psKeyDate) {
					
						var y  = psKeyDate.substring(0, 4);
						var m = psKeyDate.substring(4, 6);
						var d  = psKeyDate.substring(6, 8);
						var befDt = new Date(y, m - 1, d - 1);
						var befDtYear = befDt.getFullYear().toString();	// 2012.02.29 크롬에서도 정상적으로 작동되도록 수정함. 윤경희
						var befDtMonth = eval(befDt.getMonth() + 1).toString();
						var befDtDate = befDt.getDate().toString();
						
						if (befDtMonth.length == 1) befDtMonth = "0" + befDtMonth;
						if (befDtDate.length == 1) befDtDate = "0" + befDtDate;
						
						var vsBefDate = befDtYear + befDtMonth + befDtDate + "000000";
						
						return vsBefDate;
				};
				
				/**
				 * @desc 이력관리목록 변경사항 저장
				 * @param 
				 * @return  
				 * @author 박갑수 at 2016. 2. 2
				 */
				function doSaveHis() {
					// 리피트 변경사항 체크
					if(!util.Grid.isModified(app, ["grdCcsCurClsHistory"], "MSG")){
						return false;
					}
					
					//strCommand: save 
					util.Submit.send(app, "subSaveHistory", function(pbSuccess){
						if(pbSuccess) {
							
							// 디테일 저장시 마스터의 포커스를 찾아가기위한 인스턴스 설정
							var vsRefKey =  util.DataMap.getValue(app, "dmReqSelRow", "strRefKey");
							util.DataMap.setValue(app, "dmReqSelRow", "strTmpRefKey", vsRefKey);
							
							doSaveWithAcademicStructure();		
							
							util.Control.redraw(app, "grdCcsCurClsHistory");
							
							// 조회
							doList(function(pbSuccess) {
								if (pbSuccess){
									// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
									doSetMsgStatus(NLS.INF.M025);
			
									// 마스터 포커스용 인스턴스 초기화
									util.DataMap.setValue(app, "dmReqSelRow", "strTmpRefKey", "");
								}
							});
						}else {
							// "저장중 오류가 발생하였습니다." 메시지 표시
							doSetMsgStatus(NLS.WRN.M119);
							doListHistory();
						}
					});
				};
				
				/**
				 * @desc [btnDisUseCanc]폐기취소 onClick 이벤트
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onClick_BtnDisUseCanc = function() {
					// 교과목 폐기취소
					doUseCancHistory();
				};
				
				/**
				 * @desc 교과목 폐기취소
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				function doUseCancHistory() {
					
					var vnCnt = util.Grid.getRowCount(app, "grdCcsCurClsHistory");
					// 조회조건 기준일자 : 마스터 포커스용
					var vsSchKeyDate = util.DataMap.getValue(app, "dmReqKey", "strKeyDate").substring(0, 8);
					
					// 폐기/복구일자 유효성 체크
					if(!util.validate(app, "dipKeyDateHistory")) return false;
					
					var vnMaxRowIdx   = null;
					var vnMaxEndDt 	= null;
					for (var i = 0; i < vnCnt; i++) {
						var vnRowIdx = i+1;
						
						var vsEndDt = util.Grid.getCellValue(app, "grdCcsCurClsHistory", "END_DT", vnRowIdx).substring(0, 8);
						if ((vnMaxEndDt == null) || (vnMaxEndDt != null && vnMaxEndDt < vsEndDt)) {
							vnMaxEndDt = vsEndDt;
							vnMaxRowIdx = vnRowIdx;
						}
					}
			
					if (vnMaxEndDt == "99991231" ) {
						// 폐기취소 가능한 데이터가 없습니다.
						util.Msg.alert("NLS-INF-M030");
						
						return;
					}
					
					// "마지막 데이터의 종료일이 9999년 12월 31일로 변경됩니다. \n진행하시겠습니까?" 메시지
					if(util.Msg.confirm("NLS-CRM-M048") ){
						util.Grid.setCellValue(app, "grdCcsCurClsHistory", "END_DT", "99991231000000", vnMaxRowIdx);
						util.Grid.selectRow(app, "grdCcsCurClsHistory", vnMaxRowIdx);
						
						var vsBefDate =  util.Grid.getCellValue(app, "grdCcsCurClsHistory", "ST_DT", vnMaxRowIdx).substring(0, 8);
						/*
							그리드에 pk_colvalues를 넣는다.
							조회 후 찾아주기 위함.
							
						*/
						if(vsSchKeyDate+"000000" >= vsBefDate+"000000"){
							moPage.setCcsCurClsPkColRowValue("rptCcsCurClsHistory");
						}else{
							moPage.setCcsCurClsPkColRowValue("rptCcsCurCls");
						}
						
						// 이력사항 변경사항 저장
						doSaveHis();
					}
				};
				
				/**
				 * @desc [btnRecover]복구 onClick 이벤트
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onClick_BtnRecover = function() {
					// 교과목 복구
					doRecoverHistory();
				};
				
				/**
				 * @desc 교과목 복구
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				function doRecoverHistory() {
					
					// 요약: 가장 최근의 레코드를 카피하여 insert한다. (단, 기준일자가 최종일자보다 커야 한다.)
					var vnCnt = util.Grid.getRowCount(app, "grdCcsCurClsHistory");
					// 조회조건 기준일자 : 마스터 포커스용
					var vsSchKeyDate	= util.DataMap.getValue(app, "dmReqKey", "strKeyDate").substring(0, 8);
					
					var vnMaxEndDt = null;
					var vnRowIdx = null;
					var vnMaxRowIdx = null;
					var vnMaxRowNum = null;
					
					// 폐기/복구일자 유효성 체크
					if(!util.validate(app, "dipKeyDateHistory")) return false;
					
					for (var i = 0; i < vnCnt; i++) {
						voRowIdx = i+1;
						
						var vsEndDt = util.Grid.getCellValue(app, "grdCcsCurClsHistory", "END_DT", voRowIdx).substring(0, 8);
						if ((vnMaxEndDt == null) || (vnMaxEndDt != null && vnMaxEndDt < vsEndDt)) {
							vnMaxEndDt = vsEndDt;
							vnMaxRowIdx = vnRowIdx;
							vnMaxRowNum = i;
						}
					}
					
					// 폐기/복구일자
					var vsHistoryKeyDate = util.Control.getValue(app, "dipKeyDateHistory").substring(0, 8);
					
					if (vnMaxEndDt >= vsHistoryKeyDate) {
						// "복구 가능한 DATA가 없습니다." 메시지 표시
						util.Msg.alert("NLS-WRN-M128");
						
						return;
					}
					
					 var vsMsgCiiDate = vsHistoryKeyDate.substring(0, 4) + NLS.NSCR.YEAR + vsHistoryKeyDate.substring(4, 6) + NLS.NSCR.MONTH + vsHistoryKeyDate.substring(6, 8) + NLS.NSCR.DAY;
					 
					//  "시작일 @ 종료일 9999년12월31일로 데이터가 복구됩니다. \n진행하시겠습니까?"
					 if (util.Msg.confirm("NLS-CRM-M049", [vsMsgCiiDate]) ) {
						 
						vnMaxRowNum  = util.Grid.getIndex(app, "grdCcsCurClsHistory");
						var voNextRow   = util.Grid.insertRow(app, "grdCcsCurClsHistory");
						 
						ExtRepeat.copyToRowData("rptCcsCurClsHistory", vnMaxRowNum, "rptCcsCurClsHistory", voNextRow);
						
						var vsKeyDate = util.Control.getValue(app, "dipKeyDateHistory").substring(0, 8);
						util.Grid.setCellValue(app, "grdCcsCurClsHistory", "REF_KEY", "", voNextRow);
						util.Grid.setCellValue(app, "grdCcsCurClsHistory", "ST_DT", vsKeyDate + "000000", voNextRow);
						util.Grid.setCellValue(app, "grdCcsCurClsHistory", "END_DT", "99991231000000", voNextRow);
						util.Grid.setCellValue(app, "grdCcsCurClsHistory", "UPT_STATUS", "N", voNextRow);
						
						/*
							그리드에 pk_colvalues를 넣는다.
							조회 후 찾아주기 위함.
						*/
						if(vsSchKeyDate+"000000" >= vsKeyDate+"000000"){
							moPage.setCcsCurClsPkColRowValue("rptCcsCurClsHistory");
						}else{
							moPage.setCcsCurClsPkColRowValue("rptCcsCurCls");
						}
						
						// 이력사항 변경사항 저장
						doSaveHis();
					 }
				};
			
				/**
				 * @desc 음수를  입력 할 수 없다.
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onValueChanged_checkIntegerDecimal = function(vpCtl) {
					
					ValidUtil.checkIntegerDecimal(vpCtl, 3, 0, true);
				};
				
				/**
				 * @desc 수강정원 음수를  입력 할 수 없다.
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onValueChanged_IpbFrfTlsnReqCapa1 = function() {		
					
					page.onValueChanged_checkIntegerDecimal("ipbFrfTlsnReqCapa1");
					
				};
				
				/**
				 * @desc 학점 음수를  입력 할 수 없다.
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onValueChanged_IpbFrfPnt = function() {
					page.onValueChanged_checkIntegerDecimal("ipbFrfPnt");
				};
				
				/**
				 * @desc 이론 음수를  입력 할 수 없다.
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onValueChanged_IpbFrfTheoTc = function() {
					page.onValueChanged_checkIntegerDecimal("ipbFrfTheoTc");
					
					doSetSbCatRcd();
				};
				
				/**
				 * @desc 실습 음수를  입력 할 수 없다.
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onValueChanged_IpbFrfEpacTc = function() {
					page.onValueChanged_checkIntegerDecimal("ipbFrfEpacTc");
					
					doSetSbCatRcd();
				};
				
				/**
				 * @desc 교과목 범주값, 강의시수값 세팅
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 10. 12
				 */
				function doSetSbCatRcd(){
					// 교과목범주[CA203] - 이론[CA20301], 실습[CA20302], 이론+실습[CA20303]
					var vsSbCatRcd = "";
					
					// 이론
					var vsTheoTc = util.FreeForm.getValue(app, "frfCcsCurCls", "THEO_TC");
					// 실습
					var vsEpacTc = util.FreeForm.getValue(app, "frfCcsCurCls", "EPAC_TC");
					
					if(ValueUtil.fixNumber(vsTheoTc) > 0){
						if(ValueUtil.fixNumber(vsEpacTc) > 0){
							vsSbCatRcd = "CA20303";	// 이론 + 실습
						}else {
							vsSbCatRcd = "CA20301";	// 이론
						}
					}else {
						if(ValueUtil.fixNumber(vsEpacTc) > 0){
							vsSbCatRcd = "CA20302";	// 실습
						}else {
							vsSbCatRcd = "";
						}
					}
					
					// 교과목범주 세팅
					util.FreeForm.setValue(app, "frfCcsCurCls", "SB_CAT_RCD", vsSbCatRcd);
					util.Grid.setCellValue(app, "grdCcsCurCls", "SB_CAT_RCD", vsSbCatRcd);
					
					// 강의시수 세팅
					var vsLectTimeCnt = ValueUtil.fixNumber(vsTheoTc) + ValueUtil.fixNumber(vsEpacTc);
					util.FreeForm.setValue(app, "frfCcsCurCls", "LECT_TIME_CNT", vsLectTimeCnt);
					util.Grid.setCellValue(app, "grdCcsCurCls", "LECT_TIME_CNT", vsLectTimeCnt);
				};
				
				/**
				 * @desc 강의시수 음수를  입력 할 수 없다.
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onValueChanged_IpbFrfLectTimeCnt = function() {
					page.onValueChanged_checkIntegerDecimal("ipbFrfLectTimeCnt");
				};
			
				/**
				 * @desc [rhCkbSelect]패널 onValueChanged 이벤트
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onValueChanged_RhCkbSelect = function() {
					// 리피트 패널 설정
			//TO-BE: <ExtRepeat.selectedAllPanel> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.selectedAllPanel("rhCkbSelect");
				};
				
				/**
				 * @desc [btnDclRcd]학문분야(돋보기) onClick 이벤트
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onClick_BtnDclRcd = function(sender) {
					// 이수구분
					var vsCmpDivRcd = util.Control.getValue(app, "cbbCmpDivRcd");
			
					if(ValueUtil.isNull(vsCmpDivRcd)){
						var vsCmpDivRcdTitle = ExtControl.getTextValue("lblCmpDivRcd");
						// 학문분야 선택 시 조회조건의 이수구분은 필수 입력 항목입니다.
						util.Msg.alert("NLS-CCS-M079");
					}else {
						// 학문분야검색팝업 호출
						doOnClickStdCcsPDclExtendPopup(sender);
					}
				};
				
				/**
				 * @desc [btnPlus]+버튼 onClick 이벤트
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onClick_BtnPlus = function() {
					var vsIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdCcsCurCls");
					var vsDclRcdNm = util.Control.getValue(app, "ipbDclRcdNm");
					
					if(ValueUtil.isNull(vsIdx)){
						// 선택된 데이터가 없습니다.
						ComMsg.warn("M008");
						return false;
					}
					
					if(ValueUtil.isNull(vsDclRcdNm)){
						var vsDclRcdCtlNm = ExtControl.getTextValue("lblDclRcdNm");
						util.Msg.alert("NLS-CCS-M027", [vsDclRcdCtlNm]);
						return false;
					}
					
					
					var vaIdx = vsIdx.split(",");
					
					for(var i=0; i<vaIdx.length; i++){
						var vbChange = false;
						
						var vnIdx = vaIdx[i];
						
						// 선택된 학문분야
						var vsSelDclRcdCd = util.DataMap.getValue(app, "dmReqDclRcd", "strDclRcd");
						var vaSelDclRcdCd = vsSelDclRcdCd.split(",");
						var vsSelDclRcdNm = util.Control.getValue(app, "ipbDclRcdNm");
						var vsSelDclRcdNm = vsSelDclRcdNm.split(",");
						
						// 인덱스에 해당하는 학문분야
						var vsDclRptRcdCd  = util.Grid.getCellValue(app, "grdCcsCurCls", "DCL_RCD_CD", vnIdx);
						var vsDclRptRcdNm = util.Grid.getCellValue(app, "grdCcsCurCls", "DCL_RCD_NM", vnIdx);
						
						for(var j=0; j<vaSelDclRcdCd.length; j++){
							
							// 학문분야코드가 포함되어있는지 확인
							if(vsDclRptRcdCd.indexOf(vaSelDclRcdCd[j]) == -1){
								// 없을경우 추가
								if(ValueUtil.isNull(vsDclRptRcdCd)){
									vsDclRptRcdCd = vaSelDclRcdCd[j];
									vsDclRptRcdNm = vsSelDclRcdNm[j];
								}else {
									vsDclRptRcdCd = vsDclRptRcdCd + "," + vaSelDclRcdCd[j];
									vsDclRptRcdNm = vsDclRptRcdNm + ", " + vsSelDclRcdNm[j];
								}
								
								vbChange = true;
							}
						}	// end for j
						
						// 변경시 리피터에 반영
						if(vbChange){
							util.Grid.setCellValue(app, "grdCcsCurCls", "UPT_STATUS", "U", vnIdx);
							util.Grid.setCellValue(app, "grdCcsCurCls", "DCL_RCD_CD", vsDclRptRcdCd, vnIdx);
							util.Grid.setCellValue(app, "grdCcsCurCls", "DCL_RCD_NM", vsDclRptRcdNm, vnIdx);
														
							if(ValueUtil.fixNull(vsDclRptRcdCd).indexOf("CA21240") != -1){
								
								// 평가방법 : 절대평가[CA21001]
								util.Grid.setCellValue(app, "grdCcsCurCls", "EVAL_METHOD_RCD", "CA21001", vnIdx);
							}else {
								
								// 평가방법 : 상대평가[CA21002]
								util.Grid.setCellValue(app, "grdCcsCurCls", "EVAL_METHOD_RCD", "CA21002", vnIdx);
							}
						}
						
						if(util.Grid.getIndex(app, "grdCcsCurCls") == vnIdx){
							util.FreeForm.setValue(app, "frfCcsCurCls", "DCL_RCD_CD", vsDclRptRcdCd);
							util.FreeForm.setValue(app, "frfCcsCurCls", "DCL_RCD_NM", vsDclRptRcdNm);
							
							if(ValueUtil.fixNull(vsDclRptRcdCd).indexOf("CA21240") != -1){
								
								// 평가방법 : 절대평가[CA21001]
								util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", "CA21001");
							}else {
								
								// 평가방법 : 상대평가[CA21002]
								util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", "CA21002");
							}
						}
					}	// end for i
				};
				
				/**
				 * @desc [btnPlus]-버튼 onClick 이벤트
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onClick_BtnMinus = function() {
					var vsIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdCcsCurCls");
					var vsDclRcdNm = util.Control.getValue(app, "ipbDclRcdNm");
					
					if(ValueUtil.isNull(vsIdx) ){
						// 선택된 데이터가 없습니다.
						ComMsg.warn("M008");
						return false;
					}
					
					if(ValueUtil.isNull(vsDclRcdNm)){
						var vsDclRcdCtlNm = ExtControl.getTextValue("lblDclRcdNm");
						util.Msg.alert("NLS-CCS-M027", [vsDclRcdCtlNm]);
						return false;
					}
					
					var vaIdx = vsIdx.split(",");
					for(var i=0; i<vaIdx.length; i++){
						var vbChange = false;
						
						var vnIdx = vaIdx[i];
						
						// 선택된 학문분야
						var vsSelDclRcdCd = util.DataMap.getValue(app, "dmReqDclRcd", "strDclRcd");
						var vaSelDclRcdCd = vsSelDclRcdCd.split(",");
						var vsSelDclRcdNm = util.Control.getValue(app, "ipbDclRcdNm");
						var vsSelDclRcdNm = vsSelDclRcdNm.split(",");
						
						// 인덱스에 해당하는 학문분야
						var vsDclRptRcdCd  = util.Grid.getCellValue(app, "grdCcsCurCls", "DCL_RCD_CD", vnIdx);
						var vsDclRptRcdNm = util.Grid.getCellValue(app, "grdCcsCurCls", "DCL_RCD_NM", vnIdx);
						
						var vsNewRcdCd = "";
						var vsNewRcdNm = "";
			
						for(var j=0; j<vaSelDclRcdCd.length; j++){
							// 학문분야코드가 포함되어있는지 확인
							if(vsDclRptRcdCd.indexOf(vaSelDclRcdCd[j]) != -1){
								// 있을경우 삭제
								vsDclRptRcdCd = vsDclRptRcdCd.replace(vaSelDclRcdCd[j] ,"");
								vsDclRptRcdNm = vsDclRptRcdNm.replace(vsSelDclRcdNm[j] ,"");
								
								// 콤마 두개인경우 한개로
								vsDclRptRcdCd = vsDclRptRcdCd.replace(",," ,",");
								vsDclRptRcdNm = vsDclRptRcdNm.replace(", ," ,",");
								
								if(!ValueUtil.isNull(vsDclRptRcdCd)){
									// 첫번째가 , 일경우 없앰
									if(vsDclRptRcdCd.charAt(0) == ","){
										vsDclRptRcdCd = vsDclRptRcdCd.substring(1,vsDclRptRcdCd.length);
										vsDclRptRcdNm = vsDclRptRcdNm.substring(1,vsDclRptRcdNm.length);
										
										// 첫번째가 공백일경우 없앰
										if(vsDclRptRcdNm.charAt(0) == " "){
											vsDclRptRcdNm = vsDclRptRcdNm.substring(1,vsDclRptRcdNm.length);
										}
									}
									
									// 마지막이 , 일경우 없앰
									if(vsDclRptRcdCd.charAt(vsDclRptRcdCd.length-1) == ","){
										// 마지막이 공백일경우 없앰
										if(vsDclRptRcdNm.charAt(vsDclRptRcdNm.length-1) == " "){
											vsDclRptRcdNm = vsDclRptRcdNm.substring(0,vsDclRptRcdNm.length-1);
										}
										
										vsDclRptRcdCd = vsDclRptRcdCd.substring(0,vsDclRptRcdCd.length-1);
										vsDclRptRcdNm = vsDclRptRcdNm.substring(0,vsDclRptRcdNm.length-1);
									}
								}
			
								vbChange = true;
							}
						}	// end for j
						
						// 변경시 리피터에 반영
						if(vbChange){
							util.Grid.setCellValue(app, "grdCcsCurCls", "UPT_STATUS", "U", vnIdx);
							util.Grid.setCellValue(app, "grdCcsCurCls", "DCL_RCD_CD", vsDclRptRcdCd, vnIdx);
							util.Grid.setCellValue(app, "grdCcsCurCls", "DCL_RCD_NM", vsDclRptRcdNm, vnIdx);
							
							if(ValueUtil.fixNull(vsDclRptRcdCd).indexOf("CA21240") != -1){
								
								// 평가방법 : 절대평가[CA21001]
								util.Grid.setCellValue(app, "grdCcsCurCls", "EVAL_METHOD_RCD", "CA21001", vnIdx);
							}else {
								
								// 평가방법 : 상대평가[CA21002]
								util.Grid.setCellValue(app, "grdCcsCurCls", "EVAL_METHOD_RCD", "CA21002", vnIdx);
							}
						}
						
						if(util.Grid.getIndex(app, "grdCcsCurCls") == vnIdx){
							util.FreeForm.setValue(app, "frfCcsCurCls", "DCL_RCD_CD", vsDclRptRcdCd);
							util.FreeForm.setValue(app, "frfCcsCurCls", "DCL_RCD_NM", vsDclRptRcdNm);
							
							if(ValueUtil.fixNull(vsDclRptRcdCd).indexOf("CA21240") != -1){
								
								// 평가방법 : 절대평가[CA21001]
								util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", "CA21001");
							}else {
								
								// 평가방법 : 상대평가[CA21002]
								util.FreeForm.setValue(app, "frfCcsCurCls", "EVAL_METHOD_RCD", "CA21002");
							}
						}
					}	// end for i
				};
				
				
				/*
					검색조건 변경 시
					학문분야 명칭, 코드르 초기화 한다.
				*/
				moPage.onValueChanged_CbbCmpDivRcd = function() {
					util.DataMap.setValue(app, "dmReqDclRcd", "strDclRcd", "");
					util.DataMap.setValue(app, "dmReqDclRcd", "strDclRcdNm", "");
					util.Control.redraw(app, ["ipbDclRcdNm"]);
				};
				
				/**
				 * @desc 기등록된 교과과정인지 확인(교과그룹코드, 교과목코드)
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 10. 18
				 */
				function doChkCurCls() {
					
					var vsCuCd = util.Grid.getCellValue(app, "grdCcsCurCls", "CU_CD"); 
					var vsSbCd = util.Grid.getCellValue(app, "grdCcsCurCls", "SB_CD");
					var vsSbNm = util.Grid.getCellValue(app, "grdCcsCurCls", "SB_CD_NM");
					var vsStDt = util.Grid.getCellValue(app, "grdCcsCurCls", "ST_DT");
					var vsEndDt = util.Grid.getCellValue(app, "grdCcsCurCls", "END_DT");
					var vsUptStatus = util.Grid.getCellValue(app, "grdCcsCurCls", "UPT_STATUS");
					
					util.DataMap.setValue(app, "dmReqChkKey", "strCuCd", vsCuCd);
					util.DataMap.setValue(app, "dmReqChkKey", "strSbCd", vsSbCd);
					util.DataMap.setValue(app, "dmReqChkKey", "strSbNm", vsSbNm);
					util.DataMap.setValue(app, "dmReqChkKey", "strStDt", vsStDt);
					util.DataMap.setValue(app, "dmReqChkKey", "strEndDt", vsEndDt);
					
					if(ValueUtil.fixNull(vsUptStatus) == "N" && !ValueUtil.isNull(vsCuCd) && !ValueUtil.isNull(vsSbCd) 
						&& !ValueUtil.isNull(vsStDt) && !ValueUtil.isNull(vsEndDt)){
									
						//strCommand: doChkCurCls 
						util.Submit.send(app, "subDoChkCurCls", function(pbSuccess){
							if(pbSuccess){
								
								var vsMsg = util.DataMap.getValue(app, "dmResList", "strMsg");
								util.Control.setValue(app, "lblWarn", vsMsg);
							}	
						});
					}else {
						util.Control.setValue(app, "lblWarn", "");
					}
				};
				
				/**
				 * @desc [cbbFrfCuCd]교과그룹 onValueChanged 이벤트
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 2. 2
				 */
				moPage.onValueChanged_CbbFrfCuCd = function() {
					var vsCuCd = util.FreeForm.getValue(app, "frfCcsCurCls", "CU_CD");
					util.Grid.setCellValue(app, "grdCcsCurCls", "CU_CD", vsCuCd);
					
					// 기등록된 교과과정인지 확인(교과그룹코드, 교과목코드, 시작일자, 종료일자)
					doChkCurCls();
				};
				
				/**
				 * @desc [btnAllDisUse]일괄폐기 onClick 이벤트
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 10. 25
				 */
				moPage.onClick_BtnAllDisUse = function() {
					
					var vnRowCnt = ExtInstance.getNodeListLength("/root/resList/rptCcsCurCls/row[child::DEL_CKB='Y']");
					
					if(vnRowCnt < 1){
						// 선택된 데이터가 없습니다.
						ComMsg.warn("M008");
						return false;
					}
					
					// 폐기/복구일자 유효성 체크
					if(!util.validate(app, "dipKeyDateHistory")) return false;
					
					// 조회조건 기준일자 : 마스터 포커스용
					var vsSchKeyDate = util.DataMap.getValue(app, "dmReqKey", "strKeyDate").substring(0, 8);
					var vnCnt =  util.Grid.getRowCount(app, "grdCcsCurClsHistory");
					var vnMaxRowIdx   = null;
					for (var i = 0; i < vnCnt; i++) {
						var vnRowIdx = i+1;
						
						var vsEndDt = util.Grid.getCellValue(app, "grdCcsCurClsHistory", "END_DT", vnRowIdx).substring(0, 8);
						if (vsEndDt == "99991231") {
							vnMaxRowIdx   	= vnRowIdx;
							
							break;
						}
					}
					
					var vsStDt = util.Grid.getCellValue(app, "grdCcsCurClsHistory", "ST_DT", vnMaxRowIdx).substring(0, 8);
					
					
					var vsKeyDate = util.Control.getValue(app, "dipKeyDateHistory").substring(0, 8);
					var vsBefDate = moPage.getBefDate(vsKeyDate).substring(0, 8);
					
					// 전날자로 타겟로우의 종료일자 업데이트
					var vsMsgDate = vsBefDate.substring(0, 4) + NLS.NSCR.YEAR + vsBefDate.substring(4, 6) + NLS.NSCR.MONTH + vsBefDate.substring(6, 8) + NLS.NSCR.DAY;
					
					// "@부로 폐기합니다. \n진행하시겠습니까?" 메시지
					if(util.Msg.confirm("NLS-CRM-M047", [vsMsgDate]) ){
						util.DataMap.setValue(app, "dmReqKey", "strBefDate", vsBefDate);
					
						var vnSelectRowCnt = ExtInstance.getNodeListLength("/root/resList/rptCcsCurCls/row[child::DEL_CKB='Y']");
						var vsIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdCcsCurCls");
						var vaIdx = vsIdx.split(",");
			
						for(var i=0; i<vnSelectRowCnt; i++){
							var vnIdx = vaIdx[i];
							
							util.Grid.setRowState(app, "grdCcsCurCls", cpr.data.tabledata.RowState.UPDATED, vnIdx);
						}
						
						/*
							그리드에 pk_colvalues를 넣는다.
							조회 후 찾아주기 위함.
						*/
						if(vsSchKeyDate+"000000" >= vsStDt+"000000"){
							var vsPKValue = ExtRepeat.getPKColRowValues("rptCcsCurCls");
							ExtControl.getControl("rptCcsCurCls").pk_values = vsPKValue.replace("99991231", vsBefDate);
							
						}else{
							moPage.setCcsCurClsPkColRowValue("rptCcsCurCls");
						}
						
						//strCommand: doAllDisUse 
						util.Submit.send(app, "subAllDisUse", function(pbSuccess){
							if(pbSuccess) {
								
								// 디테일 저장시 마스터의 포커스를 찾아가기위한 인스턴스 설정
								var vsRefKey =  util.DataMap.getValue(app, "dmReqSelRow", "strRefKey");
								util.DataMap.setValue(app, "dmReqSelRow", "strTmpRefKey", vsRefKey);
								
								doSaveWithAcademicStructure();		
								
								util.Control.redraw(app, "grdCcsCurClsHistory");
								
								// 조회
								doList(function(pbSuccess) {
									if (pbSuccess){
										// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
										doSetMsgStatus(NLS.INF.M025);
			
										// 마스터 포커스용 인스턴스 초기화
										util.DataMap.setValue(app, "dmReqSelRow", "strTmpRefKey", "");
									}
								});
							}else {
								
								// 상태 되돌림
								for(var i=0; i<vnSelectRowCnt; i++){
									var vnIdx = vaIdx[i];
									
									util.Grid.setRowState(app, "grdCcsCurCls", cpr.data.tabledata.RowState.UNCHANGED, vnIdx);
								}
							}
						});
					}
				};
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsCurDivRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsSbCatRcdList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsDclRcdList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsEvalMethodRcdList");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD_NM"},
					{"name": "CD"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsLectTypeRcdList");
			dataSet_5.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsCmpDivRcdList");
			dataSet_6.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsSbLvlRcdList");
			dataSet_7.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsCmpDivRcdRelList");
			dataSet_8.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			
			var dataSet_9 = new cpr.data.DataSet("dsEstPrdRcdList");
			dataSet_9.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_9);
			
			var dataSet_10 = new cpr.data.DataSet("dsReTlsnYnRcdList");
			dataSet_10.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_10);
			
			var dataSet_11 = new cpr.data.DataSet("dsSbTypeRcdList");
			dataSet_11.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_11);
			
			var dataSet_12 = new cpr.data.DataSet("dsRecCiiRcdList");
			dataSet_12.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_12);
			
			var dataSet_13 = new cpr.data.DataSet("dsSbDivRcdList");
			dataSet_13.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_13);
			
			var dataSet_14 = new cpr.data.DataSet("dsSpList");
			dataSet_14.parseData({
				"columns": [
					{"name": "OBJ_CD_NM"},
					{"name": "OBJ_CD"}
				],
				"rows": []
			});
			app.register(dataSet_14);
			
			var dataSet_15 = new cpr.data.DataSet("dsCuList");
			dataSet_15.parseData({
				"columns": [
					{"name": "OBJ_CD_NM"},
					{"name": "OBJ_CD"},
					{"name": "PATH"}
				],
				"rows": []
			});
			app.register(dataSet_15);
			
			var dataSet_16 = new cpr.data.DataSet("dsCcsCurCls");
			dataSet_16.parseData({
				"info": "CCS_CUR_CLS@ST_DT,END_DT,CU_CD,CU_OBJ_DIV_RCD,SB_CD,SB_OBJ_DIV_RCD",
				"columns": [
					{"name": "DAY_DIVCLS_CNT"},
					{"name": "CU_CD"},
					{"name": "SB_CD_NM"},
					{"name": "ST_DT"},
					{"name": "SB_LVL_RCD"},
					{"name": "EST_PRD_RCD"},
					{"name": "TLSN_REQ_CAPA1"},
					{"name": "SP_CD"},
					{"name": "NIGHT_DIVCLS_CNT"},
					{"name": "CUR_DIV_RCD"},
					{"name": "EVAL_METHOD_RCD"},
					{"name": "REC_SCALE_RCD"},
					{"name": "LECT_TYPE_RCD"},
					{"name": "SB_CAT_RCD"},
					{"name": "PNT"},
					{"name": "THEO_TC"},
					{"name": "EPAC_TC"},
					{"name": "LECT_TIME_CNT"},
					{"name": "DCL_RCD_CD"},
					{"name": "MAND_SB_YN"},
					{"name": "LECT_EVAL_XCP_YN"},
					{"name": "LECT_EVAL_SUM_XCP_YN"},
					{"name": "PNT_INSTCH_YN"},
					{"name": "RE_TLSN_YN_RCD"},
					{"name": "SB_DIV_RCD"},
					{"name": "SB_TYPE_RCD"},
					{"name": "TLSN_REQ_CAPA2"},
					{"name": "TLSN_REQ_CAPA3"},
					{"name": "TLSN_REQ_CAPA4"},
					{"name": "SA_CD"},
					{"name": "SA_CD_NM"},
					{"name": "SA_OBJ_DIV_RCD"},
					{"name": "SP_OBJ_DIV_RCD"},
					{"name": "CU_OBJ_DIV_RCD"},
					{"name": "REF_KEY"},
					{"name": "SB_OBJ_DIV_RCD"},
					{"name": "FLAG_GBN"},
					{"name": "CMP_DIV_RCD"},
					{"name": "DCL_RCD_NM"},
					{"name": "SB_CD"},
					{"name": "END_DT"},
					{"name": "CU_CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_16);
			
			var dataSet_17 = new cpr.data.DataSet("dsFrfCcsCurCls");
			dataSet_17.parseData({
				"columns": [
					{"name": "DAY_DIVCLS_CNT"},
					{"name": "CU_CD"},
					{"name": "SB_CD"},
					{"name": "SB_CD_NM"},
					{"name": "ST_DT"},
					{"name": "END_DT"},
					{"name": "SB_LVL_RCD"},
					{"name": "EST_PRD_RCD"},
					{"name": "TLSN_REQ_CAPA1"},
					{"name": "SP_CD"},
					{"name": "NIGHT_DIVCLS_CNT"},
					{"name": "CUR_DIV_RCD"},
					{"name": "EVAL_METHOD_RCD"},
					{"name": "REC_SCALE_RCD"},
					{"name": "LECT_TYPE_RCD"},
					{"name": "SB_CAT_RCD"},
					{"name": "PNT"},
					{"name": "THEO_TC"},
					{"name": "EPAC_TC"},
					{"name": "LECT_TIME_CNT"},
					{"name": "DCL_RCD_CD"},
					{"name": "MAND_SB_YN"},
					{"name": "LECT_EVAL_XCP_YN"},
					{"name": "LECT_EVAL_SUM_XCP_YN"},
					{"name": "PNT_INSTCH_YN"},
					{"name": "RE_TLSN_YN_RCD"},
					{"name": "SB_DIV_RCD"},
					{"name": "SB_TYPE_RCD"},
					{"name": "TLSN_REQ_CAPA2"},
					{"name": "TLSN_REQ_CAPA3"},
					{"name": "TLSN_REQ_CAPA4"},
					{"name": "SA_CD"},
					{"name": "SA_CD_NM"},
					{"name": "SA_OBJ_DIV_RCD"},
					{"name": "SP_OBJ_DIV_RCD"},
					{"name": "CU_OBJ_DIV_RCD"},
					{"name": "REF_KEY"},
					{"name": "SB_OBJ_DIV_RCD"},
					{"name": "CMP_DIV_RCD"},
					{"name": "DCL_RCD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_17);
			
			var dataSet_18 = new cpr.data.DataSet("dsCcsCurClsHistory");
			dataSet_18.parseData({
				"info": "CCS_CUR_CLS@ST_DT,END_DT,CU_CD,CU_OBJ_DIV_RCD,SB_CD,SB_OBJ_DIV_RCD",
				"columns": [
					{"name": "DAY_DIVCLS_CNT"},
					{"name": "CU_CD"},
					{"name": "SB_CD"},
					{"name": "SB_CD_NM"},
					{"name": "ST_DT"},
					{"name": "END_DT"},
					{"name": "SB_LVL_RCD"},
					{"name": "EST_PRD_RCD"},
					{"name": "TLSN_REQ_CAPA1"},
					{"name": "SP_CD"},
					{"name": "NIGHT_DIVCLS_CNT"},
					{"name": "CUR_DIV_RCD"},
					{"name": "EVAL_METHOD_RCD"},
					{"name": "REC_SCALE_RCD"},
					{"name": "LECT_TYPE_RCD"},
					{"name": "SB_CAT_RCD"},
					{"name": "PNT"},
					{"name": "THEO_TC"},
					{"name": "EPAC_TC"},
					{"name": "LECT_TIME_CNT"},
					{"name": "DCL_RCD_CD"},
					{"name": "MAND_SB_YN"},
					{"name": "LECT_EVAL_XCP_YN"},
					{"name": "LECT_EVAL_SUM_XCP_YN"},
					{"name": "PNT_INSTCH_YN"},
					{"name": "RE_TLSN_YN_RCD"},
					{"name": "SB_DIV_RCD"},
					{"name": "SB_TYPE_RCD"},
					{"name": "TLSN_REQ_CAPA2"},
					{"name": "TLSN_REQ_CAPA3"},
					{"name": "TLSN_REQ_CAPA4"},
					{"name": "SA_CD"},
					{"name": "SA_CD_NM"},
					{"name": "SA_OBJ_DIV_RCD"},
					{"name": "SP_OBJ_DIV_RCD"},
					{"name": "CU_OBJ_DIV_RCD"},
					{"name": "REF_KEY"},
					{"name": "SB_OBJ_DIV_RCD"},
					{"name": "FLAG_GBN"},
					{"name": "CMP_DIV_RCD"},
					{"name": "DCL_RCD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_18);
			var dataMap_1 = new cpr.data.DataMap("dmResList");
			dataMap_1.parseData({
				"columns" : [{
					"name": "strMsg",
					"dataType": "string"
				}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqKey");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strAsMode",
						"dataType": "string"
					},
					{
						"name": "strObjCd",
						"dataType": "string"
					},
					{
						"name": "strKeyDate",
						"dataType": "string"
					},
					{
						"name": "strKeyDateHistory",
						"dataType": "string"
					},
					{
						"name": "strSaCd",
						"dataType": "string"
					},
					{
						"name": "strSaNm",
						"dataType": "string"
					},
					{
						"name": "strSpCd",
						"dataType": "string"
					},
					{
						"name": "strCuCd",
						"dataType": "string"
					},
					{
						"name": "strSbCd",
						"dataType": "string"
					},
					{
						"name": "strSbNm",
						"dataType": "string"
					},
					{
						"name": "strSbLvlRcd",
						"dataType": "string"
					},
					{
						"name": "strEstPrdRcd",
						"dataType": "string"
					},
					{
						"name": "strCmpDivRcd",
						"dataType": "string"
					},
					{
						"name": "strBefDate",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmReqSelRow");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "strSaCd",
						"dataType": "string"
					},
					{
						"name": "strSbCd",
						"dataType": "string"
					},
					{
						"name": "strCuCd",
						"dataType": "string"
					},
					{
						"name": "strRefKey",
						"dataType": "string"
					},
					{
						"name": "strTmpRefKey",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmResPopup");
			dataMap_4.parseData({
				"columns" : [
					{
						"name": "strObjDivRcd",
						"dataType": "string"
					},
					{
						"name": "strRefKey",
						"dataType": "string"
					},
					{
						"name": "strSbCatRcd",
						"dataType": "string"
					},
					{
						"name": "strSbDivRcd",
						"dataType": "string"
					},
					{
						"name": "strPnt",
						"dataType": "string"
					},
					{
						"name": "strTheoTc",
						"dataType": "string"
					},
					{
						"name": "strEpacTc",
						"dataType": "string"
					},
					{
						"name": "strCmpDivRcd",
						"dataType": "string"
					},
					{
						"name": "strRecScaleRcd",
						"dataType": "string"
					},
					{
						"name": "strSbTypeRcd",
						"dataType": "string"
					},
					{
						"name": "strLvlRcd",
						"dataType": "string"
					},
					{
						"name": "strEvalMethodRcd",
						"dataType": "string"
					},
					{
						"name": "strLectTypeRcd",
						"dataType": "string"
					},
					{
						"name": "strReTlsnYnRcd",
						"dataType": "string"
					},
					{
						"name": "strFrfCmpDivRcd",
						"dataType": "string"
					},
					{
						"name": "strFrfPnt",
						"dataType": "string"
					},
					{
						"name": "strFrfTheoTc",
						"dataType": "string"
					},
					{
						"name": "strFrfEpacTc",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_4);
			
			var dataMap_5 = new cpr.data.DataMap("dmReqDclRcd");
			dataMap_5.parseData({
				"columns" : [
					{
						"name": "strDclRcd",
						"dataType": "string"
					},
					{
						"name": "strDclRcdNm",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_5);
			
			var dataMap_6 = new cpr.data.DataMap("dmReqChkKey");
			dataMap_6.parseData({
				"columns" : [
					{
						"name": "strCuCd",
						"dataType": "string"
					},
					{
						"name": "strSbCd",
						"dataType": "string"
					},
					{
						"name": "strStDt",
						"dataType": "string"
					},
					{
						"name": "strEndDt",
						"dataType": "string"
					},
					{
						"name": "strSbNm",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_6);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/ccs/StdCcsCurClsFrf/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataSet_5, false);
			submission_1.addResponseData(dataSet_6, false);
			submission_1.addResponseData(dataSet_7, false);
			submission_1.addResponseData(dataSet_8, false);
			submission_1.addResponseData(dataSet_9, false);
			submission_1.addResponseData(dataSet_10, false);
			submission_1.addResponseData(dataSet_11, false);
			submission_1.addResponseData(dataSet_12, false);
			submission_1.addResponseData(dataSet_13, false);
			submission_1.addResponseData(dataMap_2, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/ccs/StdCcsCurClsFrf/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_2);
			submission_2.addResponseData(dataSet_16, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSaveHistory");
			submission_3.action = "/ccs/StdCcsCurClsFrf/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_18);
			submission_3.addRequestData(dataMap_2);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subListHistory");
			submission_4.action = "/ccs/StdCcsCurClsFrf/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_2);
			submission_4.addRequestData(dataMap_3);
			submission_4.addResponseData(dataSet_18, false);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subSave");
			submission_5.action = "/ccs/StdCcsCurClsFrf/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataSet_16);
			submission_5.addRequestData(dataMap_2);
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("subSpCuList");
			submission_6.action = "/ccs/StdCcsCurClsFrf/";
			submission_6.mediaType = "application/x-www-form-urlencoded";
			submission_6.addRequestData(dataMap_2);
			submission_6.addResponseData(dataSet_14, false);
			submission_6.addResponseData(dataSet_15, false);
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("subGetUpSaCd");
			submission_7.action = "/ccs/StdCcsCurClsFrf/";
			submission_7.mediaType = "application/x-www-form-urlencoded";
			submission_7.addRequestData(dataMap_2);
			submission_7.addResponseData(dataMap_2, false);
			app.register(submission_7);
			
			var submission_8 = new cpr.protocols.Submission("subDoChkCurCls");
			submission_8.action = "/ccs/StdCcsCurClsFrf/";
			submission_8.mediaType = "application/x-www-form-urlencoded";
			submission_8.addRequestData(dataMap_6);
			submission_8.addResponseData(dataMap_1, false);
			app.register(submission_8);
			
			var submission_9 = new cpr.protocols.Submission("subAllDisUse");
			submission_9.action = "/ccs/StdCcsCurClsFrf/";
			submission_9.mediaType = "application/x-www-form-urlencoded";
			submission_9.addRequestData(dataSet_16);
			submission_9.addRequestData(dataMap_2);
			app.register(submission_9);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaStdCmnPobjSch");
			cpr.core.App.load("app/cmn/impStdCmnPObjSch", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "680px",
				"left": "5px",
				"width": "100px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpDataDtl");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var tabFolder_1 = new cpr.controls.TabFolder("tabMain");
				
				var tabItem_1 = (function(tabFolder){
					var tabItem_1 = new cpr.controls.TabItem();
					tabItem_1.text = "tab1";
					tabItem_1.name = "tabManage";
					var group_2 = new cpr.controls.Container("grpManage");
					// Layout
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.topMargin = "0px";
					formLayout_1.rightMargin = "0px";
					formLayout_1.bottomMargin = "0px";
					formLayout_1.leftMargin = "0px";
					formLayout_1.horizontalSpacing = "0px";
					formLayout_1.verticalSpacing = "0px";
					formLayout_1.setColumns(["1fr"]);
					formLayout_1.setRows(["1fr"]);
					group_2.setLayout(formLayout_1);
					(function(container){
						var button_1 = new cpr.controls.Button("btnRestore");
						button_1.value = "";
						button_1.style.setClasses(["btn-restore"]);
						button_1.bind("value").toLanguage("UI-SCR-WRKCANCL");
						if(typeof onBtnRestoreClick == "function") {
							button_1.addEventListener("click", onBtnRestoreClick);
						}
						container.addChild(button_1, {
							"top": "5px",
							"left": "1081px",
							"width": "60px",
							"height": "25px"
						});
						var button_2 = new cpr.controls.Button("btnSave");
						button_2.value = "";
						button_2.style.setClasses(["btn-save"]);
						button_2.bind("value").toLanguage("UI-SCR-WRKSAVE");
						if(typeof onBtnSaveClick == "function") {
							button_2.addEventListener("click", onBtnSaveClick);
						}
						container.addChild(button_2, {
							"top": "5px",
							"left": "1146px",
							"width": "60px",
							"height": "25px"
						});
						var button_3 = new cpr.controls.Button("btnDel");
						button_3.value = "";
						button_3.style.setClasses(["btn-delete"]);
						button_3.bind("value").toLanguage("UI-SCR-DELETE");
						if(typeof onBtnDelClick == "function") {
							button_3.addEventListener("click", onBtnDelClick);
						}
						container.addChild(button_3, {
							"top": "5px",
							"left": "1016px",
							"width": "60px",
							"height": "25px"
						});
						var button_4 = new cpr.controls.Button("btnCopy");
						button_4.value = "";
						button_4.bind("value").toLanguage("UI-SCR-COPY");
						if(typeof onBtnCopyClick == "function") {
							button_4.addEventListener("click", onBtnCopyClick);
						}
						container.addChild(button_4, {
							"top": "5px",
							"left": "886px",
							"width": "60px",
							"height": "25px"
						});
						var button_5 = new cpr.controls.Button("btnNew");
						button_5.value = "";
						button_5.style.setClasses(["btn-new"]);
						button_5.bind("value").toLanguage("UI-SCR-NEW");
						if(typeof onBtnNewClick == "function") {
							button_5.addEventListener("click", onBtnNewClick);
						}
						container.addChild(button_5, {
							"top": "5px",
							"left": "951px",
							"width": "60px",
							"height": "25px"
						});
						var userDefinedControl_1 = new udc.com.comFormTitle();
						userDefinedControl_1.bind("title").toLanguage("UI-GLS-CUR");
						container.addChild(userDefinedControl_1, {
							"top": "5px",
							"left": "5px",
							"width": "90px",
							"height": "25px"
						});
						var group_3 = linker.group_3 = new cpr.controls.Container("frfCcsCurCls");
						group_3.style.setClasses(["form-box"]);
						// Layout
						var xYLayout_3 = new cpr.controls.layouts.XYLayout();
						group_3.setLayout(xYLayout_3);
						(function(container){
							var output_1 = new cpr.controls.Output("optFrfSblvlRcd");
							output_1.value = "";
							output_1.style.setClasses(["require"]);
							output_1.bind("value").toLanguage("UI-GLS-SHYR");
							container.addChild(output_1, {
								"top": "55px",
								"left": "240px",
								"width": "110px",
								"height": "25px"
							});
							var dateInput_1 = new cpr.controls.DateInput("dipFrfStDt");
							dateInput_1.enabled = false;
							dateInput_1.maxDate = new Date(9999, 11, 31);
							dateInput_1.userAttr({"require": "Y"});
							dateInput_1.style.css({
								"text-align" : "center"
							});
							dateInput_1.bind("fieldLabel").toExpression("#optFrfStDt.value");
							dateInput_1.bind("value").toDataColumn("ST_DT");
							container.addChild(dateInput_1, {
								"top": "5px",
								"left": "120px",
								"width": "110px",
								"height": "25px"
							});
							var output_2 = new cpr.controls.Output("optFrfStDt");
							output_2.value = "";
							output_2.style.setClasses(["require"]);
							output_2.bind("value").toLanguage("UI-DB-ST_DT");
							container.addChild(output_2, {
								"top": "5px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var output_3 = new cpr.controls.Output("optFrfEndDt");
							output_3.value = "";
							output_3.style.setClasses(["require"]);
							output_3.bind("value").toLanguage("UI-DB-END_DT");
							container.addChild(output_3, {
								"top": "5px",
								"left": "240px",
								"width": "110px",
								"height": "25px"
							});
							var dateInput_2 = new cpr.controls.DateInput("dipFrfEndDt");
							dateInput_2.enabled = false;
							dateInput_2.maxDate = new Date(9999, 11, 31);
							dateInput_2.userAttr({"require": "Y"});
							dateInput_2.style.css({
								"text-align" : "center"
							});
							dateInput_2.bind("fieldLabel").toExpression("#optFrfEndDt.value");
							dateInput_2.bind("value").toDataColumn("END_DT");
							container.addChild(dateInput_2, {
								"top": "5px",
								"left": "355px",
								"width": "110px",
								"height": "25px"
							});
							var output_4 = new cpr.controls.Output("optFrfSpCd");
							output_4.value = "";
							output_4.bind("value").toLanguage("UI-GLS-SP");
							container.addChild(output_4, {
								"top": "5px",
								"left": "815px",
								"width": "110px",
								"height": "25px"
							});
							var output_5 = new cpr.controls.Output("optFrfCmpDivRcd");
							output_5.value = "";
							output_5.style.setClasses(["require"]);
							output_5.bind("value").toLanguage("UI-DB-SUB_GBN_RCD");
							container.addChild(output_5, {
								"top": "55px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var comboBox_1 = new cpr.controls.ComboBox("cbbFrfCmpDivRcd");
							comboBox_1.bind("fieldLabel").toExpression("#optFrfCmpDivRcd.value");
							comboBox_1.bind("value").toDataColumn("CMP_DIV_RCD");
							(function(comboBox_1){
								comboBox_1.setItemSet(app.lookup("dsCmpDivRcdList"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_1);
							if(typeof onCbbFrfCmpDivRcdSelectionChange == "function") {
								comboBox_1.addEventListener("selection-change", onCbbFrfCmpDivRcdSelectionChange);
							}
							container.addChild(comboBox_1, {
								"top": "55px",
								"left": "120px",
								"width": "110px",
								"height": "25px"
							});
							var comboBox_2 = new cpr.controls.ComboBox("cbbFrfSblvlRcd");
							comboBox_2.bind("fieldLabel").toExpression("#optFrfSblvlRcd.value");
							comboBox_2.bind("value").toDataColumn("SB_LVL_RCD");
							(function(comboBox_2){
								comboBox_2.setItemSet(app.lookup("dsSbLvlRcdList"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_2);
							container.addChild(comboBox_2, {
								"top": "55px",
								"left": "355px",
								"width": "110px",
								"height": "25px"
							});
							var output_6 = new cpr.controls.Output("optFrfSbDivRcd");
							output_6.value = "";
							output_6.bind("value").toLanguage("UI-SCR-SBDIV");
							container.addChild(output_6, {
								"top": "30px",
								"left": "710px",
								"width": "110px",
								"height": "25px"
							});
							var comboBox_3 = new cpr.controls.ComboBox("cbbFrfSbDivRcd");
							comboBox_3.bind("fieldLabel").toExpression("#optFrfSbDivRcd.value");
							comboBox_3.bind("value").toDataColumn("SB_DIV_RCD");
							(function(comboBox_3){
								comboBox_3.setItemSet(app.lookup("dsSbDivRcdList"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_3);
							container.addChild(comboBox_3, {
								"top": "30px",
								"left": "825px",
								"width": "124px",
								"height": "25px"
							});
							var output_7 = new cpr.controls.Output("optFrfDclRcdNm");
							output_7.value = "";
							output_7.bind("value").toLanguage("UI-DB-DCL_RCD_NM");
							container.addChild(output_7, {
								"top": "105px",
								"left": "710px",
								"width": "110px",
								"height": "25px"
							});
							var inputBox_1 = new cpr.controls.InputBox("ipbFrfDclRcdNm");
							inputBox_1.readOnly = true;
							inputBox_1.maxLength = 100;
							inputBox_1.bind("fieldLabel").toExpression("#optFrfDclRcdNm.value");
							inputBox_1.bind("value").toDataColumn("DCL_RCD_NM");
							container.addChild(inputBox_1, {
								"top": "105px",
								"left": "825px",
								"width": "348px",
								"height": "25px"
							});
							var button_6 = new cpr.controls.Button("btnFrfDclRcd");
							button_6.value = "";
							button_6.style.setClasses(["btn-pop-search"]);
							if(typeof onBtnFrfDclRcdClick == "function") {
								button_6.addEventListener("click", onBtnFrfDclRcdClick);
							}
							container.addChild(button_6, {
								"top": "105px",
								"left": "1173px",
								"width": "20px",
								"height": "25px"
							});
							var output_8 = new cpr.controls.Output("optFrfLectTypeRcd");
							output_8.value = "";
							output_8.style.setClasses(["require"]);
							output_8.bind("value").toLanguage("UI-DB-LECT_TYPE_RCD_NM");
							container.addChild(output_8, {
								"top": "105px",
								"left": "475px",
								"width": "110px",
								"height": "25px"
							});
							var comboBox_4 = new cpr.controls.ComboBox("cbbFrfLectTypeRcd");
							comboBox_4.bind("fieldLabel").toExpression("#optFrfLectTypeRcd.value");
							comboBox_4.bind("value").toDataColumn("LECT_TYPE_RCD");
							(function(comboBox_4){
								comboBox_4.setItemSet(app.lookup("dsLectTypeRcdList"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_4);
							container.addChild(comboBox_4, {
								"top": "105px",
								"left": "590px",
								"width": "110px",
								"height": "25px"
							});
							var output_9 = new cpr.controls.Output("optFrfSbTypeRcd");
							output_9.value = "";
							output_9.bind("value").toLanguage("UI-SCR-SBTYPE");
							container.addChild(output_9, {
								"top": "104px",
								"left": "1284px",
								"width": "110px",
								"height": "25px"
							});
							var comboBox_5 = new cpr.controls.ComboBox("cbbFrfSbTypeRcd");
							comboBox_5.visible = false;
							comboBox_5.bind("fieldLabel").toExpression("#optFrfSbTypeRcd.value");
							comboBox_5.bind("value").toDataColumn("SB_TYPE_RCD");
							(function(comboBox_5){
								comboBox_5.setItemSet(app.lookup("dsSbTypeRcdList"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_5);
							container.addChild(comboBox_5, {
								"top": "104px",
								"left": "1399px",
								"width": "110px",
								"height": "25px"
							});
							var output_10 = new cpr.controls.Output("optFrfSbCatRcd");
							output_10.value = "";
							output_10.style.setClasses(["require"]);
							output_10.bind("value").toLanguage("UI-SCR-SUBCATGR");
							container.addChild(output_10, {
								"top": "80px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var comboBox_6 = new cpr.controls.ComboBox("cbbFrfSbCatRcd");
							comboBox_6.bind("fieldLabel").toExpression("#optFrfSbCatRcd.value");
							comboBox_6.bind("value").toDataColumn("SB_CAT_RCD");
							(function(comboBox_6){
								comboBox_6.setItemSet(app.lookup("dsSbCatRcdList"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_6);
							container.addChild(comboBox_6, {
								"top": "80px",
								"left": "120px",
								"width": "110px",
								"height": "25px"
							});
							var comboBox_7 = new cpr.controls.ComboBox("cbbFrfRecScaleRcd");
							comboBox_7.bind("fieldLabel").toExpression("#optFrfRecScaleRcd.value");
							comboBox_7.bind("value").toDataColumn("REC_SCALE_RCD");
							(function(comboBox_7){
								comboBox_7.setItemSet(app.lookup("dsRecCiiRcdList"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_7);
							container.addChild(comboBox_7, {
								"top": "105px",
								"left": "120px",
								"width": "110px",
								"height": "25px"
							});
							var output_11 = new cpr.controls.Output("optFrfRecScaleRcd");
							output_11.value = "";
							output_11.style.setClasses(["require"]);
							output_11.bind("value").toLanguage("UI-DB-REC_SCALE_RCD_NM");
							container.addChild(output_11, {
								"top": "105px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var comboBox_8 = new cpr.controls.ComboBox("cbbEvalMethodRcd");
							comboBox_8.bind("fieldLabel").toExpression("#optEvalMethodRcd.value");
							comboBox_8.bind("value").toDataColumn("EVAL_METHOD_RCD");
							(function(comboBox_8){
								comboBox_8.setItemSet(app.lookup("dsEvalMethodRcdList"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_8);
							container.addChild(comboBox_8, {
								"top": "105px",
								"left": "355px",
								"width": "110px",
								"height": "25px"
							});
							var output_12 = new cpr.controls.Output("optEvalMethodRcd");
							output_12.value = "";
							output_12.bind("value").toLanguage("UI-DB-EVAL_METHOD_RCD_NM");
							container.addChild(output_12, {
								"top": "105px",
								"left": "240px",
								"width": "110px",
								"height": "25px"
							});
							var output_13 = new cpr.controls.Output("optFrfReTlsnYnRcd");
							output_13.value = "";
							output_13.bind("value").toLanguage("UI-DB-RE_TLSN_YN_RCD");
							container.addChild(output_13, {
								"top": "128px",
								"left": "1284px",
								"width": "110px",
								"height": "25px"
							});
							var comboBox_9 = new cpr.controls.ComboBox("cbbFrfReTlsnYnRcd");
							comboBox_9.visible = false;
							comboBox_9.bind("fieldLabel").toExpression("#optFrfReTlsnYnRcd.value");
							comboBox_9.bind("value").toDataColumn("RE_TLSN_YN_RCD");
							(function(comboBox_9){
								comboBox_9.setItemSet(app.lookup("dsReTlsnYnRcdList"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_9);
							container.addChild(comboBox_9, {
								"top": "128px",
								"left": "1399px",
								"width": "110px",
								"height": "25px"
							});
							var output_14 = new cpr.controls.Output("optFrfPnt");
							output_14.value = "";
							output_14.style.setClasses(["require"]);
							output_14.bind("value").toLanguage("UI-DB-PNT");
							container.addChild(output_14, {
								"top": "80px",
								"left": "240px",
								"width": "110px",
								"height": "25px"
							});
							var numberEditor_1 = new cpr.controls.NumberEditor("ipbFrfPnt");
							numberEditor_1.format = "999";
							numberEditor_1.bind("fieldLabel").toExpression("#optFrfPnt.value");
							numberEditor_1.bind("value").toDataColumn("PNT");
							if(typeof onIpbFrfPntValueChange == "function") {
								numberEditor_1.addEventListener("value-change", onIpbFrfPntValueChange);
							}
							container.addChild(numberEditor_1, {
								"top": "80px",
								"left": "355px",
								"width": "110px",
								"height": "25px"
							});
							var output_15 = new cpr.controls.Output("optFrfTheoTc");
							output_15.value = "";
							output_15.bind("value").toLanguage("UI-GLS-THEO");
							container.addChild(output_15, {
								"top": "80px",
								"left": "475px",
								"width": "110px",
								"height": "25px"
							});
							var numberEditor_2 = new cpr.controls.NumberEditor("ipbFrfTheoTc");
							numberEditor_2.format = "999";
							numberEditor_2.bind("fieldLabel").toExpression("#optFrfTheoTc.value");
							numberEditor_2.bind("value").toDataColumn("THEO_TC");
							if(typeof onIpbFrfTheoTcValueChange == "function") {
								numberEditor_2.addEventListener("value-change", onIpbFrfTheoTcValueChange);
							}
							container.addChild(numberEditor_2, {
								"top": "80px",
								"left": "590px",
								"width": "110px",
								"height": "25px"
							});
							var output_16 = new cpr.controls.Output("optFrfEpacTc");
							output_16.value = "";
							output_16.bind("value").toLanguage("UI-GLS-PRAC");
							container.addChild(output_16, {
								"top": "80px",
								"left": "710px",
								"width": "110px",
								"height": "25px"
							});
							var numberEditor_3 = new cpr.controls.NumberEditor("ipbFrfEpacTc");
							numberEditor_3.format = "999";
							numberEditor_3.bind("fieldLabel").toExpression("#optFrfEpacTc.value");
							numberEditor_3.bind("value").toDataColumn("EPAC_TC");
							if(typeof onIpbFrfEpacTcValueChange == "function") {
								numberEditor_3.addEventListener("value-change", onIpbFrfEpacTcValueChange);
							}
							container.addChild(numberEditor_3, {
								"top": "80px",
								"left": "825px",
								"width": "124px",
								"height": "25px"
							});
							var checkBox_1 = new cpr.controls.CheckBox("ckbFrfMandSbYn");
							checkBox_1.visible = false;
							checkBox_1.value = "";
							checkBox_1.trueValue = "Y";
							checkBox_1.falseValue = "";
							checkBox_1.text = "필수과목";
							checkBox_1.bind("value").toDataColumn("MAND_SB_YN");
							container.addChild(checkBox_1, {
								"top": "29px",
								"left": "1259px",
								"width": "225px",
								"height": "25px"
							});
							var checkBox_2 = new cpr.controls.CheckBox("ckbFrfPntInstchYn");
							checkBox_2.visible = false;
							checkBox_2.value = "";
							checkBox_2.trueValue = "Y";
							checkBox_2.falseValue = "";
							checkBox_2.text = "학점교환과목";
							checkBox_2.bind("value").toDataColumn("PNT_INSTCH_YN");
							container.addChild(checkBox_2, {
								"top": "5px",
								"left": "1244px",
								"width": "225px",
								"height": "25px"
							});
							var inputBox_2 = new cpr.controls.InputBox("ipbFrfSbObjDIvRcd");
							inputBox_2.visible = false;
							inputBox_2.maxLength = 10;
							inputBox_2.bind("value").toDataColumn("SB_OBJ_DIV_RCD");
							container.addChild(inputBox_2, {
								"top": "5px",
								"left": "700px",
								"width": "20px",
								"height": "25px"
							});
							var inputBox_3 = new cpr.controls.InputBox("ipbFrfDclRcd");
							inputBox_3.visible = false;
							inputBox_3.maxLength = 10;
							inputBox_3.bind("value").toDataColumn("DCL_RCD_CD");
							container.addChild(inputBox_3, {
								"top": "5px",
								"left": "750px",
								"width": "20px",
								"height": "25px"
							});
							var comboBox_10 = new cpr.controls.ComboBox("cbbFrfSpCd");
							comboBox_10.visible = false;
							comboBox_10.bind("fieldLabel").toExpression("#optFrfSpCd.value");
							comboBox_10.bind("value").toDataColumn("SP_CD");
							(function(comboBox_10){
								comboBox_10.setItemSet(app.lookup("dsSpList"), {
									"label": "OBJ_CD_NM",
									"value": "OBJ_CD"
								});
							})(comboBox_10);
							if(typeof onCbbFrfSpCdSelectionChange == "function") {
								comboBox_10.addEventListener("selection-change", onCbbFrfSpCdSelectionChange);
							}
							container.addChild(comboBox_10, {
								"top": "5px",
								"left": "930px",
								"width": "110px",
								"height": "25px"
							});
							var output_17 = new cpr.controls.Output("optFrfCuCd");
							output_17.value = "";
							output_17.style.setClasses(["require"]);
							output_17.bind("value").toLanguage("UI-SCR-SUBGRUP");
							container.addChild(output_17, {
								"top": "30px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var comboBox_11 = new cpr.controls.ComboBox("cbbFrfCuCd");
							comboBox_11.bind("fieldLabel").toExpression("#optFrfCuCd.value");
							comboBox_11.bind("value").toDataColumn("CU_CD");
							(function(comboBox_11){
								comboBox_11.setItemSet(app.lookup("dsCuList"), {
									"label": "OBJ_CD_NM",
									"value": "OBJ_CD"
								});
							})(comboBox_11);
							if(typeof onCbbFrfCuCdSelectionChange == "function") {
								comboBox_11.addEventListener("selection-change", onCbbFrfCuCdSelectionChange);
							}
							container.addChild(comboBox_11, {
								"top": "30px",
								"left": "120px",
								"width": "110px",
								"height": "25px"
							});
							var output_18 = new cpr.controls.Output("optFrfSbCd");
							output_18.value = "";
							output_18.style.setClasses(["require"]);
							output_18.bind("value").toLanguage("UI-DB-SB_CD");
							container.addChild(output_18, {
								"top": "30px",
								"left": "240px",
								"width": "110px",
								"height": "25px"
							});
							var inputBox_4 = new cpr.controls.InputBox("ipbFrfSbCd");
							inputBox_4.enabled = false;
							inputBox_4.maxLength = 10;
							inputBox_4.bind("fieldLabel").toExpression("#optFrfSbCd.value");
							inputBox_4.bind("value").toDataColumn("SB_CD");
							container.addChild(inputBox_4, {
								"top": "30px",
								"left": "355px",
								"width": "110px",
								"height": "25px"
							});
							var output_19 = new cpr.controls.Output("optFrfSbNm");
							output_19.value = "";
							output_19.style.setClasses(["require"]);
							output_19.bind("value").toLanguage("UI-DB-SB_CD_NM");
							container.addChild(output_19, {
								"top": "31px",
								"left": "475px",
								"width": "110px",
								"height": "25px"
							});
							var button_7 = new cpr.controls.Button("btnFrfSbCd");
							button_7.value = "";
							button_7.style.setClasses(["btn-pop-search"]);
							if(typeof onBtnFrfSbCdClick == "function") {
								button_7.addEventListener("click", onBtnFrfSbCdClick);
							}
							container.addChild(button_7, {
								"top": "30px",
								"left": "679px",
								"width": "20px",
								"height": "25px"
							});
							var comboBox_12 = new cpr.controls.ComboBox("cbbFrfEstPrdRcd");
							comboBox_12.bind("fieldLabel").toExpression("#optFrfEstPrdRcd.value");
							comboBox_12.bind("value").toDataColumn("EST_PRD_RCD");
							(function(comboBox_12){
								comboBox_12.setItemSet(app.lookup("dsEstPrdRcdList"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_12);
							container.addChild(comboBox_12, {
								"top": "55px",
								"left": "590px",
								"width": "110px",
								"height": "25px"
							});
							var output_20 = new cpr.controls.Output("optFrfEstPrdRcd");
							output_20.value = "";
							output_20.style.setClasses(["require"]);
							output_20.bind("value").toLanguage("UI-DB-EST_PRD");
							container.addChild(output_20, {
								"top": "56px",
								"left": "475px",
								"width": "110px",
								"height": "25px"
							});
							var output_21 = new cpr.controls.Output("optFrfDayDivclsCnt");
							output_21.value = "";
							output_21.bind("value").toLanguage("UI-DB-WEEK_DIVCLS_CNT");
							container.addChild(output_21, {
								"top": "29px",
								"left": "1483px",
								"width": "110px",
								"height": "25px"
							});
							var numberEditor_4 = new cpr.controls.NumberEditor("ipbFrfDayDivclsCnt");
							numberEditor_4.visible = false;
							numberEditor_4.format = "999,999,999,999,999";
							numberEditor_4.bind("fieldLabel").toExpression("#optFrfDayDivClsCnt.value");
							numberEditor_4.bind("value").toDataColumn("DAY_DIVCLS_CNT");
							container.addChild(numberEditor_4, {
								"top": "29px",
								"left": "1598px",
								"width": "120px",
								"height": "25px"
							});
							var output_22 = new cpr.controls.Output("optFrfNightDivclsCnt");
							output_22.value = "";
							output_22.bind("value").toLanguage("UI-DB-NIGHT_DIVCLS_CNT");
							container.addChild(output_22, {
								"top": "29px",
								"left": "1728px",
								"width": "110px",
								"height": "25px"
							});
							var numberEditor_5 = new cpr.controls.NumberEditor("ipbFrfNightDivclsCnt");
							numberEditor_5.visible = false;
							numberEditor_5.format = "999,999,999,999,999";
							numberEditor_5.bind("fieldLabel").toExpression("#optFrfNightDivclsCnt.value");
							numberEditor_5.bind("value").toDataColumn("NIGHT_DIVCLS_CNT");
							container.addChild(numberEditor_5, {
								"top": "29px",
								"left": "1843px",
								"width": "125px",
								"height": "25px"
							});
							var output_23 = new cpr.controls.Output("optFrfTlsnReqCapa1");
							output_23.value = "";
							output_23.style.setClasses(["require"]);
							output_23.bind("value").toLanguage("UI-DB-TLSN_REQ_CAPA1");
							container.addChild(output_23, {
								"top": "55px",
								"left": "710px",
								"width": "110px",
								"height": "25px"
							});
							var numberEditor_6 = new cpr.controls.NumberEditor("ipbFrfTlsnReqCapa1");
							numberEditor_6.format = "999";
							numberEditor_6.bind("fieldLabel").toExpression("#optFrfTlsnReqCapa1.value");
							numberEditor_6.bind("value").toDataColumn("TLSN_REQ_CAPA1");
							if(typeof onIpbFrfTlsnReqCapa1ValueChange == "function") {
								numberEditor_6.addEventListener("value-change", onIpbFrfTlsnReqCapa1ValueChange);
							}
							container.addChild(numberEditor_6, {
								"top": "55px",
								"left": "825px",
								"width": "124px",
								"height": "25px"
							});
							var numberEditor_7 = new cpr.controls.NumberEditor("ipbFrfTlsnReqCapa2");
							numberEditor_7.visible = false;
							numberEditor_7.format = "999,999,999,999,999";
							numberEditor_7.bind("fieldLabel").toExpression("#optFrfTlsnReqCapa2.value");
							numberEditor_7.bind("value").toDataColumn("TLSN_REQ_CAPA2");
							container.addChild(numberEditor_7, {
								"top": "80px",
								"left": "1399px",
								"width": "110px",
								"height": "25px"
							});
							var output_24 = new cpr.controls.Output("optFrfTlsnReqCapa2");
							output_24.value = "";
							output_24.bind("value").toLanguage("UI-DB-TLSN_REQ_CAPA2");
							container.addChild(output_24, {
								"top": "80px",
								"left": "1284px",
								"width": "110px",
								"height": "25px"
							});
							var output_25 = new cpr.controls.Output("optFrfTlsnReqCapa3");
							output_25.value = "";
							output_25.bind("value").toLanguage("UI-DB-TLSN_REQ_CAPA3");
							container.addChild(output_25, {
								"top": "81px",
								"left": "1519px",
								"width": "110px",
								"height": "25px"
							});
							var numberEditor_8 = new cpr.controls.NumberEditor("ipbFrfTlsnReqCapa3");
							numberEditor_8.visible = false;
							numberEditor_8.format = "999,999,999,999,999";
							numberEditor_8.bind("fieldLabel").toExpression("#optFrfTlsnReqCapa3.value");
							numberEditor_8.bind("value").toDataColumn("TLSN_REQ_CAPA3");
							container.addChild(numberEditor_8, {
								"top": "80px",
								"left": "1634px",
								"width": "110px",
								"height": "25px"
							});
							var output_26 = new cpr.controls.Output("optFrfTlsnReqCapa4");
							output_26.value = "";
							output_26.bind("value").toLanguage("UI-DB-TLSNREQCAPA4");
							container.addChild(output_26, {
								"top": "80px",
								"left": "1754px",
								"width": "110px",
								"height": "25px"
							});
							var numberEditor_9 = new cpr.controls.NumberEditor("ipbFrfTlsnReqCapa4");
							numberEditor_9.visible = false;
							numberEditor_9.format = "999,999,999,999,999";
							numberEditor_9.bind("fieldLabel").toExpression("#optFrfTlsnReqCapa4.value");
							numberEditor_9.bind("value").toDataColumn("TLSN_REQ_CAPA4");
							container.addChild(numberEditor_9, {
								"top": "80px",
								"left": "1869px",
								"width": "120px",
								"height": "25px"
							});
							var output_27 = new cpr.controls.Output("optFrfLectTimeCnt");
							output_27.value = "";
							output_27.bind("value").toLanguage("UI-DB-LECT_TIME_CNT");
							container.addChild(output_27, {
								"top": "80px",
								"left": "958px",
								"width": "110px",
								"height": "25px"
							});
							var numberEditor_10 = new cpr.controls.NumberEditor("ipbFrfLectTimeCnt");
							numberEditor_10.format = "999";
							numberEditor_10.bind("fieldLabel").toExpression("#optFrfLectTimeCnt.value");
							numberEditor_10.bind("value").toDataColumn("LECT_TIME_CNT");
							if(typeof onIpbFrfLectTimeCntValueChange == "function") {
								numberEditor_10.addEventListener("value-change", onIpbFrfLectTimeCntValueChange);
							}
							container.addChild(numberEditor_10, {
								"top": "80px",
								"left": "1073px",
								"width": "120px",
								"height": "25px"
							});
							var output_28 = new cpr.controls.Output("optFrfCurDivRcd");
							output_28.value = "";
							output_28.bind("value").toLanguage("UI-SCR-SUBPRCSDIS");
							container.addChild(output_28, {
								"top": "53px",
								"left": "1284px",
								"width": "110px",
								"height": "25px"
							});
							var comboBox_13 = new cpr.controls.ComboBox("cbbFrfCurDivRcd");
							comboBox_13.visible = false;
							comboBox_13.bind("fieldLabel").toExpression("#optFrfCurDivRcd.value");
							comboBox_13.bind("value").toDataColumn("CUR_DIV_RCD");
							(function(comboBox_13){
								comboBox_13.setItemSet(app.lookup("dsSbDivRcdList"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_13);
							container.addChild(comboBox_13, {
								"top": "53px",
								"left": "1399px",
								"width": "110px",
								"height": "25px"
							});
							var checkBox_3 = new cpr.controls.CheckBox("ckbFrfLectEvalXcpYn");
							checkBox_3.value = "";
							checkBox_3.trueValue = "Y";
							checkBox_3.falseValue = "";
							checkBox_3.text = "강의평가제외";
							checkBox_3.bind("value").toDataColumn("LECT_EVAL_XCP_YN");
							container.addChild(checkBox_3, {
								"top": "129px",
								"left": "5px",
								"width": "225px",
								"height": "25px"
							});
							var checkBox_4 = new cpr.controls.CheckBox("ckbFrfLectEvalSumXcpYn");
							checkBox_4.value = "";
							checkBox_4.trueValue = "Y";
							checkBox_4.falseValue = "";
							checkBox_4.text = "강의평가집계제외";
							checkBox_4.bind("value").toDataColumn("LECT_EVAL_SUM_XCP_YN");
							container.addChild(checkBox_4, {
								"top": "129px",
								"left": "239px",
								"width": "226px",
								"height": "25px"
							});
							var inputBox_5 = new cpr.controls.InputBox("ipbFrfRefKey");
							inputBox_5.visible = false;
							inputBox_5.maxLength = 10;
							inputBox_5.bind("value").toDataColumn("REF_KEY");
							container.addChild(inputBox_5, {
								"top": "5px",
								"left": "725px",
								"width": "20px",
								"height": "25px"
							});
							var inputBox_6 = new cpr.controls.InputBox("ipbFrfSbNm");
							inputBox_6.maxLength = 100;
							inputBox_6.bind("fieldLabel").toExpression("#optFrfSbNm.value");
							inputBox_6.bind("value").toDataColumn("SB_CD_NM");
							if(typeof onIpbFrfSbNmValueChange == "function") {
								inputBox_6.addEventListener("value-change", onIpbFrfSbNmValueChange);
							}
							container.addChild(inputBox_6, {
								"top": "30px",
								"left": "590px",
								"width": "90px",
								"height": "25px"
							});
						})(group_3);
						container.addChild(group_3, {
							"top": "30px",
							"left": "5px",
							"width": "1201px",
							"height": "186px"
						});
						var output_29 = new cpr.controls.Output("optWarn");
						output_29.value = "";
						output_29.bind("value").toDataMap(app.lookup("dmResList"), "strMsg");
						container.addChild(output_29, {
							"top": "5px",
							"left": "105px",
							"width": "715px",
							"height": "25px"
						});
					})(group_2);
					tabItem_1.content = group_2;
					tabItem_1.bind("text").toLanguage("UI-SCR-DATAMANG");
					return tabItem_1;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_1);
				
				var tabItem_2 = (function(tabFolder){
					var tabItem_2 = new cpr.controls.TabItem();
					tabItem_2.text = "tab1";
					tabItem_2.name = "tabHistory";
					var group_4 = new cpr.controls.Container("grpHistory");
					// Layout
					var formLayout_2 = new cpr.controls.layouts.FormLayout();
					formLayout_2.topMargin = "0px";
					formLayout_2.rightMargin = "0px";
					formLayout_2.bottomMargin = "0px";
					formLayout_2.leftMargin = "0px";
					formLayout_2.horizontalSpacing = "0px";
					formLayout_2.verticalSpacing = "0px";
					formLayout_2.setColumns(["1fr"]);
					formLayout_2.setRows(["1fr"]);
					group_4.setLayout(formLayout_2);
					(function(container){
						var button_8 = new cpr.controls.Button("btnRecover");
						button_8.value = "";
						button_8.bind("value").toLanguage("UI-SCR-RECOVERY");
						if(typeof onBtnRecoverClick == "function") {
							button_8.addEventListener("click", onBtnRecoverClick);
						}
						container.addChild(button_8, {
							"top": "5px",
							"left": "1146px",
							"width": "60px",
							"height": "25px"
						});
						var button_9 = new cpr.controls.Button("btnDisUseCanc");
						button_9.value = "";
						button_9.bind("value").toLanguage("UI-SCR-DISUSECANCL");
						if(typeof onBtnDisUseCancClick == "function") {
							button_9.addEventListener("click", onBtnDisUseCancClick);
						}
						container.addChild(button_9, {
							"top": "5px",
							"left": "1081px",
							"width": "60px",
							"height": "25px"
						});
						var button_10 = new cpr.controls.Button("btnDisUse");
						button_10.value = "";
						button_10.bind("value").toLanguage("UI-SCR-DISUSE");
						if(typeof onBtnDisUseClick == "function") {
							button_10.addEventListener("click", onBtnDisUseClick);
						}
						container.addChild(button_10, {
							"top": "5px",
							"left": "1016px",
							"width": "60px",
							"height": "25px"
						});
						var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
						userDefinedControl_2.bind("title").toLanguage("UI-SCR-HISTORYLST");
						container.addChild(userDefinedControl_2, {
							"top": "5px",
							"left": "5px",
							"width": "255px",
							"height": "25px"
						});
						var output_30 = new cpr.controls.Output("optKeyDateHistory");
						output_30.value = "";
						output_30.style.setClasses(["require"]);
						output_30.bind("value").toLanguage("UI-SCR-DISUSERECOVDT");
						container.addChild(output_30, {
							"top": "5px",
							"left": "691px",
							"width": "110px",
							"height": "25px"
						});
						var dateInput_3 = new cpr.controls.DateInput("dipKeyDateHistory");
						dateInput_3.format = "YYYY-MM-DD";
						dateInput_3.bind("fieldLabel").toExpression("#optKeyDateHistory.value");
						dateInput_3.bind("value").toDataMap(app.lookup("dmReqKey"), "strKeyDateHistory");
						container.addChild(dateInput_3, {
							"top": "5px",
							"left": "806px",
							"width": "119px",
							"height": "25px"
						});
						var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCcsCurClsHistory");
						grid_1.init({
							"dataSet": app.lookup("dsCcsCurClsHistory"),
							"columns": [
								{"width": "25px"},
								{"width": "40px"},
								{"width": "150px"},
								{"width": "80px"},
								{"width": "120px"},
								{"width": "90px"},
								{"width": "90px"},
								{"width": "80px"},
								{"width": "90px"},
								{"width": "90px"},
								{"width": "55px"},
								{"width": "55px"},
								{"width": "55px"},
								{"width": "70px"},
								{"width": "100px"},
								{"width": "90px"},
								{"width": "135px"},
								{"width": "90px"},
								{"width": "90px"},
								{"width": "100px"},
								{"width": "95px"},
								{"width": "120px"},
								{
									"width": "80px",
									"visible": false
								},
								{
									"width": "80px",
									"visible": false
								},
								{
									"width": "90px",
									"visible": false
								},
								{
									"width": "90px",
									"visible": false
								},
								{
									"width": "95px",
									"visible": false
								},
								{
									"width": "120px",
									"visible": false
								},
								{
									"width": "110px",
									"visible": false
								},
								{
									"width": "100px",
									"visible": false
								},
								{
									"width": "100px",
									"visible": false
								},
								{
									"width": "100px",
									"visible": false
								},
								{
									"width": "100px",
									"visible": false
								},
								{
									"width": "100px",
									"visible": false
								},
								{
									"width": "150px",
									"visible": false
								},
								{
									"width": "100px",
									"visible": false
								},
								{
									"width": "120px",
									"visible": false
								},
								{
									"width": "120px",
									"visible": false
								},
								{
									"width": "120px",
									"visible": false
								},
								{
									"width": "80px",
									"visible": false
								},
								{
									"width": "100px",
									"visible": false
								},
								{
									"width": "90px",
									"visible": false
								}
							],
							"header": {
								"rows": [{"height": "27px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.text = "F";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.text = "No";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-SUBGRUP");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-SB_CD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-SB_CD_NM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-ST_DT");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-END_DT");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-GLS-SHYR");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-EST_PRD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-SUB_GBN_RCD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-PNT");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-GLS-THEO");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-GLS-PRAC");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 13},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-LECT_TIME_CNT");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 14},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-TLSN_REQ_CAPA1");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 15},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-SUBCATGR");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 16},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-GLS-DCL");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 17},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-REC_SCALE_RCD_NM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 18},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-LECT_TYPE_RCD_NM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 19},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-SBDIV");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 20},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-EXPYN");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 21},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-LECEVALSUMYN");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 22},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-WEEK_DIVCLS_CNT");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 23},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-NIGHT_DIVCLS_CNT");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 24},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-SUBPRCSDIS");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 25},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-EVAL_METHOD_RCD_NM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 26},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-ESENOBJYN");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 27},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-PNTINSTCHYN");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 28},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-RE_TLSN_YN_RCD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 29},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-SBTYPE");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 30},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-TLSN_REQ_CAPA2");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 31},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-TLSN_REQ_CAPA3");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 32},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-TLSNREQCAPA4");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 33},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-SA_CD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 34},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-SA_OBJ_DIV_RCD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 35},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-SA_CD_NM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 36},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-ISUCOURSDIS");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 37},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-SUBGRPOBJDIS");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 38},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-SUBOBJDIS");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 39},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-REF_KEY");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 40},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-DCL_RCD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 41},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-GLS-SP");
										}
									}
								]
							},
							"detail": {
								"rows": [{"height": "25px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.control = (function(){
												var output_31 = new cpr.controls.Output();
												output_31.style.css({
													"text-align" : "center"
												});
												return output_31;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.columnType = "rowindex";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.columnName = "CU_CD";
											cell.control = (function(){
												var comboBox_14 = new cpr.controls.ComboBox("gdCbbCuCdHis");
												comboBox_14.enabled = false;
												comboBox_14.hideButton = true;
												(function(comboBox_14){
													comboBox_14.setItemSet(app.lookup("dsCuList"), {
														"label": "OBJ_CD_NM",
														"value": "OBJ_CD"
													});
												})(comboBox_14);
												comboBox_14.bind("value").toDataColumn("CU_CD");
												return comboBox_14;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.columnName = "SB_CD";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.columnName = "SB_CD_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.columnName = "ST_DT";
											cell.control = (function(){
												var output_32 = new cpr.controls.Output("gdOptStDtHis");
												output_32.dataType = "date";
												output_32.format = "YYYY-MM-DD";
												output_32.style.css({
													"text-align" : "center"
												});
												output_32.bind("value").toDataColumn("ST_DT");
												return output_32;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.columnName = "END_DT";
											cell.control = (function(){
												var output_33 = new cpr.controls.Output("gdOptEndDtHis");
												output_33.dataType = "date";
												output_33.format = "YYYY-MM-DD";
												output_33.style.css({
													"text-align" : "center"
												});
												output_33.bind("value").toDataColumn("END_DT");
												return output_33;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.columnName = "SB_LVL_RCD";
											cell.control = (function(){
												var comboBox_15 = new cpr.controls.ComboBox("gdCbbSbLvlRcdHis");
												comboBox_15.enabled = false;
												comboBox_15.hideButton = true;
												(function(comboBox_15){
													comboBox_15.setItemSet(app.lookup("dsSbLvlRcdList"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_15);
												comboBox_15.bind("value").toDataColumn("SB_LVL_RCD");
												return comboBox_15;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.columnName = "EST_PRD_RCD";
											cell.control = (function(){
												var comboBox_16 = new cpr.controls.ComboBox("gdCbbEstPgdRcdHis");
												comboBox_16.enabled = false;
												comboBox_16.hideButton = true;
												(function(comboBox_16){
													comboBox_16.setItemSet(app.lookup("dsEstPrdRcdList"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_16);
												comboBox_16.bind("value").toDataColumn("EST_PRD_RCD");
												return comboBox_16;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.columnName = "CMP_DIV_RCD";
											cell.control = (function(){
												var comboBox_17 = new cpr.controls.ComboBox("gdCbbCmpDivCdHis");
												comboBox_17.enabled = false;
												comboBox_17.hideButton = true;
												(function(comboBox_17){
													comboBox_17.setItemSet(app.lookup("dsCmpDivRcdList"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_17);
												comboBox_17.bind("value").toDataColumn("CMP_DIV_RCD");
												return comboBox_17;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.columnName = "PNT";
											cell.style.css({
												"text-align" : "right"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.columnName = "THEO_TC";
											cell.style.css({
												"text-align" : "right"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.columnName = "EPAC_TC";
											cell.style.css({
												"text-align" : "right"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 13},
										"configurator": function(cell){
											cell.columnName = "LECT_TIME_CNT";
											cell.style.css({
												"text-align" : "right"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 14},
										"configurator": function(cell){
											cell.columnName = "THEO_TC";
											cell.style.css({
												"text-align" : "right"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 15},
										"configurator": function(cell){
											cell.columnName = "SB_CAT_RCD";
											cell.control = (function(){
												var comboBox_18 = new cpr.controls.ComboBox("gdCbbSbCatRcdHis");
												comboBox_18.enabled = false;
												comboBox_18.hideButton = true;
												(function(comboBox_18){
													comboBox_18.setItemSet(app.lookup("dsSbCatRcdList"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_18);
												comboBox_18.bind("value").toDataColumn("SB_CAT_RCD");
												return comboBox_18;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 16},
										"configurator": function(cell){
											cell.columnName = "DCL_RCD_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 17},
										"configurator": function(cell){
											cell.columnName = "REC_SCALE_RCD";
											cell.control = (function(){
												var comboBox_19 = new cpr.controls.ComboBox("gdCbbRecScaleRcdHis");
												comboBox_19.enabled = false;
												comboBox_19.hideButton = true;
												(function(comboBox_19){
													comboBox_19.setItemSet(app.lookup("dsRecCiiRcdList"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_19);
												comboBox_19.bind("value").toDataColumn("REC_SCALE_RCD");
												return comboBox_19;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 18},
										"configurator": function(cell){
											cell.columnName = "LECT_TYPE_RCD";
											cell.control = (function(){
												var comboBox_20 = new cpr.controls.ComboBox("gdCbbLectTypeRcdHis");
												comboBox_20.enabled = false;
												comboBox_20.hideButton = true;
												(function(comboBox_20){
													comboBox_20.setItemSet(app.lookup("dsLectTypeRcdList"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_20);
												comboBox_20.bind("value").toDataColumn("LECT_TYPE_RCD");
												return comboBox_20;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 19},
										"configurator": function(cell){
											cell.columnName = "SB_DIV_RCD";
											cell.control = (function(){
												var comboBox_21 = new cpr.controls.ComboBox("gdCbbSbDivRcdHis");
												comboBox_21.enabled = false;
												comboBox_21.hideButton = true;
												(function(comboBox_21){
													comboBox_21.setItemSet(app.lookup("dsSbDivRcdList"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_21);
												comboBox_21.bind("value").toDataColumn("SB_DIV_RCD");
												return comboBox_21;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 20},
										"configurator": function(cell){
											cell.columnName = "LECT_EVAL_XCP_YN";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 21},
										"configurator": function(cell){
											cell.columnName = "LECT_EVAL_SUM_XCP_YN";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 22},
										"configurator": function(cell){
											cell.columnName = "DAY_DIVCLS_CNT";
											cell.style.css({
												"text-align" : "right"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 23},
										"configurator": function(cell){
											cell.columnName = "NIGHT_DIVCLS_CNT";
											cell.style.css({
												"text-align" : "right"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 24},
										"configurator": function(cell){
											cell.columnName = "CUR_DIV_RCD";
											cell.control = (function(){
												var comboBox_22 = new cpr.controls.ComboBox("gdCbbCurDivRcdHis");
												comboBox_22.enabled = false;
												comboBox_22.hideButton = true;
												(function(comboBox_22){
													comboBox_22.setItemSet(app.lookup("dsCurDivRcdList"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_22);
												comboBox_22.bind("value").toDataColumn("CUR_DIV_RCD");
												return comboBox_22;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 25},
										"configurator": function(cell){
											cell.columnName = "EVAL_METHOD_RCD";
											cell.control = (function(){
												var comboBox_23 = new cpr.controls.ComboBox("gdCbbEvalMethodRcdHis");
												comboBox_23.enabled = false;
												comboBox_23.hideButton = true;
												(function(comboBox_23){
													comboBox_23.setItemSet(app.lookup("dsEvalMethodRcdList"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_23);
												comboBox_23.bind("value").toDataColumn("EVAL_METHOD_RCD");
												return comboBox_23;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 26},
										"configurator": function(cell){
											cell.columnName = "MAND_SB_YN";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 27},
										"configurator": function(cell){
											cell.columnName = "PNT_INSTCH_YN";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 28},
										"configurator": function(cell){
											cell.columnName = "RE_TLSN_YN_RCD";
											cell.control = (function(){
												var comboBox_24 = new cpr.controls.ComboBox("gdCbbReTlsnYnRcdHis");
												comboBox_24.enabled = false;
												comboBox_24.hideButton = true;
												(function(comboBox_24){
													comboBox_24.setItemSet(app.lookup("dsReTlsnYnRcdList"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_24);
												comboBox_24.bind("value").toDataColumn("RE_TLSN_YN_RCD");
												return comboBox_24;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 29},
										"configurator": function(cell){
											cell.columnName = "SB_TYPE_RCD";
											cell.control = (function(){
												var comboBox_25 = new cpr.controls.ComboBox("gdCbbSbTypeRcdHis");
												comboBox_25.enabled = false;
												comboBox_25.hideButton = true;
												(function(comboBox_25){
													comboBox_25.setItemSet(app.lookup("dsSbTypeRcdList"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_25);
												comboBox_25.bind("value").toDataColumn("SB_TYPE_RCD");
												return comboBox_25;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 30},
										"configurator": function(cell){
											cell.columnName = "TLSN_REQ_CAPA2";
											cell.style.css({
												"text-align" : "right"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 31},
										"configurator": function(cell){
											cell.columnName = "TLSN_REQ_CAPA3";
											cell.style.css({
												"text-align" : "right"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 32},
										"configurator": function(cell){
											cell.columnName = "TLSN_REQ_CAPA4";
											cell.style.css({
												"text-align" : "right"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 33},
										"configurator": function(cell){
											cell.columnName = "SA_CD";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 34},
										"configurator": function(cell){
											cell.columnName = "SA_OBJ_DIV_RCD";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 35},
										"configurator": function(cell){
											cell.columnName = "SA_CD_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 36},
										"configurator": function(cell){
											cell.columnName = "SP_OBJ_DIV_RCD";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 37},
										"configurator": function(cell){
											cell.columnName = "CU_OBJ_DIV_RCD";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 38},
										"configurator": function(cell){
											cell.columnName = "SB_OBJ_DIV_RCD";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 39},
										"configurator": function(cell){
											cell.columnName = "REF_KEY";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 40},
										"configurator": function(cell){
											cell.columnName = "DCL_RCD_CD";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 41},
										"configurator": function(cell){
											cell.columnName = "SP_CD";
											cell.control = (function(){
												var comboBox_26 = new cpr.controls.ComboBox("gdCbbSpCdHis");
												comboBox_26.enabled = false;
												comboBox_26.hideButton = true;
												(function(comboBox_26){
													comboBox_26.setItemSet(app.lookup("dsSpList"), {
														"label": "OBJ_CD_NM",
														"value": "OBJ_CD"
													});
												})(comboBox_26);
												comboBox_26.bind("value").toDataColumn("SP_CD");
												return comboBox_26;
											})();
										}
									}
								]
							}
						});
						container.addChild(grid_1, {
							"top": "30px",
							"left": "5px",
							"width": "1201px",
							"height": "184px"
						});
						var button_11 = new cpr.controls.Button("btnYearSmtHis");
						button_11.value = "";
						button_11.style.setClasses(["btn-pop-search"]);
						if(typeof onBtnYearSmtHisClick == "function") {
							button_11.addEventListener("click", onBtnYearSmtHisClick);
						}
						container.addChild(button_11, {
							"top": "7px",
							"left": "925px",
							"width": "16px",
							"height": "16px"
						});
						var button_12 = new cpr.controls.Button("btnAllDisUse");
						button_12.value = "";
						button_12.bind("value").toLanguage("UI-SCR-DISUSE");
						if(typeof onBtnAllDisUseClick == "function") {
							button_12.addEventListener("click", onBtnAllDisUseClick);
						}
						container.addChild(button_12, {
							"top": "5px",
							"left": "951px",
							"width": "60px",
							"height": "25px"
						});
					})(group_4);
					tabItem_2.content = group_4;
					tabItem_2.bind("text").toLanguage("UI-SCR-HSTMNG");
					return tabItem_2;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_2);
				tabFolder_1.setSelectedTabItem(tabItem_1);
				container.addChild(tabFolder_1, {
					"top": "60px",
					"left": "5px",
					"width": "1213px",
					"height": "221px"
				});
				var button_13 = new cpr.controls.Button("tabBtnHistory");
				button_13.value = "";
				button_13.bind("value").toLanguage("UI-SCR-HSTMNG");
				if(typeof onTabBtnHistoryClick == "function") {
					button_13.addEventListener("click", onTabBtnHistoryClick);
				}
				container.addChild(button_13, {
					"top": "30px",
					"left": "104px",
					"width": "100px",
					"height": "28px"
				});
				var button_14 = new cpr.controls.Button("tabBtnManage");
				button_14.value = "";
				button_14.bind("value").toLanguage("UI-SCR-DATAMANG");
				if(typeof onTabBtnManageClick == "function") {
					button_14.addEventListener("click", onTabBtnManageClick);
				}
				container.addChild(button_14, {
					"top": "30px",
					"left": "5px",
					"width": "100px",
					"height": "28px"
				});
				var userDefinedControl_3 = new udc.com.comFormTitle();
				userDefinedControl_3.bind("title").toLanguage("UI-SCR-CURDETAIL");
				container.addChild(userDefinedControl_3, {
					"top": "5px",
					"left": "5px",
					"width": "140px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "382px",
				"left": "5px",
				"width": "1225px",
				"height": "288px"
			});
			
			var group_5 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_4 = new cpr.controls.layouts.XYLayout();
			group_5.setLayout(xYLayout_4);
			(function(container){
				var userDefinedControl_4 = linker.userDefinedControl_4 = new udc.com.comTitle();
				userDefinedControl_4.bind("title").toLanguage("UI-SCR-SUBCURSLST");
				container.addChild(userDefinedControl_4, {
					"top": "5px",
					"left": "5px",
					"width": "215px",
					"height": "25px"
				});
				var grid_2 = linker.grid_2 = new cpr.controls.Grid("grdCcsCurCls");
				grid_2.init({
					"dataSet": app.lookup("dsCcsCurCls"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "150px"},
						{"width": "80px"},
						{"width": "120px"},
						{"width": "79px"},
						{"width": "81px"},
						{"width": "70px"},
						{"width": "75px"},
						{"width": "77px"},
						{"width": "47px"},
						{"width": "45px"},
						{"width": "46px"},
						{"width": "61px"},
						{"width": "84px"},
						{"width": "80px"},
						{"width": "175px"},
						{"width": "80px"},
						{"width": "80px"},
						{"width": "90px"},
						{"width": "100px"},
						{"width": "95px"},
						{"width": "120px"},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "90px",
							"visible": false
						},
						{
							"width": "95px",
							"visible": false
						},
						{
							"width": "120px",
							"visible": false
						},
						{
							"width": "110px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						},
						{
							"width": "150px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						},
						{
							"width": "120px",
							"visible": false
						},
						{
							"width": "120px",
							"visible": false
						},
						{
							"width": "120px",
							"visible": false
						},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						},
						{
							"width": "90px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SUBGRUP");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SB_CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SB_CD_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-ST_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-END_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SHYR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-EST_PRD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SUB_GBN_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PNT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-THEO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-PRAC");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-LECT_TIME_CNT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-TLSN_REQ_CAPA1");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SUBCATGR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-DCL");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-REC_SCALE_RCD_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-EVAL_METHOD_RCD_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 20},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-LECT_TYPE_RCD_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 21},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SBDIV");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 22},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-EXPYN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 23},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-LECEVALSUMYN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 24},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-WEEK_DIVCLS_CNT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 25},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-NIGHT_DIVCLS_CNT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 26},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SUBPRCSDIS");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 27},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-ESENOBJYN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 28},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PNTINSTCHYN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 29},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-RE_TLSN_YN_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 30},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SBTYPE");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 31},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-TLSN_REQ_CAPA2");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 32},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-TLSN_REQ_CAPA3");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 33},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-TLSNREQCAPA4");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 34},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SA_CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 35},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SA_OBJ_DIV_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 36},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SA_CD_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 37},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-ISUCOURSDIS");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 38},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SUBGRPOBJDIS");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 39},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SUBOBJDIS");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 40},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-REF_KEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 41},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-DCL_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 42},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SP");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 43},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-DCL_RCD");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_34 = new cpr.controls.Output();
										output_34.style.css({
											"text-align" : "center"
										});
										return output_34;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "CU_CD";
									cell.control = (function(){
										var comboBox_27 = new cpr.controls.ComboBox("gdCbbCuCd");
										comboBox_27.enabled = false;
										comboBox_27.hideButton = true;
										comboBox_27.userAttr({"require": "Y"});
										(function(comboBox_27){
											comboBox_27.addItem(new cpr.controls.Item("선택", ""));
											comboBox_27.setItemSet(app.lookup("dsCuList"), {
												"label": "OBJ_CD_NM",
												"value": "OBJ_CD"
											});
										})(comboBox_27);
										comboBox_27.bind("value").toDataColumn("CU_CD");
										return comboBox_27;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "SB_CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "SB_CD_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "ST_DT";
									cell.control = (function(){
										var output_35 = new cpr.controls.Output("gdOptStDt");
										output_35.dataType = "date";
										output_35.format = "YYYY-MM-DD";
										output_35.style.css({
											"text-align" : "center"
										});
										output_35.bind("value").toDataColumn("ST_DT");
										return output_35;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "END_DT";
									cell.control = (function(){
										var output_36 = new cpr.controls.Output("gdOptEndDt");
										output_36.dataType = "date";
										output_36.format = "YYYY-MM-DD";
										output_36.style.css({
											"text-align" : "center"
										});
										output_36.bind("value").toDataColumn("END_DT");
										return output_36;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "SB_LVL_RCD";
									cell.control = (function(){
										var comboBox_28 = new cpr.controls.ComboBox("gdCbbSbLvlRcd");
										comboBox_28.enabled = false;
										comboBox_28.hideButton = true;
										comboBox_28.userAttr({"require": "Y"});
										(function(comboBox_28){
											comboBox_28.addItem(new cpr.controls.Item("선택", ""));
											comboBox_28.setItemSet(app.lookup("dsSbLvlRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_28);
										comboBox_28.bind("value").toDataColumn("SB_LVL_RCD");
										return comboBox_28;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "EST_PRD_RCD";
									cell.control = (function(){
										var comboBox_29 = new cpr.controls.ComboBox("gdCbbEstPgdRcd");
										comboBox_29.enabled = false;
										comboBox_29.hideButton = true;
										comboBox_29.userAttr({"require": "Y"});
										(function(comboBox_29){
											comboBox_29.addItem(new cpr.controls.Item("선택", ""));
											comboBox_29.setItemSet(app.lookup("dsEstPrdRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_29);
										comboBox_29.bind("value").toDataColumn("EST_PRD_RCD");
										return comboBox_29;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "CMP_DIV_RCD";
									cell.control = (function(){
										var comboBox_30 = new cpr.controls.ComboBox("gdCbbCmpDivCd");
										comboBox_30.enabled = false;
										comboBox_30.hideButton = true;
										comboBox_30.userAttr({"require": "Y"});
										(function(comboBox_30){
											comboBox_30.addItem(new cpr.controls.Item("선택", ""));
											comboBox_30.setItemSet(app.lookup("dsCmpDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_30);
										comboBox_30.bind("value").toDataColumn("CMP_DIV_RCD");
										return comboBox_30;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "PNT";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "THEO_TC";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "EPAC_TC";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "LECT_TIME_CNT";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.columnName = "TLSN_REQ_CAPA1";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.columnName = "SB_CAT_RCD";
									cell.control = (function(){
										var comboBox_31 = new cpr.controls.ComboBox("gdCbbSbCatRcd");
										comboBox_31.enabled = false;
										comboBox_31.hideButton = true;
										comboBox_31.userAttr({"require": "Y"});
										(function(comboBox_31){
											comboBox_31.addItem(new cpr.controls.Item("선택", ""));
											comboBox_31.setItemSet(app.lookup("dsSbCatRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_31);
										comboBox_31.bind("value").toDataColumn("SB_CAT_RCD");
										return comboBox_31;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.columnName = "DCL_RCD_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.columnName = "REC_SCALE_RCD";
									cell.control = (function(){
										var comboBox_32 = new cpr.controls.ComboBox("gdCbbRecScaleRcd");
										comboBox_32.enabled = false;
										comboBox_32.hideButton = true;
										comboBox_32.userAttr({"require": "Y"});
										(function(comboBox_32){
											comboBox_32.addItem(new cpr.controls.Item("선택", ""));
											comboBox_32.setItemSet(app.lookup("dsRecCiiRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_32);
										comboBox_32.bind("value").toDataColumn("REC_SCALE_RCD");
										return comboBox_32;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.columnName = "EVAL_METHOD_RCD";
									cell.control = (function(){
										var comboBox_33 = new cpr.controls.ComboBox("gdCbbEvalMethodRcd");
										comboBox_33.enabled = false;
										comboBox_33.hideButton = true;
										(function(comboBox_33){
											comboBox_33.setItemSet(app.lookup("dsEvalMethodRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_33);
										comboBox_33.bind("value").toDataColumn("EVAL_METHOD_RCD");
										return comboBox_33;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 20},
								"configurator": function(cell){
									cell.columnName = "LECT_TYPE_RCD";
									cell.control = (function(){
										var comboBox_34 = new cpr.controls.ComboBox("gdCbbLectTypeRcd");
										comboBox_34.enabled = false;
										comboBox_34.hideButton = true;
										comboBox_34.userAttr({"require": "Y"});
										(function(comboBox_34){
											comboBox_34.addItem(new cpr.controls.Item("선택", ""));
											comboBox_34.setItemSet(app.lookup("dsLectTypeRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_34);
										comboBox_34.bind("value").toDataColumn("LECT_TYPE_RCD");
										return comboBox_34;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 21},
								"configurator": function(cell){
									cell.columnName = "SB_DIV_RCD";
									cell.control = (function(){
										var comboBox_35 = new cpr.controls.ComboBox("gdCbbSbDivRcd");
										comboBox_35.enabled = false;
										comboBox_35.hideButton = true;
										(function(comboBox_35){
											comboBox_35.setItemSet(app.lookup("dsSbDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_35);
										comboBox_35.bind("value").toDataColumn("SB_DIV_RCD");
										return comboBox_35;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 22},
								"configurator": function(cell){
									cell.columnName = "LECT_EVAL_XCP_YN";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 23},
								"configurator": function(cell){
									cell.columnName = "LECT_EVAL_SUM_XCP_YN";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 24},
								"configurator": function(cell){
									cell.columnName = "DAY_DIVCLS_CNT";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 25},
								"configurator": function(cell){
									cell.columnName = "NIGHT_DIVCLS_CNT";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 26},
								"configurator": function(cell){
									cell.columnName = "CUR_DIV_RCD";
									cell.control = (function(){
										var comboBox_36 = new cpr.controls.ComboBox("gdCbbCurDivRcd");
										comboBox_36.enabled = false;
										comboBox_36.hideButton = true;
										(function(comboBox_36){
											comboBox_36.setItemSet(app.lookup("dsCurDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_36);
										comboBox_36.bind("value").toDataColumn("CUR_DIV_RCD");
										return comboBox_36;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 27},
								"configurator": function(cell){
									cell.columnName = "MAND_SB_YN";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 28},
								"configurator": function(cell){
									cell.columnName = "PNT_INSTCH_YN";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 29},
								"configurator": function(cell){
									cell.columnName = "RE_TLSN_YN_RCD";
									cell.control = (function(){
										var comboBox_37 = new cpr.controls.ComboBox("gdCbbReTlsnYnRcd");
										comboBox_37.enabled = false;
										comboBox_37.hideButton = true;
										(function(comboBox_37){
											comboBox_37.setItemSet(app.lookup("dsReTlsnYnRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_37);
										comboBox_37.bind("value").toDataColumn("RE_TLSN_YN_RCD");
										return comboBox_37;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 30},
								"configurator": function(cell){
									cell.columnName = "SB_TYPE_RCD";
									cell.control = (function(){
										var comboBox_38 = new cpr.controls.ComboBox("gdCbbSbTypeRcd");
										comboBox_38.enabled = false;
										comboBox_38.hideButton = true;
										(function(comboBox_38){
											comboBox_38.setItemSet(app.lookup("dsSbTypeRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_38);
										comboBox_38.bind("value").toDataColumn("SB_TYPE_RCD");
										return comboBox_38;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 31},
								"configurator": function(cell){
									cell.columnName = "TLSN_REQ_CAPA2";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 32},
								"configurator": function(cell){
									cell.columnName = "TLSN_REQ_CAPA3";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 33},
								"configurator": function(cell){
									cell.columnName = "TLSN_REQ_CAPA4";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 34},
								"configurator": function(cell){
									cell.columnName = "SA_CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 35},
								"configurator": function(cell){
									cell.columnName = "SA_OBJ_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 36},
								"configurator": function(cell){
									cell.columnName = "SA_CD_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 37},
								"configurator": function(cell){
									cell.columnName = "SP_OBJ_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 38},
								"configurator": function(cell){
									cell.columnName = "CU_OBJ_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 39},
								"configurator": function(cell){
									cell.columnName = "SB_OBJ_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 40},
								"configurator": function(cell){
									cell.columnName = "REF_KEY";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 41},
								"configurator": function(cell){
									cell.columnName = "DCL_RCD_CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 42},
								"configurator": function(cell){
									cell.columnName = "SP_CD";
									cell.control = (function(){
										var comboBox_39 = new cpr.controls.ComboBox("gdCbbSpCd");
										comboBox_39.enabled = false;
										comboBox_39.hideButton = true;
										(function(comboBox_39){
											comboBox_39.setItemSet(app.lookup("dsSpList"), {
												"label": "OBJ_CD_NM",
												"value": "OBJ_CD"
											});
										})(comboBox_39);
										comboBox_39.bind("value").toDataColumn("SP_CD");
										return comboBox_39;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 43},
								"configurator": function(cell){
									cell.columnName = "CU_CD_NM";
								}
							}
						]
					}
				});
				if(typeof onGrdCcsCurClsSelectionChange == "function") {
					grid_2.addEventListener("selection-change", onGrdCcsCurClsSelectionChange);
				}
				container.addChild(grid_2, {
					"top": "30px",
					"left": "5px",
					"width": "1213px",
					"height": "245px"
				});
				var output_37 = new cpr.controls.Output("optDclRcdNm");
				output_37.value = "";
				output_37.bind("value").toLanguage("UI-DB-DCL_RCD_NM");
				container.addChild(output_37, {
					"top": "5px",
					"left": "765px",
					"width": "77px",
					"height": "25px"
				});
				var button_15 = new cpr.controls.Button("btnDclRcd");
				button_15.value = "";
				button_15.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnDclRcdClick == "function") {
					button_15.addEventListener("click", onBtnDclRcdClick);
				}
				container.addChild(button_15, {
					"top": "5px",
					"left": "1070px",
					"width": "20px",
					"height": "25px"
				});
				var button_16 = new cpr.controls.Button("btnPlus");
				button_16.value = "";
				button_16.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnPlusClick == "function") {
					button_16.addEventListener("click", onBtnPlusClick);
				}
				container.addChild(button_16, {
					"top": "5px",
					"left": "1095px",
					"width": "20px",
					"height": "25px"
				});
				var button_17 = new cpr.controls.Button("btnMinus");
				button_17.value = "";
				button_17.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnMinusClick == "function") {
					button_17.addEventListener("click", onBtnMinusClick);
				}
				container.addChild(button_17, {
					"top": "5px",
					"left": "1120px",
					"width": "20px",
					"height": "25px"
				});
				var inputBox_7 = new cpr.controls.InputBox("ipbDclRcdNm");
				inputBox_7.readOnly = true;
				inputBox_7.maxLength = 100;
				inputBox_7.bind("fieldLabel").toExpression("#optDclRcdNm.value");
				inputBox_7.bind("value").toDataMap(app.lookup("dmReqDclRcd"), "strDclRcdNm");
				container.addChild(inputBox_7, {
					"top": "5px",
					"left": "850px",
					"width": "220px",
					"height": "25px"
				});
			})(group_5);
			container.addChild(group_5, {
				"top": "97px",
				"left": "5px",
				"width": "1225px",
				"height": "280px"
			});
			
			var group_6 = new cpr.controls.Container("grpSearch");
			group_6.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_5 = new cpr.controls.layouts.XYLayout();
			group_6.setLayout(xYLayout_5);
			(function(container){
				var button_18 = new cpr.controls.Button("btnSearch");
				button_18.value = "";
				button_18.style.setClasses(["btn-search"]);
				button_18.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_18.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_18, {
					"top": "5px",
					"left": "1158px",
					"width": "60px",
					"height": "25px"
				});
				var output_38 = new cpr.controls.Output("optKeyDate");
				output_38.value = "";
				output_38.style.setClasses(["require"]);
				output_38.bind("value").toLanguage("UI-SCR-STDDT");
				container.addChild(output_38, {
					"top": "5px",
					"left": "5px",
					"width": "90px",
					"height": "25px"
				});
				var output_39 = new cpr.controls.Output("optSaNm");
				output_39.value = "";
				output_39.style.setClasses(["require"]);
				output_39.bind("value").toLanguage("UI-DB-SA_CD_NM");
				container.addChild(output_39, {
					"top": "5px",
					"left": "259px",
					"width": "90px",
					"height": "25px"
				});
				var inputBox_8 = new cpr.controls.InputBox("ipbSaCd");
				inputBox_8.maxLength = 100;
				inputBox_8.userAttr({"require": "Y"});
				inputBox_8.bind("fieldLabel").toExpression("#optSaNm.value");
				inputBox_8.bind("value").toDataMap(app.lookup("dmReqKey"), "strSaNm");
				if(typeof onIpbSaCdValueChange == "function") {
					inputBox_8.addEventListener("value-change", onIpbSaCdValueChange);
				}
				container.addChild(inputBox_8, {
					"top": "5px",
					"left": "354px",
					"width": "225px",
					"height": "25px"
				});
				var button_19 = new cpr.controls.Button("btnSaCd");
				button_19.value = "";
				button_19.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnSaCdClick == "function") {
					button_19.addEventListener("click", onBtnSaCdClick);
				}
				container.addChild(button_19, {
					"top": "5px",
					"left": "579px",
					"width": "20px",
					"height": "25px"
				});
				var dateInput_4 = new cpr.controls.DateInput("dipKeyDate");
				dateInput_4.userAttr({"require": "Y"});
				dateInput_4.style.css({
					"text-align" : "center"
				});
				dateInput_4.bind("fieldLabel").toExpression("#optKeyDate.value");
				dateInput_4.bind("value").toDataMap(app.lookup("dmReqKey"), "strKeyDate");
				container.addChild(dateInput_4, {
					"top": "5px",
					"left": "100px",
					"width": "131px",
					"height": "25px"
				});
				var button_20 = new cpr.controls.Button("btnYearSmt");
				button_20.value = "";
				button_20.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnYearSmtClick == "function") {
					button_20.addEventListener("click", onBtnYearSmtClick);
				}
				container.addChild(button_20, {
					"top": "7px",
					"left": "232px",
					"width": "16px",
					"height": "16px"
				});
				var output_40 = new cpr.controls.Output("optCuCd");
				output_40.value = "";
				output_40.bind("value").toLanguage("UI-SCR-SUBGRUP");
				container.addChild(output_40, {
					"top": "5px",
					"left": "607px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_40 = new cpr.controls.ComboBox("cbbCuCd");
				comboBox_40.bind("fieldLabel").toExpression("#optCuCd.value");
				comboBox_40.bind("value").toDataMap(app.lookup("dmReqKey"), "strCuCd");
				(function(comboBox_40){
					comboBox_40.addItem(new cpr.controls.Item("전체", ""));
					comboBox_40.setItemSet(app.lookup("dsCuList"), {
						"label": "OBJ_CD_NM",
						"value": "OBJ_CD"
					});
				})(comboBox_40);
				container.addChild(comboBox_40, {
					"top": "5px",
					"left": "711px",
					"width": "225px",
					"height": "25px"
				});
				var output_41 = new cpr.controls.Output("optSbNm");
				output_41.value = "";
				output_41.bind("value").toLanguage("UI-DB-SB_CD_NM");
				container.addChild(output_41, {
					"top": "30px",
					"left": "5px",
					"width": "90px",
					"height": "25px"
				});
				var inputBox_9 = new cpr.controls.InputBox("ipbSbNm");
				inputBox_9.maxLength = 100;
				inputBox_9.bind("fieldLabel").toExpression("#optSbNm.value");
				inputBox_9.bind("value").toDataMap(app.lookup("dmReqKey"), "strSbNm");
				if(typeof onIpbSbNmValueChange == "function") {
					inputBox_9.addEventListener("value-change", onIpbSbNmValueChange);
				}
				container.addChild(inputBox_9, {
					"top": "30px",
					"left": "100px",
					"width": "130px",
					"height": "25px"
				});
				var button_21 = new cpr.controls.Button("btnSbCd");
				button_21.value = "";
				button_21.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnSbCdClick == "function") {
					button_21.addEventListener("click", onBtnSbCdClick);
				}
				container.addChild(button_21, {
					"top": "30px",
					"left": "230px",
					"width": "20px",
					"height": "25px"
				});
				var comboBox_41 = new cpr.controls.ComboBox("cbbSpCd");
				comboBox_41.visible = false;
				comboBox_41.enabled = false;
				comboBox_41.bind("fieldLabel").toExpression("#optSpCd.value");
				comboBox_41.bind("value").toDataMap(app.lookup("dmReqKey"), "strSpCd");
				(function(comboBox_41){
					comboBox_41.addItem(new cpr.controls.Item("전체", ""));
					comboBox_41.setItemSet(app.lookup("dsSpList"), {
						"label": "OBJ_CD_NM",
						"value": "OBJ_CD"
					});
				})(comboBox_41);
				if(typeof onCbbSpCdSelectionChange == "function") {
					comboBox_41.addEventListener("selection-change", onCbbSpCdSelectionChange);
				}
				container.addChild(comboBox_41, {
					"top": "32px",
					"left": "1108px",
					"width": "110px",
					"height": "25px"
				});
				var output_42 = new cpr.controls.Output("optSpCd");
				output_42.value = "";
				output_42.bind("value").toLanguage("NLS-SCR-SPPROC");
				container.addChild(output_42, {
					"top": "32px",
					"left": "1013px",
					"width": "90px",
					"height": "25px"
				});
				var output_43 = new cpr.controls.Output("optCmpDivRcd");
				output_43.value = "";
				output_43.bind("value").toLanguage("UI-DB-SUB_GBN_RCD");
				container.addChild(output_43, {
					"top": "30px",
					"left": "716px",
					"width": "90px",
					"height": "25px"
				});
				var comboBox_42 = new cpr.controls.ComboBox("cbbCmpDivRcd");
				comboBox_42.bind("fieldLabel").toExpression("#optCmpDivRcd.value");
				comboBox_42.bind("value").toDataMap(app.lookup("dmReqKey"), "strCmpDivRcd");
				(function(comboBox_42){
					comboBox_42.addItem(new cpr.controls.Item("전체", ""));
					comboBox_42.setItemSet(app.lookup("dsCmpDivRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_42);
				if(typeof onCbbCmpDivRcdSelectionChange == "function") {
					comboBox_42.addEventListener("selection-change", onCbbCmpDivRcdSelectionChange);
				}
				container.addChild(comboBox_42, {
					"top": "30px",
					"left": "811px",
					"width": "125px",
					"height": "25px"
				});
				var output_44 = new cpr.controls.Output("optSbLvlRcd");
				output_44.value = "";
				output_44.bind("value").toLanguage("UI-GLS-SHYR");
				container.addChild(output_44, {
					"top": "30px",
					"left": "259px",
					"width": "90px",
					"height": "25px"
				});
				var comboBox_43 = new cpr.controls.ComboBox("cbbSbLvlRcd");
				comboBox_43.bind("fieldLabel").toExpression("#optSbLvlRcd.value");
				comboBox_43.bind("value").toDataMap(app.lookup("dmReqKey"), "strSbLvlRcd");
				(function(comboBox_43){
					comboBox_43.setItemSet(app.lookup("dsSbLvlRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_43);
				container.addChild(comboBox_43, {
					"top": "30px",
					"left": "354px",
					"width": "149px",
					"height": "25px"
				});
				var output_45 = new cpr.controls.Output("optEstPrdRcd");
				output_45.value = "";
				output_45.bind("value").toLanguage("UI-DB-EST_PRD");
				container.addChild(output_45, {
					"top": "30px",
					"left": "512px",
					"width": "90px",
					"height": "25px"
				});
				var comboBox_44 = new cpr.controls.ComboBox("cbbEstPrdRcd");
				comboBox_44.bind("fieldLabel").toExpression("#optEstPrdRcd.value");
				comboBox_44.bind("value").toDataMap(app.lookup("dmReqKey"), "strEstPrdRcd");
				(function(comboBox_44){
					comboBox_44.setItemSet(app.lookup("dsEstPrdRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_44);
				container.addChild(comboBox_44, {
					"top": "30px",
					"left": "607px",
					"width": "100px",
					"height": "25px"
				});
			})(group_6);
			container.addChild(group_6, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "57px"
			});
			
			var userDefinedControl_5 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_5, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var embeddedApp_2 = new cpr.controls.EmbeddedApp("emaStdCcsPSubPopup");
			cpr.core.App.load("app/ccs/impStdCcsPSubPopup", function(app) {
				if(app){
					embeddedApp_2.app = app;
				}
			});
			container.addChild(embeddedApp_2, {
				"top": "680px",
				"left": "115px",
				"width": "100px",
				"height": "25px"
			});
			
			var embeddedApp_3 = new cpr.controls.EmbeddedApp("emaSchYearSmt");
			cpr.core.App.load("app/imp/impDialogSchYearSmt", function(app) {
				if(app){
					embeddedApp_3.app = app;
				}
			});
			container.addChild(embeddedApp_3, {
				"top": "35px",
				"left": "1240px",
				"width": "325px",
				"height": "75px"
			});
			
			var embeddedApp_4 = new cpr.controls.EmbeddedApp("emaDclRcdExtend");
			cpr.core.App.load("app/ccs/impDclRcdExtend", function(app) {
				if(app){
					embeddedApp_4.app = app;
				}
			});
			container.addChild(embeddedApp_4, {
				"top": "680px",
				"left": "225px",
				"width": "100px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.group_3.setBindContext(new cpr.bind.GridSelectionContext(linker.grid_2));
			linker.userDefinedControl_2.ctrl = linker.grid_1;
			linker.userDefinedControl_4.ctrl = linker.grid_2;
		}
	});
	app.title = "교과과정관리";
	cpr.core.Platform.INSTANCE.register(app);
})();
