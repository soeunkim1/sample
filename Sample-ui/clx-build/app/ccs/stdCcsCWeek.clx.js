/*
 * App URI: app/ccs/stdCcsCWeek
 * Source Location: app/ccs/stdCcsCWeek.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/ccs/stdCcsCWeek", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCcsCWeek.xtm"/>
			
			/**
			 * 월별주관리
			 * @class stdCcsCWeek
			 * @author 박갑수 at 2016. 1. 20
			 */
			var stdCcsCWeek = function() {
				var moPage = new Page();
				// 임포트용 데이터 통신 오브젝트
				var moPObject = new Page();
				
				// 객체검색팝업 호출
				moPObject.moIdsForStdCmnPObjSch = [
				{
					controlId			:	"btnObjNm",
					iCd					:	"",
					iNm					:	"ipbObjNm",
					iObjDivRcd			:	["CC009OG"],
					iStartObject    	:   "",
					iOtDivRcd			:	"",
					iOtIsTreeView	:	"",
					iLanDivRcd		:	"",
					iKeyDate			:	"/root/resOnLoad/keyDateMap/ST_DT",
					iKeyEndDate		:	"",
					oObjDivRcd		:	"/root/reqKey/strObjDivRcd",
					oCd					:	"/root/reqKey/strObjCd",
					oCdNm				:	"ipbObjNm",
					oBegDt				:	"",
					oEndDt				:	"",
					oLanDivRcd		:	"",
					func 					:  function(){
						// 검색조건이 있을경우 조회
						var vsObjNm = util.DataMap.getValue(app, "dmReqKey", "strObjNm");
						if(!ValueUtil.isNull(vsObjNm)){
							util.Header.clickSearch(app);
						}				
					}
				}];
				
				/**
				 * @desc import 헤더 초기화
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc onLoad 실행
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onModelConstructDone_StdCcsCWeek = function() {
					
					// 리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptCcsMonWeek"]);
					// 검색조건 초기 설정
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", ["grpData"]);
					
					// 서브미션 호출
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							
							util.Control.redraw(app, ["cbbSchYearRcd", "cbbSmtRcd", "ipbObjNm"]);
							util.Control.setFocus(app, "ipbObjNm");
						}
					}, true);
				};
				
				/**
				 * @desc [cbbSchYearRcd]학년도 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onValueChanged_CbbSchYearRcd = function() {
					// 학년도 학기에 해당하는 일자 가져오기
					doGetDate();
				};
				
				/**
				 * @desc [cbbSmtRcd]학기 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onValueChanged_CbbSmtRcd = function() {
					// 학년도 학기에 해당하는 일자 가져오기
					doGetDate();
				};
				
				/**
				 * @desc 학년도 학기에 해당하는 일자 가져오기
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				function doGetDate() {
					// 시작일, 종료일, 시작 하루전일 GET
					//strCommand: date 
					util.Submit.send(app, "subDate", function(pbSuccess){
						if(pbSuccess){
						}
					});
				};
				
				/**
				 * @desc [btnObjNm]부서명(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onClick_BtnObjNm = function(sender) {
					// 객체검색팝업 호출
					doOnClickStdCmnPObjSch(sender);
				};
				
				/**
				 * @desc [ipbObjNm]부서명 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onValueChanged_IpbObjNm = function(sender) {
					// 리피트 변경사항 체크
					if(util.Grid.isModified(app, ["grdCcsMonWeek"])){
						return false;
					}
			
					// 값변경시 객체검색팝업 호출
					doOnChangeStdCmnPObjSch(sender);
				};
				
				/**
				 * @desc [btnSearch]조회 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onClick_BtnSearch = function() {
					 // 작업영역 리피트 변경 내역 체크
					if(util.Grid.isModified(app, "", "CRM")){
						return false;
					}
					
					// 조회조건 필수 체크
					if(!util.validate(app, ["cbbSchYearRcd", "cbbSmtRcd", "ipbObjNm"])){
						return false;
					}
			
					// 조회
					doList(function(pbSuccess) {
						// 조회 : "조회되었습니다." header 메세지 표시
						if (pbSuccess) util.Msg.notify(app, "NLS.INF.M024");
					});
				};
				
				/**
				 * @desc 주목록 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				function doList(poCallBackFunc) {
					
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdCcsMonWeek");	
							// 조회 후 콜백함수 수행
							if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
						}
					});
				};
				
				/**
				 * @desc [rhCkbSelect]패널 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onValueChanged_RhCkbSelect = function() {
					// 리피트 패널 설정
			//TO-BE: <ExtRepeat.selectedAllPanel> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.selectedAllPanel("rhCkbSelect");
				};
				
				/**
				 * @desc [rdDipStDt]시작일자 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onValueChanged_rdDipStDt = function() {
					// 1. 해당 날짜가 학기 시작일 종료일 사이의 날짜인지 체크 
					// 2. 시작일이 종료일보다 크거나 종료일이 시작일보다 작은지 검사
					/*
						3월에 
						시작일자를 2월 말일로 작성할수 있으므로 doCheckSmtDate 체크 로직은 제외한다.
					*/
					//if(!moPage.doCheckSmtDate("ST_DT") || !moPage.doCheckDate("ST_DT")){
					//	ExtRepeat.setValue("rptCcsMonWeek", "ST_DT", "");
					//}
					if(!doCheckDate("ST_DT")){
						util.Grid.setCellValue(app, "grdCcsMonWeek", "ST_DT", "");
					}
				};
				
				/**
				 * @desc [rdDipEndDt]종료일자 onValueChanged 이벤트
				 * @param 
				 * @return boolean
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onValueChanged_rdDipEndDt = function() {
					// 1. 해당 날짜가 학기 시작일 종료일 사이의 날짜인지 체크 
					// 2. 시작일이 종료일보다 크거나 종료일이 시작일보다 작은지 검사
					/*
						3월에 
						시작일자를 2월 말일로 작성할수 있으므로 doCheckSmtDate 체크 로직은 제외한다.
					*/
					//if(!moPage.doCheckSmtDate("END_DT") || !moPage.doCheckDate("END_DT")){
					//	ExtRepeat.setValue("rptCcsMonWeek", "END_DT", "");
					//}
					
					if( !doCheckDate("END_DT")){
						util.Grid.setCellValue(app, "grdCcsMonWeek", "END_DT", "");
					}
				};
				
				/**
				 * @desc 해당 날짜가 학기 시작일 종료일 사이의 날짜인지 체크
				 * @param psColNm		(필수) 날짜컬럼명
				 * @return boolean
				 * @author 박갑수 at 2016. 1. 20
				 */
				function doCheckSmtDate(psColNm){
					// 유효성 true or false
					var vbValid = true;
					
					// 입력일자
					var vsInputDt = util.Grid.getCellValue(app, "grdCcsMonWeek", psColNm).substring(0, 8);
					// 학기시작일자
					var vsSmtStDt = util.DataMap.getValue(app, "dmKeyDateMap", "ST_DT").substring(0, 8);
					// 학기종료일자
					var vsSmtEndDt = util.DataMap.getValue(app, "dmKeyDateMap", "END_DT").substring(0, 8);
					
					// 입력일자가 학기 시작일 종료일 사이의 날짜인지 검사
					if(!ValueUtil.isNull(vsInputDt) && (vsInputDt < vsSmtStDt || vsInputDt > vsSmtEndDt)){
						// "시작일@ 과 종료일@ 사이의 날짜만 입력할 수 있습니다." 메시지 출력.
						util.Msg.alert("NLS-WRN-M142", [vsSmtStDt, vsSmtEndDt]);
						vbValid = false;
						return vbValid;
					}
					
					return vbValid;
				};
				
				/**
				 * @desc 시작일이 종료일보다 크거나 종료일이 시작일보다 작은지 검사
				 * @param psColNm		(필수) 날짜컬럼명
				 * @return boolean
				 * @author 박갑수 at 2016. 1. 20
				 */
				function doCheckDate(psColNm){
					// 유효성 true or false
					var vbValid = true;
					
					// 시작일자
					var vsStDt = util.Grid.getCellValue(app, "grdCcsMonWeek", "ST_DT").substring(0, 8);;
					// 종료일자
					var vsEndDt = util.Grid.getCellValue(app, "grdCcsMonWeek", "END_DT").substring(0, 8);;
					
					// 시작일 유효성 체크
					if(psColNm == "ST_DT"){
						if(!ValueUtil.isNull(vsEndDt) && !ValueUtil.isNull(vsStDt) && !ValidUtil.checkValue(vsStDt, "compare(rdDipEndDt, <=)")){
							// "시작일이 종료일 보다 클 수 없습니다." 메시지 출력
							util.Msg.alert("NLS-CSS-M063");
							vbValid = false;
							return vbValid;
						}
			
					// 종료일 유효성 체크
					} else if(psColNm == "END_DT"){
						if(!ValueUtil.isNull(vsEndDt) && !ValueUtil.isNull(vsStDt) && !ValidUtil.checkValue(vsEndDt, "compare(rdDipStDt, >=)")){
							util.Msg.alert("NLS-CSS-M064");
							vbValid = false;
							return vbValid;
						}
					}
					
					return vbValid;
				};
				
				/**
				 * @desc [btnNew]신규 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onClick_BtnNew = function() {
					// 해당 리피트 insert 후 편집 시작할 컬럼 지정
					var vnIdx = util.Grid.insertRow(app, "grdCcsMonWeek", "rdCbbMm");
					
					// 신규 Defalut값 설정 
					// 학년도 : 조회조건
					var vsSchYearRcd = util.Control.getValue(app, "cbbSchYearRcd"); 
					util.Grid.setCellValue(app, "grdCcsMonWeek", "SCH_YEAR_RCD", vsSchYearRcd, vnIdx);
					
					// 학기 : 조회조건
					var vsSmtRcd = util.Control.getValue(app, "cbbSmtRcd"); 
					util.Grid.setCellValue(app, "grdCcsMonWeek", "SMT_RCD", vsSmtRcd, vnIdx);
					
					// 객체코드 : 조회조건
					var vsObjCd = util.DataMap.getValue(app, "dmReqKey", "strObjCd");
					util.Grid.setCellValue(app, "grdCcsMonWeek", "OBJ_CD", vsObjCd, vnIdx);
					
					// 객체구분코드 : 조회조건
					var vsObjDivRcd = util.DataMap.getValue(app, "dmReqKey", "strObjDivRcd");
					util.Grid.setCellValue(app, "grdCcsMonWeek", "OBJ_DIV_RCD", vsObjDivRcd, vnIdx);
					
					// 부서명 : 조회조건
					var vsObjNm = util.Control.getValue(app, "ipbObjNm"); 
					util.Grid.setCellValue(app, "grdCcsMonWeek", "OBJ_NM", vsObjNm, vnIdx);
				};
				
				/**
				 * @desc [btnDel]삭제 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onClick_BtnDel = function() {
					// 해당 리피트 delete
					util.Grid.deleteRow(app, "grdCcsMonWeek");
				};
				
				/**
				 * @desc [btnRestore]작업취소 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onClick_BtnRestore = function() {
					// 해당 리피트 상태 초기화
					util.Grid.restoreRow(app, "grdCcsMonWeek");
				};
				
				/**
				 * @desc [btnSave]작업저장 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				moPage.onClick_BtnSave = function() {
					// 작업저장
					doSave();
				};
				
				/**
				 * @desc 건물목록 변경사항 저장
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 20
				 */
				function doSave() {
					
					// 리피트 변경사항 체크
					if(!util.Grid.isModified(app, ["grdCcsMonWeek"], "MSG")){
						return false;
					}
					
					// 데이터 중복 체크(날짜, 주)
					if(!doCheckDup()){
						return false;
					}
					
					// 리피트 Validation Check
					if(!util.validate(app, "grdCcsMonWeek")) return false;
			
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccess){
						if(pbSuccess){
							doList(function(pbListSuccess) {
								// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
								if (pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
							});
						}
					});
				};
				
				 /**
				 * @desc 데이터 중복 체크
				 * @param 
				 * @return boolean
				 * @author 박갑수 at 2016. 1. 20
				 */
				function doCheckDup() {
					// 유효성 true or false
					var vbValid = true;
					
					// 리피트 ID
					var vsRptId = "rptCcsMonWeek";
					// 리피트 RowCnt
					var vnRowCnt 	= util.Grid.getRowCount(app, vsRptId);		
					// 리피트 인덱스
					var vnRptIndex 	= util.Grid.getIndex(app, vsRptId);	
					
					for (var i = 1; i <= vnRowCnt; i++) {
						
						var vsUptStatusOri = util.Grid.getCellValue(app, vsRptId, "UPT_STATUS", i);
						// 삭제일경우 Skip
						if (vsUptStatusOri == "D") continue;
							
						var vsStDtOri = util.Grid.getCellValue(app, vsRptId, "ST_DT", i).substring(0, 8);		// 비교대상 시작일자
						var vsEndDtOri = util.Grid.getCellValue(app, vsRptId, "END_DT", i).substring(0, 8);	// 비교대상 종료일자
						var vsWeekSeqOri = util.Grid.getCellValue(app, vsRptId, "WEEK_SEQ", i);				// 비교대상 주
						var vsObjCdOri = util.Grid.getCellValue(app, vsRptId, "OBJ_CD", i);							// 비교대상 오브젝트번호
						
						for (var j = 1; j <= vnRowCnt; j++) {
							// 같은 row일경우 Skip
							if (i == j) continue;
							
							var vsUptStatus = util.Grid.getCellValue(app, vsRptId, "UPT_STATUS", j);
							// 삭제일경우 Skip
							if (vsUptStatus == "D") continue;
							
							var vsStDt = util.Grid.getCellValue(app, vsRptId, "ST_DT", j).substring(0, 8);		// 비교값 시작일자
							var vsEndDt = util.Grid.getCellValue(app, vsRptId, "END_DT", j).substring(0, 8);	// 비교값 종료일자
							var vsWeekSeq = util.Grid.getCellValue(app, vsRptId, "WEEK_SEQ", j);				// 비교값 주
							var vsObjCd = util.Grid.getCellValue(app, vsRptId, "OBJ_CD", j);						// 비교대상 오브젝트번호
							var vsObjNm = util.Grid.getCellValue(app, vsRptId, "OBJ_NM", j);						// 비교대상 부서명
							
							// 다른부서일경우 Skip - 같은부서내에서만 중복체크
							if(vsObjCdOri != vsObjCd) continue;
							
							// 1. 주 중복체크
							if (vsWeekSeqOri == vsWeekSeq) {
								var vsWeekSeqTitle = ExtControl.getTextValue("rhBtnWeekSeq");
								
								//@1 @2에 중복된 @3(이)가 있습니다.
								util.Msg.alert("NLS-CCS-M019", [vsObjNm, vsWeekSeqOri + vsWeekSeqTitle, vsWeekSeqTitle]);
								vbValid = false;
								return vbValid;
							}
							
							// 2. 시간중복체크
							if((vsStDtOri >= vsStDt && vsStDtOri <= vsEndDt)
								|| (vsEndDtOri >= vsStDt && vsEndDtOri <= vsEndDt)){
							
								//@의 @주와 @주 기간에 중복이 존재합니다.
								util.Msg.alert("NLS-CCS-M018", [vsObjNm, vsWeekSeqOri, vsWeekSeq]);
								vbValid = false;
								return vbValid;
							}
						}
					}
					
					return vbValid;
				};
			
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsSchYearRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsSmtRcdList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsCcsMonWeek");
			dataSet_3.parseData({
				"info": "CCS_MON_WEEK@OBJ_CD,OBJ_DIV_RCD,SCH_YEAR_RCD,SMT_RCD,MM,WEEK_SEQ",
				"columns": [
					{"name": "OBJ_DIV_RCD"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"},
					{"name": "MM"},
					{"name": "WEEK_SEQ"},
					{"name": "ST_DT"},
					{"name": "END_DT"},
					{"name": "CRT_YN"},
					{"name": "OBJ_NM"},
					{"name": "OBJ_CD"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			var dataMap_1 = new cpr.data.DataMap("dmKeyDateMap");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "BEF_DT",
						"dataType": "string"
					},
					{
						"name": "ST_DT",
						"dataType": "string"
					},
					{
						"name": "END_DT",
						"dataType": "string"
					},
					{
						"name": "YEAR",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqKey");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strObjCd",
						"dataType": "string"
					},
					{
						"name": "strObjDivRcd",
						"dataType": "string"
					},
					{
						"name": "strObjNm",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/ccs/StdCcsWeek/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataMap_1, false);
			submission_1.addResponseData(dataMap_2, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/ccs/StdCcsWeek/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_2);
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_3, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/ccs/StdCcsWeek/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_3);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subDate");
			submission_4.action = "/cmn/StdCmnDateTime/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_1);
			submission_4.addResponseData(dataMap_1, false);
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1158px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optSchYearRcd");
				output_1.value = "";
				output_1.style.setClasses(["require"]);
				output_1.bind("value").toLanguage("UI-GLS-SCH_YEAR");
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbSchYearRcd");
				comboBox_1.userAttr({"require": "Y"});
				comboBox_1.bind("fieldLabel").toExpression("#optSchYearRcd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmKeyDateMap"), "YEAR");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("선택", ""));
					comboBox_1.setItemSet(app.lookup("dsSchYearRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				if(typeof onCbbSchYearRcdSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onCbbSchYearRcdSelectionChange);
				}
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "90px",
					"width": "100px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optSmtRcd");
				output_2.value = "";
				output_2.style.setClasses(["require"]);
				output_2.bind("value").toLanguage("UI-GLS-SMT");
				container.addChild(output_2, {
					"top": "5px",
					"left": "200px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_2 = new cpr.controls.ComboBox("cbbSmtRcd");
				comboBox_2.userAttr({"require": "Y"});
				comboBox_2.bind("fieldLabel").toExpression("#optSmtRcd.value");
				comboBox_2.bind("value").toDataMap(app.lookup("dmKeyDateMap"), "SMT");
				(function(comboBox_2){
					comboBox_2.addItem(new cpr.controls.Item("선택", ""));
					comboBox_2.setItemSet(app.lookup("dsSmtRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_2);
				if(typeof onCbbSmtRcdSelectionChange == "function") {
					comboBox_2.addEventListener("selection-change", onCbbSmtRcdSelectionChange);
				}
				container.addChild(comboBox_2, {
					"top": "5px",
					"left": "285px",
					"width": "100px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optObjNm");
				output_3.value = "";
				output_3.style.setClasses(["require"]);
				output_3.bind("value").toLanguage("UI-SCR-DEPTNM");
				container.addChild(output_3, {
					"top": "5px",
					"left": "395px",
					"width": "80px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbObjNm");
				inputBox_1.userAttr({"require": "Y"});
				inputBox_1.bind("fieldLabel").toExpression("#optObjNm.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strObjNm");
				if(typeof onIpbObjNmValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbObjNmValueChange);
				}
				container.addChild(inputBox_1, {
					"top": "5px",
					"left": "480px",
					"width": "130px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnObjNm");
				button_2.value = "";
				button_2.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnObjNmClick == "function") {
					button_2.addEventListener("click", onBtnObjNmClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "610px",
					"width": "20px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "32px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-WEEKLIST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "215px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnNew");
				button_3.value = "";
				button_3.style.setClasses(["btn-new"]);
				button_3.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewClick == "function") {
					button_3.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "963px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnDel");
				button_4.value = "";
				button_4.style.setClasses(["btn-delete"]);
				button_4.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_4.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "1028px",
					"width": "60px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button("btnRestore");
				button_5.value = "";
				button_5.style.setClasses(["btn-restore"]);
				button_5.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_5.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_5, {
					"top": "5px",
					"left": "1093px",
					"width": "60px",
					"height": "25px"
				});
				var button_6 = new cpr.controls.Button("btnSave");
				button_6.value = "";
				button_6.style.setClasses(["btn-save"]);
				button_6.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_6.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_6, {
					"top": "5px",
					"left": "1158px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCcsMonWeek");
				grid_1.init({
					"dataSet": app.lookup("dsCcsMonWeek"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "446px"},
						{"width": "130px"},
						{"width": "123px"},
						{"width": "167px"},
						{"width": "167px"},
						{"width": "90px"},
						{
							"width": "90px",
							"visible": false
						},
						{
							"width": "90px",
							"visible": false
						},
						{
							"width": "90px",
							"visible": false
						},
						{
							"width": "90px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-DEPTNM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-MM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-GLS-WEEK");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-ST_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-END_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-WEEKNOTCRT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-OBJ_CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-OBJ_DIV_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SCH_YEAR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SMT");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_4 = new cpr.controls.Output();
										output_4.style.css({
											"text-align" : "center"
										});
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "OBJ_NM";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("gdObjNm");
										inputBox_2.enabled = false;
										inputBox_2.bind("value").toDataColumn("OBJ_NM");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "MM";
									cell.control = (function(){
										var comboBox_3 = new cpr.controls.ComboBox("gdCbbMm");
										comboBox_3.style.css({
											"text-align" : "center"
										});
										(function(comboBox_3){
											comboBox_3.addItem(new cpr.controls.Item("1", "1"));
											comboBox_3.addItem(new cpr.controls.Item("2", "2"));
											comboBox_3.addItem(new cpr.controls.Item("3", "3"));
											comboBox_3.addItem(new cpr.controls.Item("4", "4"));
											comboBox_3.addItem(new cpr.controls.Item("5", "5"));
											comboBox_3.addItem(new cpr.controls.Item("6", "6"));
											comboBox_3.addItem(new cpr.controls.Item("7", "7"));
											comboBox_3.addItem(new cpr.controls.Item("8", "8"));
											comboBox_3.addItem(new cpr.controls.Item("9", "9"));
											comboBox_3.addItem(new cpr.controls.Item("10", "10"));
											comboBox_3.addItem(new cpr.controls.Item("11", "11"));
											comboBox_3.addItem(new cpr.controls.Item("12", "12"));
										})(comboBox_3);
										comboBox_3.bind("value").toDataColumn("MM");
										return comboBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "WEEK_SEQ";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("gdIpbWeekSeq");
										numberEditor_1.spinButton = false;
										numberEditor_1.format = "999,999,999,999,999";
										numberEditor_1.style.css({
											"text-align" : "center"
										});
										numberEditor_1.bind("value").toDataColumn("WEEK_SEQ");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "ST_DT";
									cell.control = (function(){
										var dateInput_1 = new cpr.controls.DateInput("gdDipStDt");
										dateInput_1.style.css({
											"text-align" : "center"
										});
										dateInput_1.bind("value").toDataColumn("ST_DT");
										return dateInput_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "END_DT";
									cell.control = (function(){
										var dateInput_2 = new cpr.controls.DateInput("gdDipEndDt");
										dateInput_2.style.css({
											"text-align" : "center"
										});
										dateInput_2.bind("value").toDataColumn("END_DT");
										return dateInput_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "CRT_YN";
									cell.control = (function(){
										var checkBox_1 = new cpr.controls.CheckBox("gdCkbCrtYn");
										checkBox_1.value = "";
										checkBox_1.trueValue = "Y";
										checkBox_1.falseValue = "";
										checkBox_1.text = "";
										checkBox_1.style.css({
											"text-align" : "center"
										});
										checkBox_1.bind("value").toDataColumn("CRT_YN");
										return checkBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "OBJ_CD";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("gdIpbObjCd");
										inputBox_3.readOnly = true;
										inputBox_3.maxLength = 10;
										inputBox_3.bind("value").toDataColumn("OBJ_CD");
										return inputBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "OBJ_DIV_RCD";
									cell.control = (function(){
										var inputBox_4 = new cpr.controls.InputBox("gdIpbObjDivRcd");
										inputBox_4.readOnly = true;
										inputBox_4.maxLength = 10;
										inputBox_4.bind("value").toDataColumn("OBJ_DIV_RCD");
										return inputBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "SCH_YEAR_RCD";
									cell.control = (function(){
										var inputBox_5 = new cpr.controls.InputBox("gdIpbSchYearRcd");
										inputBox_5.readOnly = true;
										inputBox_5.maxLength = 10;
										inputBox_5.bind("value").toDataColumn("SCH_YEAR_RCD");
										return inputBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "SMT_RCD";
									cell.control = (function(){
										var inputBox_6 = new cpr.controls.InputBox("gdIpbSmtRcd");
										inputBox_6.readOnly = true;
										inputBox_6.maxLength = 10;
										inputBox_6.bind("value").toDataColumn("SMT_RCD");
										return inputBox_6;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1213px",
					"height": "561px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "72px",
				"left": "5px",
				"width": "1225px",
				"height": "598px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaStdCmnPobjSch");
			cpr.core.App.load("app/cmn/impStdCmnPObjSch", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "675px",
				"left": "5px",
				"width": "100px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "월별주관리";
	cpr.core.Platform.INSTANCE.register(app);
})();
