/*
 * App URI: app/cgd/stdCgdCConvGrdStd
 * Source Location: app/cgd/stdCgdCConvGrdStd.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cgd/stdCgdCConvGrdStd", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCgdCConvGrdStd.xtm"/>
			
			/**
			 * 환산등급 기준관리
			 * @class stdCgdCConvGrdStd
			 * @author 박갑수 at 2016. 3. 16
			 */
			var stdCgdCConvGrdStd = function() {
				var moPage = new Page();
				
				/**
				 * @desc import 헤더 초기화
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc onLoad 실행
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onModelConstructDone_StdCgdCConvGrdStd = function() {
					
					// 리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptCgdConvGrdStd"]);
					// 검색조건 초기 설정
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", ["grpData"]);
					
					// 서브미션 호출
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							
							util.Control.redraw(app, ["cbbRecCiiRcd"]);
							util.Control.setFocus(app, "cbbRecCiiRcd");
						}
					}, true);
				};
				
				/**
				 * @desc [btnSearch]조회 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onClick_BtnSearch = function() {
					 // 작업영역 리피트 변경 내역 체크
					if(util.Grid.isModified(app, "", "CRM")){
						return false;
					}
					
					// 조회조건 필수 체크
					if(!util.validate(app, ["cbbRecCiiRcd"])){
						return false;
					}
			
					// 조회
					doList(function(pbSuccess) {
						// 조회 : "조회되었습니다." header 메세지 표시
						if (pbSuccess) util.Msg.notify(app, "NLS.INF.M024");
					});
				};
				
				/**
				 * @desc  환산등급기준관리목록 조회
				 * @param {Function} poCallBackFunc 콜백정의
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				function doList(poCallBackFunc) {
					// 성적기준구분
					var vsRecCiiRcd = util.Control.getValue(app, "cbbRecCiiRcd");
					var vsCdPrp1 = ExtInstance.getValue("/root/resOnLoad/recCiiRcdList/row", "CD_PRP1" , "child::CD='"+ vsRecCiiRcd +"'");
					util.DataMap.setValue(app, "dmReqKey", "strCdPrp1", vsCdPrp1);
					
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdCgdConvGrdStd");	
							// 조회 후 콜백함수 수행
							if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
						}
					});
				};
				
				/**
				 * @desc [rhCkbSelect]패널 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onValueChanged_RhCkbSelect = function() {
					// 리피트 패널 설정
			//TO-BE: <ExtRepeat.selectedAllPanel> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.selectedAllPanel("rhCkbSelect");
				};
				
				/**
				 * @desc [btnNew]신규 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onClick_BtnNew = function() {
					// 해당 리피트 insert 후 편집 시작할 컬럼 지정
					var vnIdx = util.Grid.insertRow(app, "grdCgdConvGrdStd", "rdCbbGrdRcd");
					
					// 신규 Defalut값 설정 
					// 성적기준구분 : 조회조건
					var vsRecCiiRcd = util.Control.getValue(app, "cbbRecCiiRcd"); 
					util.Grid.setCellValue(app, "grdCgdConvGrdStd", "REC_CII_RCD", vsRecCiiRcd, vnIdx);
				};
				
				/**
				 * @desc [btnDel]삭제 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onClick_BtnDel = function() {
					// 해당 리피트 delete
					util.Grid.deleteRow(app, "grdCgdConvGrdStd");
				};
				
				/**
				 * @desc [btnRestore]작업취소 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onClick_BtnRestore = function() {
					// 해당 리피트 상태 초기화
					util.Grid.restoreRow(app, "grdCgdConvGrdStd");
				};
				
				/**
				 * @desc [btnSave]작업저장 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onClick_BtnSave = function() {
					// 작업저장
					doSave();
				};
			
				/**
				 * @desc 점수환산관리목록 변경사항 저장
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				function doSave() {
					
					// 리피트 변경사항 체크
					if(!util.Grid.isModified(app, ["grdCgdConvGrdStd"], "MSG")){
						return false;
					}
					
					// 리피트 Validation Check
					if(!util.validate(app, "grdCgdConvGrdStd")) return false;
			
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccess){
						if(pbSuccess){
							doList(function(pbListSuccess) {
								// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
								if (pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
							});
						}
					});
				};
				
				/**
				 * @desc [rdIpbMaxGp]최대평점 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onValueChanged_RdIpbMaxGp = function() {
					ValidUtil.checkIntegerDecimal("rdIpbMaxGp", 1, 2, true);
					
					// 최대,최소평점 유효성체크
					if(!doChkGp("MAX_GP") || !doChkOverlap("MAX_GP", "MIN_GP", "MAX_GP")){
						util.Grid.setCellValue(app, "grdCgdConvGrdStd", "MAX_GP", "");
					}
				};
				
				/**
				 * @desc [rdIpbMinGp]최소평점 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onValueChanged_RdIpbMinGp = function() {
					ValidUtil.checkIntegerDecimal("rdIpbMinGp", 1, 2, true);
					
					// 최대,최소평점 유효성체크
					if(!doChkGp("MIN_GP") || !doChkOverlap("MIN_GP", "MIN_GP", "MAX_GP")){
						util.Grid.setCellValue(app, "grdCgdConvGrdStd", "MIN_GP", "");
					}
				};
				
				/**
				 * @desc [rdIpbConvGp]환산평점 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onValueChanged_RdIpbConvGp = function() {
					ValidUtil.checkIntegerDecimal("rdIpbConvGp", 1, 2, true);
				};
				
				/**
				 * @desc [rdIpbMaxScr]최대점수 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onValueChanged_RdIpbMaxScr = function() {
					ValidUtil.checkIntegerDecimal("rdIpbMaxScr", 3, 2, true);
					
					// 최대,최소점수 유효성체크
					if(!doChkScr("MAX_SCR") || !doChkOverlap("MAX_SCR", "MIN_SCR", "MAX_SCR")){
						util.Grid.setCellValue(app, "grdCgdConvGrdStd", "MAX_SCR", "");
					}
				};
				
				/**
				 * @desc [rdIpbMinScr]최소점수 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onValueChanged_RdIpbMinScr = function() {
					ValidUtil.checkIntegerDecimal("rdIpbMinScr", 3, 2, true);
					
					// 최대,최소점수 유효성체크 || 이미 입력된값 사이의 값인지 확인
					if(!doChkScr("MIN_SCR") || !doChkOverlap("MIN_SCR", "MIN_SCR", "MAX_SCR")){
						util.Grid.setCellValue(app, "grdCgdConvGrdStd", "MIN_SCR", "");
					}
				};
				
				/**
				 * @desc [rdIpbConvScr]환산점수 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 16
				 */
				moPage.onValueChanged_RdIpbConvScr = function() {
					ValidUtil.checkIntegerDecimal("rdIpbConvScr", 3, 2, true);
				};
				
				/**
				 * @desc 최대평점, 최소평점간 대소비교
				 * @param psColId		(필수) 컬럼 ID
				 * @return boolean
				 * @author 박갑수 at 2016. 3. 16
				 */
				function doChkGp(psColNm){
					// 유효성 true or false
					var vbValid = true;
					
					// 최대평점
					var vsMaxGp = util.Grid.getCellValue(app, "grdCgdConvGrdStd", "MAX_GP");
					// 최소평점
					var vsMinGp = util.Grid.getCellValue(app, "grdCgdConvGrdStd", "MIN_GP");
					
					var vsMaxGpTitle = ExtControl.getTextValue("rhBtnMaxGp");
					var vsMinGpTitle = ExtControl.getTextValue("rhBtnMinGp");
					
					// 최대평점 유효성 체크
					if(psColNm == "MAX_GP"){
						if(!ValueUtil.isNull(vsMinGp) && !ValidUtil.checkValue(Number(vsMaxGp), "compare(rdIpbMinGp, >=)")){
							// "@이(가) @보다 클 수 없습니다." 메시지 출력
							util.Msg.alert("NLS-APS-M001", [vsMinGpTitle, vsMaxGpTitle]);
							vbValid = false;
							return vbValid;
						}
			
					// 최소평점 유효성 체크
					} else if(psColNm == "MIN_GP"){
						if(!ValueUtil.isNull(vsMaxGp) && !ValidUtil.checkValue(Number(vsMinGp), "compare(rdIpbMaxGp, <=)")){
							// "@이(가) @보다 클 수 없습니다." 메시지 출력
							util.Msg.alert("NLS-APS-M001", [vsMinGpTitle, vsMaxGpTitle]);
							vbValid = false;
							return vbValid;
						}
					}
					
					return vbValid;
				};
				
				/**
				 * @desc 최대점수, 최소점수간 대소비교
				 * @param psColId		(필수) 컬럼 ID
				 * @return boolean
				 * @author 박갑수 at 2016. 3. 16
				 */
				function doChkScr(psColNm){
					// 유효성 true or false
					var vbValid = true;
					
					// 최대평점
					var vsMaxScr = util.Grid.getCellValue(app, "grdCgdConvGrdStd", "MAX_SCR");
					// 최소평점
					var vsMinScr = util.Grid.getCellValue(app, "grdCgdConvGrdStd", "MIN_SCR");
					
					var vsMaxScrTitle = ExtControl.getTextValue("rhBtnMaxScr");
					var vsMinScrTitle = ExtControl.getTextValue("rhBtnMinScr");
					
					// 최대평점 유효성 체크
					if(psColNm == "MAX_SCR"){
						if(!ValueUtil.isNull(vsMinScr) && !ValidUtil.checkValue(Number(vsMaxScr), "compare(rdIpbMinScr, >=)")){
							// "@이(가) @보다 클 수 없습니다." 메시지 출력
							util.Msg.alert("NLS-APS-M001", [vsMinScrTitle, vsMaxScrTitle]);
							vbValid = false;
							return vbValid;
						}
			
					// 최소평점 유효성 체크
					} else if(psColNm == "MIN_SCR"){
						if(!ValueUtil.isNull(vsMaxScr) && !ValidUtil.checkValue(Number(vsMinScr), "compare(rdIpbMaxScr, <=)")){
							// "@이(가) @보다 클 수 없습니다." 메시지 출력
							util.Msg.alert("NLS-APS-M001", [vsMinScrTitle, vsMaxScrTitle]);
							vbValid = false;
							return vbValid;
						}
					}
					
					return vbValid;
				};
				
				/**
				 * @desc 환산등급기준관리목록에 이미 입력된값의 사이값인지 검사
				 * @param psColId		(필수) 컬럼 ID
				 * @return boolean
				 * @author 박갑수 at 2016. 3. 16
				 */
				function doChkOverlap(psNowCol, psMinCol, psMaxCol){
					// 유효성 true or false
					var vbValid = true;
			
					// 입력값
					var vsValue = util.Grid.getCellValue(app, "grdCgdConvGrdStd", psNowCol);
					
					var vsNowIdx = util.Grid.getIndex(app, "grdCgdConvGrdStd");
					var vnRowCnt = util.Grid.getRowCount(app, "grdCgdConvGrdStd");
					
					if(!ValueUtil.isNull(vsValue)){
						for(var i=0; i<vnRowCnt; i++){
							var vnIdx = i+1;
							
							// 삭제일경우 제외
							var vsUptStatus = util.Grid.getCellValue(app, "grdCgdConvGrdStd", "UPT_STATUS", vnIdx);
							if(ValueUtil.fixNull(vsUptStatus) == "D") continue;
							// 자기자신일경우 제외
							if(vnIdx == vsNowIdx) continue;
							
							var vsMinOri = util.Grid.getCellValue(app, "grdCgdConvGrdStd", psMinCol, vnIdx);
							var vsMaxOri = util.Grid.getCellValue(app, "grdCgdConvGrdStd", psMaxCol, vnIdx);
							
							// 사이 값인지 검사
							if(Number(vsMinOri) < Number(vsValue) && Number(vsValue) < Number(vsMaxOri)){
								// "미리입력된 최소점수와 최대점수 사이에 있는 값을 입력할 수 없습니다." 메시지 출력
								util.Msg.alert("NLS-CGD-M014");
								
								vbValid = false;
								return vbValid;
							}
						}
					}
			
					return vbValid;
				};
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsRecCiiRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsCgdConvGrdStd");
			dataSet_2.parseData({
				"info": "CGD_CONV_GRD_STD@REC_CII_RCD,GRD_RCD",
				"columns": [
					{"name": "REC_CII_RCD"},
					{"name": "GRD_RCD"},
					{"name": "MAX_GP"},
					{"name": "MIN_GP"},
					{"name": "CONV_GP"},
					{"name": "MIN_SCR"},
					{"name": "MAX_SCR"},
					{"name": "CONV_SCR"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsGrdRcdList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strRecCiiRcd",
						"dataType": "string"
					},
					{
						"name": "strCdPrp1",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/cgd/StdCgdConvGrdStd/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/cgd/StdCgdConvGrdStd/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_2, false);
			submission_2.addResponseData(dataSet_3, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/cgd/StdCgdConvGrdStd/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_2);
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var userDefinedControl_1 = linker.userDefinedControl_1 = new udc.com.comTitle();
				userDefinedControl_1.bind("title").toLanguage("UI-SCR-CONVGDSTDMNGLST");
				container.addChild(userDefinedControl_1, {
					"top": "5px",
					"left": "5px",
					"width": "280px",
					"height": "25px"
				});
				var button_1 = new cpr.controls.Button("btnNew");
				button_1.value = "";
				button_1.style.setClasses(["btn-new"]);
				button_1.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewClick == "function") {
					button_1.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "963px",
					"width": "60px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnDel");
				button_2.value = "";
				button_2.style.setClasses(["btn-delete"]);
				button_2.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_2.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "1028px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnRestore");
				button_3.value = "";
				button_3.style.setClasses(["btn-restore"]);
				button_3.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_3.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "1093px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "";
				button_4.style.setClasses(["btn-save"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "1158px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCgdConvGrdStd");
				grid_1.init({
					"dataSet": app.lookup("dsCgdConvGrdStd"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "105px"},
						{"width": "170px"},
						{"width": "170px"},
						{"width": "170px"},
						{"width": "170px"},
						{"width": "170px"},
						{"width": "168px"},
						{
							"width": "100px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-GRD_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-MAX_GP");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-MIN_GP");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CONV_GP");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-MAX_SCR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-MIN_SCR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CONV_SCR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-REC_STD_RCD");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_1 = new cpr.controls.Output();
										output_1.style.css({
											"text-align" : "center"
										});
										return output_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "GRD_RCD";
									cell.control = (function(){
										var comboBox_1 = new cpr.controls.ComboBox("gdCbbGgdRcd");
										comboBox_1.userAttr({"require": "Y"});
										(function(comboBox_1){
											comboBox_1.addItem(new cpr.controls.Item("선택", ""));
											comboBox_1.setItemSet(app.lookup("dsGrdRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_1);
										comboBox_1.bind("value").toDataColumn("GRD_RCD");
										return comboBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "MAX_GP";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("gdIpbMaxGp");
										numberEditor_1.spinButton = false;
										numberEditor_1.format = "9,999";
										numberEditor_1.userAttr({"require": "Y"});
										numberEditor_1.bind("value").toDataColumn("MAX_GP");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "MIN_GP";
									cell.control = (function(){
										var numberEditor_2 = new cpr.controls.NumberEditor("gdIpbMinGp");
										numberEditor_2.spinButton = false;
										numberEditor_2.format = "9,999";
										numberEditor_2.userAttr({"require": "Y"});
										numberEditor_2.bind("value").toDataColumn("MIN_GP");
										return numberEditor_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "CONV_GP";
									cell.control = (function(){
										var numberEditor_3 = new cpr.controls.NumberEditor("gdIpbConvGp");
										numberEditor_3.spinButton = false;
										numberEditor_3.format = "9,999";
										numberEditor_3.bind("value").toDataColumn("CONV_GP");
										return numberEditor_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "MAX_SCR";
									cell.control = (function(){
										var numberEditor_4 = new cpr.controls.NumberEditor("gdIpbMaxScr");
										numberEditor_4.spinButton = false;
										numberEditor_4.format = "999,999";
										numberEditor_4.userAttr({"require": "Y"});
										numberEditor_4.bind("value").toDataColumn("MAX_SCR");
										return numberEditor_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "MIN_SCR";
									cell.control = (function(){
										var numberEditor_5 = new cpr.controls.NumberEditor("gdIpbMinScr");
										numberEditor_5.spinButton = false;
										numberEditor_5.format = "999,999";
										numberEditor_5.userAttr({"require": "Y"});
										numberEditor_5.bind("value").toDataColumn("MIN_SCR");
										return numberEditor_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "CONV_SCR";
									cell.control = (function(){
										var numberEditor_6 = new cpr.controls.NumberEditor("gdIpbConvScr");
										numberEditor_6.spinButton = false;
										numberEditor_6.format = "999,999";
										numberEditor_6.bind("value").toDataColumn("CONV_SCR");
										return numberEditor_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "REC_CII_RCD";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("gdIpbRecCiiRcd");
										inputBox_1.readOnly = true;
										inputBox_1.maxLength = 10;
										inputBox_1.bind("value").toDataColumn("REC_CII_RCD");
										return inputBox_1;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1213px",
					"height": "561px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "72px",
				"left": "5px",
				"width": "1225px",
				"height": "598px"
			});
			
			var group_2 = new cpr.controls.Container("grpSearch");
			group_2.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var button_5 = new cpr.controls.Button("btnSearch");
				button_5.value = "";
				button_5.style.setClasses(["btn-search"]);
				button_5.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_5.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_5, {
					"top": "5px",
					"left": "1158px",
					"width": "60px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optRecCiiRcd");
				output_2.value = "";
				output_2.style.setClasses(["require"]);
				output_2.bind("value").toLanguage("UI-DB-REC_STD_RCD");
				container.addChild(output_2, {
					"top": "5px",
					"left": "5px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_2 = new cpr.controls.ComboBox("cbbRecCiiRcd");
				comboBox_2.userAttr({"require": "Y"});
				comboBox_2.bind("fieldLabel").toExpression("#optRecCiiRcd.value");
				comboBox_2.bind("value").toDataMap(app.lookup("dmReqKey"), "strRecCiiRcd");
				(function(comboBox_2){
					comboBox_2.addItem(new cpr.controls.Item("선택", ""));
					comboBox_2.setItemSet(app.lookup("dsRecCiiRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_2);
				container.addChild(comboBox_2, {
					"top": "5px",
					"left": "110px",
					"width": "200px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "32px"
			});
			
			var userDefinedControl_2 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_2, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_1.ctrl = linker.grid_1;
		}
	});
	app.title = "환산등급기준관리";
	cpr.core.Platform.INSTANCE.register(app);
})();
