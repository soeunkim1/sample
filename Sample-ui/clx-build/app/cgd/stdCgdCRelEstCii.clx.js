/*
 * App URI: app/cgd/stdCgdCRelEstCii
 * Source Location: app/cgd/stdCgdCRelEstCii.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cgd/stdCgdCRelEstCii", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCgdCRelEstCii.xtm"/>
			
			/**
			 * 상대평가기준관리
			 * @class stdCgdCRelEstCii
			 * @author 박갑수 at 2016. 3. 30
			 */
			var stdCgdCRelEstCii = function() {
				var moPage = new Page();
				
				/**
				 * @desc import 헤더 초기화
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 3. 30
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc onLoad 실행
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				moPage.onModelConstructDone_StdCgdCRelEstCii = function() {
					// 리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptCgdRelEstCii"]);
					
					// 서브미션 호출
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							// 조회
							doList(function(pbSuccess) {
								// 조회 : "조회되었습니다." header 메세지 표시
								if (pbSuccess) util.Msg.notify(app, "NLS.INF.M024");
							});
						}
					}, true);
				};
				
				/**
				 * @desc 상대평가기준목록 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				function doList(poCallBackFunc) {
					
					// 전체권한일경우 - 적용제한범위 상관없이 조회
					if(moPageInfo.authRngRcd == "CC00102"){
						util.DataMap.setValue(app, "dmReqKey", "strAplyLmt", "ALL");
					}else {
						// 아닐경우 오브젝트번호 세팅
						util.DataMap.setValue(app, "dmReqKey", "strAplyLmt", moUserInfo.id);
					}
					
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdCgdRelEstCii");	
							// 조회 후 콜백함수 수행
							if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
						}
					});
				};
				
				/**
				 * @desc [rhCkbSelect]패널 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				moPage.onValueChanged_RhCkbSelect = function() {
					// 리피트 패널 설정
			//TO-BE: <ExtRepeat.selectedAllPanel> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.selectedAllPanel("rhCkbSelect");
				};
				
				/**
				 * @desc [btnNew]신규 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				moPage.onClick_BtnNew = function() {
					// 해당 리피트 insert 후 편집 시작할 컬럼 지정
					var vnIdx = util.Grid.insertRow(app, "grdCgdRelEstCii", "rdCbbRelEstCiiCd");
					
					// 전체권한[CC00102] 
					if (moPageInfo.authRngRcd != "CC00102") {
						util.Grid.setCellValue(app, "grdCgdRelEstCii", "APLY_LMT", moUserInfo.id, vnIdx);
					}
				};
				
				/**
				 * @desc [btnDel]삭제 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				moPage.onClick_BtnDel = function() {
					// 해당 리피트 delete
					util.Grid.deleteRow(app, "grdCgdRelEstCii");
				};
				
				/**
				 * @desc [btnRestore]작업취소 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				moPage.onClick_BtnRestore = function() {
					// 해당 리피트 상태 초기화
					util.Grid.restoreRow(app, "grdCgdRelEstCii");
				};
				
				/**
				 * @desc [btnSave]작업저장 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				moPage.onClick_BtnSave = function() {
					// 작업저장
					doSave();
				};
				
				/**
				 * @desc 표준등급체계관리목록 변경사항 저장
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				function doSave() {
					
					// 리피트 변경사항 체크
					if(!util.Grid.isModified(app, ["grdCgdRelEstCii"], "MSG")){
						return false;
					}
			
					// 리피트 Validation Check
					if(!util.validate(app, "grdCgdRelEstCii")) return false;
			
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccess){
						if(pbSuccess){
							
							// PK값으로 rowSelect
							var vsPkValue = util.DataMap.getValue(app, "dmResSave", "strPk");
							if(!ValueUtil.isNull(vsPkValue)){
								ExtControl.getControl("rptCgdRelEstCii").pk_values =  vsPkValue;
							}
							
							doList(function(pbListSuccess) {
								// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
								if (pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
							});
						}
					});
				};
			
				/**
				 * @desc [rdCbbRecCiiRcd]성적기준구분 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				moPage.onValueChanged_RdCbbRecCiiRcd = function() {
					// 하한등급코드, 상한등급코드 초기화
					var vnIdx = util.Grid.getIndex(app, "grdCgdRelEstCii");
					util.Grid.setCellValue(app, "grdCgdRelEstCii", "MIN_GRD_RCD", "", vnIdx);
					util.Grid.setCellValue(app, "grdCgdRelEstCii", "MAX_GRD_RCD", "", vnIdx);
				};
				
				/**
				 * @desc [rdCbbRelEstCiiCd]상대평가기준 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				moPage.onValueChanged_RdCbbRelEstCiiCd = function() {
					// 기준명 세팅
					var vnIdx = util.Grid.getIndex(app, "grdCgdRelEstCii");
					var vsRelEstCiiCd = util.Grid.getCellValue(app, "grdCgdRelEstCii", "REL_EST_CII_CD", vnIdx);
					util.Grid.setCellValue(app, "grdCgdRelEstCii", "CII_NM", vsRelEstCiiCd.substr(5, 7), vnIdx);
				};
				
				/**
				 * @desc [rdCbbMinGrdRcd]하한등급코드 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				moPage.onValueChanged_RdCbbMinGrdRcd = function() {
					// 하한등급,상한등급 유효성체크
					if(!doChkGrdRcd("MIN_GRD_RCD")){
						util.Grid.setCellValue(app, "grdCgdRelEstCii", "MIN_GRD_RCD", "");
					}
				};
				
				/**
				 * @desc [rdCbbMaxGrdRcd]상한등급코드 onValueChanged 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 30
				 */
				moPage.onValueChanged_RdCbbMaxGrdRcd = function() {
					// 하한등급,상한등급 유효성체크
					if(!doChkGrdRcd("MAX_GRD_RCD")){
						util.Grid.setCellValue(app, "grdCgdRelEstCii", "MAX_GRD_RCD", "");
					}
				};
				
				/**
				 * @desc 하한등급,상한등급간 대소비교
				 * @param psColId		(필수) 컬럼 ID
				 * @return boolean
				 * @author 박갑수 at 2016. 3. 30
				 */
				function doChkGrdRcd(psColNm){
					// 유효성 true or false
					var vbValid = true;
					
					// 성적기준구분
					var vsRecCiiRcd = util.Grid.getCellValue(app, "grdCgdRelEstCii", "REC_CII_RCD");
					// 하한등급
					var vsMinGrdRcd = util.Grid.getCellValue(app, "grdCgdRelEstCii", "MIN_GRD_RCD");
					// 상한비율
					var vsMaxGrdRcd = util.Grid.getCellValue(app, "grdCgdRelEstCii", "MAX_GRD_RCD");
					
					var vsMinGrdRcdTitle = ExtControl.getTextValue("rhBtnMinGrdRcd");
					var vsMinGrdRcdTitle = ExtControl.getTextValue("rhBtnMaxGrdRcd");
					
					if(!ValueUtil.isNull(vsRecCiiRcd) && !ValueUtil.isNull(vsMinGrdRcd) && !ValueUtil.isNull(vsMaxGrdRcd)){;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsListRngDivRcd");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsRelEstCiiCdList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsRecCiiRcdList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsCgdRelEstCii");
			dataSet_4.parseData({
				"info": "CGD_REL_EST_CII@REL_EST_CII_CD,SERIAL_NO",
				"columns": [
					{"name": "REL_EST_CII_CD"},
					{"name": "SERIAL_NO"},
					{"name": "CII_NM"},
					{"name": "REC_CII_RCD"},
					{"name": "MAX_GRD_RCD"},
					{"name": "MIN_GRD_RCD"},
					{"name": "MAX_RATE"},
					{"name": "MIN_RATE"},
					{"name": "APLY_LMT"},
					{"name": "RNG_DIV_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsMinList");
			dataSet_5.parseData({
				"columns": [
					{"name": "GRD_RCD"},
					{"name": "GRD_NM"},
					{"name": "REC_CII_RCD"},
					{"name": "MAX_GP"},
					{"name": "MIN_GP"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsMaxList");
			dataSet_6.parseData({
				"columns": [
					{"name": "GRD_RCD"},
					{"name": "GRD_NM"},
					{"name": "REC_CII_RCD"},
					{"name": "MAX_GP"},
					{"name": "MIN_GP"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [{
					"name": "strAplyLmt",
					"dataType": "string"
				}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmResSave");
			dataMap_2.parseData({
				"columns" : [{
					"name": "strPk",
					"dataType": "string"
				}]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/cgd/StdCgdCRelEstCii/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/cgd/StdCgdCRelEstCii/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_4, false);
			submission_2.addResponseData(dataSet_5, false);
			submission_2.addResponseData(dataSet_6, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/cgd/StdCgdCRelEstCii/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_4);
			submission_3.addResponseData(dataMap_2, false);
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-STDGRDSYSMNGLIST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "280px",
					"height": "25px"
				});
				var button_1 = new cpr.controls.Button("btnNew");
				button_1.value = "";
				button_1.style.setClasses(["btn-new"]);
				button_1.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewClick == "function") {
					button_1.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "963px",
					"width": "60px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnDel");
				button_2.value = "";
				button_2.style.setClasses(["btn-delete"]);
				button_2.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_2.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "1028px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnRestore");
				button_3.value = "";
				button_3.style.setClasses(["btn-restore"]);
				button_3.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_3.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "1093px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "";
				button_4.style.setClasses(["btn-save"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "1158px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCgdRelEstCii");
				grid_1.init({
					"dataSet": app.lookup("dsCgdRelEstCii"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "198px"},
						{"width": "198px"},
						{"width": "191px"},
						{"width": "191px"},
						{"width": "132px"},
						{"width": "131px"},
						{"width": "82px"},
						{
							"width": "100px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-BGYEAR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-ENDYEAR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-REC_STD_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-REC_STD_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-REC_STD_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-REC_STD_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-REC_STD_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-OG_CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-OBJNO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-OBJNO");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_1 = new cpr.controls.Output();
										output_1.style.css({
											"text-align" : "center"
										});
										return output_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "REL_EST_CII_CD";
									cell.control = (function(){
										var comboBox_1 = new cpr.controls.ComboBox("gdCbbRelEstCiiCd");
										comboBox_1.userAttr({"require": "Y"});
										(function(comboBox_1){
											comboBox_1.addItem(new cpr.controls.Item("선택", ""));
											comboBox_1.setItemSet(app.lookup("dsRelEstCiiCdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_1);
										comboBox_1.bind("value").toDataColumn("REL_EST_CII_CD");
										return comboBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "REC_CII_RCD";
									cell.control = (function(){
										var comboBox_2 = new cpr.controls.ComboBox("gdCbbRecCiiRcd");
										comboBox_2.userAttr({"require": "Y"});
										(function(comboBox_2){
											comboBox_2.addItem(new cpr.controls.Item("선택", ""));
											comboBox_2.setItemSet(app.lookup("dsRecCiiRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_2);
										comboBox_2.bind("value").toDataColumn("REC_CII_RCD");
										return comboBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "MIN_GRD_RCD";
									cell.control = (function(){
										var comboBox_3 = new cpr.controls.ComboBox("gdCbbMinGgdRcd");
										comboBox_3.userAttr({"require": "Y"});
										(function(comboBox_3){
											comboBox_3.addItem(new cpr.controls.Item("선택", ""));
											comboBox_3.setItemSet(app.lookup("dsMinList"), {
												"label": "GRD_NM",
												"value": "GRD_RCD"
											});
										})(comboBox_3);
										comboBox_3.bind("value").toDataColumn("MIN_GRD_RCD");
										return comboBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "MAX_GRD_RCD";
									cell.control = (function(){
										var comboBox_4 = new cpr.controls.ComboBox("gdCbbMaxGgdRcd");
										comboBox_4.userAttr({"require": "Y"});
										(function(comboBox_4){
											comboBox_4.addItem(new cpr.controls.Item("선택", ""));
											comboBox_4.setItemSet(app.lookup("dsMaxList"), {
												"label": "GRD_NM",
												"value": "GRD_RCD"
											});
										})(comboBox_4);
										comboBox_4.bind("value").toDataColumn("MAX_GRD_RCD");
										return comboBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "MIN_RATE";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("gdIpbMinRate");
										numberEditor_1.spinButton = false;
										numberEditor_1.format = "999";
										numberEditor_1.bind("value").toDataColumn("MIN_RATE");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "MAX_RATE";
									cell.control = (function(){
										var numberEditor_2 = new cpr.controls.NumberEditor("gdIpbMaxRate");
										numberEditor_2.spinButton = false;
										numberEditor_2.format = "999";
										numberEditor_2.bind("value").toDataColumn("MAX_RATE");
										return numberEditor_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "RNG_DIV_RCD";
									cell.control = (function(){
										var comboBox_5 = new cpr.controls.ComboBox("combobox1");
										(function(comboBox_5){
											comboBox_5.setItemSet(app.lookup("dsListRngDivRcd"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_5);
										comboBox_5.bind("value").toDataColumn("RNG_DIV_RCD");
										return comboBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "CII_NM";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("gdIpbCiiNm");
										inputBox_1.readOnly = true;
										inputBox_1.maxLength = 100;
										inputBox_1.bind("value").toDataColumn("CII_NM");
										return inputBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "SERIAL_NO";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("gdIpbSerialNo");
										inputBox_2.readOnly = true;
										inputBox_2.maxLength = 15;
										inputBox_2.bind("value").toDataColumn("SERIAL_NO");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "APLY_LMT";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("gdIpbAplyLmt");
										inputBox_3.readOnly = true;
										inputBox_3.maxLength = 10;
										inputBox_3.bind("value").toDataColumn("APLY_LMT");
										return inputBox_3;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1213px",
					"height": "598px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "635px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "상대평가기준관리";
	cpr.core.Platform.INSTANCE.register(app);
})();
