/*
 * App URI: app/cgd/stdCgdPRrPopup
 * Source Location: app/cgd/stdCgdPRrPopup.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cgd/stdCgdPRrPopup", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCgdPRrPopup.xtm"/>
			
			/**
			 * 성적인정항목검색(Popup)
			 * @class stdCgdPRrPopup
			 * @author 박갑수 at 2016. 3. 21
			 */
			var stdCgdPRrPopup = function() {
				var moPage = new Page();
				
				// 팝업 내부사용 변수
				var moStdCgdPRrPopup = {
					controlId 						: "",
					openedByChange			: false,
					skipOnChange				: false,
					// 선택가능 범위를 제한
					strRrCd					: "",
					strRrNm				: "",
					strRrDivRcd			: "",
					strRrPrpRcd			: "",
					strKeyDate				: "",
					strLanDivRcd			: "",
					
					// 선택열 결과 리턴
					Result : {
						RR_CD 				: "",
						RR_NM 			: "",
						RR_DIV_RCD 		: "",
						RR_DIV_NM 		: "",
						RR_PRP_RCD 	: "",
						RR_PRP_NM 		: "",
						RR_PNT 			: "",
						SP_DGR_RCD 	: "",
						SP_DGR_NM 		: "",
						OBJ_DIV_RCD 	: ""
					}
				};
				
				/**
				 * @desc import 헤더 초기화
				 * @param 
				 * @return  void
				 * @author 박갑수 at 2016. 3. 21
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc onLoad 실행
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 21
				 */
				moPage.onModelConstructDone_StdCgdPRrPopup = function() {
					// 리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptCgdRr"]);
					// 검색조건 초기 설정
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", ["grpData"]);
					
					// 호출한 페이지에서 파라미터 받기.
					doParentGet();
			
					// 화면 온로드
					doOnLoad();
				};
				
				/**
				 * @desc 호출한 페이지에서 파라미터 받기
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 21
				 */
				function doParentGet() {
					
					if(ExtPopUp.isPopUp()) {
						
						// 호출한 페이지에서 파라미터 받기.													
						var voStdCgdPRrPopup =  ExtPopUp.getParentVal("moStdCgdPRrPopup");
						
						// 파라미터  값복사 (deep copy)
						for (var key in voStdCgdPRrPopup) {
							if (key == "Result") {
								// 결과 값은 복사하지 않음.
								continue;
							}
							moStdCgdPRrPopup [key] = voStdCgdPRrPopup [key];
						}
						
						// 팝업이 뜬후에는 false로 고침.
						voStdCgdPRrPopup.openedByChange = false;
					}
				};
				
				/**
				 * @desc 검색조건 및 코드값 세팅
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 21
				 */
				function doOnLoad() {
					
					// 파라미터 받아서 초기 검색조건 세팅.
					var voParam = moStdCgdPRrPopup;
					
					// 성적인정항목코드
					if (!ValueUtil.isNull(voParam.strRrCd)) {
						util.Control.setValue(app, "ipbRrCd", voParam.strRrCd);
					}
					
					// 성적인정항목명
					if (!ValueUtil.isNull(voParam.strRrNm)) {
						util.Control.setValue(app, "ipbLectRoomNm", voParam.strRrNm);
					}
					
					// 성적인정항목구분
					if (!ValueUtil.isNull(voParam.strRrDivRcd)) {
						util.DataMap.setValue(app, "dmReqKey", "strRrDivRcd", voParam.strRrDivRcd);
					}
					
					// 성적인정항목명
					if (!ValueUtil.isNull(voParam.strRrNm)) {
						util.Control.setValue(app, "ipbLectRoomNm", voParam.strRrNm);
					}
					
					// 시작일
					if (!ValueUtil.isNull(voParam.strKeyDate)) {
						util.DataMap.setValue(app, "dmReqKey", "strKeyDate", voParam.strKeyDate);
					}
					
					// 언어키
					if (!ValueUtil.isNull(voParam.strLanDivRcd)) {
						util.DataMap.setValue(app, "dmReqKey", "strLanDivRcd", voParam.strLanDivRcd);
					}
					
					// 서브미션 호출
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if (pbSuccess) {
							
							util.Control.redraw(app, ["cbbRrPrpRcd"]);
							
							// 성적인정용도코드
							if (!ValueUtil.isNull(voParam.strRrPrpRcd)) {
								util.Control.setValue(app, "cbbRrPrpRcd", voParam.strRrPrpRcd);
							}
							
							// 검색조건이 입력되어 있는 경우 바로 검색 실행(돋보기버튼제외)
							if(!voParam.controlId.startsWith("btn")){
								if (voParam.strRrCd || voParam.strRrNm) {
									util.Header.clickSearch(app);
								}
							}
						}
					});
				};
				
				/**
				 * @desc [ipbRrCd]성적인정항목코드 onKeyDown 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 21
				 */
				moPage.onKeyDown_IpbRrCd = function(strKeyType, strKeyStatus) {
					// 엔터키 입력시 조회
					if(e.keyCode == cpr.events.KeyCode.ENTER){
						util.Header.clickSearch(app);
					}
				};
				
				/**
				 * @desc [ipbRrNm]성적인정항목명 onKeyDown 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 21
				 */
				moPage.onKeyDown_IpbRrNm = function(strKeyType, strKeyStatus) {
					// 엔터키 입력시 조회
					if(e.keyCode == cpr.events.KeyCode.ENTER){
						util.Header.clickSearch(app);
					}
				};
				
				/**
				 * @desc [btnSearch]조회 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 21
				 */
				moPage.onClick_BtnSearch = function() {
			
					doList(function(pbSuccess) {
						// 조회 : "조회되었습니다." header 메세지 표시
						if (pbSuccess) util.Msg.notify(app, "NLS.INF.M024");
					});
				};
				
				/**
				 * @desc 성적인정항목목록 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author 박갑수 at 2016. 3. 21
				 */
				 function doList(poCallBackFunc) {
					
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdCgdRr");	
							// 조회 후 콜백함수 수행
							if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
						}
					});
				};
				 
				 /**
				 * @desc [rptCgdRr]성적인정항목목록 onDoubleClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 21
				 */
				 moPage.onDoubleClick_RptCgdRr = function() {
					// 선택닫기 함수
					doCloseOk();
				};
				 
				 /**
				 * @desc [btnCloseCancel]화면닫기 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 21
				 */
				moPage.onClick_BtnCloseCancel = function() {
					// 팝업 닫기
					app.close();
				};
				
				/**
				 * @desc [btnCloseOk]선택닫기 onClick 이벤트
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 3. 21
				 */
				moPage.onClick_BtnCloseOk = function() {
					// 선택닫기 함수
					doCloseOk();
				};
			
				/**
				 * @desc 부모페이지 리턴
				 * @param 
				 * @return void
				 * @author 박갑수 at 2016. 1. 19
				 */
				function doCloseOk(){
					var voResult = moStdCgdPRrPopup.Result;
					
					if(ValueUtil.isNull(util.Grid.getCheckOrSelectedRowIndex(app, "grdCgdRr"))){
						// 선택된 데이터가 없습니다.
						ComMsg.warn("M008");
						return false;
					}
					
					var vnIdx = util.Grid.getIndex(app, "grdCgdRr");
					
					voResult.RR_CD				= util.Grid.getCellValue(app, "grdCgdRr", "RR_CD", vnIdx);
					voResult.RR_NM			= util.Grid.getCellValue(app, "grdCgdRr", "RR_NM" , vnIdx);
					voResult.OBJ_DIV_RCD 	= util.Grid.getCellValue(app, "grdCgdRr", "OBJ_DIV_RCD" , vnIdx);
					voResult.RR_DIV_RCD 	= util.Grid.getCellValue(app, "grdCgdRr", "RR_DIV_RCD" , vnIdx);
					voResult.RR_DIV_NM     	= util.Grid.getCellValue(app, "grdCgdRr", "RR_DIV_NM" , vnIdx);
					voResult.RR_PRP_RCD 	= util.Grid.getCellValue(app, "grdCgdRr", "RR_PRP_RCD", vnIdx);
					voResult.RR_PRP_NM 	= util.Grid.getCellValue(app, "grdCgdRr", "RR_PRP_NM", vnIdx);
					voResult.RR_PNT 			= util.Grid.getCellValue(app, "grdCgdRr", "RR_PNT", vnIdx);
					voResult.SP_DGR_RCD	= util.Grid.getCellValue(app, "grdCgdRr", "SP_DGR_RCD", vnIdx);
					voResult.SP_DGR_NM		= util.Grid.getCellValue(app, "grdCgdRr", "SP_DGR_NM", vnIdx);
					
					ExtPopUp.closeLayeredPopup("callbackStdCgdPRrPopup", moStdCgdPRrPopup);
				};
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsRrPrpRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsCgdRr");
			dataSet_2.parseData({
				"columns": [
					{"name": "RR_CD"},
					{"name": "RR_NM"},
					{"name": "OBJ_DIV_RCD"},
					{"name": "RR_DIV_RCD"},
					{"name": "RR_DIV_NM"},
					{"name": "RR_PRP_RCD"},
					{"name": "RR_PRP_NM"},
					{"name": "RR_PNT"},
					{"name": "SP_DGR_RCD"},
					{"name": "SP_DGR_NM"},
					{"name": "RR_DESC"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strRrCd",
						"dataType": "string"
					},
					{
						"name": "strRrNm",
						"dataType": "string"
					},
					{
						"name": "strRrDivRcd",
						"dataType": "string"
					},
					{
						"name": "strRrPrpRcd",
						"dataType": "string"
					},
					{
						"name": "strKeyDate",
						"dataType": "string"
					},
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/cgd/StdCgdRrPopup/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/cgd/StdCgdRrPopup/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output("optRrNm");
				output_1.value = "";
				output_1.bind("value").toLanguage("UI-SCR-GRDACPTLSTNM");
				container.addChild(output_1, {
					"top": "5px",
					"left": "275px",
					"width": "110px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbRrCd");
				inputBox_1.maxLength = 10;
				inputBox_1.bind("fieldLabel").toExpression("#optRrCd.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strRrCd");
				if(typeof onIpbRrCdKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbRrCdKeydown);
				}
				container.addChild(inputBox_1, {
					"top": "5px",
					"left": "135px",
					"width": "130px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optRrCd");
				output_2.value = "";
				output_2.bind("value").toLanguage("UI-DB-RR_CD");
				container.addChild(output_2, {
					"top": "5px",
					"left": "5px",
					"width": "125px",
					"height": "25px"
				});
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "623px",
					"width": "60px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbRrNm");
				inputBox_2.maxLength = 200;
				inputBox_2.bind("fieldLabel").toExpression("#optRrNm.value");
				inputBox_2.bind("value").toDataMap(app.lookup("dmReqKey"), "strRrNm");
				if(typeof onIpbRrNmKeydown == "function") {
					inputBox_2.addEventListener("keydown", onIpbRrNmKeydown);
				}
				container.addChild(inputBox_2, {
					"top": "5px",
					"left": "390px",
					"width": "140px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optRrPrpRcd");
				output_3.value = "";
				output_3.bind("value").toLanguage("UI-SCR-RRPRPRCD");
				container.addChild(output_3, {
					"top": "30px",
					"left": "5px",
					"width": "125px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbRrPrpRcd");
				comboBox_1.enabled = false;
				comboBox_1.bind("fieldLabel").toExpression("#optRrPrpRcd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strRrPrpRcd");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("전체", ""));
					comboBox_1.setItemSet(app.lookup("dsRrPrpRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"top": "30px",
					"left": "135px",
					"width": "130px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "690px",
				"height": "57px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCgdRr");
				grid_1.init({
					"dataSet": app.lookup("dsCgdRr"),
					"columns": [
						{"width": "40px"},
						{"width": "142px"},
						{"width": "360px"},
						{"width": "120px"},
						{
							"width": "170px",
							"visible": false
						},
						{
							"width": "170px",
							"visible": false
						},
						{
							"width": "110px",
							"visible": false
						},
						{
							"width": "120px",
							"visible": false
						},
						{
							"width": "110px",
							"visible": false
						},
						{
							"width": "160px",
							"visible": false
						},
						{
							"width": "160px",
							"visible": false
						},
						{
							"width": "130px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "NO";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-RR_CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-GRDACPTLSTNM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-GRDRCOGPNT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-GRDRCOGITMDIVCDNM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-GRDRCOGITMUSECDNM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-ISUCORSDEGNM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-RR_DESC");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-OBJ_GBN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-RR_DIV_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-RR_PRP_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SP_DGR_RCD");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "_repeatindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "RR_CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "RR_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "RR_PNT";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "RR_DIV_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "RR_PRP_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "SP_DGR_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "RR_DESC";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "OBJ_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "RR_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "RR_PRP_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "SP_DGR_RCD";
								}
							}
						]
					}
				});
				if(typeof onGrdCgdRrDblclick == "function") {
					grid_1.addEventListener("dblclick", onGrdCgdRrDblclick);
				}
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "678px",
					"height": "236px"
				});
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-GRDACPTITMLST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "245px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "97px",
				"left": "5px",
				"width": "690px",
				"height": "273px"
			});
			
			var button_2 = new cpr.controls.Button("btnCloseOk");
			button_2.value = "";
			button_2.bind("value").toLanguage("UI-SCR-CHOICLS");
			if(typeof onBtnCloseOkClick == "function") {
				button_2.addEventListener("click", onBtnCloseOkClick);
			}
			container.addChild(button_2, {
				"top": "375px",
				"left": "635px",
				"width": "60px",
				"height": "25px"
			});
			
			var button_3 = new cpr.controls.Button("btnCloseCancel");
			button_3.value = "";
			button_3.style.setClasses(["btn-commit"]);
			button_3.bind("value").toLanguage("UI-SCR-SCRNCLS");
			if(typeof onBtnCloseCancelClick == "function") {
				button_3.addEventListener("click", onBtnCloseCancelClick);
			}
			container.addChild(button_3, {
				"top": "375px",
				"left": "5px",
				"width": "60px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "성적인정항목검색";
	cpr.core.Platform.INSTANCE.register(app);
})();
