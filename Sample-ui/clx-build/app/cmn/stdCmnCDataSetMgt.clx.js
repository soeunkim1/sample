/*
 * App URI: app/cmn/stdCmnCDataSetMgt
 * Source Location: app/cmn/stdCmnCDataSetMgt.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cmn/stdCmnCDataSetMgt", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var util = new ComUtil(app);
			
			/**
			 * @desc  조회버튼이벤트(데이터셋목록을 조회한다.)
			 * @param {Object} 서브미션 실행 후 처리될 콜백 함수
			 * @return 데이터셋목록 조회
			 */
			function doList(poCallBackFunc){
				util.Submit.send(app, "subList", function(pbSuccess){
					if(pbSuccess){
						util.Control.redraw(app, "grdCmnDataset");
						
						//마스터에 데이터가 없을 경우 디테일 입력 불가
						if(util.Grid.getRowCount(app, "grdCmnDataset") < 1){
							util.Control.setEnable(app, false, ["grpDataDtl", "grpDataParam", "grpDataCond"]);
							util.Control.reset(app, app, ["grdCmnDatasetDtl", "grdCmnDatasetParam"]);
						}else{
							//각 컨트롤 활성화 제어
							doMstGrdStatus();
							doDtlGrdStatus();
						}
						//조회 후 콜백함수 수행
						if(util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					}
				});
			}
			
			/**
			 * @desc   마스터(데이터셋) rowselect event
			 *             디테일(컬럼정보/필수파라미터) 조회
			 * @return void
			 */
			function doListMstRowSelectDtl() {
			    // 컬럼정보 데이터 변경내역 체크
			//		if(util.Grid.isChangedData(["grdCmnDatasetDtl"], "CRM")){
			//			util.Grid.selectRow("rptCmnDataset", ExtRepeat.getBeforeFocusRowIdx("rptCmnDataset"), false);				
			//			return false;
			//		}else{
			//			ExtRepeat.rebuild("rptCmnDatasetDtl");
			//		}
			//		// 필수파라미터 변경내역 체크 
			//		if(ExtRepeat.isChangedData(["rptCmnDatasetParam"], "CRM")){ 
			//			ExtRepeat.selectRow("rptCmnDataset", ExtRepeat.getBeforeFocusRowIdx("rptCmnDataset"), false);		
			////		ExtControl.setEnable(false, ["grpDataDtl", "grpData", "grpDataCond"]);
			//			return false;
			//		}else{
			//			ExtRepeat.rebuild("rptCmnDatasetParam");
			//		}
			//		
			//		if(ExtRepeat.isChangedData(["rptCmnDatasetCond"], "CRM")){ 
			//			ExtRepeat.selectRow("rptCmnDataset", ExtRepeat.getBeforeFocusRowIdx("rptCmnDataset"), false);		
			////		ExtControl.setEnable(false, ["grpDataDtl", "grpData", "grpDataParam"]);
			//			return false;
			//		}else{
			//			ExtRepeat.rebuild("rptCmnDatasetCond");
			//		}
				
				if(util.Grid.getRowState(app, "grdCmnDataset") == cpr.data.tabledata.RowState.INSERTED){
					util.Control.reset(app, app, ["grdCmnDatasetDtl", "grdCmnDatasetParam","grdCmnDatasetCond"]);
					return false;
				}
							
				doListDtl();
			}
				
			/**
			 * @desc  [데이터셋 목록] 그리드에 신규행을 추가한다. 
			 * @return  void
			 */
			function doInsertDataset(){
				// 1. 데이터셋목록의 신규행을 추가한 후, 시작행을 데이터셋명으로 설정한다. --> 속성 제어
			//	var vnNewIdx = util.Grid.insertRow("grdCmnDataset", "gdIpbDatasetNm");
				
				// 2. 디폴트값 셋팅 : 언어키
				util.Grid.setCellValue(app, "grdCmnDataset", "LAN_DIV_RCD", util.getDefaultLocale(app));
				
				// 3. 마스터 리피터 상태에따른 디테일 제어
				doMstGrdStatus();
			}
			
			/**
			 * @desc  [데이터셋 목록] 그리드를 작업저장 한다. 
			 * @param {Object} 서브미션 실행 후 처리될 콜백 함수	
			 * @return  void
			 */
			function doSave() {
				// 그리드 변경사항 체크
				if(!util.Grid.isModified(app, "grdCmnDataset", "MSG")){
					return false;
				}
				//그리드 validation check
				if(!util.validate(app, "grdCmnDataset")) return false;
			
				util.Submit.send(app, "subSave", function(pbSuccess){
					if(pbSuccess){
						doList(function(pbListSuccess) {
							// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
							if (pbListSuccess) util.Msg.alert("NLS-INF-M025");
						});
					}
				});
			}
			
			/**
			 * @desc   마스터(데이터셋) rowselect event
			 *             디테일(컬럼정보/필수파라미터) 조회
			 * @return void
			 */
			function doListDtl(poCallBackFunc){
				// 데이터셋목록의 SQL_ID
				var vsSqlId = util.Grid.getCellValue(app, "grdCmnDataset", "SQL_ID");
				util.DataMap.setValue(app, "dmReqListDtlParam", "strSqlId", vsSqlId);
				// 데이터셋목록의 언어키
				var vsLanDivRcd = util.Grid.getCellValue(app, "grdCmnDataset", "LAN_DIV_RCD");
				util.DataMap.setValue(app, "dmReqListDtlParam", "strLanDivRcd", vsLanDivRcd);
				
				util.Submit.send(app, "subListDtl", function(pbSuccess){
					if(pbSuccess){
						util.Control.redraw(app, ["grdCmnDatasetDtl", "grdCmnDatasetParam", "grdCmnDatasetCond"]);
			
						// 각 컨트롤 활성화 제어
			//			doDtlRptStatus();
			//			doDtlParamRptStatus();
						doMstGrdStatus();
					}
					// 조회 후 콜백함수 수행
					if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
				});
			}
					
			/**
			 * @desc  마스터의 상태가 신규나 삭제가 있을경우 디테일(컬럼정보/필수파라미터) disable
			 * @return void
			 */
			function doMstGrdStatus(){
				var vaGrpCtrl = ["grpDataDtl", "grpDataParam", "grpDataCond"];
				
				if(util.Grid.isModified(app, "grdCmnDataset")){
					util.Control.setEnable(app, false, vaGrpCtrl);
				}else{
					util.Control.setEnable(app, true, vaGrpCtrl);
				}
			}		
			
			/**
			 * @desc  [컬럼정보 목록] 그리드에 신규행을 추가한다. 
			 * @return  void
			 */
			function doInsertDatasetDtl(){
				var vnCnt = util.Grid.getRowCount(app, "grdCmnDatasetDtl"); // 컬럼정보목록 행 갯수
				// 1. 컬럼정보목록의 신규행을 추가한 후, 시작행을 컬럼명으로 설정한다. -> 신규행은 마지막행 아래에 추가함.
				var vnNewIdx = util.Grid.insertRow(app, "grdCmnDatasetDtl", vnCnt);
				
				// 2. 디폴트값 셋팅 : 언어키, 순번, 쿼리ID
				util.Grid.setCellValue(app, "grdCmnDatasetDtl", "LAN_DIV_RCD", util.getDefaultLocale(app), vnNewIdx);
				util.Grid.setCellValue(app, "grdCmnDatasetDtl", "SERIAL_NO", vnCnt+1, vnNewIdx);
				var vsSqlId = util.Grid.getCellValue(app, "grdCmnDataset", "SQL_ID"); // [데이터셋목록]의 쿼리ID
				util.Grid.setCellValue(app, "grdCmnDatasetDtl", "SQL_ID", vsSqlId, vnNewIdx);
				
				// 3. 디테일[컬럼정보]리피터 상태에따른 이외의 컨트롤제어
				doDtlGrdStatus();
			}
			
			/**
			 * @desc  디테일[컬럼정보]의 상태가 편집상태 일경우  그외의 컨트롤(데이터셋/필수파라미터) disable
			 * @return void
			 */
			function doDtlGrdStatus(){
				var vaGrpCtrl = ["grpData", "grpDataParam", "grpDataCond"];
				
				if(util.Grid.isModified(app, "grdCmnDatasetDtl")){
						util.Control.setEnable(app, false, vaGrpCtrl);
				}else{
					util.Control.setEnable(app, true, vaGrpCtrl);
				}
			}
			
			/**
			 * @desc  [컬럼정보 목록] 그리드를 작업저장 한다. 
			 * @param {Object} 서브미션 실행 후 처리될 콜백 함수	
			 * @return  void
			 */
			function doSaveDtl() {
				// 리피터 변경사항 체크
				if(!util.Grid.isModified(app, "grdCmnDatasetDtl", "MSG")){
					return false;
				}
				//리피트 validation check
				if(!util.validate(app, "grdCmnDatasetDtl")) return false;
			
				util.Submit.send(app, "subSaveDtl", function(pbSuccess){
					if(pbSuccess){
						doListDatasetDtl(function(pbListSuccess) {
							//마스터 그리드내 디테일 건수 갱신(DTL_CNT 컬럼은 updateable : false로 설정)
							util.Grid.setCellValue(app, "grdCmnDataset", "DTL_CNT", util.Grid.getRowCount(app, "grdCmnDatasetDtl"));
								
							// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
							if (pbListSuccess) util.Msg.alert("NLS-INF-M025");
						});
					}
				});
			}
			
			/**
			 * @desc   컬럼정보조회
			 * @return void
			 */
			function doListDatasetDtl(poCallBackFunc){
				// 데이터셋목록의 SQL_ID
				var vsSqlId = util.Grid.getCellValue(app, "grdCmnDataset", "SQL_ID");
				util.DataMap.setValue(app, "dmReqListDtlParam", "strSqlId", vsSqlId);
				// 데이터셋목록의 언어키
				var vsLanDivRcd = util.Grid.getCellValue(app, "grdCmnDataset", "LAN_DIV_RCD");
				util.DataMap.setValue(app, "dmReqListDtlParam", "strLanDivRcd", vsLanDivRcd);
				
				util.Submit.send(app, "subListDatasetDtl", function(pbSuccess){
					if(pbSuccess){
						util.Control.redraw(app, "grdCmnDatasetDtl");
			
						// 각 컨트롤 활성화 제어
						doDtlGrdStatus();
					}
					// 조회 후 콜백함수 수행
					if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
				});
			}
			
			/**
			 * @desc   필수파라미터 조회
			 * @return void
			 */
			function doListDatasetParam(poCallBackFunc){
				// 데이터셋목록의 SQL_ID
				var vsSqlId = util.Grid.getCellValue(app, "grdCmnDataset", "SQL_ID");
				util.DataMap.setValue(app, "dmReqListDtlParam", "strSqlId", vsSqlId);
				// 데이터셋목록의 언어키
				var vsLanDivRcd = util.Grid.getCellValue(app, "grdCmnDataset", "LAN_DIV_RCD");
				util.DataMap.setValue(app, "dmReqListDtlParam", "strLanDivRcd", vsLanDivRcd);
				
				util.Submit.send(app, "subListDatasetParam", function(pbSuccess){
					if(pbSuccess){
						util.Control.redraw(app, "grdCmnDatasetParam");
			
						// 각 컨트롤 활성화 제어
						doDtlParamGrdStatus();
					}
					// 조회 후 콜백함수 수행
					if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
				});
			}
			
			/**
			 * @desc   필수파라미터 조회
			 * @return void
			 */
			function doListDatasetCond(poCallBackFunc){
				// 데이터셋목록의 SQL_ID
				var vsSqlId = util.Grid.getCellValue(app, "grdCmnDataset", "SQL_ID");
				util.DataMap.setValue(app, "dmReqListDtlParam", "strSqlId", vsSqlId);
				// 데이터셋목록의 언어키
				var vsLanDivRcd = util.Grid.getCellValue(app, "grdCmnDataset", "LAN_DIV_RCD");
				util.DataMap.setValue(app, "dmReqListDtlParam", "strLanDivRcd", vsLanDivRcd);
				
				util.Submit.send(app, "subListDatasetCond", function(pbSuccess){
					if(pbSuccess){
						util.Control.redraw(app, "grdCmnDatasetCond");
			
						// 각 컨트롤 활성화 제어
						doDtlCondGrdStatus();
					}
					// 조회 후 콜백함수 수행
					if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
				});
			}
						
			/**
			 * @desc  [필수파라미터 목록] 그리드를 신규행을 추가한다. 
			 * @return  void
			 */
			function doInsertDatasetParam(){
				var vnCnt = util.Grid.getRowCount(app, "grdCmnDatasetParam"); // 필수파라미터목록 행 갯수
				// 1. 필수파라미터목록의 신규행을 추가한 후, 시작행을 필수파라미터구분으로 설정한다. -> 신규행은 마지막행 아래에 추가함.
				var vnNewIdx = util.Grid.insertRow(app, "grdCmnDatasetParam", "gdCbbReqParamRcdParam", vnCnt);
				
				// 2. 디폴트값 셋팅 : 언어키, 쿼리ID
				util.Grid.setCellValue(app, "grdCmnDatasetParam", "LAN_DIV_RCD", util.getDefaultLocale(app), vnNewIdx);
				var vsSqlId = util.Grid.getCellValue(app, "grdCmnDataset", "SQL_ID"); // [데이터셋목록]의 쿼리ID
				util.Grid.setCellValue(app, "grdCmnDatasetParam", "SQL_ID", vsSqlId, vnNewIdx);
				
				// 3. 디테일[필수파라미터 정보]리피터 상태에따른 이외의 컨트롤제어
				doDtlParamGrdStatus();
			}			
					
			/**
			 * @desc  [검색조건 목록] 그리드를 신규행을 추가한다. 
			 * @return  void
			 */
			function doInsertDatasetCond(){
				var vnCnt = util.Grid.getRowCount(app, "grdCmnDatasetCond"); // 검색조건목록 행 갯수
				// 1. 검색조건목록의 신규행을 추가한 후, 시작행을 필수파라미터구분으로 설정한다. -> 신규행은 마지막행 아래에 추가함.
				var vnNewIdx = util.Grid.insertRow(app, "grdCmnDatasetCond", "gdCbbCondTypeCd", vnCnt);
				
				// 2. 디폴트값 셋팅 : 언어키, 쿼리ID
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "LAN_DIV_RCD", util.getDefaultLocale(app), vnNewIdx);
				var vsSqlId = util.Grid.getCellValue(app, "grdCmnDataset", "SQL_ID"); // [데이터셋목록]의 쿼리ID
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "SQL_ID", vsSqlId, vnNewIdx);
				
				// 3. 디테일[필수파라미터 정보]리피터 상태에따른 이외의 컨트롤제어
				doDtlCondGrdStatus();
			}		
						
			/**
			 * @desc  디테일[필수파라미터 정보]의 상태가 편집상태일 경우 그외의 컨트롤(데이터셋/컬럼정보) disable
			 * @return void
			 */
			function doDtlParamGrdStatus(){
				var vaGrpCtrl = ["grpData", "grpDataDtl", "grpDataCond"];
				
				if(util.Grid.isModified(app, "grdCmnDatasetParam")){
						util.Control.setEnable(app, false, vaGrpCtrl);
				}else{
					util.Control.setEnable(app, true, vaGrpCtrl);
				}
			}			
				
			/**
			 * @desc  디테일[검색조건 정보]의 상태가 편집상태 일 경우 그외의 컨트롤(데이터셋/컬럼정보) disable
			 * @return void
			 * @author Kim Bora  2015.12. 07.
			 */
			function doDtlCondGrdStatus(){
				var vaGrpCtrl = ["grpData", "grpDataDtl", "grpDataParam"];
				
				if(util.Grid.isModified(app, "grdCmnDatasetCond")){
						util.Control.setEnable(app, false, vaGrpCtrl);
				}else{
					util.Control.setEnable(app, true, vaGrpCtrl);
				}
			}
				
			/**
			 * @desc  [필수파라미터 목록] 그리드를 작업저장 한다. 
			 * @param {Object} 서브미션 실행 후 처리될 콜백 함수	
			 * @return  void
			 */
			function doSaveParam() {
				// 리피터 변경사항 체크
				if(!util.Grid.isModified(app, "grdCmnDatasetParam", "MSG")){
					return false;
				}
				//리피트 validation check
				if(!util.validate(app, "grdCmnDatasetParam")) return false;
			
				util.Submit.send(app, "subSaveParam", function(pbSuccess){
					if(pbSuccess){
						doListDatasetParam(function(pbListSuccess) {
							// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
							if (pbListSuccess) util.Msg.alert("NLS-INF-M025");
						});
					}
				});
			}		
				
			/**
			 * @desc  [검색조건 목록] 그리드를 작업저장 한다. 
			 * @param {Object} 서브미션 실행 후 처리될 콜백 함수	
			 * @return  void
			 */
			function doSaveCond() {
				// 리피터 변경사항 체크
				if(!util.Grid.isModified(app, "grdCmnDatasetCond", "MSG")){
					return false;
				}
				//리피트 validation check
				if(!util.validate(app, "grdCmnDatasetCond")) return false;
			
				util.Submit.send(app, "subSaveCond", function(pbSuccess){
					if(pbSuccess){
						doListDatasetCond(function(pbListSuccess) {
							// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
							if (pbListSuccess) util.Msg.alert("NLS-INF-M025");
						});
					}
				});
			}
				
			//function doChangeRptCmnDataset(){
				// 필수파라미터 변경내역 체크 
			//	if(util.Grid.isModified(["grdCmnDataset"], "CRM")){
			//		ExtRepeat.selectRow("grdCmnDataset", ExtRepeat.getBeforeFocusRowIdx("grdCmnDataset"), false);				
			//		return false;
			//	}else{
			//		util.Grid.revertAllData("grdCmnDataset");
			//	}
			//	util.Control.refreshBind("binGrdCmnDataset");
			//}	
				
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				//서브미션 실행
				util.Submit.send(app, "subOnLoad", function(pbSuccess){
					if(pbSuccess){
						//조회조건 콤보박스 언어키 redraw
						util.Control.redraw(app, "cbbLanDivRcd");
						//언어키 콤보박스 디폴트 셋팅
						util.Control.setValue(app, app, "cbbLanDivRcd", util.getDefaultLocale(app));
						//조회조건 데이터셋명 포커스 처리
						util.Control.setFocus(app, "ipbDatasetNm");
					}
				});
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearch = e.control;
				//그리드 변경사항 체크
				if(util.Grid.isModified(app, ["grdCmnDataset","grdCmnDatasetDtl", "grdCmnDatasetCond", "grdCmnDatasetParam"], "CRM")){
					return false;
				}else{
					util.Grid.revertAllData(app, "grdCmnDataset");
					util.Grid.revertAllData(app, "grdCmnDatasetDtl");
					util.Grid.revertAllData(app, "grdCmnDatasetParam");
				}
				
				doList(function(pbSuccess){
					//조회되었습니다
					if(pbSuccess) util.Msg.alert("NLS-INF-M024");
				});
			}
			
			/*
			 * 그룹에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onGrpSearchKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grpSearch = e.control;
				if(e.keyCode == cpr.events.KeyCode.ENTER){
					var btnSearch = app.lookup("btnSearch");
					btnSearch.click();
				}
			}
			
			/*
			 * 사용자 정의 컨트롤에서 insert 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn4Insert(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn4 = e.control;
				doInsertDataset();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 delete 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn4Delete(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn4 = e.control;
				var vnGrdIdx = util.Grid.getIndex(app, "grdCmnDataset");
				
				//디테일 로우 건수 체크
				var vsIdxs = util.Grid.getCheckOrSelectedRowIndex(app, "grdCmnDataset");
				
				var vsGrdLable = util.Grid.getTitle(app, "grdCmnDataset"); //데이터셋 목록 라벨
				var vsGrdDtlLable = util.Grid.getTitle(app, "grdCmnDatasetDtl"); //컬럼정보 목록 라벨
				
				if(!ValueUtil.isNull(vsIdxs)){
					var voIdx = String(vsIdxs).split(",");
					
					for(var i = 0 ; i < voIdx.length ; i++){
						var vnCnt = util.DataSet.getValue(app, "dsCmnDataset", voIdx[i], "DTL_CNT");
						
						if(vnCnt > 0){
							//@1 @2번째 항목에 대한 @3의 데이터가 존재합니다. @3의 데이터 삭제 후 삭제 가능합니다.
							util.Msg.warn("M214", [vsGrdLable, voIdx[i], vsGrdDtlLable, vsGrdDtlLable]);
							return false;
						}
					}
				}
				
				util.Grid.deleteRow(app, "grdCmnDataset");
				
				//신규 후 삭제일 경우 필요
				if(util.Grid.getRowState(app, "grdCmnDataset") == cpr.data.tabledata.RowState.UNCHANGED){
					doListMstRowSelectDtl();
				}
				
				//마스터 그리드 상태에 따른 디테일 제어
				doMstGrdStatus();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 restore 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn4Restore(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn4 = e.control;
				var vsStatus = util.Grid.getRowState(app, "grdCmnDataset");
				
				if(vsStatus == cpr.data.tabledata.RowState.INSERTED){
					doListMstRowSelectDtl();
				}
				doMstGrdStatus();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 save 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn4Save(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn4 = e.control;
				doSave();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 insert 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn1Insert(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn1 = e.control;
				doInsertDatasetDtl();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 delete 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn1Delete(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn1 = e.control;
				doDtlGrdStatus();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 restore 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn1Restore(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn1 = e.control;
				doDtlGrdStatus();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 save 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn1Save(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn1 = e.control;
				doSaveDtl();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 insert 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn2Insert(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn2 = e.control;
				doInsertDatasetCond();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 delete 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn2Delete(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn2 = e.control;
				doDtlCondGrdStatus();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 restore 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn2Restore(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn2 = e.control;
				doDtlCondGrdStatus();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 save 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn2Save(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn2 = e.control;
				doSaveCond();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 insert 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn3Insert(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn3 = e.control;
				doInsertDatasetParam();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 delete 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn3Delete(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn3 = e.control;
				doDtlParamGrdStatus();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 restore 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn3Restore(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn3 = e.control;
				doDtlParamGrdStatus();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 save 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn3Save(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn3 = e.control;
				doSaveParam();
			}
			
			/*
			 * 그리드에서 selection-change 이벤트 발생 시 호출.
			 * detail의 cell 클릭하여 설정된 selectionunit에 해당되는 단위가 선택될 때 발생하는 이벤트.
			 */
			function onGrdCmnDatasetSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdCmnDataset = e.control;
				if(util.Grid.getIndex(app, "grdCmnDataset") == -1){
					return false;
				}
				
				doListMstRowSelectDtl();
			//	ExtControl.refreshBind("binRptCmnDataset");
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsLanDivRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsReqParamRcdList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsColumnTypeList");
			dataSet_3.parseData({
				"columns": [{"name": "CD_PRP1"}],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsCondTypeCdList");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsCmnDataset");
			dataSet_5.parseData({
				"info": "CMN_DATASET@SQL_ID,LAN_DIV_RCD",
				"columns": [
					{"name": "SQL_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "SQL_FILE_NM"},
					{"name": "DATASET_NM"},
					{"name": "STD_YN"},
					{"name": "REMARK"},
					{"name": "DTL_CNT"},
					{"name": "LMT_NUM"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsCmnDatasetDtl");
			dataSet_6.parseData({
				"info": "CMN_DATASET_DTL@SQL_ID,LAN_DIV_RCD,COLUMN_NM",
				"columns": [
					{"name": "SQL_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "COLUMN_NM"},
					{"name": "COLUMN_ALIAS"},
					{"name": "COLUMN_TYPE"},
					{"name": "MAND_YN"},
					{"name": "SERIAL_NO"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsCmnDatasetParam");
			dataSet_7.parseData({
				"info": "CMN_DATASET_PARAM@SQL_ID,LAN_DIV_RCD,REQ_PARAM_RCD",
				"columns": [
					{"name": "SQL_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "REQ_PARAM_RCD"},
					{"name": "REQ_PARAM_KEY"},
					{"name": "REQ_PARAM_DEF"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsCmnDatasetCond");
			dataSet_8.parseData({
				"info": "CMN_DATASET_COND@SQL_ID,LAN_DIV_RCD,COND_KEY",
				"columns": [
					{"name": "SQL_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "COND_KEY"},
					{"name": "COND_COL"},
					{"name": "COND_NM"},
					{"name": "COND_TYPE_CD"},
					{"name": "CD_NM"},
					{"name": "SERIAL_NO"},
					{"name": "MAND_YN"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			var dataMap_1 = new cpr.data.DataMap("dmReqList");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strDatasetNm",
						"dataType": "string"
					},
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqListDtlParam");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strSqlId",
						"dataType": "string"
					},
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/cmn/StdCmnDataSetMgt/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_4, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/cmn/StdCmnDataSetMgt/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_5, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subListDtl");
			submission_3.action = "/cmn/StdCmnDataSetMgt/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_2);
			submission_3.addResponseData(dataSet_6, false);
			submission_3.addResponseData(dataSet_7, false);
			submission_3.addResponseData(dataSet_8, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subSave");
			submission_4.action = "/cmn/StdCmnDataSetMgt/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataSet_5);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subSaveDtl");
			submission_5.action = "/cmn/StdCmnDataSetMgt/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataSet_6);
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("subSaveParam");
			submission_6.action = "/cmn/StdCmnDataSetMgt/";
			submission_6.mediaType = "application/x-www-form-urlencoded";
			submission_6.addRequestData(dataSet_7);
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("subListDatasetDtl");
			submission_7.action = "/cmn/StdCmnDataSetMgt/";
			submission_7.mediaType = "application/x-www-form-urlencoded";
			submission_7.addRequestData(dataMap_2);
			submission_7.addResponseData(dataSet_6, false);
			app.register(submission_7);
			
			var submission_8 = new cpr.protocols.Submission("subListDatasetParam");
			submission_8.action = "/cmn/StdCmnDataSetMgt/";
			submission_8.mediaType = "application/x-www-form-urlencoded";
			submission_8.addRequestData(dataMap_2);
			submission_8.addResponseData(dataSet_7, false);
			app.register(submission_8);
			
			var submission_9 = new cpr.protocols.Submission("subListDatasetCond");
			submission_9.action = "/cmn/StdCmnDataSetMgt/";
			submission_9.mediaType = "application/x-www-form-urlencoded";
			submission_9.addRequestData(dataMap_2);
			submission_9.addResponseData(dataSet_8, false);
			app.register(submission_9);
			
			var submission_10 = new cpr.protocols.Submission("subSaveCond");
			submission_10.action = "/cmn/StdCmnDataSetMgt/";
			submission_10.mediaType = "application/x-www-form-urlencoded";
			submission_10.addRequestData(dataSet_8);
			app.register(submission_10);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optDatasetNm");
				output_1.value = "";
				output_1.bind("value").toLanguage("UI-SCR-DATASET");
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "100px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbDatasetNm");
				inputBox_1.bind("fieldLabel").toExpression("#optDatasetNm.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strDatasetNm");
				if(typeof onIpbDatasetNmKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbDatasetNmKeydown);
				}
				container.addChild(inputBox_1, {
					"top": "5px",
					"left": "110px",
					"width": "160px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optLanDivRcd");
				output_2.value = "";
				output_2.bind("value").toLanguage("UI-SCR-LANKEY");
				container.addChild(output_2, {
					"top": "5px",
					"left": "280px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbLanDivRcd");
				comboBox_1.bind("fieldLabel").toExpression("#optLanDivRcd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strLanDivRcd");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("전체", ""));
					comboBox_1.setItemSet(app.lookup("dsLanDivRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "385px",
					"width": "100px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "32px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-DATASETLIST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "215px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnNew");
				button_2.value = "";
				button_2.style.setClasses(["btn-new"]);
				button_2.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewClick == "function") {
					button_2.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "365px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnDel");
				button_3.value = "";
				button_3.style.setClasses(["btn-delete"]);
				button_3.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_3.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "430px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnRestore");
				button_4.value = "";
				button_4.style.setClasses(["btn-restore"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_4.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "495px",
					"width": "60px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button("btnSave");
				button_5.value = "";
				button_5.style.setClasses(["btn-save"]);
				button_5.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_5.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_5, {
					"top": "5px",
					"left": "560px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCmnDataset");
				grid_1.init({
					"dataSet": app.lookup("dsCmnDataset"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "134px"},
						{"width": "111px"},
						{"width": "78px"},
						{"width": "88px"},
						{"width": "84px"},
						{"width": "64px"},
						{"width": "203px"},
						{"width": "70px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-DATASET");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.text = "SQL_ID";
									cell.style.setClasses(["require"]);
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-LANKEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-SQLFILENM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SQLFILENM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-STD_YN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-REMARK");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.text = "DTL건수";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_3 = new cpr.controls.Output();
										output_3.style.css({
											"text-align" : "center"
										});
										return output_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "DATASET_NM";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("gdIpbDatasetNm");
										inputBox_2.maxLength = 50;
										inputBox_2.userAttr({"require": "Y"});
										inputBox_2.bind("value").toDataColumn("DATASET_NM");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "SQL_ID";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("gdIpbSqlId");
										inputBox_3.maxLength = 50;
										inputBox_3.userAttr({"require": "Y"});
										inputBox_3.bind("value").toDataColumn("SQL_ID");
										return inputBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "LAN_DIV_RCD";
									cell.control = (function(){
										var comboBox_2 = new cpr.controls.ComboBox("gdCbbLanDivRcd");
										comboBox_2.userAttr({"require": "Y"});
										(function(comboBox_2){
											comboBox_2.addItem(new cpr.controls.Item("선택", ""));
											comboBox_2.setItemSet(app.lookup("dsLanDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_2);
										comboBox_2.bind("value").toDataColumn("LAN_DIV_RCD");
										return comboBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "SQL_FILE_NM";
									cell.control = (function(){
										var inputBox_4 = new cpr.controls.InputBox("gdIpbSqlFileNm");
										inputBox_4.maxLength = 50;
										inputBox_4.userAttr({"require": "Y"});
										inputBox_4.bind("value").toDataColumn("SQL_FILE_NM");
										return inputBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "LMT_NUM";
									cell.control = (function(){
										var inputBox_5 = new cpr.controls.InputBox("gdIpbLmtCnt");
										inputBox_5.maxLength = 50;
										inputBox_5.bind("value").toDataColumn("LMT_NUM");
										return inputBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "STD_YN";
									cell.control = (function(){
										var checkBox_1 = new cpr.controls.CheckBox("gdCkbStdYn");
										checkBox_1.value = "";
										checkBox_1.trueValue = "Y";
										checkBox_1.falseValue = "";
										checkBox_1.text = "";
										checkBox_1.style.css({
											"text-align" : "center"
										});
										checkBox_1.bind("value").toDataColumn("STD_YN");
										return checkBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "REMARK";
									cell.control = (function(){
										var inputBox_6 = new cpr.controls.InputBox("gdIpbRemark");
										inputBox_6.maxLength = 1000;
										inputBox_6.bind("value").toDataColumn("REMARK");
										return inputBox_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "DTL_CNT";
								}
							}
						]
					}
				});
				if(typeof onGrdCmnDatasetSelectionChange == "function") {
					grid_1.addEventListener("selection-change", onGrdCmnDatasetSelectionChange);
				}
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "615px",
					"height": "565px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "72px",
				"left": "5px",
				"width": "625px",
				"height": "600px"
			});
			
			var group_3 = new cpr.controls.Container("grpDataDtl");
			// Layout
			var xYLayout_4 = new cpr.controls.layouts.XYLayout();
			group_3.setLayout(xYLayout_4);
			(function(container){
				var userDefinedControl_3 = linker.userDefinedControl_3 = new udc.com.comTitle();
				userDefinedControl_3.bind("title").toLanguage("UI-SCR-COLINFO");
				container.addChild(userDefinedControl_3, {
					"top": "5px",
					"left": "5px",
					"width": "215px",
					"height": "25px"
				});
				var button_6 = new cpr.controls.Button("btnNewDtl");
				button_6.value = "";
				button_6.style.setClasses(["btn-new"]);
				button_6.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewDtlClick == "function") {
					button_6.addEventListener("click", onBtnNewDtlClick);
				}
				container.addChild(button_6, {
					"top": "5px",
					"left": "335px",
					"width": "60px",
					"height": "25px"
				});
				var button_7 = new cpr.controls.Button("btnDelDtl");
				button_7.value = "";
				button_7.style.setClasses(["btn-delete"]);
				button_7.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelDtlClick == "function") {
					button_7.addEventListener("click", onBtnDelDtlClick);
				}
				container.addChild(button_7, {
					"top": "5px",
					"left": "400px",
					"width": "60px",
					"height": "25px"
				});
				var button_8 = new cpr.controls.Button("btnRestoreDtl");
				button_8.value = "";
				button_8.style.setClasses(["btn-restore"]);
				button_8.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreDtlClick == "function") {
					button_8.addEventListener("click", onBtnRestoreDtlClick);
				}
				container.addChild(button_8, {
					"top": "5px",
					"left": "465px",
					"width": "60px",
					"height": "25px"
				});
				var button_9 = new cpr.controls.Button("btnSaveDtl");
				button_9.value = "";
				button_9.style.setClasses(["btn-save"]);
				button_9.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveDtlClick == "function") {
					button_9.addEventListener("click", onBtnSaveDtlClick);
				}
				container.addChild(button_9, {
					"top": "5px",
					"left": "530px",
					"width": "60px",
					"height": "25px"
				});
				var grid_2 = linker.grid_2 = new cpr.controls.Grid("grdCmnDatasetDtl");
				grid_2.init({
					"dataSet": app.lookup("dsCmnDatasetDtl"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "140px"},
						{"width": "131px"},
						{"width": "86px"},
						{"width": "82px"},
						{"width": "54px"},
						{
							"width": "123px",
							"visible": false
						},
						{"width": "123px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-COLNM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-COLALIAS");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-COLTYPE");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-LANKEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SERIAL_NO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.text = "SQL ID";
									cell.style.setClasses(["require"]);
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-MAND_YN");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_4 = new cpr.controls.Output();
										output_4.style.css({
											"text-align" : "center"
										});
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "COLUMN_NM";
									cell.control = (function(){
										var inputBox_7 = new cpr.controls.InputBox("gdIpbColumnNmDtl");
										inputBox_7.maxLength = 50;
										inputBox_7.userAttr({"require": "Y"});
										inputBox_7.bind("value").toDataColumn("COLUMN_NM");
										return inputBox_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "COLUMN_ALIAS";
									cell.control = (function(){
										var inputBox_8 = new cpr.controls.InputBox("gdIpbColumnAliasDtl");
										inputBox_8.maxLength = 50;
										inputBox_8.userAttr({"require": "Y"});
										inputBox_8.bind("value").toDataColumn("COLUMN_ALIAS");
										return inputBox_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "COLUMN_TYPE";
									cell.control = (function(){
										var comboBox_3 = new cpr.controls.ComboBox("gdCbbColumnTypeDtl");
										comboBox_3.userAttr({"require": "Y"});
										(function(comboBox_3){
											comboBox_3.addItem(new cpr.controls.Item("선택", ""));
											comboBox_3.setItemSet(app.lookup("dsColumnTypeList"), {
												"label": "CD_PRP1",
												"value": "CD_PRP1"
											});
										})(comboBox_3);
										comboBox_3.bind("value").toDataColumn("COLUMN_TYPE");
										return comboBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "LAN_DIV_RCD";
									cell.control = (function(){
										var comboBox_4 = new cpr.controls.ComboBox("gdCbbLanDivRcdDtl");
										comboBox_4.enabled = false;
										comboBox_4.hideButton = true;
										comboBox_4.userAttr({"require": "Y"});
										(function(comboBox_4){
											comboBox_4.addItem(new cpr.controls.Item("선택", ""));
											comboBox_4.setItemSet(app.lookup("dsLanDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_4);
										comboBox_4.bind("value").toDataColumn("LAN_DIV_RCD");
										return comboBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "SERIAL_NO";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("gdIpbSerialNoDtl");
										numberEditor_1.spinButton = false;
										numberEditor_1.format = "999,999,999,999,999";
										numberEditor_1.bind("value").toDataColumn("SERIAL_NO");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "SQL_ID";
									cell.control = (function(){
										var inputBox_9 = new cpr.controls.InputBox("gdIpbSqlIdDtl");
										inputBox_9.maxLength = 50;
										inputBox_9.userAttr({"require": "Y"});
										inputBox_9.bind("value").toDataColumn("SQL_ID");
										return inputBox_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "MAND_YN";
									cell.control = (function(){
										var checkBox_2 = new cpr.controls.CheckBox("gdCkbMandYnDtl");
										checkBox_2.value = "";
										checkBox_2.trueValue = "Y";
										checkBox_2.falseValue = "";
										checkBox_2.text = "";
										checkBox_2.style.css({
											"text-align" : "center"
										});
										checkBox_2.bind("value").toDataColumn("MAND_YN");
										return checkBox_2;
									})();
								}
							}
						]
					}
				});
				if(typeof onGrdCmnDatasetDtlSelectionChange == "function") {
					grid_2.addEventListener("selection-change", onGrdCmnDatasetDtlSelectionChange);
				}
				container.addChild(grid_2, {
					"top": "30px",
					"left": "5px",
					"width": "585px",
					"height": "205px"
				});
			})(group_3);
			container.addChild(group_3, {
				"top": "72px",
				"left": "635px",
				"width": "595px",
				"height": "240px"
			});
			
			var group_4 = new cpr.controls.Container("grpDataParam");
			// Layout
			var xYLayout_5 = new cpr.controls.layouts.XYLayout();
			group_4.setLayout(xYLayout_5);
			(function(container){
				var userDefinedControl_4 = linker.userDefinedControl_4 = new udc.com.comTitle();
				userDefinedControl_4.bind("title").toLanguage("UI-SCR-REQPARAMLIST");
				container.addChild(userDefinedControl_4, {
					"top": "5px",
					"left": "5px",
					"width": "215px",
					"height": "25px"
				});
				var button_10 = new cpr.controls.Button("btnNewParam");
				button_10.value = "";
				button_10.style.setClasses(["btn-new"]);
				button_10.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewParamClick == "function") {
					button_10.addEventListener("click", onBtnNewParamClick);
				}
				container.addChild(button_10, {
					"top": "5px",
					"left": "335px",
					"width": "60px",
					"height": "25px"
				});
				var button_11 = new cpr.controls.Button("btnDelParam");
				button_11.value = "";
				button_11.style.setClasses(["btn-delete"]);
				button_11.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelParamClick == "function") {
					button_11.addEventListener("click", onBtnDelParamClick);
				}
				container.addChild(button_11, {
					"top": "5px",
					"left": "400px",
					"width": "60px",
					"height": "25px"
				});
				var button_12 = new cpr.controls.Button("btnRestoreParam");
				button_12.value = "";
				button_12.style.setClasses(["btn-restore"]);
				button_12.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreParamClick == "function") {
					button_12.addEventListener("click", onBtnRestoreParamClick);
				}
				container.addChild(button_12, {
					"top": "5px",
					"left": "465px",
					"width": "60px",
					"height": "25px"
				});
				var button_13 = new cpr.controls.Button("btnSaveParam");
				button_13.value = "";
				button_13.style.setClasses(["btn-save"]);
				button_13.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveParamClick == "function") {
					button_13.addEventListener("click", onBtnSaveParamClick);
				}
				container.addChild(button_13, {
					"top": "5px",
					"left": "530px",
					"width": "60px",
					"height": "25px"
				});
				var grid_3 = linker.grid_3 = new cpr.controls.Grid("grdCmnDatasetParam");
				grid_3.init({
					"dataSet": app.lookup("dsCmnDatasetParam"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "127px"},
						{"width": "165px"},
						{"width": "123px"},
						{"width": "77px"},
						{
							"width": "121px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-REQPARAMNM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-REQPARAMCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-DEFAULT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-LANKEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.text = "SQL 파일 ID";
									cell.style.setClasses(["require"]);
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_5 = new cpr.controls.Output();
										output_5.style.css({
											"text-align" : "center"
										});
										return output_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "REQ_PARAM_RCD";
									cell.control = (function(){
										var comboBox_5 = new cpr.controls.ComboBox("gdCbbReqParamRcdParam");
										comboBox_5.userAttr({"require": "Y"});
										(function(comboBox_5){
											comboBox_5.addItem(new cpr.controls.Item("선택", ""));
											comboBox_5.setItemSet(app.lookup("dsReqParamRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_5);
										comboBox_5.bind("value").toDataColumn("REQ_PARAM_RCD");
										return comboBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "REQ_PARAM_KEY";
									cell.control = (function(){
										var inputBox_10 = new cpr.controls.InputBox("gdIpbReqParamKeyParam");
										inputBox_10.maxLength = 50;
										inputBox_10.userAttr({"require": "Y"});
										inputBox_10.bind("value").toDataColumn("REQ_PARAM_KEY");
										return inputBox_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "REQ_PARAM_DEF";
									cell.control = (function(){
										var inputBox_11 = new cpr.controls.InputBox("gdIpbReqParamDefParam");
										inputBox_11.maxLength = 50;
										inputBox_11.bind("value").toDataColumn("REQ_PARAM_DEF");
										return inputBox_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "LAN_DIV_RCD";
									cell.control = (function(){
										var comboBox_6 = new cpr.controls.ComboBox("gdCbbLanDivRcdParam");
										comboBox_6.enabled = false;
										comboBox_6.hideButton = true;
										comboBox_6.userAttr({"require": "Y"});
										(function(comboBox_6){
											comboBox_6.addItem(new cpr.controls.Item("선택", ""));
											comboBox_6.setItemSet(app.lookup("dsLanDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_6);
										comboBox_6.bind("value").toDataColumn("LAN_DIV_RCD");
										return comboBox_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "SQL_ID";
									cell.control = (function(){
										var inputBox_12 = new cpr.controls.InputBox("gdIpbSqlIdParam");
										inputBox_12.maxLength = 50;
										inputBox_12.userAttr({"require": "Y"});
										inputBox_12.bind("value").toDataColumn("SQL_ID");
										return inputBox_12;
									})();
								}
							}
						]
					}
				});
				if(typeof onGrdCmnDatasetParamSelectionChange == "function") {
					grid_3.addEventListener("selection-change", onGrdCmnDatasetParamSelectionChange);
				}
				container.addChild(grid_3, {
					"top": "30px",
					"left": "5px",
					"width": "585px",
					"height": "140px"
				});
			})(group_4);
			container.addChild(group_4, {
				"top": "497px",
				"left": "635px",
				"width": "595px",
				"height": "175px"
			});
			
			var group_5 = new cpr.controls.Container("grpDataCond");
			// Layout
			var xYLayout_6 = new cpr.controls.layouts.XYLayout();
			group_5.setLayout(xYLayout_6);
			(function(container){
				var userDefinedControl_5 = linker.userDefinedControl_5 = new udc.com.comTitle();
				userDefinedControl_5.bind("title").toLanguage("UI-SCR-REQPARAMLIST");
				container.addChild(userDefinedControl_5, {
					"top": "5px",
					"left": "5px",
					"width": "215px",
					"height": "25px"
				});
				var button_14 = new cpr.controls.Button("btnNewCond");
				button_14.value = "";
				button_14.style.setClasses(["btn-new"]);
				button_14.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewCondClick == "function") {
					button_14.addEventListener("click", onBtnNewCondClick);
				}
				container.addChild(button_14, {
					"top": "5px",
					"left": "335px",
					"width": "60px",
					"height": "25px"
				});
				var button_15 = new cpr.controls.Button("btnDelCond");
				button_15.value = "";
				button_15.style.setClasses(["btn-delete"]);
				button_15.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelCondClick == "function") {
					button_15.addEventListener("click", onBtnDelCondClick);
				}
				container.addChild(button_15, {
					"top": "5px",
					"left": "400px",
					"width": "60px",
					"height": "25px"
				});
				var button_16 = new cpr.controls.Button("btnRestoreCond");
				button_16.value = "";
				button_16.style.setClasses(["btn-restore"]);
				button_16.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreCondClick == "function") {
					button_16.addEventListener("click", onBtnRestoreCondClick);
				}
				container.addChild(button_16, {
					"top": "5px",
					"left": "465px",
					"width": "60px",
					"height": "25px"
				});
				var button_17 = new cpr.controls.Button("btnSaveCond");
				button_17.value = "";
				button_17.style.setClasses(["btn-save"]);
				button_17.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveCondClick == "function") {
					button_17.addEventListener("click", onBtnSaveCondClick);
				}
				container.addChild(button_17, {
					"top": "5px",
					"left": "530px",
					"width": "60px",
					"height": "25px"
				});
				var grid_4 = linker.grid_4 = new cpr.controls.Grid("grdCmnDatasetCond");
				grid_4.init({
					"dataSet": app.lookup("dsCmnDatasetCond"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "103px"},
						{"width": "151px"},
						{"width": "108px"},
						{"width": "107px"},
						{"width": "106px"},
						{"width": "54px"},
						{"width": "78px"},
						{"width": "106px"},
						{"width": "121px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-DEFAULT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-REQPARAMCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-DEFAULT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-DEFAULT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-DEFAULT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-DEFAULT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-DEFAULT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-LANKEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.text = "SQL 파일 ID";
									cell.style.setClasses(["require"]);
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_6 = new cpr.controls.Output();
										output_6.style.css({
											"text-align" : "center"
										});
										return output_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "COND_TYPE_CD";
									cell.control = (function(){
										var comboBox_7 = new cpr.controls.ComboBox("gdCbbCondTypeCd");
										comboBox_7.userAttr({"require": "Y"});
										(function(comboBox_7){
											comboBox_7.addItem(new cpr.controls.Item("선택", ""));
											comboBox_7.setItemSet(app.lookup("dsCondTypeCdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_7);
										comboBox_7.bind("value").toDataColumn("COND_TYPE_CD");
										return comboBox_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "COND_KEY";
									cell.control = (function(){
										var inputBox_13 = new cpr.controls.InputBox("gdIpbCondKey");
										inputBox_13.maxLength = 50;
										inputBox_13.userAttr({"require": "Y"});
										inputBox_13.bind("value").toDataColumn("COND_KEY");
										return inputBox_13;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "COND_COL";
									cell.control = (function(){
										var inputBox_14 = new cpr.controls.InputBox("gdIpbCondNm");
										inputBox_14.maxLength = 50;
										inputBox_14.userAttr({"require": "Y"});
										inputBox_14.bind("value").toDataColumn("COND_COL");
										return inputBox_14;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "COND_NM";
									cell.control = (function(){
										var inputBox_15 = new cpr.controls.InputBox("ipbCondNm");
										inputBox_15.maxLength = 50;
										inputBox_15.userAttr({"require": "Y"});
										inputBox_15.bind("value").toDataColumn("COND_NM");
										return inputBox_15;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "CD_NM";
									cell.control = (function(){
										var inputBox_16 = new cpr.controls.InputBox("ipbCondCdNm");
										inputBox_16.maxLength = 50;
										inputBox_16.bind("value").toDataColumn("CD_NM");
										return inputBox_16;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "SERIAL_NO";
									cell.control = (function(){
										var numberEditor_2 = new cpr.controls.NumberEditor("ipbCondSerialNo");
										numberEditor_2.spinButton = false;
										numberEditor_2.format = "999";
										numberEditor_2.bind("value").toDataColumn("SERIAL_NO");
										return numberEditor_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "MAND_YN";
									cell.control = (function(){
										var checkBox_3 = new cpr.controls.CheckBox("ckbCondMandYn");
										checkBox_3.value = "";
										checkBox_3.trueValue = "Y";
										checkBox_3.falseValue = "";
										checkBox_3.text = "";
										checkBox_3.style.css({
											"text-align" : "center"
										});
										checkBox_3.bind("value").toDataColumn("MAND_YN");
										return checkBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "LAN_DIV_RCD";
									cell.control = (function(){
										var comboBox_8 = new cpr.controls.ComboBox("gdCbbCondLanDivRcd");
										comboBox_8.hideButton = true;
										comboBox_8.userAttr({"require": "Y"});
										(function(comboBox_8){
											comboBox_8.addItem(new cpr.controls.Item("선택", ""));
											comboBox_8.setItemSet(app.lookup("dsLanDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_8);
										comboBox_8.bind("value").toDataColumn("LAN_DIV_RCD");
										return comboBox_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "SQL_ID";
									cell.control = (function(){
										var inputBox_17 = new cpr.controls.InputBox("gdIpbCondSqlId");
										inputBox_17.maxLength = 50;
										inputBox_17.userAttr({"require": "Y"});
										inputBox_17.bind("value").toDataColumn("SQL_ID");
										return inputBox_17;
									})();
								}
							}
						]
					}
				});
				if(typeof onGrdCmnDatasetCondSelectionChange == "function") {
					grid_4.addEventListener("selection-change", onGrdCmnDatasetCondSelectionChange);
				}
				container.addChild(grid_4, {
					"top": "30px",
					"left": "5px",
					"width": "585px",
					"height": "140px"
				});
			})(group_5);
			container.addChild(group_5, {
				"top": "317px",
				"left": "635px",
				"width": "595px",
				"height": "175px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
			linker.userDefinedControl_3.ctrl = linker.grid_2;
			linker.userDefinedControl_4.ctrl = linker.grid_3;
			linker.userDefinedControl_5.ctrl = linker.grid_4;
		}
	});
	app.title = "stdCmnCDataSetMgt";
	cpr.core.Platform.INSTANCE.register(app);
})();
