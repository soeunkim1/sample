/*
 * App URI: app/cmn/stdCmnCMenuStruct
 * Source Location: app/cmn/stdCmnCMenuStruct.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cmn/stdCmnCMenuStruct", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var util = new ComUtil(app);
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				util.Submit.send(app, "subOnLoad", function(pbSuccess){
					if(pbSuccess){
						
						util.Control.redraw(app, ["cbbMenuDiv", "cbbSystemDiv", "cbbLanDivRcd"]);
						
						util.DataMap.setValue(app, "dmReqList", "strLanDivRcd", util.getSystemLocale(app));			
						
						util.SelectCtl.selectItem(app, "cbbMenuDiv", 0);
					}
				});
				
			}
			
			
			/**
			 * @desc 메뉴구분 콤보박스 변경시 시스템구분 콤보박스에서 해당 메뉴구분의 하위메뉴만 표시한다.
			 * @param 
			 * @return 
			 * @author 최경민 2015.11.10
			 */
			function setSystemDivListByMenuDiv(){
			//해당 콤보박스 컨트롤의 fiterExp 속성으로 변경 필요...
				util.SelectCtl.cascadeList("cbbMenuDiv", "cbbSystemDiv", "UMENU_ID");
			}
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbbMenuDivSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cbbMenuDiv = e.control;
				setSystemDivListByMenuDiv();
			}
			
			/*
			 * 그룹에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onGrpSearchKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grpSearch = e.control;
				
				if(e.keyCode == cpr.events.KeyCode.ENTER){
					/** @type udc.com.btnSearch*/	
					var btnSearch = app.lookup("btnSearch");
					btnSearch.click();
				}
			}
			
			
			function doList(poCallBackFunc) {
			
				util.Submit.send(app, "subList", function(pbSuccess){
					if(pbSuccess){
						 util.Control.redraw(app, "trvUpMenu");
					}
					if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
				});
			}
				
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearch = e.control;
				
				if(util.Grid.isModified(app, "grdCmnMenu", "CRM")){
					return false;
				}
				
				if(!util.validate(app, "grpSearch")) {
					return false;
				}
				
				doList(function(pbSuccess){
					if (pbSuccess){ 
						util.Msg.notify(app, "NLS-INF-M024") ;
					}
				});
				
			}
			
			function doSave() {
				
				// 그리드 변경사항 체크
				if(!util.Grid.isModified(app, "grdCmnMenu", "MSG")){
					return false;
				}
				
				// 그리드  validation check
				if(!util.validate(app, "grdCmnMenu")) return false;
				
				
				util.Submit.send(app, "subSave", function(pbSuccess){
					if(pbSuccess){
						doList(function(pbListSuccess){
							if (pbListSuccess) util.Msg.notify(app, "NLS-INF-M025");
						}); 
					}
				});
			}
			
			
			/**
			 * @desc 신규입력시 상위메뉴 목록과 프로그램 목록에서 선택 한 값을 설정하여준다.
			 * @param 
			 * @return 
			 * @author 최경민 2015.11.11
			 */
			function doMoveList(){
				
				//상위메뉴 선택 값
				//var vsUpMenuKeySet = ExtTreeView.getSelectedValue("trvUpMenu");
				var vsUpMenuKeySet = util.Tree.getSelectedValue(app, "trvUpMenu");
				//프로그램목록 선택 인덱스
				//var vsPgmIdxs = ExtRepeat.getSelIdxOrFRowIdx("rptCmnPgm");
				var vaPgmIdxs = util.Grid.getCheckOrSelectedRowIndex(app, "grdCmnPgm");
				
				// 상위메뉴 == null || 프로그램목록 == null 조건의 경우 
				//상위메뉴가 없는 최상위 메뉴를 등록할 수 없으므로 && 조건으로 변경하였다.
				if( ValueUtil.isNull(vsUpMenuKeySet)  && vaPgmIdxs.length < 1){ 
					//이관할 데이터를 선택하세요.
					util.Msg.alert("NLS-INF-M006");
					return false;
				}
				
				
				for(var i = 0; i  < vaPgmIdxs.length; i++){
					
					var vaMenuInsertList = new Array(10);
					
					//프로그램목록 선택 인덱스
					var vnPgmIdx = vaPgmIdxs[i];
					//vaMenuInsertList[1] = ExtRepeat.getValue("rptCmnPgm", "LAN_DIV_RCD", vnPgmIdx);
					vaMenuInsertList[1] = util.Grid.getCellValue(app, "grdCmnPgm", "LAN_DIV_RCD", vnPgmIdx);
					
					if(!!vsUpMenuKeySet){
						
						var voRow = util.DataSet.findRow(app, "dsTrvUpMenu", "KEYSET =='" + vsUpMenuKeySet + "'");
			//			vaMenuInsertList[2] = ExtInstance.getValue("/root/resList/trvUpMenu/row", "MENU_ID", "child::KEYSET='" + vsUpMenuKeySet + "'");
			//			vaMenuInsertList[3] = ExtInstance.getValue("/root/resList/trvUpMenu/row", "PGM_ID", "child::KEYSET='" + vsUpMenuKeySet + "'");
			//			vaMenuInsertList[4] = ExtInstance.getValue("/root/resList/trvUpMenu/row", "LAN_DIV_RCD", "child::KEYSET='" + vsUpMenuKeySet + "'");
			//			vaMenuInsertList[5] = ExtInstance.getValue("/root/resList/trvUpMenu/row", "MENU_NM", "child::KEYSET='" + vsUpMenuKeySet + "'");
			//			var vnTrvMenuLvl = parseInt(ExtInstance.getValue("/root/resList/trvUpMenu/row", "MENU_LVL", "child::KEYSET='" + vsUpMenuKeySet + "'"));
			//			vaMenuInsertList[9] =  Number(vnTrvMenuLvl) + 1;
						vaMenuInsertList[2] = voRow.getValue("MENU_ID");
						vaMenuInsertList[3] = voRow.getValue("PGM_ID");
						vaMenuInsertList[4] = voRow.getValue("LAN_DIV_RCD");
						vaMenuInsertList[5] = voRow.getValue("MENU_NM");
						var vnTrvMenuLvl = parseInt(voRow.getValue("MENU_LVL"));
						vaMenuInsertList[9] =  Number(vnTrvMenuLvl) + 1;
					
					}else {
						//상위메뉴가 없을시 메뉴레벨 0
						vaMenuInsertList[9] =  0;
					}
					
			//		vaMenuInsertList[6] = ExtRepeat.getValue("rptCmnPgm", "UNIT_SYSTEM_RCD", vnPgmIdx);
			//		vaMenuInsertList[7] = ExtRepeat.getValue("rptCmnPgm", "PGM_ID", vnPgmIdx);
			//		vaMenuInsertList[8] = ExtRepeat.getValue("rptCmnPgm", "PGM_NM", vnPgmIdx);
					vaMenuInsertList[6] = util.Grid.getCellValue(app, "grdCmnPgm", "UNIT_SYSTEM_RCD", vnPgmIdx);
					vaMenuInsertList[7] = util.Grid.getCellValue(app, "grdCmnPgm", "PGM_ID", vnPgmIdx);
					vaMenuInsertList[8] = util.Grid.getCellValue(app, "grdCmnPgm", "PGM_NM", vnPgmIdx);
					
					
					
					if(vaMenuInsertList[7] == "MENUHEADER") vaMenuInsertList[0] = "";
					else vaMenuInsertList[0] = util.Grid.getCellValue(app, "grdCmnPgm", "PGM_ID", vnPgmIdx);
					
					
					if( (vsUpMenuKeySet == null || vsUpMenuKeySet  == "") &&  vaMenuInsertList[8] != "MENUHEADER"){
						//상위메뉴목록을 선택하지 않았다면 프로그램목록의 프로그램명이 MENUHEADER인것만 등록가능합니다.
						util.Msg.alert("NLS-WRN-M121");
						return;
					
					}
					
					//var vnNewIdx = ExtRepeat.insertRow("rptCmnMenu");
					var vnNewIdx = util.Grid.insertRow(app, "grdCmnMenu");
					
					var vaCondition = null;
					var vsNewMenuId = "";
					
					if(!!vsUpMenuKeySet){
						vsNewMenuId = doGetSearchCount("grdCmnMenu", [vaMenuInsertList[0], vaMenuInsertList[2]]);
					}
					
					if(vsNewMenuId != null) vaMenuInsertList[0] = vaMenuInsertList[0] + vsNewMenuId;
					for(var j = 0; j < maMenuColList.length; j++){
						
						//빈값이 아닌 경우에만 입력한다.
						if(!ValueUtil.isNull(vaMenuInsertList[j])){
							//ExtRepeat.setValue("rptCmnMenu", maMenuColList[j], vaMenuInsertList[j], vnNewIdx);
							util.Grid.setCellValue(app, "grdCmnMenu", maMenuColList[j], vaMenuInsertList[j], vnNewIdx);
						} 
						
					}
					
					//사용여부, 메뉴여부 체크
			//		ExtRepeat.setValue("rptCmnMenu", "USE_YN", "Y", vnNewIdx);
			//		ExtRepeat.setValue("rptCmnMenu", "MENU_YN", "Y", vnNewIdx);
					util.Grid.setCellValue(app, "grdCmnMenu", "USE_YN", "Y", vnNewIdx);
					util.Grid.setCellValue(app, "grdCmnMenu", "MENU_YN", "Y", vnNewIdx);
					
				}
				
			}
			
			//신규 입력시 리피터에 입력할 컬럼 목록
			var maMenuColList = [ "MENU_ID", "LAN_DIV_RCD", "UMENU_ID", "UPGM_ID", "ULAN_DIV_RCD"
			                               , "UMENU_NM", "UNIT_SYSTEM_RCD", "PGM_ID", "MENU_NM", "MENU_LVL"];
			
			/**
			 * @desc 그리드에 중복되는 로우 갯수 + 1 값을 리턴하여 중복 존재시  메뉴아이디+"1" 방식으로 입력하도록 한다. 
			 * @param 
			 * @return 
			 * @author 최경민 2015.11.11
			 */
			function doGetSearchCount(psGridId, paMenuIds){
				
				var vsPMenuId = paMenuIds[0];
				var vnPMenuIdLen = vsPMenuId.length;
				var vsPUMenuId = paMenuIds[1];
				var vaMenuIds = [];
				var vnResult = "";
				
				//var vnCnt = ExtRepeat.rowCount(psGridId);
				var vnCnt = util.Grid.getRowCount(app, psGridId);
				if(vnCnt != 0){
					for(var i = 0; i < vnCnt; i++){
			//			var vsUMenuId =  ExtRepeat.getValue(psGridId, "UMENU_ID", i);
			//			var vsMenuId = ExtRepeat.getValue(psGridId, "MENU_ID", i);
						var vsUMenuId =  util.Grid.getCellValue(app, psGridId, "UMENU_ID", i);
						var vsMenuId = util.Grid.getCellValue(app, psGridId, "MENU_ID", i);
						
						if(vsMenuId.substring(0, vnPMenuIdLen) == vsPMenuId){
							vaMenuIds.push(vsMenuId);
						}
					}
					
					if(vaMenuIds.length != 0 && vnResult != null){
						var vnTempMenuNo = 0;
						for(var k = 0, j = vaMenuIds.length; k < j; k++){
							var vnMenuNO = Number(vaMenuIds[k].substring(vnPMenuIdLen));
							if(Number(vnTempMenuNo) < vnMenuNO) vnTempMenuNo = vnMenuNO;
						}
						vnTempMenuNo++;
						vnResult = vnTempMenuNo;
					}
				}
				return vnResult;
			};			
						
			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDeleteClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDelete = e.control;
				util.Grid.deleteRow(app, "grdCmnMenu");
			}
			
			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRestoreClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnRestore = e.control;
				util.Grid.revertRowData(app, "grdCmnMenu");
			}
			
			/*
			 * "저장" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSave = e.control;
				doSave();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMoveClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnMove = e.control;
				if(util.Grid.getIndex(app, "grdCmnPgm") == -1){
					//선택된 데이터가 없습니다.
					util.Msg.warn("M008");
				}
				
				doMoveList();
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbPgmIdNmFilterKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbPgmIdNmFilter = e.control;
				if(e.keyCode == cpr.events.KeyCode.ENTER){
					doFilterPgm();		
				}
			}
			
			function doFilterPgm() {
				
				var vsFilterPgmIdNm = util.Control.getValue(app, "ipbPgmIdNmFilter");
				vsFilterPgmIdNm = ValueUtil.fixNull(vsFilterPgmIdNm);
				util.Grid.filter("grdCmnPgm", "PGM_ID *= '"+ vsFilterPgmIdNm +"' || PGM_NM *= '" + vsFilterPgmIdNm + "'");
				
			}
						
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchPgmClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearchPgm = e.control;
				app.lookup("grdCmnPgm").clearSelection();
				doFilterPgm();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsLanDivRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsMenuDivList");
			dataSet_2.parseData({
				"columns": [
					{"name": "UMENU_ID"},
					{"name": "MENU_NM"},
					{"name": "MENU_ID"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsUnitSystemRcdList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsMenuNmList");
			dataSet_4.parseData({
				"columns": [
					{"name": "MENU_NM"},
					{"name": "MENU_ID"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsPgmTypeRcdList");
			dataSet_5.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsMenuSystemList");
			dataSet_6.parseData({
				"columns": [
					{"name": "UMENU_ID"},
					{"name": "MENU_NM"},
					{"name": "MENU_ID"},
					{"name": "UNIT_SYSTEM_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsCmnMenu");
			dataSet_7.parseData({
				"info": "CMN_MENU@MENU_ID,PGM_ID,LAN_DIV_RCD",
				"columns": [
					{"name": "MENU_ID"},
					{"name": "PGM_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "UMENU_ID"},
					{"name": "UPGM_ID"},
					{"name": "ULAN_DIV_RCD"},
					{"name": "MENU_NM"},
					{"name": "UNIT_SYSTEM_RCD"},
					{"name": "MENU_LVL"},
					{"name": "PRT_ORD"},
					{"name": "USE_YN"},
					{"name": "MENU_YN"},
					{"name": "SHOW_YN"},
					{"name": "UMENU_NM"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsCmnPgm");
			dataSet_8.parseData({
				"info": "CMN_PGM@PGM_ID",
				"columns": [
					{"name": "PGM_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "PGM_NM"},
					{"name": "UNIT_SYSTEM_RCD"},
					{"name": "PGM_DIV_RCD"},
					{"name": "PGM_TYPE_RCD"},
					{"name": "USE_YN"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			
			var dataSet_9 = new cpr.data.DataSet("dsTrvUpMenu");
			dataSet_9.parseData({
				"columns": [
					{"name": "MENU_ID"},
					{"name": "PGM_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "UMENU_ID"},
					{"name": "UPGM_ID"},
					{"name": "ULAN_GBN"},
					{"name": "KEYSET"},
					{"name": "UKEYSET"},
					{"name": "MENU_NM"},
					{"name": "PGM_NM"},
					{"name": "MENU_YN"},
					{"name": "MENU_LVL"}
				],
				"rows": []
			});
			app.register(dataSet_9);
			var dataMap_1 = new cpr.data.DataMap("dmReqList");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strMenuId",
						"dataType": "string"
					},
					{
						"name": "strUnitSystemRcd",
						"dataType": "string"
					},
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					},
					{
						"name": "strMenuNm",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/cmn/StdCmnMenuStruct/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataSet_5, false);
			submission_1.addResponseData(dataSet_6, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/cmn/StdCmnMenuStruct/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_7, false);
			submission_2.addResponseData(dataSet_8, false);
			submission_2.addResponseData(dataSet_9, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/cmn/StdCmnMenuStruct/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_7);
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optMenuDiv");
				output_1.value = "";
				output_1.bind("value").toLanguage("UI-SCR-MENUDIV");
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbMenuDiv");
				comboBox_1.bind("fieldLabel").toExpression("#optMenuDiv.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strMenuId");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("전체", "%"));
					comboBox_1.setItemSet(app.lookup("dsMenuDivList"), {
						"label": "MENU_NM",
						"value": "MENU_ID"
					});
				})(comboBox_1);
				if(typeof onCbbMenuDivSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onCbbMenuDivSelectionChange);
				}
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "110px",
					"width": "130px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optSystemDiv");
				output_2.value = "";
				output_2.bind("value").toLanguage("UI-SCR-SYSTEMDIV");
				container.addChild(output_2, {
					"top": "5px",
					"left": "250px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_2 = new cpr.controls.ComboBox("cbbSystemDiv");
				comboBox_2.bind("fieldLabel").toExpression("#optSystemDiv.value");
				comboBox_2.bind("value").toDataMap(app.lookup("dmReqList"), "strUnitSystemRcd");
				(function(comboBox_2){
					comboBox_2.addItem(new cpr.controls.Item("전체", "%"));
					comboBox_2.setItemSet(app.lookup("dsMenuSystemList"), {
						"label": "MENU_NM",
						"value": "UNIT_SYSTEM_RCD"
					});
				})(comboBox_2);
				container.addChild(comboBox_2, {
					"top": "5px",
					"left": "355px",
					"width": "130px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optLanDivRcd");
				output_3.value = "";
				output_3.style.setClasses(["require"]);
				output_3.bind("value").toLanguage("UI-SCR-LANKEY");
				container.addChild(output_3, {
					"top": "5px",
					"left": "495px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_3 = new cpr.controls.ComboBox("cbbLanDivRcd");
				comboBox_3.userAttr({"require": "Y"});
				comboBox_3.bind("fieldLabel").toExpression("#optLanDivRcd.value");
				comboBox_3.bind("value").toDataMap(app.lookup("dmReqList"), "strLanDivRcd");
				(function(comboBox_3){
					comboBox_3.setItemSet(app.lookup("dsLanDivRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_3);
				container.addChild(comboBox_3, {
					"top": "5px",
					"left": "600px",
					"width": "130px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbMenuIdNm");
				inputBox_1.maxLength = 100;
				inputBox_1.bind("fieldLabel").toExpression("#optMenuIdNm.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strMenuNm");
				if(typeof onIpbMenuIdNmKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbMenuIdNmKeydown);
				}
				container.addChild(inputBox_1, {
					"top": "5px",
					"left": "845px",
					"width": "130px",
					"height": "25px"
				});
				var output_4 = new cpr.controls.Output("optMenuIdNm");
				output_4.value = "메뉴명/ID";
				container.addChild(output_4, {
					"top": "5px",
					"left": "740px",
					"width": "100px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "32px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-MENULST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "265px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnDel");
				button_2.value = "";
				button_2.style.setClasses(["btn-delete"]);
				button_2.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_2.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "1030px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnRestore");
				button_3.value = "";
				button_3.style.setClasses(["btn-restore"]);
				button_3.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_3.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "1095px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "";
				button_4.style.setClasses(["btn-save"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCmnMenu");
				grid_1.init({
					"dataSet": app.lookup("dsCmnMenu"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "148px"},
						{"width": "169px"},
						{"width": "188px"},
						{"width": "121px"},
						{"width": "120px"},
						{"width": "76px"},
						{"width": "86px"},
						{"width": "80px"},
						{"width": "68px"},
						{"width": "71px"},
						{
							"width": "122px",
							"visible": false
						},
						{
							"width": "113px",
							"visible": false
						},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "89px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-MENU_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-PGID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-MENU_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-UPMENUNM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-UNITSYSTEM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-LANKEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-MENULB");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PRT_ORD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-USE_YN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-MENUNMAPL");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-UMENU_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-UPGM_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-UPLANKEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-MENUSEE");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_5 = new cpr.controls.Output();
										output_5.style.css({
											"text-align" : "center"
										});
										return output_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "MENU_ID";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("gdIpbMenuId");
										inputBox_2.maxLength = 50;
										inputBox_2.userAttr({"require": "Y"});
										inputBox_2.bind("value").toDataColumn("MENU_ID");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "PGM_ID";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("gdIpbPgmId");
										inputBox_3.maxLength = 50;
										inputBox_3.userAttr({"require": "Y"});
										inputBox_3.bind("value").toDataColumn("PGM_ID");
										return inputBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "MENU_NM";
									cell.control = (function(){
										var inputBox_4 = new cpr.controls.InputBox("gdIpbMenuNm");
										inputBox_4.maxLength = 100;
										inputBox_4.userAttr({"require": "Y"});
										inputBox_4.bind("value").toDataColumn("MENU_NM");
										return inputBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "UMENU_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "UNIT_SYSTEM_RCD";
									cell.control = (function(){
										var comboBox_4 = new cpr.controls.ComboBox("gdCbbUnitSystemRcd");
										comboBox_4.userAttr({"require": "Y"});
										(function(comboBox_4){
											comboBox_4.addItem(new cpr.controls.Item("선택", ""));
											comboBox_4.setItemSet(app.lookup("dsUnitSystemRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_4);
										comboBox_4.bind("value").toDataColumn("UNIT_SYSTEM_RCD");
										return comboBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "LAN_DIV_RCD";
									cell.control = (function(){
										var comboBox_5 = new cpr.controls.ComboBox("gdCbbLanDivRcd");
										comboBox_5.userAttr({"require": "Y"});
										(function(comboBox_5){
											comboBox_5.addItem(new cpr.controls.Item("선택", ""));
											comboBox_5.setItemSet(app.lookup("dsLanDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_5);
										comboBox_5.bind("value").toDataColumn("LAN_DIV_RCD");
										return comboBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "MENU_LVL";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("gdIpbMenuLvl");
										numberEditor_1.spinButton = false;
										numberEditor_1.format = "99";
										numberEditor_1.userAttr({"require": "Y"});
										numberEditor_1.bind("value").toDataColumn("MENU_LVL");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "PRT_ORD";
									cell.control = (function(){
										var inputBox_5 = new cpr.controls.InputBox("gdIpbPrtOgd");
										inputBox_5.maxLength = 10;
										inputBox_5.bind("value").toDataColumn("PRT_ORD");
										return inputBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "USE_YN";
									cell.control = (function(){
										var checkBox_1 = new cpr.controls.CheckBox("gdCkbUseYn");
										checkBox_1.value = "";
										checkBox_1.trueValue = "Y";
										checkBox_1.falseValue = "";
										checkBox_1.text = "";
										checkBox_1.style.css({
											"text-align" : "center"
										});
										checkBox_1.bind("value").toDataColumn("USE_YN");
										return checkBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "MENU_YN";
									cell.control = (function(){
										var checkBox_2 = new cpr.controls.CheckBox("gdCkbMenuYn");
										checkBox_2.value = "";
										checkBox_2.trueValue = "Y";
										checkBox_2.falseValue = "";
										checkBox_2.text = "";
										checkBox_2.style.css({
											"text-align" : "center"
										});
										checkBox_2.bind("value").toDataColumn("MENU_YN");
										return checkBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "UMENU_ID";
									cell.control = (function(){
										var inputBox_6 = new cpr.controls.InputBox("gdIpbUmenuId");
										inputBox_6.maxLength = 50;
										inputBox_6.bind("value").toDataColumn("UMENU_ID");
										return inputBox_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "UPGM_ID";
									cell.control = (function(){
										var inputBox_7 = new cpr.controls.InputBox("gdIpbUpgmId");
										inputBox_7.maxLength = 50;
										inputBox_7.bind("value").toDataColumn("UPGM_ID");
										return inputBox_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.columnName = "ULAN_DIV_RCD";
									cell.control = (function(){
										var comboBox_6 = new cpr.controls.ComboBox("gdCbbUlanDivRcd");
										(function(comboBox_6){
											comboBox_6.setItemSet(app.lookup("dsLanDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_6);
										comboBox_6.bind("value").toDataColumn("ULAN_DIV_RCD");
										return comboBox_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.columnName = "SHOW_YN";
									cell.control = (function(){
										var checkBox_3 = new cpr.controls.CheckBox("gdCkbShowYn");
										checkBox_3.value = "";
										checkBox_3.trueValue = "Y";
										checkBox_3.falseValue = "";
										checkBox_3.text = "";
										checkBox_3.style.css({
											"text-align" : "center"
										});
										checkBox_3.bind("value").toDataColumn("SHOW_YN");
										return checkBox_3;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1215px",
					"height": "260px"
				});
				var userDefinedControl_3 = linker.userDefinedControl_3 = new udc.com.comTitle();
				userDefinedControl_3.bind("title").toLanguage("UI-SCR-PGLST");
				container.addChild(userDefinedControl_3, {
					"top": "295px",
					"left": "440px",
					"width": "265px",
					"height": "25px"
				});
				var userDefinedControl_4 = new udc.com.comFormTitle();
				userDefinedControl_4.bind("title").toLanguage("UI-SCR-UPMENULST");
				container.addChild(userDefinedControl_4, {
					"top": "295px",
					"left": "5px",
					"width": "150px",
					"height": "25px"
				});
				var grid_2 = linker.grid_2 = new cpr.controls.Grid("grdCmnPgm");
				grid_2.init({
					"dataSet": app.lookup("dsCmnPgm"),
					"columns": [
						{"width": "25px"},
						{"width": "40px"},
						{"width": "117px"},
						{"width": "199px"},
						{"width": "193px"},
						{"width": "106px"},
						{"width": "90px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-UNITSYSTEM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PGM_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PGM_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-TYPE");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-LANKEY");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "UNIT_SYSTEM_RCD";
									cell.control = (function(){
										var comboBox_7 = new cpr.controls.ComboBox("gdCbbUnitSystemRcdPgm");
										comboBox_7.enabled = false;
										comboBox_7.hideButton = true;
										(function(comboBox_7){
											comboBox_7.setItemSet(app.lookup("dsUnitSystemRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_7);
										comboBox_7.bind("value").toDataColumn("UNIT_SYSTEM_RCD");
										return comboBox_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "PGM_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "PGM_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "PGM_TYPE_RCD";
									cell.control = (function(){
										var comboBox_8 = new cpr.controls.ComboBox("gdCbbPgmTypeRcdPgm");
										comboBox_8.enabled = false;
										comboBox_8.hideButton = true;
										(function(comboBox_8){
											comboBox_8.setItemSet(app.lookup("dsPgmTypeRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_8);
										comboBox_8.bind("value").toDataColumn("PGM_TYPE_RCD");
										return comboBox_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "LAN_DIV_RCD";
									cell.control = (function(){
										var comboBox_9 = new cpr.controls.ComboBox("gdCbbLanDivRcdPgm");
										comboBox_9.enabled = false;
										comboBox_9.hideButton = true;
										(function(comboBox_9){
											comboBox_9.setItemSet(app.lookup("dsLanDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_9);
										comboBox_9.bind("value").toDataColumn("LAN_DIV_RCD");
										return comboBox_9;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_2, {
					"top": "320px",
					"left": "440px",
					"width": "780px",
					"height": "275px"
				});
				var button_5 = new cpr.controls.Button("btnMove");
				button_5.value = "";
				if(typeof onBtnMoveClick == "function") {
					button_5.addEventListener("click", onBtnMoveClick);
				}
				container.addChild(button_5, {
					"top": "440px",
					"left": "395px",
					"width": "25px",
					"height": "25px"
				});
				var output_6 = new cpr.controls.Output("optPgmIdNmFilter");
				output_6.value = "프로그램명/ID";
				container.addChild(output_6, {
					"top": "295px",
					"left": "890px",
					"width": "120px",
					"height": "25px"
				});
				var inputBox_8 = new cpr.controls.InputBox("ipbPgmIdNmFilter");
				inputBox_8.bind("fieldLabel").toExpression("#optPgmIdNmFilter.value");
				if(typeof onIpbPgmIdNmFilterKeydown == "function") {
					inputBox_8.addEventListener("keydown", onIpbPgmIdNmFilterKeydown);
				}
				container.addChild(inputBox_8, {
					"top": "295px",
					"left": "1015px",
					"width": "140px",
					"height": "25px"
				});
				var button_6 = new cpr.controls.Button("btnSearchPgm");
				button_6.value = "조회";
				button_6.style.setClasses(["btn-search"]);
				if(typeof onBtnSearchPgmClick == "function") {
					button_6.addEventListener("click", onBtnSearchPgmClick);
				}
				container.addChild(button_6, {
					"top": "295px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "72px",
				"left": "5px",
				"width": "1225px",
				"height": "600px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
			linker.userDefinedControl_3.ctrl = linker.grid_2;
		}
	});
	app.title = "stdCmnCMenuStruct";
	cpr.core.Platform.INSTANCE.register(app);
})();
