/*
 * App URI: app/cmn/stdCmnCRoleMenu
 * Source Location: app/cmn/stdCmnCRoleMenu.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cmn/stdCmnCRoleMenu", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var util = new ComUtil(app);
			
			var maDtlCtrls = ["btnDel", "btnRestore", "btnSave", "btnInsert"];
			/**
			 * @desc 조회
			 * @param poCallBackFunc 조회 후 콜백함수
			 */
			function doList(poCallBackFunc){
				util.Submit.send(app, "subList", function(pbSuccess){
					if(pbSuccess){
						util.Control.redraw(app, "grdCmnRole");
						util.Control.redraw(app, ["trvCmnMenu"]);
						
						var vnRoleCnt = util.Grid.getRowCount(app, "grdCmnRole");
						if(vnRoleCnt > 0){
							util.Control.setEnable(app, true, maDtlCtrls);
						}else{
							util.Control.setEnable(app, false, maDtlCtrls);
						}
						
						//조회 후 콜백함수 수행
						if(util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					}
				});
			}
			
			/**
			 * @desc 권한 대상자 목록에서 로우 변경시 데이터셋 변경 상태를 체크하여 진행방향 결정
			 * 			(전환 전 기존 프로그램의 경우 자동저장을 하였지만 데이터 체크프로세스가 바뀌었으므로 저장은 수행하지 않는다.)
			 * @param psGrdId 그리드 아이디
			 */
			function isChangeUptStatus(psGrdId){
				var vbIsChanged = false;
				
				if(util.Grid.isModified(app, psGrdId)){
					//@1에 변경된 데이터가 있습니다. 계속 진행하시겠습니까?
					//1 : true 2 : false
					//TODO getLabelIdValue(gridId) 추가 시 수정
					if(util.Msg.confirm("NLS-CRM-M056", [app.lookup(psGrdId).fieldLabel]) == 1){
						//계속 진행 시 변경 데이터 무시하고 새로 선택한 프로그램으로 조회
						vbIsChanged = false;
					}else{
						//진행이 아닐 시 이전 로우로 돌아간다.
						vbIsChanged = true;
					}
				}
				return vbIsChanged;
			}
			
			/**
			 * @desc 업무역할 별 메뉴 목록 조회
			 * @param poCallBackFunc 콜백함수
			 * @param psStatus
			 */
			function doListCmnOperMenu(poCallBackFunc, psStatus){
				//이전에 선택했던 행을 가져오는 방법이 e.oldSelection 이고, selectRows를 했을 때 selection-change가 연속적으로 발생해 before-selection-change에서 동작하도록 수정
			//	if(psStatus != "save"){
					//데이터 변경상태 체크 메세지
			//		if(util.Grid.isChangedFormData()){
			//			util.Grid.selectRows("grdCmnRole", ExtRepeat.getBeforeFocusRowIdx("grdCmnRole"), false);
			//			 return false;
			//		}
			//	}
				
				//업무역할 목록에서 조회 키값 설정
				var vnIdx = util.Grid.getIndex(app, "grdCmnRole");
				var vsOprtRoleId = util.Grid.getCellValue(app, "grdCmnRole", "OPRT_ROLE_ID", vnIdx);
				var vsOprtRoleNm = util.Grid.getCellValue(app, "grdCmnRole", "OPRT_ROLE_NM", vnIdx);
				var vsLanDivRcd = util.DataMap.getValue(app, "dmReqList", "strLanDivRcd");
				
				util.DataMap.setValue(app, "dmReqListOperMenu", "strOprtRoleId", vsOprtRoleId);
				util.DataMap.setValue(app, "dmReqListOperMenu", "strLanDivRcd", vsLanDivRcd);
				util.Control.setValue(app, app, "lblSelectedRoleNm", "[" + vsOprtRoleNm + "]");
				util.Control.redraw(app, "lblSelectedRoleNm");
				
				util.Submit.send(app, "subListOperMenu", function(pbSuccess){
					if(pbSuccess){
						util.Control.redraw(app, "grdCmnOperMenu");
						
						//조회 후 콜백함수 수행
						if(util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					}
				});
			}
			
			/**
			 * @desc 메뉴목록(트리)에서 선택한 메뉴를 업무역할별 메뉴 목록에 등록한다.
			 */
			function insertSelectedMenu(){
				var vsMenuKeySet = util.Tree.getSelectedValue(app, app, "trvCmnMenu", "VALUE");
				var vsOprtRoleId = util.DataMap.getValue(app, "dmReqListOperMenu", "strOprtRoleId");
				
				//String(vsmenuKeySet).isEmpty() 사용할 경우, "undefined"로 변환되어 ValueUtil.isNull(vsMenuKeySet) 사용
				if(ValueUtil.isNull(vsMenuKeySet) || String(vsOprtRoleId).isEmpty()){
					//이관할 데이터를 선택하세요.
					util.Msg.alert("NLS-INF-M006");
					return false;
				}
				
				var vaKeys = null;
				if(String(vsMenuKeySet).indexOf(",") != -1){
					vaKeys = String(vsMenuKeySet).split(",");
				}else{
					vaKeys = new Array();
					vaKeys[0] = vsMenuKeySet;
				}
			
				maMissKeys = [];
				for(var i = 0 ; i < vaKeys.length ; i++){
					maRelatedKeys = []; //초기화
					
					var vsKeySet = vaKeys[i];
					
					//부모 자식키를 전역변수에 담는다.
					getParentKeys(vsKeySet, true);
					getChildKeys(vsKeySet);
					
					//전역변수에 담은 키값들로 메뉴목록을 찾아 그리드에 입력한다.
					validAndInsertData(maRelatedKeys);
								
					//처리된 메뉴가 0건 이상인 경우 이관되었습니다. 표시
					if(maRelatedKeys.length > 0) util.Msg.alert("NLS-INF-M007"); 
				}
			}
			
			var maRelatedKeys = [];
			var maMissKeys = [];
			
			/**
			 * @desc 입력받은 키값의 부모메뉴의 키를 maRelatedKeys 에 등록한다.
			 * @param psKey
			 * @param pbIsFirst
			 */
			function getParentKeys(psKey, pbIsFirst){
				var vsParentKey = util.DataSet.findRow(app, "dsTrvCmnMenu", "KEYSET == '" + psKey + "'");
				if(pbIsFirst != true){
					maRelatedKeys.push(psKey);
				}
				if(!vsParentKey) getParentKeys(vsParentKey);
			}
			
			/**
			 * @desc 입력받은 키값과, 자식메뉴의 키를 maRelatedKeys에 등록한다.
			 * @param psKey
			 */
			function getChildKeys(psKey){
				maRelatedKeys.push(psKey);
				
				//입력받은 키를 부모키로 가지는 메뉴 가져옴
				var voChildList = util.DataSet.findRow(app, "dsTrvCmnMenu", "UKEYSET == '" + psKey + "'", true);
				
				if(voChildList == null) return;
				
				var vnChildCnt = voChildList.length;
				for(var i = 0 ; i < vnChildCnt ; i++){
					var vsChildKey = util.DataSet.getValue(app, "dsTrvCmnMenu", voChildList[i].getIndex(), "KEYSET");
					
					//자식키 스스로가 자식키를 가지고 있을 경우 새로 검색
					//없을 경우 자식키만 maRelatedKey에 등록
					var vnChildChildCnt = util.DataSet.findRow(app, "dsTrvCmnMenu", "UKEYSET == '" + vsChildKey + "'", true).length;
					if(vnChildChildCnt == 0 || vnChildChildCnt == null){
						maRelatedKeys.push(vsChildKey);
					}else{
						getChildKeys(vsChildKey);
					}
				}
			}
			
			/**
			 * @desc 입력받은 키값의 배열을 그리드에 존재하는지 체크 후 없는 경우 등록한다.
			 * @param paKeys
			 */
			function validAndInsertData(paKeys){
				if(paKeys == null) return;
				
				for(var i = 0 ; i < paKeys.length ; i++){
					var voKeyRow = util.DataSet.findRow(app, "dsTrvCmnMenu", "KEYSET == '" + paKeys[i] + "'");
					var vsMenuNm = voKeyRow.getRowData().MENU_NM;
					
					if(voKeyRow == null) continue;
					
					if(!isExistData(voKeyRow)) insertToGrid(voKeyRow);
					else maMissKeys.push("[" + vsMenuNm + "]");
				}
			}
			
			/**
			 * @desc 메뉴의 로우를 그리드에 등록
			 * @param poKeyRow
			 */
			function insertToGrid(poKeyRow){
				//신규 행 생성
				var vnInsIdx = util.Grid.insertRow(app, "grdCmnOperMenu", "gdCbbMenuAuthDivRcd");
				
				//선택한 메뉴의 각 컬럼값을 신규행에 입력
				for(var i = 0 ; i < maCompareCols.length ; i++){
					var vsCompareValue = util.DataSet.getValue(app, "dsTrvCmnMenu", poKeyRow.getIndex(), maCompareCols[i]);
					util.Grid.setCellValue(app, "grdCmnOperMenu", maCompareCols[i], vsCompareValue, vnInsIdx);
				}
				
				//디테일 조회 키값으로 값 입력
				var vsOprtRoleId = util.DataMap.getValue(app, "dmReqListOperMenu", "strOprtRoleId");
				util.Grid.setCellValue(app, "grdCmnOperMenu", "OPRT_ROLE_ID", vsOprtRoleId, vnInsIdx);
				
				//기본값 입력
				util.Grid.setCellValue(app, "grdCmnOperMenu", "MENU_AUTH_DIV_RCD", "CC00701", vnInsIdx);
				util.Grid.setCellValue(app, "grdCmnOperMenu", "AUTH_RNG_RCD", "CC00102", vnInsIdx);
				
				if(util.Grid.getCellValue(app, "grdCmnOperMenu", "PGM_ID", vnInsIdx) != "MENUHEADER")
					util.Grid.setCellValue(app, "grdCmnOperMenu", "DOWNLOAD_YN", "Y", vnInsIdx);
			}
			
			//비교할 컬럼 목록
			var maCompareCols = ["MENU_ID", "MENU_NM", "PGM_ID", "PGM_NM", "LAN_DIV_RCD"];
			
			/**
			 * @desc 메뉴의 로우로 그리드에 이미 존재하는지 체크
			 * @param poKeyRow
			 */
			function isExistData(poKeyRow){
				var vbResult = false;
				var vsCondition = "";
				
				//비교 조건문 생성
				for(var i = 0 ; i < maCompareCols.length ; i ++){
					if(i > 0){
						vsCondition += " && ";
					}
					var vsConValue = util.DataSet.getValue(app, "dsTrvCmnMenu", poKeyRow.getIndex(), maCompareCols[i]);
					vsCondition += maCompareCols[i] + " == '" + vsConValue + "'";
				}
				
				//해당 데이터 존재여부 체크
				var vnExistDataCnt = null;
				var voExistData = util.DataSet.findRow(app, "dsCmnOperMenu", vsCondition, true);
				if(!ValueUtil.isNull(voExistData))	vnExistDataCnt = voExistData.length;
				if(vnExistDataCnt > 0){
					vbResult = true;
				}
				
				return vbResult;
			}
			
			var msOprtRoleIdBefSave = "";
			
			/**
			 * @desc 저장
			 */
			function doSave(){
				//그리드 변경사항 체크
				if(!util.Grid.isModified(app, "grdCmnOperMenu", "MSG")){
					return false;
				}
				
				//그리드 validation check
				if(!util.validate(app, "grdCmnOperMenu")) return false;
				
				//이전 로우를 찾아가기 위하여 저장
				msOprtRoleIdBefSave = util.DataMap.getValue(app, "dmReqListOperMenu", "strOprtRoleId");
				
				util.Submit.send(app, "subSave", function(pbSuccess){
					if(pbSuccess){
						doListCmnOperMenu(function(pbListSuccess){
							//조회 : 갱신된 데이터가 조회되었습니다.
							if(pbListSuccess) util.Msg.alert("NLS-INF-M025");
						}, "save");
					}
				})
			}
			
			/**
			 * 
			 */
			function doCopyRoleSave(){
				util.Submit.send(app, "subCopyRole", function(pbSuccess){
					if(pbSuccess){
						var vsCopyOprtRoldId = util.DataMap.getValue(app, "dmReqList", "strCopyOprtRoleId");
						
						util.Control.setValue(app, app, "ipbOprtRoleId", vsCopyOprtRoldId);
						util.Control.setValue(app, app, "ipbOprtRoleNm", "");
						
						doList(function(pbSuccess){
							if(pbSuccess){
								var vnFindIdx = util.DataSet.findRow(app, "grdCmnRole", "OPRT_ROLE_ID == '" + vsCopyOprtRoldId + "'").getIndex();
								util.Grid.selectRow(app, "grdCmnRole", vnFindIdx);
								
								util.Msg.alert("NLS-INF-M024");
							}
						});
					}
				})	
			}
			
			/**
			 * @desc 메뉴 목록 필터
			 */
			function doFilterMenu(){
				var vsFilterMenuIdNm = util.Control.getValue(app, "ipbMenuIdNm"); //검색어
				/**@type cpr.controls.Grid*/
				var vcGrdCmnOperMenu	= app.lookup("grdCmnOperMenu");
				
				vcGrdCmnOperMenu.clearFilter(); //기존 필터 제거
				var vsConditoin = "MENU_ID *= '" + vsFilterMenuIdNm + "' || MENU_NM *= '" + vsFilterMenuIdNm + "'";
				vcGrdCmnOperMenu.filter(vsConditoin);
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				//서브미션 실행
				util.Submit.send(app, "subOnLoad", function(pbSuccess){
					if(pbSuccess){
						//기본 언어키로 초기값 설정
						util.DataMap.setValue(app, "dmReqList", "strLanDivRcd", util.getSystemLocale(app));
						//조회조건 콤보박스 리빌드
						util.Control.redraw(app, ["cbbLanDivRcd", "cbbCopyRole"]);
					}
				});
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearch = e.control;
				//데이터 변경상태 체크 메세지
				//XXX 변경사항에 대한 메세지 뜨지 않아 isChangedFormData 사용
				if(util.Grid.isModified(app, "grdCmnOperMenu", "CRM")){
					return false;
				}
				
				if(!util.validate(app, "grpSearch")) return false;
				
				doList(function(pbSuccess){
					//조회되었습니다
					if(pbSuccess) util.Msg.alert("NLS-INF-M024");
				});
			}
			
			/*
			 * 그룹에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onGrpSearchKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grpSearch = e.control;
				if(e.keyCode == cpr.events.KeyCode.ENTER){
					var btnSearch = app.lookup("btnSearch");
					btnSearch.click();
				}
			}
			
			/*
			 * 그리드에서 before-selection-change 이벤트 발생 시 호출.
			 * detail의 cell 클릭하여 설정된 selectionunit에 해당되는 단위가 선택되기 전에 발생하는 이벤트.
			 */
			function onGrdCmnRoleBeforeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdCmnRole = e.control;
				if(util.Grid.isModified(app, "grdCmnOperMenu", "CRM")){
					return false;
				}
			}
			
			/*
			 * 그리드에서 selection-change 이벤트 발생 시 호출.
			 * detail의 cell 클릭하여 설정된 selectionunit에 해당되는 단위가 선택될 때 발생하는 이벤트.
			 */
			function onGrdCmnRoleSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdCmnRole = e.control;
				if(util.Grid.getIndex(app, "grdCmnRole") == -1){
					return false;
				}
				
				doListCmnOperMenu();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveRoleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSaveRole = e.control;
				var vsSourceRoleNm = util.Grid.getCellValue(app, "grdCmnRole", "OPRT_ROLE_NM");
				var vsSourceRoleId = util.Grid.getCellValue(app, "grdCmnRole", "OPRT_ROLE_ID");
				var vsTargetRoleId = util.Control.getValue(app, "cbbCopyRole");
				
				if(ValueUtil.isNull(vsTargetRoleId) || ValueUtil.isNull(vsSourceRoleId) ) return;
				
				var vsTargetRoleNm = util.SelectCtl.getLabelByValue(app, ("cbbCopyRole", vsTargetRoleId);
					
				if(confirm(util.Msg.getMsg("NLS-CMM-M050", [vsSourceRoleNm, vsTargetRoleNm])) != 1)	return;
				
				doCopyRoleSave();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInsertClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnInsert = e.control;
				insertSelectedMenu();
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbMenuIdNmKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbMenuIdNm = e.control;
				if(e.keyCode == cpr.events.KeyCode.ENTER){
					var btnSearchMenu = app.lookup("btnSearchMenu");
					btnSearchMenu.click();
				}
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDelClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDel = e.control;
				util.Grid.deleteRow(app, "grdCmnOperMenu");
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRestoreClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnRestore = e.control;
				util.Grid.revertRowData(app, "grdCmnOperMenu");
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSave = e.control;
				doSave();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchMenuClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearchMenu = e.control;
				doFilterMenu();
			}
			
			/*
			 * 그리드에서 selection-change 이벤트 발생 시 호출.
			 * detail의 cell 클릭하여 설정된 selectionunit에 해당되는 단위가 선택될 때 발생하는 이벤트.
			 */
			function onGrdCmnOperMenuSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdCmnOperMenu = e.control;
			//	util.Control.refreshBind("bndMenuHeaderYn");
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsLanDivRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsMenuAuthDivRcdList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsAuthRngRcdList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsAcctUnitRcdList");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsCmnRoleAllList");
			dataSet_5.parseData({
				"columns": [
					{"name": "OPRT_ROLE_ID"},
					{"name": "OPRT_ROLE_NM"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsCmnRole");
			dataSet_6.parseData({
				"columns": [
					{"name": "OPRT_ROLE_ID"},
					{"name": "OPRT_ROLE_NM"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsTrvCmnMenu");
			dataSet_7.parseData({
				"columns": [
					{"name": "MENU_ID"},
					{"name": "PGM_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "UMENU_ID"},
					{"name": "UPGM_ID"},
					{"name": "ULAN_GBN"},
					{"name": "KEYSET"},
					{"name": "UKEYSET"},
					{"name": "MENU_NM"},
					{"name": "PGM_NM"},
					{"name": "MENU_YN"},
					{"name": "MENU_LVL"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsCmnOperMenu");
			dataSet_8.parseData({
				"info": "CMN_OPER_MENU@OPRT_ROLE_ID,MENU_ID,PGM_ID,LAN_DIV_RCD",
				"columns": [
					{"name": "OPRT_ROLE_ID"},
					{"name": "MENU_ID"},
					{"name": "PGM_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "MENU_AUTH_DIV_RCD"},
					{"name": "AUTH_RNG_RCD"},
					{"name": "MENU_NM"},
					{"name": "PGM_NM"},
					{"name": "ACCT_UNIT_RCD"},
					{"name": "DOWNLOAD_YN"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			var dataMap_1 = new cpr.data.DataMap("dmReqList");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strOprtRoleId",
						"dataType": "string"
					},
					{
						"name": "strOprtRoleNm",
						"dataType": "string"
					},
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					},
					{
						"name": "strCopyOprtRoleId",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqListOperMenu");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strOprtRoleId",
						"dataType": "string"
					},
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/cmn/StdCmnRoleMenu/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataSet_5, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/cmn/StdCmnRoleMenu/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_6, false);
			submission_2.addResponseData(dataSet_7, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/cmn/StdCmnRoleMenu/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_8);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subCopyRole");
			submission_4.action = "/cmn/StdCmnRoleMenu/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_1);
			submission_4.addRequestData(dataMap_2);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subListOperMenu");
			submission_5.action = "/cmn/StdCmnRoleMenu/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataMap_2);
			submission_5.addResponseData(dataSet_8, false);
			app.register(submission_5);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optOprtRoleId");
				output_1.value = "";
				output_1.bind("value").toLanguage("UI-DB-OPRT_ROLE_ID");
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "100px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbOprtRoleId");
				inputBox_1.imeMode = "inactive";
				inputBox_1.bind("fieldLabel").toExpression("#optOprtRoleId.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strOprtRoleId");
				if(typeof onIpbOprtRoleIdKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbOprtRoleIdKeydown);
				}
				container.addChild(inputBox_1, {
					"top": "5px",
					"left": "110px",
					"width": "130px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optOprtRoleNm");
				output_2.value = "";
				output_2.bind("value").toLanguage("UI-DB-OPRT_ROLE_NM");
				container.addChild(output_2, {
					"top": "5px",
					"left": "250px",
					"width": "100px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbOprtRoleNm");
				inputBox_2.bind("fieldLabel").toExpression("#optOprtRoleNm.value");
				inputBox_2.bind("value").toDataMap(app.lookup("dmReqList"), "strOprtRoleNm");
				if(typeof onIpbOprtRoleNmKeydown == "function") {
					inputBox_2.addEventListener("keydown", onIpbOprtRoleNmKeydown);
				}
				container.addChild(inputBox_2, {
					"top": "5px",
					"left": "355px",
					"width": "130px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optLanDivRcd");
				output_3.value = "";
				output_3.style.setClasses(["require"]);
				output_3.bind("value").toLanguage("UI-SCR-LANKEY");
				container.addChild(output_3, {
					"top": "5px",
					"left": "495px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbLanDivRcd");
				comboBox_1.userAttr({"require": "Y"});
				comboBox_1.bind("fieldLabel").toExpression("#optLanDivRcd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strLanDivRcd");
				(function(comboBox_1){
					comboBox_1.setItemSet(app.lookup("dsLanDivRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "600px",
					"width": "130px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "32px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-WRKROLMNLST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "420px",
					"width": "265px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnDel");
				button_2.value = "";
				button_2.style.setClasses(["btn-delete"]);
				button_2.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_2.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "1030px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnRestore");
				button_3.value = "";
				button_3.style.setClasses(["btn-restore"]);
				button_3.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_3.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "1095px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "";
				button_4.style.setClasses(["btn-save"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCmnOperMenu");
				grid_1.init({
					"dataSet": app.lookup("dsCmnOperMenu"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "140px"},
						{"width": "140px"},
						{"width": "140px"},
						{"width": "84px"},
						{"width": "80px"},
						{"width": "75px"},
						{"width": "96px"},
						{
							"width": "97px",
							"visible": false
						},
						{
							"width": "109px",
							"visible": false
						},
						{
							"width": "109px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-MENU_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-MENU_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-PGM_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-USEAUTH");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-AUTHRNG");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-AUTHRNG");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-AUTHRNG");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-OPRT_ROLE_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-LANKEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-PGM_NM");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_4 = new cpr.controls.Output();
										output_4.style.css({
											"text-align" : "center"
										});
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "MENU_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "MENU_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "PGM_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "MENU_AUTH_DIV_RCD";
									cell.control = (function(){
										var comboBox_2 = new cpr.controls.ComboBox("gdCbbMenuAuthDivRcd");
										comboBox_2.userAttr({"require": "Y"});
										(function(comboBox_2){
											comboBox_2.addItem(new cpr.controls.Item("선택", ""));
											comboBox_2.setItemSet(app.lookup("dsMenuAuthDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_2);
										comboBox_2.bind("value").toDataColumn("MENU_AUTH_DIV_RCD");
										return comboBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "AUTH_RNG_RCD";
									cell.control = (function(){
										var comboBox_3 = new cpr.controls.ComboBox("gdCbbAuthRngRcd");
										comboBox_3.userAttr({"require": "Y"});
										(function(comboBox_3){
											comboBox_3.addItem(new cpr.controls.Item("선택", ""));
											comboBox_3.setItemSet(app.lookup("dsAuthRngRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_3);
										comboBox_3.bind("value").toDataColumn("AUTH_RNG_RCD");
										return comboBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "ACCT_UNIT_RCD";
									cell.control = (function(){
										var comboBox_4 = new cpr.controls.ComboBox("gdCbbAcctUnit");
										(function(comboBox_4){
											comboBox_4.setItemSet(app.lookup("dsAcctUnitRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_4);
										comboBox_4.bind("value").toDataColumn("ACCT_UNIT_RCD");
										return comboBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "DOWNLOAD_YN";
									cell.control = (function(){
										var checkBox_1 = new cpr.controls.CheckBox("gdCkbDown");
										checkBox_1.value = "";
										checkBox_1.trueValue = "Y";
										checkBox_1.falseValue = "";
										checkBox_1.text = "";
										checkBox_1.style.css({
											"text-align" : "center"
										});
										checkBox_1.bind("value").toDataColumn("DOWNLOAD_YN");
										return checkBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "OPRT_ROLE_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "LAN_DIV_RCD";
									cell.control = (function(){
										var comboBox_5 = new cpr.controls.ComboBox("gdCbbLanDivRcd");
										comboBox_5.enabled = false;
										comboBox_5.userAttr({"require": "Y"});
										(function(comboBox_5){
											comboBox_5.addItem(new cpr.controls.Item("선택", ""));
											comboBox_5.setItemSet(app.lookup("dsLanDivRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_5);
										comboBox_5.bind("value").toDataColumn("LAN_DIV_RCD");
										return comboBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "PGM_NM";
								}
							}
						]
					}
				});
				if(typeof onGrdCmnOperMenuSelectionChange == "function") {
					grid_1.addEventListener("selection-change", onGrdCmnOperMenuSelectionChange);
				}
				container.addChild(grid_1, {
					"top": "30px",
					"left": "420px",
					"width": "800px",
					"height": "565px"
				});
				var userDefinedControl_3 = linker.userDefinedControl_3 = new udc.com.comTitle();
				userDefinedControl_3.bind("title").toLanguage("UI-SCR-WRKROLLST");
				container.addChild(userDefinedControl_3, {
					"top": "5px",
					"left": "5px",
					"width": "225px",
					"height": "25px"
				});
				var grid_2 = linker.grid_2 = new cpr.controls.Grid("grdCmnRole");
				grid_2.init({
					"dataSet": app.lookup("dsCmnRole"),
					"columns": [
						{"width": "40px"},
						{"width": "125px"},
						{"width": "199px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-OPRT_ROLE_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-OPRT_ROLE_NM");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "OPRT_ROLE_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "OPRT_ROLE_NM";
								}
							}
						]
					}
				});
				if(typeof onGrdCmnRoleSelectionChange == "function") {
					grid_2.addEventListener("selection-change", onGrdCmnRoleSelectionChange);
				}
				container.addChild(grid_2, {
					"top": "29px",
					"left": "5px",
					"width": "380px",
					"height": "165px"
				});
				var userDefinedControl_4 = new udc.com.comFormTitle();
				userDefinedControl_4.bind("title").toLanguage("UI-SCR-MENULST");
				container.addChild(userDefinedControl_4, {
					"top": "235px",
					"left": "5px",
					"width": "150px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button("btnInsert");
				button_5.value = "";
				if(typeof onBtnInsertClick == "function") {
					button_5.addEventListener("click", onBtnInsertClick);
				}
				container.addChild(button_5, {
					"top": "230px",
					"left": "390px",
					"width": "25px",
					"height": "25px"
				});
				var output_5 = new cpr.controls.Output("optSelectedRoleNm");
				output_5.value = "";
				container.addChild(output_5, {
					"top": "5px",
					"left": "120px",
					"width": "190px",
					"height": "25px"
				});
				var output_6 = new cpr.controls.Output("optMenuIdNm");
				output_6.value = "메뉴명/ID";
				container.addChild(output_6, {
					"top": "5px",
					"left": "690px",
					"width": "70px",
					"height": "25px"
				});
				var inputBox_3 = new cpr.controls.InputBox("ipbMenuIdNm");
				inputBox_3.maxLength = 100;
				inputBox_3.bind("fieldLabel").toExpression("#optMenuIdNm.value");
				if(typeof onIpbMenuIdNmKeydown == "function") {
					inputBox_3.addEventListener("keydown", onIpbMenuIdNmKeydown);
				}
				container.addChild(inputBox_3, {
					"top": "5px",
					"left": "765px",
					"width": "130px",
					"height": "25px"
				});
				var button_6 = new cpr.controls.Button("btnSearchMenu");
				button_6.value = "조회";
				button_6.style.setClasses(["btn-search"]);
				if(typeof onBtnSearchMenuClick == "function") {
					button_6.addEventListener("click", onBtnSearchMenuClick);
				}
				container.addChild(button_6, {
					"top": "5px",
					"left": "899px",
					"width": "60px",
					"height": "25px"
				});
				var output_7 = new cpr.controls.Output("optCopyRole");
				output_7.value = "";
				output_7.bind("value").toLanguage("UI-SCR-WRKROLLST");
				container.addChild(output_7, {
					"top": "199px",
					"left": "5px",
					"width": "110px",
					"height": "25px"
				});
				var comboBox_6 = new cpr.controls.ComboBox("cbbCopyRole");
				comboBox_6.bind("value").toDataMap(app.lookup("dmReqList"), "strCopyOprtRoleId");
				(function(comboBox_6){
					comboBox_6.setItemSet(app.lookup("dsCmnRoleAllList"), {
						"label": "OPRT_ROLE_NM",
						"value": "OPRT_ROLE_ID"
					});
				})(comboBox_6);
				container.addChild(comboBox_6, {
					"top": "199px",
					"left": "125px",
					"width": "190px",
					"height": "25px"
				});
				var button_7 = new cpr.controls.Button("btnSaveRole");
				button_7.value = "";
				button_7.style.setClasses(["btn-save"]);
				button_7.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveRoleClick == "function") {
					button_7.addEventListener("click", onBtnSaveRoleClick);
				}
				container.addChild(button_7, {
					"top": "200px",
					"left": "325px",
					"width": "60px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "72px",
				"left": "5px",
				"width": "1225px",
				"height": "600px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
			linker.userDefinedControl_3.ctrl = linker.grid_2;
		}
	});
	app.title = "stdCmnCRoleMenu";
	cpr.core.Platform.INSTANCE.register(app);
})();
