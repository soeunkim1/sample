/*
 * App URI: app/cmn/stdCmnCTableSchema
 * Source Location: app/cmn/stdCmnCTableSchema.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cmn/stdCmnCTableSchema", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			//공통 모듈 사용
			var util = new ComUtil(app);
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				util.Submit.send(app, "subOnLoad", function(pbSuccess){
					if(pbSuccess){
					  util.Control.redraw(app, ["cbbMenuDivList","cbbSystemdiv"]);
					  util.SelectCtl.selectItem(app, "cbbMenuDivList", 0);
					  util.SelectCtl.selectItem(app, "cbbSystemdiv", 0);
					}
				});
			}//onBodyLoad()
			
			/**
			 * @desc doSearch event 테이블 목록 조회한다.
			 * @param psArg 조회구분자
			 * @return void
			 */
			function doSearch(){
				
				var vaUnitSystemRcd = "";
				var vnCnt = util.SelectCtl.getItemCount("cbbSystemdiv")
				var voInstRow = null;
				var voResMap = null;
				var voListParam = null;
				
				if(vnCnt > 1){
					for (var i = 0; i < vnCnt; i++) {
						voInstRow = i+1;
						var vsUnitSystemRcd = util.SelectCtl.getValue(app, "cbbSystemdiv",voInstRow);
						if (i == (vnCnt - 2)) {
							vaUnitSystemRcd += vsUnitSystemRcd;
							break;
						}
						vaUnitSystemRcd += vsUnitSystemRcd + ",";
					}
				}
				util.DataMap.setValue(app, "dmReqList", "arrUnitSystemRcd", vaUnitSystemRcd)
				util.Submit.send(app, "subList", function(pbSuccess){
					if (pbSuccess) {
						util.Control.redraw(app, "grdTableMain");
					}
				});
			}
			
			/*
			 * 그룹에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onGrpSearchKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grpSearch = e.control;
					// 엔터키 입력시 조회
				if (e.keyCode == 13) {
					app.lookup("btnSearch").click();
				}
			}//onGrpSearchKeydown()
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearch = e.control;
				doSearch("btnSearch");
			}//onBtnSearchClick()
			
			/*
			 * 그리드에서 selection-change 이벤트 발생 시 호출.
			 * detail의 cell 클릭하여 설정된 selectionunit에 해당되는 단위가 선택될 때 발생하는 이벤트.
			 */
			function onGrdTableMainSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdTableMain = e.control;
				
				if(util.Grid.getIndex(app, "grdTableMain") == -1){
					return false;
				}
				
				var vnRow = util.Grid.getIndex(app, "grdTableMain")
				var vsTableName = util.Grid.getCellValue(app, "grdTableMain","OBJECT_NAME",vnRow)
				util.DataMap.setValue(app, "dmReqList", "strTableName", vsTableName);
				// 테이블정의 조회한다.
				doColumnList();
			}//onGrdTableMainSelectionChange
			
			/**
			 * @desc doColumnList event 테이블정의,인덱스 조회한다.
			 */
			function doColumnList(){
				
				//비동기 처리 후 실행될 콜백 메서드를 voFunc에 할당한다.
				var voFunc = function(vbSuccess) {
					if (vbSuccess == true) {
			
						util.Control.redraw(app, "grdTableDefine");
						if(util.Grid.getRowCount(app, "grdTableDefine") != 0){
							util.Grid.selectRow(app, "grdTableDefine", 0);
						}
						
						util.Control.redraw(app, "grdTableIndex");
						if(util.Grid.getRowCount(app, "grdTableIndex") != 0){
							util.Grid.selectRow(app, "grdTableIndex", 0);
						}
						// import 헤더(header.xrf) 말풍선 옆에 특정 메세지를 표시한다. ("조회되었습니다.")
						util.Msg.notify(app, "NLS-INF-M024");
					}
				};
				util.Submit.send(app, "subColumnList", voFunc);
				
			}//doColumnList()
			/*
			 * 그리드에서 selection-change 이벤트 발생 시 호출.
			 * detail의 cell 클릭하여 설정된 selectionunit에 해당되는 단위가 선택될 때 발생하는 이벤트.
			 */
			function onGrdTableDefineSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdTableDefine = e.control;
				
				if(util.Grid.getIndex(app, "grdTableDefine") == -1){
					return false;
				}
				
				var vnIndex = util.Grid.getIndex(app, "grdTableDefine");
				var vsComment = util.DataSet.getValue(app, "dsTableDefine", vnIndex, "COL_NAME");
				var vsIsValue = vsComment.indexOf('[');
				var vsCd = "";
			
				if(vsIsValue > -1){
					vsCd = vsComment.split('[');
					vsCd = vsCd[1].replace(']', "");
					if(vsCd == null)return false;	
				}
				
				util.DataMap.setValue(app, "dmReqList", "strCd", vsCd);
				if (!doCodeList()){
					return false;
				} 
				
			}//onGrdTableDefineSelectionChange
			
			/**
			 * @desc doCodeList event 구분코드 조회한다.
			 * @return void
			 */
			function doCodeList(){
				util.Submit.send(app, "subCodeList", function(pbSuccess){
					if (pbSuccess) {
						util.Control.redraw(app, "grdGbnCode");
						if(util.Grid.getRowCount(app, "grdGbnCode") != 0){
							util.Grid.selectRow(app, "grdGbnCode", 0);	
						}
						util.Control.redraw(app, "grdGbnCode_title");
					}
				});
			}//doCodeList()
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnPrintClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnPrint = e.control;
				
				var vcMenu = new cpr.controls.Menu("menu");
				vcMenu.addItem(new cpr.controls.TreeItem("테이블정의서출력", "1", "root"));
				vcMenu.addItem(new cpr.controls.TreeItem("데이터업로드", "2", "root"));
				vcMenu.addItem(new cpr.controls.TreeItem("데이터양식다운로드", "3", "root"));
				
				vcMenu.addEventListener("selection-change", function(/**@type cpr.events.CSelectionEvent */ e){
					var vaNewSelection = e.newSelection;
					switch(vaNewSelection[0].value){
						case "1":
							doPrint();
						break;
						case "2":
							doDataUpLoad();
						break;
						case "3":
							doTableFormDown();
						break;
					}
					vcMenu.hide();
					vcMenu.dispose();
				});
				
				vcMenu.addEventListenerOnce("blur", function(/**@type cpr.events.CFocusEvent*/ e){
					vcMenu.hide();
					vcMenu.dispose();	
				});
				
				vcMenu.rootValue = "root";
				
				/**@type cpr.controls.Container */
				var vcRootContainer = app.getRootAppInstance().getContainer();
				vcRootContainer.addChild(vcMenu, {
					positions: [
						
						{
							"media": "all and (min-width: 1024px)",
							width: "200px",
							height: "100px",
							position: "absolute",
							left: e.x + "px",
							top: e.y + "px"
						},
						{
							"media": "all and (min-width: 500px) and (max-width: 1024px)",
							width: "200px",
							height: "100px",
							position: "absolute",
							left: e.x + "px",
							top: e.y + "px"
						},
						{
							"media": "all and (max-width: 500px)",
							width: "200px",
							height: "100px",
							position: "absolute",
							left: e.x + "px",
							top: e.y + "px"
						}
					]
				});
				vcMenu.focus();
				
			}//onBtnPrintClick()
			
			/**
			 * @desc doDataUpLoad event 출력한다.
			 * @return void
			 */
			function doDataUpLoad(){
				if(util.Grid.getRowCount(app, "grdTableMain") < 1) {
					return;
				}
				util.FileUtil.getFileName(".xls , .xlsx", function(psFileNm){
					if(psFileNm){
						util.Submit.addFileParameter(app, "subDataUpLoad", psFileNm);
						util.Submit.send(app, "subDataUpLoad", function(pbSuccess){
							if(pbSuccess){
						
							}
						});
					}
				}, 1);
			}//doDataUpLoad()
			
			/**
			 * @desc doPrint event 출력한다.
			 * @return void
			 */
			function doPrint(){
				
				if(util.Grid.getRowCount(app, "grdTableMain") < 1){
					return;
				}
				util.Submit.send(app, "subExportExcel", function(pbSuccess){
					if(pbSuccess){
						
					}
				});
			}//doPrint()
			/**
			 * @desc doTableFormDown event 출력한다.
			 * @return void
			 */
			function doTableFormDown(){
				if(util.Grid.getRowCount(app, "grdTableMain") < 1){
					return;
				}
				
				util.Submit.send(app, "subFormDown", function(pbSuccess){
					if(pbSuccess){
			
					}
				});
			}//doTableFormDown()
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbbMenuDivListSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cbbMenuDivList = e.control;
				
				//cascadeList 사용시 조회가 다르게 출력됨
			//	util.SelectCtl.cascadeList("cbbMenuDivList", "cbbSystemdiv", "UMENU_ID",0);
			
				var vsMenuDivList = util.Control.getValue(app, "cbbMenuDivList");
				app.lookup("dsMenuSystemList").setFilter("UMENU_ID== '"+ vsMenuDivList +"'");
				
			}//onCbbMenuDivListSelectionChange();
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsTableMain");
			dataSet_1.parseData({
				"columns": [
					{"name": "OBJECT_NAME"},
					{"name": "COMMENTS"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsTableDefine");
			dataSet_2.parseData({
				"columns": [
					{"name": "COL_ID"},
					{"name": "COL_NAME"},
					{"name": "POSITION"},
					{"name": "PK"},
					{"name": "DATATYPE"},
					{"name": "NULL_YN"},
					{"name": "REMARK"},
					{"name": "FK"},
					{"name": "COL_DEF"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsTableIndex");
			dataSet_3.parseData({
				"columns": [
					{"name": "INDEX_NAME"},
					{"name": "COLUMN_NAME"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsGbnCode");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "LAN_DIV_RCD"},
					{"name": "CD_CLS"},
					{"name": "CD_SHORT_NM"},
					{"name": "CD_LEN"},
					{"name": "PRT_ORD"},
					{"name": "EFFT_ST_DT"},
					{"name": "EFFT_END_DT"},
					{"name": "CD_DESC"},
					{"name": "STD_YN"},
					{"name": "CD_PRP1"},
					{"name": "CD_PRP2"},
					{"name": "CD_PRP3"},
					{"name": "CD_PRP4"},
					{"name": "CD_PRP5"},
					{"name": "CD_PRP6"},
					{"name": "CD_PRP7"},
					{"name": "CD_PRP8"},
					{"name": "CD_PRP9"},
					{"name": "CD_PRP10"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsMenuDiv");
			dataSet_5.parseData({
				"columns": [
					{"name": "UMENU_ID"},
					{"name": "MENU_NM"},
					{"name": "MENU_ID"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsMenuSystemList");
			dataSet_6.parseData({
				"columns": [
					{"name": "UMENU_ID"},
					{"name": "MENU_NM"},
					{"name": "MENU_ID"},
					{"name": "UNIT_SYSTEM_RCD"},
					{"name": "UMENU_ID"},
					{"name": "MENU_NM"},
					{"name": "MENU_ID"},
					{"name": "UNIT_SYSTEM_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			var dataMap_1 = new cpr.data.DataMap("dmReqList");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strCd",
						"dataType": "string"
					},
					{
						"name": "strMenuId",
						"dataType": "string"
					},
					{
						"name": "arrUnitSystemRcd",
						"dataType": "string"
					},
					{
						"name": "strTableName",
						"dataType": "string"
					},
					{
						"name": "strUnitSystemRcd",
						"dataType": "string"
					},
					{
						"name": "strSearchTableNm",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmMapSearchDate");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "BEF_DT",
						"dataType": "string"
					},
					{
						"name": "YEAR",
						"dataType": "string"
					},
					{
						"name": "BEG_DT",
						"dataType": "string"
					},
					{
						"name": "END_DT",
						"dataType": "string"
					},
					{
						"name": "SMT",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_3.parseData({
				"columns" : [{
					"name": "strLanDivRcd",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmFileInfo");
			dataMap_4.parseData({
				"columns" : [
					{
						"name": "strFileDir",
						"dataType": "string"
					},
					{
						"name": "strFileNm",
						"dataType": "string"
					},
					{
						"name": "strFileChgNm",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_4);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/cmn/StdCmnTableSchema/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_5, false);
			submission_1.addResponseData(dataSet_6, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/cmn/StdCmnTableSchema/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_1, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subColumnList");
			submission_3.action = "/cmn/StdCmnTableSchema/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_1);
			submission_3.addResponseData(dataSet_3, false);
			submission_3.addResponseData(dataSet_2, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subCodeList");
			submission_4.action = "/cmn/StdCmnTableSchema/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_1);
			submission_4.addResponseData(dataSet_4, false);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subExportExcel");
			submission_5.action = "/cmn/StdCmnTableSchema/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataMap_1);
			submission_5.addResponseData(dataMap_4, false);
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("subDataUpLoad");
			submission_6.action = "/cmn/StdCmnTableSchema/";
			submission_6.mediaType = "application/x-www-form-urlencoded";
			submission_6.addRequestData(dataMap_1);
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("subFormDown");
			submission_7.action = "/cmn/StdCmnTableSchema/";
			submission_7.mediaType = "application/x-www-form-urlencoded";
			submission_7.addRequestData(dataMap_1);
			submission_7.addResponseData(dataMap_4, false);
			app.register(submission_7);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optTableNm");
				output_1.value = "";
				output_1.bind("value").toLanguage("UI-SCR-TBNM");
				container.addChild(output_1, {
					"top": "5px",
					"left": "495px",
					"width": "100px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbTableNm");
				inputBox_1.bind("fieldLabel").toExpression("#optTableNm.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strSearchTableNm");
				if(typeof onIpbTableNmKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbTableNmKeydown);
				}
				container.addChild(inputBox_1, {
					"top": "5px",
					"left": "600px",
					"width": "200px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optMenuGbn");
				output_2.value = "";
				output_2.bind("value").toLanguage("UI-SCR-MENUDIV");
				container.addChild(output_2, {
					"top": "5px",
					"left": "5px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbMenuDivList");
				comboBox_1.bind("fieldLabel").toExpression("#optUnitSystemRcd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strMenuId");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("전체", "%"));
					comboBox_1.setItemSet(app.lookup("dsMenuDiv"), {
						"label": "MENU_NM",
						"value": "MENU_ID"
					});
				})(comboBox_1);
				if(typeof onCbbMenuDivListSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onCbbMenuDivListSelectionChange);
				}
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "110px",
					"width": "130px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optSystemdiv");
				output_3.value = "";
				output_3.bind("value").toLanguage("UI-SCR-SYSTEMDIV");
				container.addChild(output_3, {
					"top": "5px",
					"left": "250px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_2 = new cpr.controls.ComboBox("cbbSystemdiv");
				comboBox_2.bind("fieldLabel").toExpression("#optUnitSystemRcd.value");
				comboBox_2.bind("value").toDataMap(app.lookup("dmReqList"), "strUnitSystemRcd");
				(function(comboBox_2){
					comboBox_2.addItem(new cpr.controls.Item("전체", "%"));
					comboBox_2.setItemSet(app.lookup("dsMenuSystemList"), {
						"label": "MENU_NM",
						"value": "UNIT_SYSTEM_RCD"
					});
				})(comboBox_2);
				container.addChild(comboBox_2, {
					"top": "5px",
					"left": "355px",
					"width": "130px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "5px",
				"left": "5px",
				"width": "1225px",
				"height": "32px"
			});
			
			var group_2 = new cpr.controls.Container("grpTableSchema");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_1 = linker.userDefinedControl_1 = new udc.com.comTitle();
				userDefinedControl_1.bind("title").toLanguage("UI-SCR-TABLELIST");
				container.addChild(userDefinedControl_1, {
					"top": "5px",
					"left": "5px",
					"width": "200px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdTableDefine");
				grid_1.init({
					"dataSet": app.lookup("dsTableDefine"),
					"columns": [
						{"width": "40px"},
						{"width": "110px"},
						{"width": "190px"},
						{"width": "90px"},
						{"width": "50px"},
						{"width": "90px"},
						{"width": "60px"},
						{"width": "130px"},
						{"width": "50px"},
						{"width": "79px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-NO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-COLNM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-KOR_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.text = "POSITION";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.text = "PK";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.text = "DATATYPE";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.text = "NULL";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-REMARK");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.text = "FK";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.text = "COL_DEF";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "COL_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "COL_NAME";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "POSITION";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "PK";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "DATATYPE";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "NULL_YN";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "REMARK";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "FK";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "COL_DEF";
								}
							}
						]
					}
				});
				if(typeof onGrdTableDefineSelectionChange == "function") {
					grid_1.addEventListener("selection-change", onGrdTableDefineSelectionChange);
				}
				container.addChild(grid_1, {
					"top": "30px",
					"left": "400px",
					"width": "820px",
					"height": "352px"
				});
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-TABLELIST");
				container.addChild(userDefinedControl_2, {
					"top": "387px",
					"left": "5px",
					"width": "265px",
					"height": "25px"
				});
				var grid_2 = linker.grid_2 = new cpr.controls.Grid("grdTableIndex");
				grid_2.init({
					"dataSet": app.lookup("dsTableIndex"),
					"columns": [
						{"width": "40px"},
						{"width": "130px"},
						{"width": "203px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-NO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-TABID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-COLNM");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "INDEX_NAME";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "COLUMN_NAME";
								}
							}
						]
					}
				});
				if(typeof onGrdTableIndexSelectionChange == "function") {
					grid_2.addEventListener("selection-change", onGrdTableIndexSelectionChange);
				}
				container.addChild(grid_2, {
					"top": "412px",
					"left": "5px",
					"width": "390px",
					"height": "132px"
				});
				var grid_3 = linker.grid_3 = new cpr.controls.Grid("grdTableMain");
				grid_3.init({
					"dataSet": app.lookup("dsTableMain"),
					"columns": [
						{"width": "40px"},
						{"width": "130px"},
						{"width": "203px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-NO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-TBNM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-EXPLAIN");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "OBJECT_NAME";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "COMMENTS";
								}
							}
						]
					}
				});
				if(typeof onGrdTableMainSelectionChange == "function") {
					grid_3.addEventListener("selection-change", onGrdTableMainSelectionChange);
				}
				container.addChild(grid_3, {
					"top": "30px",
					"left": "5px",
					"width": "390px",
					"height": "352px"
				});
				var grid_4 = linker.grid_4 = new cpr.controls.Grid("grdGbnCode");
				grid_4.init({
					"dataSet": app.lookup("dsGbnCode"),
					"columns": [
						{"width": "40px"},
						{"width": "80px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "89px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "80px"},
						{"width": "80px"},
						{"width": "80px"},
						{"width": "80px"},
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-NO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-LAN_DIV_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-LAN_DIV_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_SHORT_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_LEN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PRT_ORD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-EFFT_ST_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-EFFT_END_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_DESC");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-STD_YN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_PRP1");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_PRP2");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_PRP3");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_PRP4");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_PRP5");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_PRP6");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_PRP7");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_PRP8");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 20},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_PRP9");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 21},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CD_PRP10");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "CD_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "LAN_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "CD_CLS";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "CD_SHORT_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "CD_LEN";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "PRT_ORD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "EFFT_ST_DT";
									cell.control = (function(){
										var output_4 = new cpr.controls.Output("gdOptEfftStDt");
										output_4.dataType = "date";
										output_4.format = "YYYY-MM-DD";
										output_4.style.css({
											"text-align" : "center"
										});
										output_4.bind("value").toDataColumn("EFFT_ST_DT");
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "EFFT_END_DT";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "CD_DESC";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "STD_YN";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "CD_PRP1";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "CD_PRP2";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "CD_PRP3";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.columnName = "CD_PRP4";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.columnName = "CD_PRP5";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.columnName = "CD_PRP6";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.columnName = "CD_PRP7";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.columnName = "CD_PRP8";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 20},
								"configurator": function(cell){
									cell.columnName = "CD_PRP9";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 21},
								"configurator": function(cell){
									cell.columnName = "CD_PRP10";
								}
							}
						]
					}
				});
				if(typeof onGrdGbnCodeSelectionChange == "function") {
					grid_4.addEventListener("selection-change", onGrdGbnCodeSelectionChange);
				}
				container.addChild(grid_4, {
					"top": "412px",
					"left": "400px",
					"width": "820px",
					"height": "132px"
				});
				var userDefinedControl_3 = linker.userDefinedControl_3 = new udc.com.comTitle();
				userDefinedControl_3.bind("title").toLanguage("UI-SCR-DIVCD");
				container.addChild(userDefinedControl_3, {
					"top": "387px",
					"left": "400px",
					"width": "265px",
					"height": "25px"
				});
				var userDefinedControl_4 = linker.userDefinedControl_4 = new udc.com.comTitle();
				userDefinedControl_4.bind("title").toLanguage("UI-SCR-TBDEFDIVLST");
				container.addChild(userDefinedControl_4, {
					"top": "5px",
					"left": "400px",
					"width": "265px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnPrint");
				button_2.value = "";
				button_2.bind("value").toLanguage("UI-GLS-PRT");
				if(typeof onBtnPrintClick == "function") {
					button_2.addEventListener("click", onBtnPrintClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "325px",
					"width": "70px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "42px",
				"left": "5px",
				"width": "1225px",
				"height": "550px"
			});
			
			var userDefinedControl_5 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_5, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_1.ctrl = linker.grid_3;
			linker.userDefinedControl_2.ctrl = linker.grid_2;
			linker.userDefinedControl_3.ctrl = linker.grid_4;
			linker.userDefinedControl_4.ctrl = linker.grid_1;
		}
	});
	app.title = "Untitled";
	cpr.core.Platform.INSTANCE.register(app);
})();
