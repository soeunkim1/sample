/*
 * App URI: app/cmn/stdCmnPFileUtil
 * Source Location: app/cmn/stdCmnPFileUtil.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cmn/stdCmnPFileUtil", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var initValue;
			var util = new ComUtil(app);
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				initValue = app.getHostProperty("initValue");
				if(initValue){
					if(ValueUtil.fixBoolean(initValue.iIsDownloadOnly)){
						util.Control.setVisible(app, false, ["btnFileUpLoad","btnDel"]);
					}
					
					if(!ValueUtil.isNull(initValue.iFileSerialNo)){
						util.DataMap.setValue(app, "dmFileInfo", "strFileSeriaNo", initValue.iFileSerialNo);
						util.DataMap.setValue(app, "dmIsFileSeriaNo", "isFileSeriaNo", "Y");
						doList();
					}else{
						util.Control.setVisible(app, false, ["btnAllDown"]);
						util.DataMap.setValue(app, "dmIsFileSeriaNo", "isFileSeriaNo", "N");
					}	
					
				}
			}
			
			/**
			 * @desc   파일순번으로 파일리스트 취득
			 * @param poCallBackFunc
			 * @return VOID
			 * @author
			 */
			function doList() {
				
				util.Submit.send(app, "subList", function(pbSuccess){
					if (pbSuccess){ 
						util.Msg.notify(app, "NLS-INF-M024") ;
						
						util.Control.redraw(app, "grdCmnFile");
						if(util.Grid.getRowCount(app, "grdCmnFile") > 0){
							util.DataMap.setValue(app, "dmFileInfo", "strFileSeriaNo", 
							util.Grid.getCellValue(app, "grdCmnFile", "FILE_SERIAL_NO", 0));
						}
					}
					
				});
			}
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnFileUpLoadClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnFileUpLoad = e.control;
				
				
				if(!ValueUtil.isNull(initValue.iMaxFileCnt)){
					
					if(util.Grid.getRowCount(app, "grdCmnFile") >= ValueUtil.fixNumber(initValue.iMaxFileCnt)){
						util.Msg.warn("M058", [initValue.iMaxFileCnt]);
						return false;
					}
				}
				
				util.FileUtil.getFileName(initValue.iFileExtFilter, function(paFiles){
					
					util.Submit.addFileParameter(app, "subFileUpLoad", paFiles);
					util.Submit.send(app, "subFileUpLoad", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdCmnFile");
						}
					});
				}, initValue.iMaxFileCnt, initValue.iLimitFileSize);
				
				
			}
			
			
			
			/*
			 * 그리드에서 cell-click 이벤트 발생 시 호출.
			 * Grid의 Cell 클릭시 발생하는 이벤트.
			 */
			function onGrdCmnFileCellClick(/* cpr.events.CGridEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdCmnFile = e.control;
				var voCellInfo = grdCmnFile.getCellInfo(e.cellIndex);
				
				if(voCellInfo.columnName == "DOWN_BTN_NM"){
					
					util.DataMap.setValue(app, "dmFileInfo", "strSeq", util.Grid.getCellValue(app, "grdCmnFile", "SEQ"));
					
					util.Submit.send(app, "subFileExist", function(pbSuccess){
						if(pbSuccess){
							util.Submit.send(app, "subFileDown", function(pbSuccess){
				
							});
						}
					});
				}
				
			}
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnAllDownClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnAllDown = e.control;
				
				if(util.Grid.getRowCount(app, "grdCmnFile") > 0){
					
					util.Submit.send(app, "subAllFileDown", function(pbSuccess){
				
					});
				}
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDelClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDel = e.control;
				
				var vaIdx = app.lookup("grdCmnFile").getCheckRowIndices();
				
				if(vaIdx.length < 1){
					util.Msg.alert("NLS-INF-M005");
					return false;
					
				}else{
					if(util.Msg.confirm("NLS-CRM-M004")){
						
						vaIdx.forEach(function(vnIdx){
							util.Grid.setRowState(app, "grdCmnFile", cpr.data.tabledata.RowState.DELETED, vnIdx);	
							
						});
						
						util.Submit.send(app, "subDelFile", function(pbSuccess){
							if(pbSuccess){
								doList();
							}
						});
					}
					
				}
				
				
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCloseClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnClose = e.control;
				
				var voResult = {
						FILE_SERIAL_NO : "",
						FILE_CNT : ""
					};	
					
				var vsFileSerialNo;
				var vnFileCnt = util.Grid.getRowCount(app, "grdCmnFile");
					
				if(vnFileCnt > 0){
					vsFileSerialNo = util.Grid.getCellValue(app, "grdCmnFile", "FILE_SERIAL_NO", 0);
				}else{
					vsFileSerialNo = "";
				}
				
				if( vnFileCnt == 0 && !ValueUtil.isNull(initValue.iFileSerialNo) )
				{
					util.Msg.alert("전체 첨부파일 삭제시 창을 닫은 후 저장버튼을 클릭해야 합니다.");
				}
				
				if( vnFileCnt != 0 && ValueUtil.isNull(initValue.iFileSerialNo) )
				{
					util.Msg.alert("최초 첨부파일 업로드시 창을 닫은 후 저장버튼을 클릭해야 합니다.");
				}
				
				voResult.FILE_SERIAL_NO = vsFileSerialNo;
				voResult.FILE_CNT = vnFileCnt;
				
				app.setHostProperty("returnValue", voResult);
				app.close();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGdBtnFileDownClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var gdBtnFileDown = e.control;
				util.DataMap.setValue(app, "dmFileInfo", "strSeq", util.Grid.getCellValue(app, "grdCmnFile", "SEQ"));
				util.Submit.send(app, "subFileExist", function(pbSuccess){
					if(pbSuccess){
						util.Submit.send(app, "subFileDown", function(pbSuccess){
			
						});
					}
				});
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsCmnFile");
			dataSet_1.parseData({
				"info": "CMN_FILE@FILE_SERIAL_NO,SEQ",
				"columns": [
					{"name": "FILE_SERIAL_NO"},
					{"name": "SEQ"},
					{"name": "TAB_NM"},
					{"name": "PGM_ID"},
					{"name": "USER_ID"},
					{"name": "FILE_NM"},
					{"name": "ORI_FILE_NM"},
					{"name": "FILE_PATH"},
					{"name": "TMP_FILE_PATH"},
					{"name": "USER_NM"},
					{"name": "CRT_DTHR"},
					{"name": "DOWN_BTN_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dmResList");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strTmpFileNms",
						"dataType": "string"
					},
					{
						"name": "strFileSerialNo",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqKey");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strFileSeriaNo",
						"dataType": "string"
					},
					{
						"name": "strFileSubPath",
						"dataType": "string"
					},
					{
						"name": "strDirectUpLoad",
						"dataType": "string"
					},
					{
						"name": "strTableName",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmTemp");
			dataMap_3.parseData({
				"columns" : [{
					"name": "strUpLoadFileNm",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subList");
			submission_1.action = "/cmn/StdCmnFileTransUtil/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addRequestData(dataMap_2);
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subDelFile");
			submission_2.action = "/cmn/StdCmnFileTransUtil/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataSet_1);
			submission_2.addRequestData(dataMap_2);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subFileUpLoad");
			submission_3.action = "/cmn/StdCmnFileTransUtil/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_1);
			submission_3.addRequestData(dataMap_2);
			submission_3.addResponseData(dataMap_1, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subFileIsExist");
			submission_4.action = "/cmn/StdCmnFileTransUtil/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var userDefinedControl_2 = new udc.com.comFormTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-ATCHFILE");
				container.addChild(userDefinedControl_2, {
					"top": "6px",
					"left": "5px",
					"width": "150px",
					"height": "25px"
				});
				var grid_1 = new cpr.controls.Grid("grdCmnFile");
				grid_1.init({
					"dataSet": app.lookup("dsCmnFile"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "172px"},
						{"width": "101px"},
						{"width": "146px"},
						{"width": "59px"},
						{
							"width": "110px",
							"visible": false
						},
						{
							"width": "118px",
							"visible": false
						},
						{
							"width": "156px",
							"visible": false
						},
						{
							"width": "106px",
							"visible": false
						},
						{
							"width": "106px",
							"visible": false
						},
						{
							"width": "106px",
							"visible": false
						},
						{
							"width": "106px",
							"visible": false
						},
						{
							"width": "106px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-FILENAME");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-USER");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-CREATEDT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-FILEDOWN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.text = "프로그램ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.text = "업로드사용자ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.text = "파일경로";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.text = "테이블명";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.text = "파일순번";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.text = "차수";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.text = "파일명";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.text = "템프파일경로";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_1 = new cpr.controls.Output();
										output_1.style.css({
											"text-align" : "center"
										});
										return output_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "ORI_FILE_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "USER_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "CRT_DTHR";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "DOWN_BTN_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "PGM_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "USER_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "FILE_PATH";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "TAB_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "FILE_SERIAL_NO";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "SEQ";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "FILE_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "TMP_FILE_PATH";
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "32px",
					"left": "5px",
					"width": "580px",
					"height": "253px"
				});
				var button_1 = new cpr.controls.Button("btnDel");
				button_1.value = "";
				button_1.style.setClasses(["btn-delete"]);
				button_1.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_1.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_1, {
					"top": "7px",
					"left": "523px",
					"width": "60px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnFileSelector");
				button_2.value = "";
				button_2.bind("value").toLanguage("UI-SCR-FILECHOI");
				if(typeof onBtnFileSelectorClick == "function") {
					button_2.addEventListener("click", onBtnFileSelectorClick);
				}
				container.addChild(button_2, {
					"top": "7px",
					"left": "450px",
					"width": "70px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "30px",
				"left": "5px",
				"width": "590px",
				"height": "290px"
			});
			
			var button_3 = new cpr.controls.Button("btnClose");
			button_3.value = "";
			button_3.bind("value").toLanguage("UI-SCR-CLOSE");
			if(typeof onBtnCloseClick == "function") {
				button_3.addEventListener("click", onBtnCloseClick);
			}
			container.addChild(button_3, {
				"top": "326px",
				"left": "535px",
				"width": "60px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "파일 유틸";
	cpr.core.Platform.INSTANCE.register(app);
})();
