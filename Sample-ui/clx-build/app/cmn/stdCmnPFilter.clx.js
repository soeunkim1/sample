/*
 * App URI: app/cmn/stdCmnPFilter
 * Source Location: app/cmn/stdCmnPFilter.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cmn/stdCmnPFilter", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			var dataMap_1 = new cpr.data.DataMap("dmList");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "column",
						"dataType": "string"
					},
					{
						"name": "check",
						"dataType": "string"
					},
					{
						"name": "name",
						"dataType": "string"
					},
					{
						"name": "columnType",
						"dataType": "string"
					},
					{
						"name": "allcolumn",
						"dataType": "string"
					},
					{
						"name": "datatype",
						"dataType": "string"
					},
					{
						"name": "column",
						"dataType": "string"
					},
					{
						"name": "sorttype",
						"dataType": "string"
					},
					{
						"name": "sortorder",
						"dataType": "string"
					},
					{
						"name": "andor",
						"dataType": "string"
					},
					{
						"name": "columnType",
						"dataType": "string"
					},
					{
						"name": "allcolumn",
						"dataType": "string"
					},
					{
						"name": "datatype",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("group4");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var grid_1 = new cpr.controls.Grid("grdLeft");
				grid_1.init({
					"dataSet": app.lookup("dsTempLSortList"),
					"columns": [
						{"width": "41px"},
						{"width": "120px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "필터링대상";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "_repeatindex";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("inputbox17");
										inputBox_1.enabled = false;
										inputBox_1.bind("value").toDataColumn("_repeatindex");
										return inputBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "check";
									cell.control = (function(){
										var checkBox_1 = new cpr.controls.CheckBox("chkFilter");
										checkBox_1.value = "";
										checkBox_1.trueValue = "Y";
										checkBox_1.falseValue = "";
										checkBox_1.text = "";
										checkBox_1.style.css({
											"text-align" : "center"
										});
										checkBox_1.bind("value").toDataColumn("check");
										return checkBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "name";
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "6px",
					"left": "5px",
					"width": "181px",
					"height": "279px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "45px",
				"left": "5px",
				"width": "565px",
				"height": "290px"
			});
			
			var button_1 = new cpr.controls.Button("button1");
			button_1.value = "+필터";
			if(typeof onButton1Click == "function") {
				button_1.addEventListener("click", onButton1Click);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "443px",
				"width": "60px",
				"height": "25px"
			});
			
			var button_2 = new cpr.controls.Button("button2");
			button_2.value = "reset";
			if(typeof onButton2Click == "function") {
				button_2.addEventListener("click", onButton2Click);
			}
			container.addChild(button_2, {
				"top": "20px",
				"left": "508px",
				"width": "60px",
				"height": "25px"
			});
			
			var grid_2 = new cpr.controls.Grid("grdRight");
			grid_2.init({
				"dataSet": app.lookup("dsTempRSortList"),
				"columns": [
					{"width": "21px"},
					{"width": "120px"},
					{"width": "51px"},
					{"width": "90px"},
					{"width": "51px"}
				],
				"header": {
					"rows": [{"height": "27px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.text = "";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.text = "필터링대상";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.text = "계산식";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.text = "data";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.text = "a/o";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "25px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "DEL_CKB";
								cell.control = (function(){
									var checkBox_2 = new cpr.controls.CheckBox("checkbox1");
									checkBox_2.value = "";
									checkBox_2.trueValue = "Y";
									checkBox_2.falseValue = "";
									checkBox_2.text = "";
									checkBox_2.style.css({
										"text-align" : "center"
									});
									checkBox_2.bind("value").toDataColumn("DEL_CKB");
									return checkBox_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column";
								cell.control = (function(){
									var comboBox_1 = new cpr.controls.ComboBox("combobox4");
									comboBox_1.enabled = false;
									comboBox_1.hideButton = true;
									(function(comboBox_1){
										comboBox_1.setItemSet(app.lookup("dsTempLSortList"), {
											"label": "name",
											"value": "column"
										});
									})(comboBox_1);
									comboBox_1.bind("value").toDataColumn("column");
									return comboBox_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "sorttype";
								cell.control = (function(){
									var comboBox_2 = new cpr.controls.ComboBox("combobox2");
									(function(comboBox_2){
										comboBox_2.setItemSet(app.lookup("dsTempCalcType"), {
											"label": "CD_NM",
											"value": "CD"
										});
									})(comboBox_2);
									comboBox_2.bind("value").toDataColumn("sorttype");
									return comboBox_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "sortorder";
								cell.control = (function(){
									var inputBox_2 = new cpr.controls.InputBox("inputbox2");
									inputBox_2.bind("value").toDataColumn("sortorder");
									return inputBox_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "andor";
								cell.control = (function(){
									var comboBox_3 = new cpr.controls.ComboBox("combobox5");
									(function(comboBox_3){
										comboBox_3.addItem(new cpr.controls.Item("and", "and"));
										comboBox_3.addItem(new cpr.controls.Item("or", "or"));
									})(comboBox_3);
									comboBox_3.bind("value").toDataColumn("andor");
									return comboBox_3;
								})();
							}
						}
					]
				}
			});
			container.addChild(grid_2, {
				"top": "51px",
				"left": "219px",
				"width": "346px",
				"height": "279px"
			});
			
			var button_3 = new cpr.controls.Button("btnChange");
			button_3.value = ">";
			if(typeof onBtnChangeClick == "function") {
				button_3.addEventListener("click", onBtnChangeClick);
			}
			container.addChild(button_3, {
				"top": "111px",
				"left": "198px",
				"width": "14px",
				"height": "50px"
			});
			
			var output_1 = new cpr.controls.Output("optPagePgTitle1");
			output_1.value = "필터";
			container.addChild(output_1, {
				"top": "5px",
				"left": "5px",
				"width": "193px",
				"height": "25px"
			});
			
			var button_4 = new cpr.controls.Button("btnSave");
			button_4.value = "닫기";
			button_4.style.setClasses(["btn-save"]);
			if(typeof onBtnSaveClick == "function") {
				button_4.addEventListener("click", onBtnSaveClick);
			}
			container.addChild(button_4, {
				"top": "340px",
				"left": "507px",
				"width": "60px",
				"height": "25px"
			});
			
			var button_5 = new cpr.controls.Button("btnChange1");
			button_5.value = "<";
			if(typeof onBtnChange1Click == "function") {
				button_5.addEventListener("click", onBtnChange1Click);
			}
			container.addChild(button_5, {
				"top": "176px",
				"left": "198px",
				"width": "14px",
				"height": "50px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "Untitled";
	cpr.core.Platform.INSTANCE.register(app);
})();
