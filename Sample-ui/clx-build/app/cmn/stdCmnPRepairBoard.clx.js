/*
 * App URI: app/cmn/stdCmnPRepairBoard
 * Source Location: app/cmn/stdCmnPRepairBoard.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cmn/stdCmnPRepairBoard", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var util = new ComUtil(app);	
			/******************************************************************************************************
			 *	}];
			 *  ▶ 설정가능 유형
			 *      1. 인스턴스
			 *      2. 리피트 디테일 셀 ID
			 *      3. 컨트롤 ID
			 *  ▶ 각 변수별 설명
			 *      iXXX : 팝업에 전달될  input 파라미터
			 *      oXXX : 팝업에서 선택한 값을 받을 데이터
			 *  	1. controlId 			: 최초 이벤트의 버튼이나 그리드 id             			(필수)
			 *  	2. iFileSerialNo		: 파일순번                                						(선택) 
			 *  	3. iFileSubPath 		: 저장될 파일 폴더(appworks.properties에 정의된 폴더 경로)	(필수)	
			 *  	4. iTableName 		: 파일업로드에 사용될 업무단 테이블명							(필수)
			 *  	5. iIsHideDelete 		: 삭제버튼 숨기기 여부 								(선택)
			 *								  	  default : false;
			 *		6. iIsDownloadOnly	: 다운로드만 가능할지 여부(업로드X)							(선택)
			 *								      default : false;
			 *		7. iIsDirectUpLoad   : auto save기능을 사용하지 않고 파일업로드 팝업을 이용하여 업로드 후 업로드된 정보만 리턴받아 제어 할 경우 사용
			 *									  default : false;
			 *		8. iFileExtFilter		: 업로드가능 확장자(배열) 								(선택)
			 *								  	  ex)["jpg","png"]
			 *  	8. oFileSerailNo 		: 파일순번											(필수)
			 *  	9. oFileCnt 			: 저장된 파일 갯수									(선택)
			 *									  (	func의 args 대체 가능 poRtnFileInfo.strFileCnt)
			 *									  리피트내 컬럼 지정시 updatable="False" 지정
			 *  	10. oTmpFilePath 	: 임시폴더파일경로										(선택)
			 *									  리피트일경우 null로 지정, TMP_FILE_PATH 데이터셋 생성됨
			 *									  
			 *		11.oFileDataChanged	: 파일업로드 변경 여부 판단									(필수)		
			 *									  (	func의 args 대체 가능 poRtnFileInfo.isFileDataChanged)
			 *
			 *  	12. func 				: 팝업에서 선택한 값을 받은 후 추가 로직이 필요한 경우 함수
			 *									  args..
			 * 									  poRtnFileInfo.IS_FILE_CHG 		파일업로드 리피트 변경 여부
			 *													FILE_CNT			업로드 파일 갯수
			 *													TMP_FILE_PATH		임시파일경로
			 *									  				FILE_SERAIL_NO		파일순번
			 *******************************************************************************************************/	
			var moIdsForStdCmnFileUtil = [{
				controlId 		: "btnFileDown",
				iFileSerialNo 	: "rdOptFileSerialNo",
				iFileSubPath 	:  "stdCmnCRepairBoard",
				iTableName 		: "CMN_MOD_BOARD",
				iIsDirectUpLoad	: null,
				iIsHideDelete 	: null,			
				iIsDownloadOnly : null,
				iFileExtFilter 	: null,
				oFileSerailNo	: null,
				oTmpFilePath	: null,			//리피트일경우 null로 지정
				oFileCnt		: "optFrfFileCnt",		
				oFileDataChanged: null,
				func			:function(poRtnFileInfo){
									if(poRtnFileInfo.IS_FILE_CHG && poRtnFileInfo.FILE_CNT == 0){
										//ExtRepeat.setValue("rptCmnModBoard", "FILE_SERIAL_NO", "");
										util.Grid.setCellValue(app, "grdCmnModBoard", "FILE_SERIAL_NO", "");
										doSave();
									}
								}
			}];
			 
			var moPageInfo = null;
			var moUserInfo = null;
								
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				//리피트 초기 설정
			//	ExtRepeat.init(["rptCmnModBoard"]);
				//검색조건 초기 설정
			//	ExtGroup.initSearchBox("grpSearch", "grpData");
			
				//서브미션 실행 (실패시 cover page)
				util.Submit.send(app, "subOnLoad", function(pbSuccess){
					moPageInfo = util.Auth.getMenuInfo(app);
					moUserInfo = util.Auth.getUserInfo(app);
								
					if(pbSuccess){
						util.Control.redraw(app, "frfCmnModBoard");
						
						// 현재 선택한 메뉴명과 메뉴아이디
						var vsMenuId;
						var vsMenuNm;
										
			//			var opener = model.getScriptModel("opener", "javascript");
			//			if( opener.model.getContainerName() == "tmt_content" ){
			//				vsMenuId = moPageInfo.menuId;
			//				vsMenuNm = moPageInfo.menuNm;
			//				
			//			}else{
			//				if( opener.model.getId().startsWith("std") || opener.model.getId().startsWith("ext") ){
			//					vsMenuId = opener.model.getId();
			//				}else{
			//					var vsParentPathNm = opener.model.getBaseXtmPath().pathname;
			//					
			//					vsParentPathNm = vsParentPathNm.substring(vsParentPathNm.lastIndexOf("/")+1, vsParentPathNm.lastIndexOf(".xtm"));
			//					vsMenuId = vsParentPathNm;
			//				}
			//				vsMenuNm = opener.model.getTitle();
			//			}
						/** @type cpr.core.AppInstance */
						var voHostApp = app.getHostAppInstance();
						if(voHostApp != null){
							vsMenuId = moPageInfo.get("MENU_ID");
							vsMenuNm = moPageInfo.get("MENU_NM");
						}else{
							var vsCurrentAppId = util.getApp().id;
							vsMenuId = vsCurrentAppId
						}
						
						util.Control.setValue(app, app, "optPgmId", vsMenuId);
						util.Control.setValue(app, app, "optPgmNm", vsMenuNm);
						// 현재 사용자의 시스템관리자 여부, 사용자ID, 사용자명 
						var vsSystemMgrYn = moUserInfo.get("SYSTEM_MGR_YN");
						var vsUserId = moUserInfo.get("USER_ID");
						var vsUserNm = moUserInfo.get("USER_NM");
			
						// 시스템관리자가 아닌 경우, 본인 것만 조회되도록 -> 조회조건 등록자 기본입력
						// 시스템관리자인 경우 등록자 검색 가능하도록 처리
						if(vsSystemMgrYn != "Y"){				
							util.Control.setValue(app, app, "ipbRegtntId", vsUserId);
							util.Control.setValue(app, app, "optRegtntNm", vsUserNm);
							
							util.Control.setEnable(app, false, "cmnusersch1");
						}else{
							util.Control.setEnable(app, true, "cmnusersch1");
						}
						
						util.Control.setEnable(app, true, "grid_ids_btn1");
						
						// 조회
						/** @type udc.com.btnSearch*/
						var voBtnSearch = app.lookup("btnSearch");
						voBtnSearch.click();
					}
				}, true);
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearch = e.control;
				var vsUserNm = util.Udc.getUdcAppProperty("cmnusersch1", "oUserNm");
				if(vsUserNm == ""){
					util.Udc.setUdcAppProperty("cmnusersch1", "iUserId", "");
					util.Control.redraw(app, "cmnusersch1");
				}
				
				if(!util.validate(app, "grpSearch") || util.Grid.isModified(app, "grdCmnModBoard", "CRM")) {
					e.stopImmediatePropagation();
					return false;
				}
				
				doList(function(pbSuccess){
					//조회: "조회되었습니다." header 메세지 표시.
					if(pbSuccess){
						util.Msg.notify(app, "NLS-INF-M024");
					}
				});
				
			}
			
			/*
			 * 사용자 정의 컨트롤에서 searchCallBack 이벤트 발생 시 호출.
			 */
			function onCmnusersch1SearchCallBack(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type udc.cmn.cmnUserSch
				 */
				var cmnusersch1 = e.control;
			//	cmnusersch1.redraw();
			}
			
			
			/**
			 * 조회버튼 이벤트(의뢰내역 목록을 조회한다.)
			 * @param poCallBackFunc 콜백함수
			 */
			function doList(poCallBackFunc){
				// 조회조건 필수체크
				// searchClick에서 수행
			//	if(!ValidUtil.check(["optPgmId"])){
			//		return false;
			//	}
			
				util.Submit.send(app, "subList", function(pbSuccess){
					if(pbSuccess){
						// 의뢰내역목록 
						util.Control.redraw(app, ["grdCmnModBoard", "lblTitleRptCmnModBoard"]);
						
						var vnGrdCnt = util.Grid.getRowCount(app, "grdCmnModBoard");
						if(vnGrdCnt == 0){
							util.Control.setEnable(app, false, ["frfCmnModBoard"]);
						}
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					}
				});
			}
			
			/**
			 * 작업저장 event
			 * @return void 
			 */
			function doSave(){
				// 리피터 변경사항 체크
				if(!util.Grid.isModified(app, "grdCmnModBoard", "MSG")){
					return false;
				}
				//리피트 validation check
				if(!util.validate(app, "grdCmnModBoard")) {
					return false;
				}
			
				util.Submit.send(app, "subSave", function(pbSuccess){
					if(pbSuccess){
						doList(function(pbListSuccess) {
							// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
							if (pbListSuccess) {
								util.Msg.notify(app, "NLS-INF-M025");
								
								var vsSerialNo = util.DataMap.getValue(app, "dmResList", "SERIAL_NO");
								if(!ValueUtil.isNull(vsSerialNo)){
									util.Grid.selectRowByCondition(app, "grdCmnModBoard", "SERIAL_NO == '" + vsSerialNo + "'");
								}
							}
						});
					}
				});
			}
			
			/*
			 * 그리드에서 selection-change 이벤트 발생 시 호출.
			 * detail의 cell 클릭하여 설정된 selectionunit에 해당되는 단위가 선택될 때 발생하는 이벤트.
			 */
			function onGrdCmnModBoardSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdCmnModBoard = e.control;
				doSelectRptCmnModBoard();
			}
			
			function doSelectRptCmnModBoard(){
				var vnIndex = util.Grid.getIndex(app, "grdCmnModBoard");
				// 프리폼 활성화 비활성화 제어
				doCompareFrfEnable(vnIndex);
				
				// 시스템관리자일 경우 조치관련 컨트롤 입력가능하게 처리
				var vsSystemMgrYn = util.Auth.getUserInfo(app, "SYSTEM_MGR_YN");
				util.Control.setEnable(app, true, ["cbbFrfActStatRcd", "dipFrfActDt", "dipFrfActPlanDt", "ipbFrfActPsnNm", "ipbFrfCnfmPsnNm"]);
				util.Control.setReadOnly(app, false, ["txtFrfActCont"]);
				
				//리피트 특정 row 데이터를 프리폼 copy
				// context binding으로 해결 
			//	ExtRepeat.copyRowForm("rptCmnModBoard", "frfCmnModBoard", vnIndex);
			}
			
			/**
			 * 셀렉트 여부에 따라 프리폼 활성화 제어
			 * @param {Number} pnIndex 
			 * @return void
			 */
			function doCompareFrfEnable(pnIndex) {
				if( util.Grid.getRowCount(app, "grdCmnModBoard") == 0 
					|| util.Grid.getIndex(app, "grdCmnModBoard") == -1 
					|| util.Control.isEnable("grdCmnModBoard") == false 
					|| util.Grid.getRowState(app, "grdCmnModBoard", pnIndex) == cpr.data.tabledata.RowState.DELETED){
					util.Control.setEnable(app, false, ["frfCmnModBoard"]);
				} else {
					util.Control.setEnable(app, true, ["frfCmnModBoard"]);	
				}
			}
			
			/*
			 * 사용자 정의 컨트롤에서 insert 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn1Insert(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn1 = e.control;
				doInsert();
			}
			
			/**
			 * 신규 행을 추가한다.
			 * @return void
			 */
			function doInsert(){
				// 1. 신규로우 추가
				// 공통으로 수행
			//	var vnIdx = ExtRepeat.insertRow("rptCmnModBoard");
			
				var vnIdx = util.Grid.getIndex(app, "grdCmnModBoard");
				var vsMenuId = util.Control.getValue(app, "optPgmId"); // 조회조건 : 메뉴 
				var vsCurDt = util.DataMap.getValue(app, "dmResOnLoad", "strCurDt"); // 현재일자 
			
				util.DataSet.setValue(app, "dsCmnModBoard", vnIdx, "REQ_ID", "REQ-"+vsMenuId);					// 요청ID
				util.DataSet.setValue(app, "dsCmnModBoard", vnIdx, "MENU_PGM_ID", vsMenuId);					// 메뉴ID
				util.DataSet.setValue(app, "dsCmnModBoard", vnIdx, "ACT_STAT_RCD", "MGT0901");					// 조치상태 : 등록[MGT0901] 2015.12.22 추가 hyunteak
				util.DataSet.setValue(app, "dsCmnModBoard", vnIdx, "REG_DT", vsCurDt);						// 등록일자
				util.DataSet.setValue(app, "dsCmnModBoard", vnIdx, "REGTNT_ID", util.Auth.getUserInfo(app, "USER_ID"));	// 등록자ID
				util.DataSet.setValue(app, "dsCmnModBoard", vnIdx, "REGTNT_NM", util.Auth.getUserInfo(app, "USER_NM"));	// 등록자명
				util.DataSet.setValue(app, "dsCmnModBoard", vnIdx, "REG_DIV_RCD", "MGT0302");					// 등록구분 : 오류[MGT0301]
				util.DataSet.setValue(app, "dsCmnModBoard", vnIdx, "ACT_STAT_RCD", "MGT0901");					// 조치상태 : 등록[MGT0901]
				
				var vsDevChargeNm = util.DataSet.getValue(app, "dsCmnPgmList", vnIdx, "DEV_CHARGER_NM");
				var vsDrawChargeNm = util.DataSet.getValue(app, "dsCmnPgmList", vnIdx, "DRAW_CHARGER_NM");
					
				util.DataSet.setValue(app, "dsCmnModBoard", vnIdx, "ACT_PSN_NM", vsDevChargeNm);				// 조치자명
				util.DataSet.setValue(app, "dsCmnModBoard", vnIdx, "CNFM_PSN_NM", vsDrawChargeNm);				// 확인자명
			
				util.Control.redraw(app, "grdCmnModBoard");
				// 프리폼의 콤보박스에 포커스
				util.Control.setFocus(app, "txtFrfErrorCont");
			}
			/*
			 * 사용자 정의 컨트롤에서 delete 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn1Delete(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn1 = e.control;
			
				if(util.Grid.getIndex(app, "grdCmnModBoard") != -1){
					doSelectRptCmnModBoard();
				}else{
					 util.Control.setEnable(app, false, ["frfCmnModBoard"]);
				}
			}
			
			/*
			 * 사용자 정의 컨트롤에서 restore 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn1Restore(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn1 = e.control;
				doSelectRptCmnModBoard();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 save 이벤트 발생 시 호출.
			 */
			function onGrid_ids_btn1Save(/* cpr.event.CUIEvent */ e){
				/** 
				 * @type udc.com.grid_IDS_Btn
				 */
				var grid_ids_btn1 = e.control;
				doSave();
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbbFrfActStatRcdSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cbbFrfActStatRcd = e.control;
			
				// 조치상태에 따른 조치일자 제어
				var vsActSts = cbbFrfActStatRcd.value; // 조치상태
				
				if(vsActSts == "MGT0903" || vsActSts == "MGT0905"){
					var vsActDt = util.Control.getValue(app, "dipFrfActDt");
					var vsActPlanDt = util.Control.getValue(app, "dipFrfActPlanDt");
					var vsCurDt = util.DataMap.getValue(app, "dmResOnLoad", "strCurDt");
					if(ValueUtil.isNull(vsActDt)){
						util.Control.setValue(app, app, "dipFrfActDt", vsCurDt);
					}
					
					if(ValueUtil.isNull(vsActPlanDt)){
						util.Control.setValue(app, app, "dipFrfActPlanDt", vsCurDt);
					}
					
				}else{
					util.Control.setValue(app, app, "dipFrfActDt", "");
				}
			}
			
			/*
			 * "화면닫기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCancelClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCancel = e.control;
				if(util.Grid.isModified(app, "grdCmnModBoard", "MSG")){
					return false;
				}
				//리피트 validation check
				if(!util.validate(app, "grdCmnModBoard")) {
					return false;
				}
				
			//	util.Msg.confirm("M010", null, psMsgBoxType);
				app.close();
			}
			
			/*
			 * 사용자 정의 컨트롤에서 upLoadCallBack 이벤트 발생 시 호출.
			 */
			function onCmnfileutil1UpLoadCallBack(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type udc.cmn.cmnFileUtil
				 */
				var cmnfileutil1 = e.control;
				util.Control.redraw(app, "optFrfFileCnt");
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsActStatRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsRegDivRcdList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsCmnPgmList");
			dataSet_3.parseData({
				"columns": [
					{"name": "DEV_CHARGER_NM"},
					{"name": "DRAW_CHARGER_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsCmnModBoard");
			dataSet_4.parseData({
				"info": "CMN_MOD_BOARD@REQ_ID,SERIAL_NO",
				"columns": [
					{"name": "REQ_ID"},
					{"name": "SERIAL_NO"},
					{"name": "MENU_PGM_ID"},
					{"name": "REG_DT"},
					{"name": "REGTNT_ID"},
					{"name": "REGTNT_NM"},
					{"name": "ERROR_CONT"},
					{"name": "ACT_STAT_RCD"},
					{"name": "ACT_CONT"},
					{"name": "ACT_DT"},
					{"name": "ACT_PSN_NM"},
					{"name": "CNFM_PSN_NM"},
					{"name": "REG_DIV_RCD"},
					{"name": "FILE_SERIAL_NO"},
					{"name": "FILE_YN"},
					{"name": "FILE_CNT"},
					{"name": "REQ_ID_KEY"},
					{"name": "ERROR_CONT_VIEW"},
					{"name": "ACT_PLAN_DT"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsFrfCmnModBoard");
			dataSet_5.parseData({
				"columns": [
					{"name": "REQ_ID"},
					{"name": "SERIAL_NO"},
					{"name": "MENU_PGM_ID"},
					{"name": "REG_DT"},
					{"name": "REGTNT_ID"},
					{"name": "REGTNT_NM"},
					{"name": "ERROR_CONT"},
					{"name": "ACT_STAT_RCD"},
					{"name": "ACT_CONT"},
					{"name": "ACT_DT"},
					{"name": "ACT_PSN_NM"},
					{"name": "CNFM_PSN_NM"},
					{"name": "REG_DIV_RCD"},
					{"name": "FILE_SERIAL_NO"},
					{"name": "FILE_YN"},
					{"name": "FILE_CNT"},
					{"name": "REQ_ID_KEY"},
					{"name": "ERROR_CONT_VIEW"},
					{"name": "ACT_PLAN_DT"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			var dataMap_1 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_1.parseData({
				"columns" : [{
					"name": "strCurDt",
					"dataType": "string"
				}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqList");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strMenuId",
						"dataType": "string"
					},
					{
						"name": "strRegtntId",
						"dataType": "string"
					},
					{
						"name": "strRegtntNm",
						"dataType": "string"
					},
					{
						"name": "strActPsnNm",
						"dataType": "string"
					},
					{
						"name": "strMenuNm",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmResList");
			dataMap_3.parseData({
				"columns" : [{
					"name": "SERIAL_NO",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/cmn/StdCmnRepairBoardSch/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataMap_1, false);
			submission_1.addResponseData(dataSet_3, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/cmn/StdCmnRepairBoardSch/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_2);
			submission_2.addResponseData(dataSet_4, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/cmn/StdCmnRepairBoardSch/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_4);
			submission_3.addResponseData(dataMap_3, false);
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "745px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optRegtntNm");
				output_1.value = "";
				output_1.bind("value").toLanguage("UI-SCR-REGISTRANT");
				container.addChild(output_1, {
					"top": "5px",
					"left": "305px",
					"width": "65px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbRegtntId");
				inputBox_1.enabled = false;
				inputBox_1.bind("fieldLabel").toExpression("#optRegtntNm.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strRegtntId");
				if(typeof onIpbRegtntIdValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbRegtntIdValueChange);
				}
				container.addChild(inputBox_1, {
					"top": "5px",
					"left": "375px",
					"width": "85px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optPgmId");
				output_2.value = "";
				output_2.bind("value").toLanguage("UI-DB-MENU_ID");
				container.addChild(output_2, {
					"top": "5px",
					"left": "5px",
					"width": "75px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optActPsnNm");
				output_3.value = "조치자";
				container.addChild(output_3, {
					"top": "5px",
					"left": "585px",
					"width": "65px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbActPsnNm");
				inputBox_2.bind("fieldLabel").toExpression("#optActPsnNm.value");
				inputBox_2.bind("value").toDataMap(app.lookup("dmReqList"), "strActPsnNm");
				if(typeof onIpbActPsnNmKeydown == "function") {
					inputBox_2.addEventListener("keydown", onIpbActPsnNmKeydown);
				}
				container.addChild(inputBox_2, {
					"top": "5px",
					"left": "655px",
					"width": "85px",
					"height": "25px"
				});
				var output_4 = new cpr.controls.Output("optRegtntNm");
				output_4.value = "";
				output_4.bind("value").toDataMap(app.lookup("dmReqList"), "strRegtntNm");
				container.addChild(output_4, {
					"top": "5px",
					"left": "480px",
					"width": "95px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnRegtntNm");
				button_2.enabled = false;
				button_2.value = "";
				button_2.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnRegtntNmClick == "function") {
					button_2.addEventListener("click", onBtnRegtntNmClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "460px",
					"width": "20px",
					"height": "25px"
				});
				var output_5 = new cpr.controls.Output("optPgmId");
				output_5.value = "";
				output_5.bind("value").toDataMap(app.lookup("dmReqList"), "strMenuId");
				container.addChild(output_5, {
					"top": "5px",
					"left": "85px",
					"width": "100px",
					"height": "25px"
				});
				var output_6 = new cpr.controls.Output("optPgmNm");
				output_6.value = "";
				output_6.bind("value").toDataMap(app.lookup("dmReqList"), "strMenuNm");
				container.addChild(output_6, {
					"top": "5px",
					"left": "185px",
					"width": "115px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "810px",
				"height": "32px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-GLS-REQZ");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "215px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCmnModBoard");
				grid_1.init({
					"dataSet": app.lookup("dsCmnModBoard"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "124px"},
						{"width": "72px"},
						{"width": "307px"},
						{"width": "73px"},
						{"width": "68px"},
						{"width": "66px"},
						{
							"width": "60px",
							"visible": false
						},
						{
							"width": "60px",
							"visible": false
						},
						{
							"width": "60px",
							"visible": false
						},
						{
							"width": "60px",
							"visible": false
						},
						{
							"width": "60px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-REGISTDAT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-REGISTRANT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.text = "변경내용";
									cell.style.setClasses(["require"]);
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-PRCSTATE");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-PROC_USER_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.text = "첨부유무";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.text = "파일순번";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.text = "요청ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.text = "메뉴ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.text = "구분";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.text = "변경내용";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_7 = new cpr.controls.Output();
										output_7.style.css({
											"text-align" : "center"
										});
										return output_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "REG_DT";
									cell.control = (function(){
										var output_8 = new cpr.controls.Output("gdOptRegDt");
										output_8.dataType = "date";
										output_8.format = "YYYY-MM-DD HH:mm:ss";
										output_8.style.css({
											"text-align" : "center"
										});
										output_8.bind("value").toDataColumn("REG_DT");
										return output_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "REGTNT_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "ERROR_CONT_VIEW";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "ACT_STAT_RCD";
									cell.control = (function(){
										var comboBox_1 = new cpr.controls.ComboBox("gdCbbActStatRcd");
										comboBox_1.enabled = false;
										comboBox_1.hideButton = true;
										comboBox_1.userAttr({"require": "Y"});
										(function(comboBox_1){
											comboBox_1.addItem(new cpr.controls.Item("선택", ""));
											comboBox_1.setItemSet(app.lookup("dsActStatRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_1);
										comboBox_1.bind("value").toDataColumn("ACT_STAT_RCD");
										return comboBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "ACT_PSN_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "FILE_YN";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "FILE_SERIAL_NO";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "REQ_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "MENU_PGM_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "REG_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "ERROR_CONT";
								}
							}
						]
					}
				});
				if(typeof onGrdCmnModBoardSelectionChange == "function") {
					grid_1.addEventListener("selection-change", onGrdCmnModBoardSelectionChange);
				}
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "800px",
					"height": "205px"
				});
				var userDefinedControl_3 = new udc.com.comFormTitle();
				userDefinedControl_3.bind("title").toLanguage("");
				container.addChild(userDefinedControl_3, {
					"top": "240px",
					"left": "5px",
					"width": "150px",
					"height": "25px"
				});
				var group_3 = linker.group_3 = new cpr.controls.Container("frfCmnModBoard");
				group_3.style.setClasses(["form-box"]);
				// Layout
				var xYLayout_4 = new cpr.controls.layouts.XYLayout();
				group_3.setLayout(xYLayout_4);
				(function(container){
					var output_9 = new cpr.controls.Output("optFrfActStatRcd");
					output_9.value = "";
					output_9.style.setClasses(["require"]);
					output_9.bind("value").toLanguage("UI-SCR-PRCSTATE");
					container.addChild(output_9, {
						"top": "5px",
						"left": "415px",
						"width": "85px",
						"height": "25px"
					});
					var output_10 = new cpr.controls.Output("optFrfActDt");
					output_10.value = "";
					output_10.bind("value").toLanguage("UI-DB-PROC_DT");
					container.addChild(output_10, {
						"top": "5px",
						"left": "613px",
						"width": "70px",
						"height": "25px"
					});
					var dateInput_1 = new cpr.controls.DateInput("dipFrfActDt");
					dateInput_1.enabled = false;
					dateInput_1.format = "YYYY-MM-DD";
					dateInput_1.style.css({
						"text-align" : "center"
					});
					dateInput_1.bind("fieldLabel").toExpression("#optActDt.value");
					dateInput_1.bind("value").toDataColumn("ACT_DT");
					container.addChild(dateInput_1, {
						"top": "5px",
						"left": "688px",
						"width": "100px",
						"height": "25px"
					});
					var output_11 = new cpr.controls.Output("optFrfActPsnNm");
					output_11.value = "";
					output_11.style.setClasses(["require"]);
					output_11.bind("value").toLanguage("UI-DB-PROC_USER_ID");
					container.addChild(output_11, {
						"top": "30px",
						"left": "415px",
						"width": "85px",
						"height": "25px"
					});
					var inputBox_3 = new cpr.controls.InputBox("ipbFrfActPsnNm");
					inputBox_3.maxLength = 50;
					inputBox_3.userAttr({"require": "Y"});
					inputBox_3.bind("fieldLabel").toExpression("#optFrfActPsnNm.value");
					inputBox_3.bind("value").toDataColumn("ACT_PSN_NM");
					container.addChild(inputBox_3, {
						"top": "30px",
						"left": "505px",
						"width": "100px",
						"height": "25px"
					});
					var output_12 = new cpr.controls.Output("optFrfCnfmPsnNm");
					output_12.value = "";
					output_12.style.setClasses(["require"]);
					output_12.bind("value").toLanguage("UI-SCR-USERCNFRM");
					container.addChild(output_12, {
						"top": "260px",
						"left": "415px",
						"width": "85px",
						"height": "25px"
					});
					var inputBox_4 = new cpr.controls.InputBox("ipbFrfCnfmPsnNm");
					inputBox_4.maxLength = 50;
					inputBox_4.userAttr({"require": "Y"});
					inputBox_4.bind("fieldLabel").toExpression("#optFrfCnfmPsnNm.value");
					inputBox_4.bind("value").toDataColumn("CNFM_PSN_NM");
					container.addChild(inputBox_4, {
						"top": "260px",
						"left": "505px",
						"width": "100px",
						"height": "25px"
					});
					var output_13 = new cpr.controls.Output("optFrfFileSerialNo");
					output_13.visible = false;
					output_13.value = "";
					output_13.bind("value").toLanguage("UI-SCR-ATCHFILE");
					container.addChild(output_13, {
						"top": "260px",
						"left": "5px",
						"width": "85px",
						"height": "25px"
					});
					var output_14 = new cpr.controls.Output("optFrfRegDivRcd");
					output_14.value = "";
					output_14.bind("value").toLanguage("UI-SCR-DIV");
					container.addChild(output_14, {
						"top": "5px",
						"left": "5px",
						"width": "85px",
						"height": "25px"
					});
					var output_15 = new cpr.controls.Output("optFrfActCont");
					output_15.value = "";
					output_15.bind("value").toLanguage("UI-SCR-PRCSLST");
					container.addChild(output_15, {
						"top": "55px",
						"left": "415px",
						"width": "85px",
						"height": "195px"
					});
					var output_16 = new cpr.controls.Output("optFrfErrorCont");
					output_16.value = "";
					output_16.style.setClasses(["require"]);
					output_16.bind("value").toLanguage("UI-GLS-REQZ");
					container.addChild(output_16, {
						"top": "55px",
						"left": "5px",
						"width": "85px",
						"height": "200px"
					});
					var comboBox_2 = new cpr.controls.ComboBox("cbbFrfRegDivRcd");
					comboBox_2.bind("value").toDataColumn("REG_DIV_RCD");
					(function(comboBox_2){
						comboBox_2.setItemSet(app.lookup("dsRegDivRcdList"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_2);
					container.addChild(comboBox_2, {
						"top": "5px",
						"left": "95px",
						"width": "100px",
						"height": "150px"
					});
					var comboBox_3 = new cpr.controls.ComboBox("cbbFrfActStatRcd");
					comboBox_3.enabled = false;
					comboBox_3.userAttr({"require": "Y"});
					comboBox_3.bind("value").toDataColumn("ACT_STAT_RCD");
					(function(comboBox_3){
						comboBox_3.setItemSet(app.lookup("dsActStatRcdList"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_3);
					if(typeof onCbbFrfActStatRcdSelectionChange == "function") {
						comboBox_3.addEventListener("selection-change", onCbbFrfActStatRcdSelectionChange);
					}
					container.addChild(comboBox_3, {
						"top": "5px",
						"left": "505px",
						"width": "100px",
						"height": "150px"
					});
					var textArea_1 = new cpr.controls.TextArea("txtFrfErrorCont");
					textArea_1.maxLength = 1000;
					textArea_1.userAttr({"require": "Y"});
					textArea_1.bind("value").toDataColumn("ERROR_CONT");
					container.addChild(textArea_1, {
						"top": "55px",
						"left": "95px",
						"width": "310px",
						"height": "200px"
					});
					var textArea_2 = new cpr.controls.TextArea("txtFrfActCont");
					textArea_2.readOnly = true;
					textArea_2.maxLength = 1000;
					textArea_2.bind("fieldLabel").toExpression("#optFrfActCont.value");
					textArea_2.bind("value").toDataColumn("ACT_CONT");
					container.addChild(textArea_2, {
						"top": "55px",
						"left": "505px",
						"width": "290px",
						"height": "195px"
					});
					var button_3 = new cpr.controls.Button("btnFileDown");
					button_3.value = "";
					button_3.bind("value").toLanguage("UI-SCR-FILEDOWN");
					if(typeof onBtnFileDownClick == "function") {
						button_3.addEventListener("click", onBtnFileDownClick);
					}
					container.addChild(button_3, {
						"top": "260px",
						"left": "95px",
						"width": "70px",
						"height": "25px"
					});
					var output_17 = new cpr.controls.Output("optFrfFileCnt");
					output_17.value = "";
					output_17.bind("value").toLanguage("UI-SCR-FILEINFO");
					container.addChild(output_17, {
						"top": "260px",
						"left": "175px",
						"width": "100px",
						"height": "25px"
					});
					var output_18 = new cpr.controls.Output("optFrfFileCnt");
					output_18.value = "";
					output_18.bind("value").toDataColumn("FILE_CNT");
					container.addChild(output_18, {
						"top": "260px",
						"left": "280px",
						"width": "80px",
						"height": "25px"
					});
					var output_19 = new cpr.controls.Output("optFrfFileSerialNo");
					output_19.visible = false;
					output_19.value = "";
					output_19.bind("value").toDataColumn("FILE_SERIAL_NO");
					container.addChild(output_19, {
						"top": "260px",
						"left": "360px",
						"width": "40px",
						"height": "25px"
					});
					var output_20 = new cpr.controls.Output("optFrfRegDt");
					output_20.value = "";
					output_20.bind("value").toLanguage("UI-SCR-REGISTRANT");
					container.addChild(output_20, {
						"top": "30px",
						"left": "5px",
						"width": "85px",
						"height": "25px"
					});
					var output_21 = new cpr.controls.Output("optFrfRegtntNm");
					output_21.value = "";
					output_21.style.setClasses(["require"]);
					output_21.bind("value").toLanguage("UI-DB-PROC_USER_ID");
					container.addChild(output_21, {
						"top": "30px",
						"left": "220px",
						"width": "85px",
						"height": "25px"
					});
					var output_22 = new cpr.controls.Output("optFrfRegDt");
					output_22.value = "";
					output_22.dataType = "date";
					output_22.format = "YYYY-MM-DD HH:mm:ss";
					output_22.style.css({
						"text-align" : "center"
					});
					output_22.bind("value").toDataColumn("REG_DT");
					container.addChild(output_22, {
						"top": "30px",
						"left": "95px",
						"width": "115px",
						"height": "25px"
					});
					var output_23 = new cpr.controls.Output("optFrfRegtntNm");
					output_23.value = "";
					output_23.style.css({
						"text-align" : "center"
					});
					output_23.bind("value").toDataColumn("REGTNT_NM");
					container.addChild(output_23, {
						"top": "30px",
						"left": "310px",
						"width": "95px",
						"height": "25px"
					});
					var output_24 = new cpr.controls.Output("optFrfActPlanDt");
					output_24.value = "";
					output_24.bind("value").toLanguage("UI-DB-PROC_DT");
					container.addChild(output_24, {
						"top": "30px",
						"left": "613px",
						"width": "70px",
						"height": "25px"
					});
					var dateInput_2 = new cpr.controls.DateInput("dipFrfActPlanDt");
					dateInput_2.enabled = false;
					dateInput_2.format = "YYYY-MM-DD";
					dateInput_2.style.css({
						"text-align" : "center"
					});
					dateInput_2.bind("fieldLabel").toExpression("#optActDt.value");
					dateInput_2.bind("value").toDataColumn("ACT_PLAN_DT");
					container.addChild(dateInput_2, {
						"top": "30px",
						"left": "688px",
						"width": "100px",
						"height": "25px"
					});
				})(group_3);
				container.addChild(group_3, {
					"top": "265px",
					"left": "5px",
					"width": "800px",
					"height": "295px"
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "";
				button_4.style.setClasses(["btn-save"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "745px",
					"width": "60px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button("btnRestore");
				button_5.value = "";
				button_5.style.setClasses(["btn-restore"]);
				button_5.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_5.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_5, {
					"top": "5px",
					"left": "680px",
					"width": "60px",
					"height": "25px"
				});
				var button_6 = new cpr.controls.Button("btnDel");
				button_6.value = "";
				button_6.style.setClasses(["btn-delete"]);
				button_6.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_6.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_6, {
					"top": "5px",
					"left": "615px",
					"width": "60px",
					"height": "25px"
				});
				var button_7 = new cpr.controls.Button("btnNew");
				button_7.value = "";
				button_7.style.setClasses(["btn-new"]);
				button_7.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewClick == "function") {
					button_7.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_7, {
					"top": "5px",
					"left": "550px",
					"width": "60px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "77px",
				"left": "5px",
				"width": "810px",
				"height": "570px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaFile");
			cpr.core.App.load("app/imp/impFileUtil", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "650px",
				"left": "5px",
				"width": "95px",
				"height": "25px"
			});
			
			var button_8 = new cpr.controls.Button("btnCancel");
			button_8.value = "화면닫기";
			if(typeof onBtnCancelClick == "function") {
				button_8.addEventListener("click", onBtnCancelClick);
			}
			container.addChild(button_8, {
				"top": "650px",
				"left": "755px",
				"width": "60px",
				"height": "25px"
			});
			
			var embeddedApp_2 = new cpr.controls.EmbeddedApp("emaUser");
			cpr.core.App.load("app/cmn/impStdCmnPUserSch", function(app) {
				if(app){
					embeddedApp_2.app = app;
				}
			});
			container.addChild(embeddedApp_2, {
				"top": "650px",
				"left": "124px",
				"width": "100px",
				"height": "22px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
			linker.group_3.setBindContext(new cpr.bind.GridSelectionContext(linker.grid_1));
		}
	});
	app.title = "프로그램 변경요청팝업";
	cpr.core.Platform.INSTANCE.register(app);
})();
