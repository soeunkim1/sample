/*
 * App URI: app/cmn/stdCmnPUserSch
 * Source Location: app/cmn/stdCmnPUserSch.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cmn/stdCmnPUserSch", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var util = new ComUtil(app);
			
			/******************************************************************************
			 * 부모 페이지에서 받아온 기본값을 받는 객체
			 * 내부적으로 Result라는 객체를 가지고 있으며, 부모에 넘겨줄 결과값을 저장
			 * @member moStdCmnPMenuSch
			 ******************************************************************************/	
			//var moStdCmnPUserSch = {
			//	// 팝업 작동 내부사용
			//	controlId 		: "",
			//	openedByChange 	: false,
			//	strKeyDate   	: "",   //기준일자(유효시작일과 종료일) 생략가능, dafault : 현재일자
			//	strUseYn   		: "", 	//사용여부  - 생략가능, default : "Y"
			//	strUserId		: "", 	//사용자ID 
			//	strUserNm		: "",	//사용자명
			//	strUserDivRcd	: "",   //사용자구분
			//	// 선택열 결과 리턴
			//	result : {
			//		USER_DIV_RCD: "",
			//		USER_ID		: "",
			//		USER_NM 	: "",
			//		STAT_CD 	: "",
			//		STAT_NM 	: "",
			//		DEPT_CD 	: "",
			//		DEPT_NM 	: "",
			//		ID 			: "",
			//		SSN 		: "",
			//		PARTY_ID 	: ""
			//	}
			//};
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				//app header - initSearchBox()
				//리피트 초기 설정
			//	ExtRepeat.init(["rptCmnUseUser"]);
				//검색조건 초기 설정
			//	ExtGroup.initSearchBox("grpSearch", "grpData");
			
				//서브미션 실행 (실패시 cover page)
				util.Submit.send(app, "subOnLoad", function(pbSuccess){
					if(pbSuccess){
						// 사용자구분 콤보박스 rebuild
						util.Control.redraw(app, ["cbbUserDivRcd"]);
						
						// 사용자ID 컨트롤 포커스
						util.Control.setFocus(app, "ipbUserId");
						
						//부모창에서 전달한 값을 받는다.
						doParentGet();
						
						// 조건값이 둘 중 하나만 있어도 바로 자동 조회를 한다.
						if (util.Control.getValue(app, "ipbUserId") != "" || util.Control.getValue(app, "ipbUserNm") != "") {
							/** @type cpr.controls.Button*/
							var voBtnSearch = app.lookup("btnSearch");
							voBtnSearch.click();
						}
					}
				}, true);
				
			}
			
			/**
			 * 호출한 페이지에서 파라미터 받기
			 */
			function doParentGet() {
				// 호출한 페이지에서 파라미터 받기.												
				var voStdCmnPUserSch = app.getHostProperty("initValue");
						
				// 파라미터  값복사 (deep copy)
			//	for (var key in voStdCmnPUserSch) {
			//		if (key == "result") {
			//			// 결과 값은 복사하지 않음.
			//			continue;
			//		}
			//		moStdCmnPUserSch [key] = voStdCmnPUserSch [key];
			//	}
				// 팝업이 뜬후에는 false로 고침.
			//	voStdCmnPUserSch.openedByChange = false;
				
				// 파라미터 받아서 초기 검색조건 세팅.
				var voParam = voStdCmnPUserSch;
				
				// 사용자구분 => 값이 있는 경우 사용자구분콤보박스 disable처리한다.
				var vsUserDivRcd = ValueUtil.fixNull(voParam.strUserDivRcd);
				if (vsUserDivRcd != "") {
					util.SelectCtl.setValue(app, "cbbUserDivRcd", voParam.strUserDivRcd);
					util.Control.setEnable(app, false, "cbbUserDivRcd");
				}
			
				// 사용자ID
				if (voParam.strUserId) {
					util.Control.setValue(app, app, "ipbUserId", voParam.strUserId);
				}
				
				// 사용자명
				if (voParam.strUserNm) {
					util.Control.setValue(app, app, "ipbUserNm", voParam.strUserNm);
				}
				
				// 기준일자
				if (voParam.strKeyDate) {
					util.DataMap.setValue(app, "dmReqList", "strKeyDate", voParam.strKeyDate);
				}
				
				// 사용여부
				if (voParam.strUseYn) {
					util.DataMap.setValue(app, "dmReqList", "strUseYn", voParam.strUseYn);
				}
			}
			
			/**
			 * 조회버튼 이벤트(사용자 목록을 조회한다.)
			 * @param poCallBackFunc 콜백함수
			 */
			function doList(poCallBackFunc) {		
				// 조회 서브미션 호출
				util.Submit.send(app, "subList", function(pbSuccess){
					if(pbSuccess){
						// 사용자목록 
						util.Control.redraw(app, "grpData");
						
						if(util.Grid.getRowCount(app, "grdCmnUseUser") == 0){
							util.Control.setFocus(app, "ipbUserId");
						}else {
							util.Control.setFocus(app, "grdCmnUseUser");
						}
						
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) {
							poCallBackFunc(pbSuccess);
							
						} 
					}
				});
			}
			
			/**
			 * doCloseOk (선택닫기 이벤트시 호출) 	
			 * @return void 
			 */
			function doCloseOk() {
				var vsSelectIndxs = util.Grid.getCheckOrSelectedRowIndex(app, "grdCmnUseUser");
				
				if(ValueUtil.isNull(vsSelectIndxs)){
					//선택된 데이터가 없습니다.
					util.Msg.warn("M008");
					return false;
				}
			
			//	var voResult = moStdCmnPUserSch.result;
				var voResult = app.lookup("grdCmnUseUser").getSelectedRow().getRowData();
				
			//	voResult.USER_DIV_RCD = util.Grid.getCellValue("grdCmnUseUser", "rdOptUserDivRcd");	//사용자구분코드
			//	voResult.USER_ID = util.Grid.getCellValue("grdCmnUseUser", "rdOptUserId");     		//사용자ID
			//	voResult.USER_NM = util.Grid.getCellValue("grdCmnUseUser", "rdOptUserNm");   		//사용자명
			//	voResult.STAT_CD = util.Grid.getCellValue("grdCmnUseUser", "rdOptStatCd");     		// 상태코드
			//	voResult.STAT_NM = util.Grid.getCellValue("grdCmnUseUser", "rdOptStatNm");    		//상태명
			//	voResult.DEPT_CD = util.Grid.getCellValue("grdCmnUseUser", "rdOptDeptCd");    		//부서코드
			//	voResult.DEPT_NM = util.Grid.getCellValue("grdCmnUseUser", "rdOptDeptNm");   		//부서명
			//	voResult.ID = util.Grid.getCellValue("grdCmnUseUser", "rdOptId");                   //오브젝트번호
			//	voResult.SSN = util.Grid.getCellValue("grdCmnUseUser", "rdOptSsn");               	//주민번호
			//	voResult.PARTY_ID = util.Grid.getCellValue("grdCmnUseUser", "rdOptPartyId");    	//외부인ID
				
				// 팝업닫기 후 콜백메소드호출
				//ExtPopUp.closeLayeredPopup("callbackStdCmnPUserSch", moStdCmnPUserSch);
				app.setHostProperty("returnValue", voResult);
				
				app.close();
			}
			
			/*
			 * 그룹에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onGrpSearchKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grpSearch = e.control;
				if(e.keyCode == cpr.events.KeyCode.ENTER){
					/** @type cpr.controls.Button*/
					var voBtnSearch = app.lookup("btnSearch");
					voBtnSearch.click();
				}
			}
			
			/*
			 * 사용자 정의 컨트롤에서 search 이벤트 발생 시 호출.
			 */
			function onBtnSearchSearch(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type udc.com.btnSearch
				 */
				var btnSearch = e.control;
				if(util.Grid.isModified(app, "grdCmnUseUser", "CRM")){
					e.stopImmediatePropagation();
					return false;
				}
				// 1. 조회조건 필수 체크 : 사용자ID, 사용자명 중 하나는 필수
				var vsUserId = ValueUtil.fixNull(util.Control.getValue(app, "ipbUserId"));
				var vsUserNm = ValueUtil.fixNull(util.Control.getValue(app, "ipbUserNm"));
				
				if (vsUserId == "" && vsUserNm == "") {
					util.Msg.alert("NLS-CMM-M016", ["사용자ID, 사용자명"]);
					e.stopImmediatePropagation();
					return false;
				}
				
				doList(function(pbSuccess) {
					if (pbSuccess) {
						util.Msg.notify(app, "NLS-INF-M024");
					}
				});
			}
			
			/*
			 * 그리드에서 row-dblclick 이벤트 발생 시 호출.
			 * detail이 row를 더블클릭 한 경우 발생하는 이벤트.
			 */
			function onGrdCmnUseUserRowDblclick(/* cpr.events.CGridEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdCmnUseUser = e.control;
				doCloseOk();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCloseClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnClose = e.control;
				doCloseOk();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCloseClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnClose = e.control;
				app.close();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsUserDivRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsCmnUseUser");
			dataSet_2.parseData({
				"columns": [
					{"name": "USER_ID"},
					{"name": "ID"},
					{"name": "PARTY_ID"},
					{"name": "USER_DIV_RCD"},
					{"name": "USER_DIV_NM"},
					{"name": "USE_YN"},
					{"name": "EFFT_ST_DT"},
					{"name": "EFFT_END_DT"},
					{"name": "USER_NM"},
					{"name": "STAT_NM"},
					{"name": "STAT_CD"},
					{"name": "DEPT_NM"},
					{"name": "DEPT_CD"},
					{"name": "SSN"},
					{"name": "ASGN_DEPT_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmReqList");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strUserDivRcd",
						"dataType": "string"
					},
					{
						"name": "strUserId",
						"dataType": "string"
					},
					{
						"name": "strUserNm",
						"dataType": "string"
					},
					{
						"name": "strUseYn",
						"dataType": "string"
					},
					{
						"name": "strKeyDate",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/cmn/StdCmnUserSch/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/cmn/StdCmnUserSch/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-USERLST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "215px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCmnUseUser");
				grid_1.init({
					"dataSet": app.lookup("dsCmnUseUser"),
					"columns": [
						{"width": "40px"},
						{"width": "85px"},
						{"width": "87px"},
						{"width": "101px"},
						{"width": "110px"},
						{"width": "61px"},
						{"width": "90px"},
						{"width": "90px"},
						{"width": "75px"},
						{"width": "72px"},
						{"width": "78px"},
						{"width": "90px"},
						{"width": "90px"},
						{"width": "90px"},
						{"width": "109px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "사용자구분";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "사용자ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.text = "사용자명";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.text = "소속부서";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.text = "사용여부";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.text = "유효시작일자";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.text = "유효종료일자";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.text = "상태명";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.text = "상태코드";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.text = "소속코드";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.text = "주민등록번호";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.text = "외부인ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.text = "오브젝트ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.text = "사용자구분코드";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "USER_DIV_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "USER_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "USER_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "ASGN_DEPT_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "USE_YN";
									cell.control = (function(){
										var checkBox_1 = new cpr.controls.CheckBox("gdChkUseYn");
										checkBox_1.enabled = false;
										checkBox_1.value = "";
										checkBox_1.trueValue = "Y";
										checkBox_1.falseValue = "";
										checkBox_1.text = "";
										checkBox_1.style.css({
											"text-align" : "center"
										});
										checkBox_1.bind("value").toDataColumn("USE_YN");
										return checkBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "EFFT_ST_DT";
									cell.control = (function(){
										var output_1 = new cpr.controls.Output("gdOptEfftStDt");
										output_1.dataType = "date";
										output_1.format = "YYYY-MM-DD";
										output_1.style.css({
											"text-align" : "center"
										});
										output_1.bind("value").toDataColumn("EFFT_ST_DT");
										return output_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "EFFT_END_DT";
									cell.control = (function(){
										var output_2 = new cpr.controls.Output("gdOptEfftEndDt");
										output_2.dataType = "date";
										output_2.format = "YYYY-MM-DD";
										output_2.style.css({
											"text-align" : "center"
										});
										output_2.bind("value").toDataColumn("EFFT_END_DT");
										return output_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "STAT_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "STAT_CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "DEPT_CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "SSN";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "PARTY_ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "USER_DIV_RCD";
								}
							}
						]
					}
				});
				if(typeof onGrdCmnUseUserRowDblclick == "function") {
					grid_1.addEventListener("row-dblclick", onGrdCmnUseUserRowDblclick);
				}
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "675px",
					"height": "240px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "97px",
				"left": "5px",
				"width": "685px",
				"height": "275px"
			});
			
			var group_2 = new cpr.controls.Container("grpSearch");
			group_2.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "620px",
					"width": "60px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optUserDivRcd");
				output_3.value = "";
				output_3.bind("value").toLanguage("UI-SCR-USERDIV");
				container.addChild(output_3, {
					"top": "5px",
					"left": "5px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbUserDivRcd");
				comboBox_1.bind("fieldLabel").toExpression("#optUserDivRcd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strUserDivRcd");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("전체", ""));
					comboBox_1.setItemSet(app.lookup("dsUserDivRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "110px",
					"width": "130px",
					"height": "25px"
				});
				var output_4 = new cpr.controls.Output("optUserId");
				output_4.value = "";
				output_4.style.setClasses(["require"]);
				output_4.bind("value").toLanguage("UI-DB-USER_ID");
				container.addChild(output_4, {
					"top": "5px",
					"left": "250px",
					"width": "100px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbUserId");
				inputBox_1.userAttr({"require": "Y"});
				inputBox_1.bind("fieldLabel").toExpression("#optUserId.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strUserId");
				if(typeof onIpbUserIdKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbUserIdKeydown);
				}
				container.addChild(inputBox_1, {
					"top": "5px",
					"left": "355px",
					"width": "140px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbUserNm");
				inputBox_2.userAttr({"require": "Y"});
				inputBox_2.bind("fieldLabel").toExpression("#optUserNm.value");
				inputBox_2.bind("value").toDataMap(app.lookup("dmReqList"), "strUserNm");
				if(typeof onIpbUserNmKeydown == "function") {
					inputBox_2.addEventListener("keydown", onIpbUserNmKeydown);
				}
				container.addChild(inputBox_2, {
					"top": "30px",
					"left": "110px",
					"width": "130px",
					"height": "25px"
				});
				var output_5 = new cpr.controls.Output("optUserNm");
				output_5.value = "";
				output_5.style.setClasses(["require"]);
				output_5.bind("value").toLanguage("UI-DB-USER_NM");
				container.addChild(output_5, {
					"top": "30px",
					"left": "5px",
					"width": "100px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "35px",
				"left": "5px",
				"width": "685px",
				"height": "57px"
			});
			
			var button_2 = new cpr.controls.Button("btnClose");
			button_2.value = "";
			button_2.bind("value").toLanguage("UI-SCR-SCRNCLS");
			if(typeof onBtnCloseClick == "function") {
				button_2.addEventListener("click", onBtnCloseClick);
			}
			container.addChild(button_2, {
				"top": "377px",
				"left": "5px",
				"width": "60px",
				"height": "25px"
			});
			
			var button_3 = new cpr.controls.Button("btnCloseOk");
			button_3.value = "";
			button_3.bind("value").toLanguage("UI-SCR-CHOICLS");
			if(typeof onBtnCloseOkClick == "function") {
				button_3.addEventListener("click", onBtnCloseOkClick);
			}
			container.addChild(button_3, {
				"top": "377px",
				"left": "630px",
				"width": "60px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "사용자검색팝업";
	cpr.core.Platform.INSTANCE.register(app);
})();
