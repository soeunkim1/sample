/*
 * App URI: app/cmn/stdCmnSReportGrid
 * Source Location: app/cmn/stdCmnSReportGrid.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cmn/stdCmnSReportGrid", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var util = new ComUtil(app);
			
			// 헤더 텍스트 설정할 MAP 정의
			var moMapForHeader = new cpr.utils.ObjectMap();
			// 조회여부 : 툴그룹활성화처리를 위해 사용.
			var mbList = false;
			
			/**
			 * @desc doValueChangedCbbDataSet event 조회조건 콤보박스 데이터셋컨트롤 변경에 따른 이벤트
			 * @return void
			 */
			function doValueChangedCbbDataSet(){
				// 동적그리드를 삭제한다.
				doDynamicGridDelete();
			
				// 데이터셋명
				var vsDataSet = util.SelectCtl.getValue("cbbDataSet");
				util.DataMap.setValue(app, "dmReqKey", "strSqlId", vsDataSet);
				util.Submit.send(app, "subDatasetColList", function(pbSuccess){
					if(pbSuccess){
						// 툴 그룹 [정렬, 필터, 인쇄] 비활성화, 조건지정활성화
						util.Control.setEnable(app, false, "grpDataTool");
						util.Control.setEnable(app, true, "btnCond");
						
						//그리드 리드로우(조건, 보임, 숨김, 정렬, 합계)
						util.Control.redraw(app, ["grdCmnDatasetCond", "grdCmnDatasetInVisible", "grdCmnDatasetVisible", "grdCmnDatasetSort", "grdCmnDatasetSum"]);	
						
						util.Control.redraw(app, "cbbCondCode");
						
						var vnGrdCmnDatasetCondIdx = util.Grid.getRowCount(app, "grdCmnDatasetCond");
						
			//			if(vnGrdCmnDatasetCondIdx > 0 ) util.Control.lookup("grdCmnDatasetCond").updateRow(vnGrdCmnDatasetCondIdx);
			
						//그리드 라벨 텍스트 설정 (타이틀)
						var vnSelIndex = util.SelectCtl.getSelectedIndex(app, "cbbDataSet");
						var vsDataSetTutil = util.SelectCtl.getLabel(app, "cbbDataSet", vnSelIndex);
						util.Control.setFieldLabel("grdCmnReport", vsDataSetTutil);
						util.Control.redraw(app, "grdCmnReport_title");
						util.DataMap.setValue(app, "dmReqKey", "strExcelFileNm", vsDataSetTutil);
						
						//[조건다이얼로그] 필수파라미터 초기화
						doReqParamInitDatasetCond();
						
						//데이터셋 컬럼 표준여부에 따라 조건그룹활성화처리
						var vnNodeLength = app.lookup("dsDatasetParamList").getRowCount();
						
						if(vnGrdCmnDatasetCondIdx > 0 || vnNodeLength > 0){
							var btnCond = app.lookup("btnCond");
							btnCond.click();
						}
						
						var vnCondColNodeLength = app.lookup("dsCondColList").getRowCount();
						
						if(vnCondColNodeLength < 1){
							util.Control.setEnable(app, false, "grpDataCond");
							util.Control.setEnable(app, true, "lblAddCond");
						}else{
							util.Control.setEnable(app, true, "grpDataCond");
							util.Control.setEnable(app, false, "lblAddCond");
						}
						
						//숨김 그리드에서 본래 있던 데이터가 제대로 저장될 수 있도록 데이터 통신 후 insert 상태로 임의 변경
						util.Grid.setRowStateAll("grdCmnDatasetInVisible", cpr.data.tabledata.RowState.INSERTED);
					}
				});
			}
			
			
			/**
			 * @desc   doOpenGrpDatasetCtl  버튼에 해당하는 그룹에 대해 오픈 이벤트 
			 * @return  boolean 
			 */
			function doOpenGrpDatasetCtl(psOpenGrpCtl, paMouPos, pnLeft, pnTop){
				//마우스 좌표
				//var vsMouPos = model.getMousePos(); //현재 마우스 포커스
				//var vaMouPos = vsMouPos.split(",");     //0:Width 1:Height
				
				var vaMouPos = paMouPos;
				
				//버튼 좌표 
				var vsBtnLeft  =vaMouPos[0];
				var vsBtnTop =vaMouPos[1];
			
				util.Control.updateConstraint(app, psOpenGrpCtl, null, {"left" : pnLeft + "px", "top" : pnTop + "px" });
				
				// 메인화면 관련 그룹 비활성화처리
				//그룹 아이디 목록
				var vaMainCtl = util.getApp().getContainer().getChildren();
				var vaMainGrpCtl = new Array();
				for(var j = 0 ; j < vaMainCtl.length ; j++){
					var vsCtlType = vaMainCtl[j].type;
					if(vsCtlType == "container"){
						vaMainGrpCtl.push(vaMainCtl[j].id);
					}
				}
				
				for(var i = 0 ; i < vaMainGrpCtl.length ; i++){
					var vsGrpId = vaMainGrpCtl[i];
					
					if(vsGrpId != psOpenGrpCtl && "grpDatasetCond" != vsGrpId){
						util.Control.setEnable(app, false, vsGrpId);
					}else{
						util.Control.setEnable(app, true, vsGrpId);
					}
				}
				util.Control.setVisible(app, true, psOpenGrpCtl);
			}
			
			/**
			 * @desc 
			 * @param psOpenGrpCtl
			 * @param pnLeft
			 * @param pnTop
			 */
			function doOpenValueCond(psOpenGrpCtl, pnLeft, pnTop){
				util.Control.updateConstraint(app, psOpenGrpCtl, null, { "left" : pnLeft + "px", "top" : pnTop + "px"});
				
				util.Control.setEnable(app, false, "grpDatasetCond");
				util.Control.setVisible(app, true, psOpenGrpCtl);
				util.Control.setEnable(app, true, psOpenGrpCtl);
			}
			
			/**
			 * @desc 
			 * @param psOpenGrpCtl
			 */
			function doCloseValueCond(psOpenGrpCtl){
				util.Control.setEnable(app, true, "grpDatasetCond");
				util.Control.setVisible(app, false, psOpenGrpCtl);
			}
			
			/**
			 * @desc   doCloseGrpDatasetCtl  버튼에 해당하는 그룹에 대해 닫기 이벤트 
			 * @return  boolean 
			 */
			function doCloseGrpDatasetCtl(psCloseGrpCtl){						
				util.Control.setVisible(app, false, psCloseGrpCtl);
				
				// 메인화면 관련 그룹 비활성화처리
				var vaMainGrpCtl = ["grpSearch", "grpData"];
				
				util.Control.setEnable(app, true, vaMainGrpCtl);
				util.Control.setEnable(app, mbList, "grpDataTool");
			}
			
			/**
			 * @desc   doList       조회버튼 이벤트
			 * @param {Function} poCallBackFunc 콜백정의
			 * @return void
			 */
			function doList(poCallBackFunc) {		
				// 동적그리드를 삭제한다.
				doDynamicGridDelete();
				
				// 파라미터설정 -> 조건다이얼로그에 설정한 값
				doSetReqParamDatasetCond();
				
				var vsSqlId = util.SelectCtl.getValue("cbbDataSet");
				var vsSqlFileNm = util.DataSet.findRow(app, "dsDataSetList", "SQL_ID == '" + vsSqlId + "'").getValue("SQL_FILE_NM");
				//빌더5 sqlFileNm StdCmnTmp -> 빌더6 CmnTmp으로 변경 되어 std 부분 자르기
				vsSqlFileNm = new String(vsSqlFileNm).substring(3);
				util.DataMap.setValue(app, "dmReqKey", "strSqlFileNm", vsSqlFileNm);
				
				var vsLmtNum = util.DataSet.findRow(app, "dsDataSetList", "SQL_ID == '" + vsSqlId + "'").getValue("LMT_NUM");
				util.DataMap.setValue(app, "dmReqKey", "strLmtNum", vsLmtNum);
			
				util.Submit.send(app, "subList", function(pbSuccess){
					if(pbSuccess){
						var vsFileDir = util.DataMap.getValue(app, "dmExcelFileInfo", "strFileDir");
						//파일명
						var vsFileNm = util.DataMap.getValue(app, "dmExcelFileInfo", "strFileNm");
						//변환파일명(실제 서버에 저장된 파일명)
						var vsFileChgNm = util.DataMap.getValue(app, "dmExcelFileInfo", "strFileChgNm");
						var vsTmpFilePath = util.DataMap.getValue(app, "dmExcelFileInfo", "strTmpFilePath");
						
						if(!ValueUtil.isNull(vsTmpFilePath)){
							var voFileParam = {
								"strFileSubPath" : "",
								"strFileNm" : vsFileChgNm,
								"strOriFileNm" : vsFileNm,
								"strTmpFilePath" :vsTmpFilePath,
								"strCommand" : "fileDownLoad"
							}
							util.Msg.alert("NLS-INF-M070", [vsLmtNum]);
							
							//다운로드 받을 파일 위치, 다운로드 받을 파일이름, 프로그래스동작여부(일단 ""), actionUrl
			//				FileUtil.downloadFile( "/std.cmn.StdCmnFileTransUtil.ex",voFileParam);
							return;
						}
						
						//컬럼을 통해 동적 그리드를 생성한다.
						doDynamicGrid();
						
						mbList = true;
						util.Control.setEnable(app, mbList, "grpDataTool");
						
						util.Control.redraw(app, "grdCmnReport");
						
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
					}
				})	;
			}	
			
			/**
			 * @desc   doReqParamInitDatasetCond  [조건지정] 필수파라미터 초기화 
			 * @return  void
			 */
			function doReqParamInitDatasetCond(){
				util.Control.reset(app, "frfCmnReqParam");
				
				// 필수파라미터 프리폼안의 컨트롤들을 가져온다.
				var vaFrfCtrls = app.lookup("frfCmnReqParam").getChildren();
				
				for( var j = 0 ; j < vaFrfCtrls.length; j++){
					if("lblTitlefrfReqParam" == vaFrfCtrls[j].id) continue;
					util.Control.setVisible(app, false, vaFrfCtrls[j].id);
				}
				
				var vnNodeLength = util.DataSet.getRowCount("dsDatasetParamList");
				
				if(vnNodeLength == 0){
					util.Control.setVisible(app, false, "frfCmnReqParam");
				}else if(vnNodeLength < 3){
					util.Control.setVisible(app, true, "frfCmnReqParam");
				}else{
					uitl.Control.setVisible(true, "frfCmnReqParam");
				}	
			}
			
			/**
			 * @desc  doReqParamCtlDatasetCond  [조건지정] 필수 파라미터 컨트롤 위치조절
			 * @return void
			 */
			function doReqParamCtlDatasetCond(){
				var voNodeList = app.lookup("dsDatasetParamList");
				
				var vnNodeLength = voNodeList.getRowCount();
						
			//	var vnPTop = Number(util.Control.getStyleAttr("frfCmnReqParam", "top"));
			//	var vnPLeft = Number(util.Control.getStyleAttr("frfCmnReqParam", "left"));
				var vnPTop = cpr.utils.ParamUtil.parseSize(util.Control.getConsraint("frfCmnReqParam", "grpDatasetCond").top).size;
				var vnPLeft = cpr.utils.ParamUtil.parseSize(util.Control.getConsraint("frfCmnReqParam", "grpDatasetCond").left).size;
				
				var voNode = "";
				
				var vnTop = 5;
				var vnLeft = 5;
				var vnLblCtlWidth = 85;
				var vnEtcCtlWidth = 100;	
				
				var vnLblCtlGap = 5;
				var vnEtcCtlGap = 10;
				
				for (var i = 0; i < vnNodeLength; i++) {
					voNode = voNodeList.getRow(i);
					var vsReqParamRcd = voNode.getValue("REQ_PARAM_RCD");
					var vsReqParamDef = voNode.getValue("REQ_PARAM_DEF");
			
					if(i  == 2){
						vnTop +=  25;
						vnLeft = 5;
					}
			
					switch (vsReqParamRcd) {
						//기준일
						case "CM90201" : {
							// 기준일 라벨 
							util.Control.updateConstraint(app, "lblFrfBaseDate", "frfCmnReqParam", {"top" : vnTop + "px", "left" : vnLeft + "px"})
							util.Control.setVisible(app, true, "lblFrfBaseDate");
														
							vnLeft += vnLblCtlWidth + vnLblCtlGap;
							
							// 기준일 dateInput
							util.Control.updateConstraint(app, "dipFrfBaseDate", "frfCmnReqParam", {"top" : vnTop + "px", "left" : vnLeft + "px"});
							util.Control.setVisible(app, true, "dipFrfBaseDate");
			
							if(!ValueUtil.isNull(vsReqParamDef)){
								util.Control.setValue(app, app, "dipFrfBaseDate", vsReqParamDef);
							}		
							
							vnLeft += vnEtcCtlWidth + vnEtcCtlGap;
							
							break;
						}
						//언어키
						case "CM90202" : {
							// 언어키 라벨 
							util.Control.updateConstraint(app, "lblFrfLanDivRcd", "frfCmnReqParam", {"top" : vnTop + "px", "left" : vnLeft + "px"});
							util.Control.setVisible(app, true, "lblFrfLanDivRcd");
														
							vnLeft += vnLblCtlWidth + vnLblCtlGap;
							
							// 언어키 콤보박스
							util.Control.updateConstraint(app, "cbbFrfLanDivRcd", "frfCmnReqParam", {"top" : vnTop + "px", "left" : vnLeft + "px"});
							util.Control.setVisible(app, true, "cbbFrfLanDivRcd");
					
							if(!ValueUtil.isNull(vsReqParamDef)){
								util.Control.setValue(app, app, "cbbFrfLanDivRcd", vsReqParamDef);
							}		
							
							vnLeft += vnEtcCtlWidth + vnEtcCtlGap;
							
							break;
						}
						//학년도
						case "CM90203" : {
							// 학년도 라벨 
							util.Control.updateConstraint(app, "lblFrfSchYearRcd", "frfCmnReqParam", {"top" : vnTop + "px", "left" : vnLeft + "px"});
							util.Control.setVisible(app, true, "lblFrfSchYearRcd");
														
							vnLeft += vnLblCtlWidth + vnLblCtlGap;
							
							// 학년도 콤보박스
							util.Control.updateConstraint(app, "cbbFrfSchYearRcd", "frfCmnReqParam", {"top" : vnTop + "px", "left" : vnLeft + "px"});
							util.Control.setVisible(app, true, "cbbFrfSchYearRcd");
			
							if(!ValueUtil.isNull(vsReqParamDef)){
								util.Control.setValue(app, app, "cbbFrfSchYearRcd", vsReqParamDef);
							}		
							
							vnLeft += vnEtcCtlWidth + vnEtcCtlGap;
							
							break;
						}
						//학기
						case "CM90204" : {
							
							// 학기 라벨 
							util.Control.updateConstraint(app, "lblFrfSmtRcd", "frfCmnReqParam", {"top" : vnTop + "px", "left" : vnLeft + "px"});
							util.Control.setVisible(app, true, "lblFrfSmtRcd");
														
							vnLeft += vnLblCtlWidth + vnLblCtlGap;
							
							// 학기 콤보박스
							util.Control.updateConstraint(app, "cbbFrfSmtRcd", "frfCmnReqParam", {"top" : vnTop + "px", "left" : vnLeft + "px"});
							util.Control.setVisible(app, true, "cbbFrfSmtRcd");
			
							if(!ValueUtil.isNull(vsReqParamDef)){
								util.FreeForm.setValue("cbbFrfSmtRcd", vsReqParamDef);
							}	
			
							vnLeft += vnEtcCtlWidth + vnEtcCtlGap;
							
							break;
						}
					}
				}
			}
			
			/**
			 * @desc  doSetReqParamDatasetCond  [조건지정] 필수 파라미터 value값 조회조건instance set
			 * @return void
			 */
			function doSetReqParamDatasetCond(){
				var voNodeList = app.lookup("dsDatasetParamList");
				var vnNodeLength = voNodeList.getRowCount();
					
				// 조회조건이 되는 파라미터값 set
				for (var i = 0; i < vnNodeLength; i++) {
					voNode = voNodeList.getRow(i);
					var vsReqParamRcd = voNode.getValue("REQ_PARAM_RCD");
					var vsReqParamKey = voNode.getValue("REQ_PARAM_KEY");
										
					switch (vsReqParamRcd) {
						//기준일
						case "CM90201" : {
							util.DataMap.setValue(app, "dmReqList", "strKeyDate", vsReqParamKey + "|" + util.Control.getValue(app, "dipFrfBaseDate"));
							break;
						}
						//언어키
						case "CM90202" : {
							util.DataMap.setValue(app, "dmReqList", "strLanDivRcd", vsReqParamKey + "|" + util.SelectCtl.getValue("cbbFrfLanDivRcd"));
							break;
						}
						//학년도
						case "CM90203" : {
							util.DataMap.setValue(app, "dmReqList", "strSchYearRcd", vsReqParamKey + "|" + util.SelectCtl.getValue("cbbFrfSchYearRcd"));
							break;
						}
						//학기
						case "CM90204" : {
							util.DataMap.setValue(app, "dmReqList", "strSmtRcd", vsReqParamKey + "|" + util.SelectCtl.getValue("cbbFrfSmtRcd"));
							break;
						}
					}
				}
			}
			
			/**
			 * @desc   doReqParamValidationDatasetCond  [조건지정] 필수파라미터 유효성 체크
			 * @return  Boolean 
			 */
			function doReqParamValidationDatasetCond(){
				// 필수파라미터 프리폼안의 컨트롤들을 가져온다.
				var vaFrfCtrls = app.lookup("frfCmnReqParam").getChildren();
			
				var vaCtrl = new Array();
				for( var j = 0 ; j < vaFrfCtrls.length; j++){
					var vsCtlType = util.Control.getType(vaFrfCtrls[j].id);
					
					if(vsCtlType == "output" || vaFrfCtrls[j].id == null) continue;
					
					if(util.Control.isVisible(vaFrfCtrls[j].id)){
						vaCtrl.push(vaFrfCtrls[j].id);
					}
				}
				
				if(vaCtrl.length > 0){
					 if (!util.validate(app, vaCtrl)) return false;
				}
			
				return true;
			}
			
			/**
			 * @desc   doColumnTypeFilterDatasetCond  [조건지정] 조건명컬럼에 따른 조건절 필터링 함수 
			 * @return  void
			 */
			function doColumnTypeFilterDatasetCond(){
				var vsNodeset = "";
				
				var vsColumnNm = util.Grid.getCellValue(app, "grdCmnDatasetCond", "COLUMN_NM"); // 컬럼명
				
				if(ValueUtil.isNull(vsColumnNm)){
					util.Msg.warn("M226");
					util.Control.setFocus(app, "gdCbbColumnNmCond");
					return;
				}
				
				var vsColType = util.DataSet.findRow(app, "dsCondColList", "COND_KEY == '" + vsColumnNm + "'").getValue("TYPE");
				
				if(ValueUtil.fixNull(vsColType) != ""){
					vsNodeset = "CD_PRP1 == '" + vsColType + "'";
				}
				
				// 조건절 노드셋 설정
			//	util.Control.setUserAttr("gdCbbCondTypeCond", "nodeset", vsNodeset);
				util.SelectCtl.setInsBind("gdCbbCondTypeCond", vsNodeset);
				
				util.Control.redraw(app, "gdCbbCondTypeCond");
			}
			
			/**
			 * @desc   doDynamicGridtDelete  동적그리드를 삭제한다.
			 * @return  void
			 */
			function doDynamicGridDelete(){
				var vnSize = moMapForHeader.size();
				if(vnSize > 0){	
					var vaKeys = moMapForHeader.keys();
			
					for(var i = 0 ; i < vaKeys.length ; i++){
						var vsKey = vaKeys[i];
						var vsHeaderId = "ghBtn" + vsKey; //헤더ID
						
						var voHeaderCol = util.Grid.getHeaderColumn(app, "grdCmnReport", vsKey)[0];
						if(!ValueUtil.isNull(voHeaderCol)){
							app.lookup("grdCmnReport").deleteColumn(voHeaderCol.colIndex);
						}
					}
					
					// 그리드를 다시 그린다.
					util.Control.redraw(app, "grdCmnReport");
				}	
			}
			
			/**
			 * @desc   doDynamicGrid  동적그리드를 생성한다.
			 * @return  void
			 * @author Kim Bora 2015. 12. 08.
			 */
			function doDynamicGrid(){
				// 이전 값(MAP)을 clear
				moMapForHeader.removeAll();
				
				// 1. 컬럼 갯수를 가져온다.
				var vnLen = util.DataSet.getRowCount("dsDatasetColList");
				
				// 2. 컬럼 갯수만큼 for문을 통해 동적그리드를 생성한다.
				for( var i = 0; i < vnLen ; i++){		
					// 2-1. 컬럼명, 컬럼별칭
					var vsColumnName = util.DataSet.getValue(app, "dsDatasetColList", i, "COLUMN_NM");    // 명(sorting시 설정)
					var vsColumnAlias = util.DataSet.getValue(app, "dsDatasetColList", i, "COLUMN_ALIAS"); // 별칭
					var vsColumnType = util.DataSet.getValue(app, "dsDatasetColList", i, "COLUMN_TYPE"); // 컬럼타입
					
					// 2-2.  목록 detail
					var vcGrdCmnReportDtl = app.lookup("gdOpt" + vsColumnName);
					
					// 2-3.  목록 header
					var vcGrdCmnReportHeader = app.lookup("ghBtn" + vsColumnName);
												
					// 2-4.  목록 detail 삭제
					// 2-5.  목록 header 삭제
			//		if(vcGrdCmnReportDtl && vcGrdCmnReportHeader){
			//			var voHeaderColumn = util.Grid.getHeaderColumn("grdCmnReport", vsColumnName)[0];
			//			util.Control.lookup("grdCmnReport").deleteColumn(1);
			//		}
										
					// 2-6.  목록 생성(header, detail)
					doCreateGrdDetailColumn(vsColumnName, vsColumnType, vsColumnAlias, i);
					
					// 2-7. 조회 전 동적그리드를 삭제하기 위해 ObjectMap으로 담아준다.
					if(!ValueUtil.isNull(vsColumnAlias)){
						moMapForHeader.put(vsColumnName, vsColumnName);				
					}
				}
								
				// 3. 그리드를 다시 그린다.
				util.Control.redraw(app, "grdCmnReport");
				
				// 4. 컬럼제어목록의 숨김컬럼이 있는 경우 제어해주도록 이벤트실행
				var vnCntInVisibleCol = util.Grid.getRowCount(app, "grdCmnDatasetInVisible");
				if(vnCntInVisibleCol > 0){
					var btnSaveVisible = app.lookup("btnSaveVisible");
					btnSaveVisible.click();
				}			
			}
			
			/**
			 * @desc  doCreateRptDetailColumn  동적리피트 목록의 컬럼생성
			 * @param psColumnNm    컬럼명
			 * @param psColumnType  컬럼타입
			 * @param psColumnAlias  컬럼별칭(sort)
			 * @return void
			 */
			function doCreateGrdDetailColumn(psColumnNm, psColumnType, psColumnAlias, pnIdx){
				var vnLastIdx = util.DataSet.getRowCount("dsDatasetColList");
				var vnColIdx = pnIdx + 1;
				var vsCtls;
				// 1. 타입에 따라 detail컨트롤 설정에 대한 처리
				if(psColumnType == "DATE"){
					vsCtls = (function() {
						var vcOutput = new cpr.controls.Output("gdOpt" + psColumnNm);
						vcOutput.dataType = "date";
						vcOutput.format = "YYYY-MM-DD";
						vcOutput.style.css("textAlign", "center");
						if(vcOutput.isBindable("value")){
							vcOutput.bind("value").toDataColumn(psColumnNm);
						}
						return vcOutput;
					})()
				}else if(psColumnType == "DATETIME"){
					vsCtls = (function() {
						var vcOutput = new cpr.controls.Output("gdOpt" + psColumnNm);
						vcOutput.dataType = "date";
						vcOutput.format = "YYYY-MM-DD hh:mm:ss";
						vcOutput.style.css("textAlign", "center");
						if(vcOutput.isBindable("value")){
							vcOutput.bind("value").toDataColumn(psColumnNm);
						}
						return vcOutput;
					})()
				}else if(psColumnType == "Int"){
					vsCtls = (function() {
						var vcOutput = new cpr.controls.Output("gdOpt" + psColumnNm);
						vcOutput.dataType = "number";
						vcOutput.format = "000,000";
						if(vcOutput.isBindable("value")){
							vcOutput.bind("value").toDataColumn(psColumnNm);
						}
						return vcOutput;
					})()
				}else if(psColumnType == "Float"){
					vsCtls = (function() {
						var vcOutput = new cpr.controls.Output("gdOpt" + psColumnNm);
						vcOutput.dataType = "number";
						vcOutput.format = "000.00";
						if(vcOutput.isBindable("value")){
							vcOutput.bind("value").toDataColumn(psColumnNm);
						}
						return vcOutput;
					})()
				}else{
					vsCtls = (function() {
						var vcOutput = new cpr.controls.Output("gdOpt" + psColumnNm);
						if(vcOutput.isBindable("value")){
							vcOutput.bind("value").toDataColumn(psColumnNm);
						}
						return vcOutput;
					})()
				}
				
				//2. header 추가
				var vcHeaderCtls;
				if(psColumnType == "Int" || psColumnType == "Float"){
					vcHeaderCtls = (function() {
						var vcOutput = new cpr.controls.Output("ghBtn" + psColumnNm);
						vcOutput.value = psColumnAlias;
			//			vcOutput.bind("value").toLanguage("");
			//			vcOutput.bind("value").toLanguage("");
						return vcOutput;
					})()
				}else{
					vcHeaderCtls = (function() {
						var vcOutput = new cpr.controls.Output("ghBtn" + psColumnNm);
						vcOutput.value = psColumnAlias;
			//			vcOutput.bind("value").toLanguage("");
			//			vcOutput.bind("value").toLanguage("");
						return vcOutput;
					})()
				}
				
				// 3. detail과 header 컨트롤 추가
				util.Grid.addColumn("grdCmnReport", {
						columnLayout : [{
							width : "150px"
						}],
						header : [{
							rowIndex : 0,
							colIndex : vnColIdx,
							colSpan : 1,
							control : vcHeaderCtls
						}],
						detail : [{
							rowIndex : 0,
							colIndex : vnColIdx,
							colSpan : 1,
							rowSpan : 1,
							columnName : psColumnNm,
							sortColumnName : psColumnNm,
							control : vsCtls
						}]
					});
			}
			
			/**
			 * @desc  doSetColVisibleOrder  [컬럼제어] 보이기 컬럼 상하 로우 이동
			 * @param {string} psOrderDiv    순서구분(UP/DOWN)
			 * @return void
			 */
			function doSetColVisibleOrderDatasetVisible(psOrderDiv){
				var vnOrder = psOrderDiv == "UP" ? -1 : 1;
				// 현재선택된 인덱스
				var vnIdx = util.Grid.getIndex(app, "grdCmnDatasetVisible");
				var vnSelectIdx = vnIdx+vnOrder;
				
				changeRowIndex("dsCmnDatasetVisible", vnIdx, vnSelectIdx);
				util.Grid.selectRow(app, "grdCmnDatasetVisible", vnSelectIdx);
				
				//기존 소스
			//	var vsColVisbleValue = util.Grid.getCellValue("grdCmnDatasetVisible", "COLUMN_NM", vnIdx);
			//	var vnSelectIdx = vnIdx+vnOrder;
			//	util.Grid.selectRows("grdCmnDatasetVisible", vnSelectIdx);
			//	
			//	var vsBefColVisibleValue = util.Grid.getCellValue("grdCmnDatasetVisible", "COLUMN_NM", vnSelectIdx);
			//	
			//	util.Grid.setCellValue("grdCmnDatasetVisible", "COLUMN_NM", vsColVisbleValue, vnSelectIdx);
			//	util.Grid.setCellValue("grdCmnDatasetVisible", "COLUMN_NM", vsBefColVisibleValue, vnIdx);
			}
			
			/**
			 * 두 개의 행의 순서를 변경
			 * @param psDatasetId
			 * @param pnIdx
			 * @param vnSelectIdx
			 */
			function changeRowIndex(psDatasetId, pnIdx, pnSelectIdx){
				var vcDataset = app.lookup(psDatasetId);
				vcDataset.changeRowIndex(pnIdx, pnSelectIdx);
			}
			
			/**
			 * @desc  doMoveColDatasetVisible  [컬럼제어] 보이기/숨김 컬럼 좌우이동
			 * @param {string} psAddColGrdId     옮겨질 그리드ID
			 * @param {string} psDelColGrdId	  더해질 그리드ID
			 * @return void
			 */
			function doMoveColDatasetVisible(psAddColGrdId, psDelColGrdId){
				var vsSelIdx = util.Grid.getCheckOrSelectedRowIndex(app, psAddColGrdId);
				
				// 선택된 내역이 없는 경우
				if(String(vsSelIdx).isEmpty()) return false;
				
				var vaIdx = null;
				if(String(vsSelIdx).indexOf(",") != -1){
					vaIdx = String(vsSelIdx).split(",");
				}else{
					vaIdx = new Array();
					vaIdx = vsSelIdx;
				}
			
				for(var i = 0 ; i < vaIdx.length ; i++){
					var vnIdx = vaIdx[i];
					var vsColValue = util.Grid.getCellValue(app, psAddColGrdId, "COLUMN_NM", vnIdx);
					
					var vnNewIdx = util.Grid.insertRow(app, psDelColGrdId);
					util.Grid.setCellValue(app, psDelColGrdId, "COLUMN_NM", vsColValue, vnNewIdx);
				}
				
				if(util.Grid.getRowCount(app, psAddColGrdId) == 1){
					util.Control.reset(app, app, psAddColGrdId);
				}else{
			//		var vsPath = util.Control.getUserAttr(psAddColGrdId, "nodeset");
			//		util.Control.lookup(psAddColGrdId).deleteRow(vnIdx, vsPath);
					util.Grid.deleteRow(app, psAddColGrdId, vaIdx);
				}
				
				util.Control.redraw(app, psAddColGrdId);
			}
			
			
			/**
			 * @desc  doColsSortSumDatasetSort  [정렬] 정렬 및 합계를 적용한다.
			 * @param void
			 * @return void
			 */
			function doColsSortSumDatasetSort(){
			//	ExtRepeat.setCRUDAttr("rptCmnReport", "alltype", "true");
			//	ExtRepeat.setCRUDAttr("rptCmnDatasetSort", "alltype", "true");
			//	ExtRepeat.setCRUDAttr("rptCmnDatasetSum", "alltype", "true");
			
				util.Submit.send(app, "subColsSum", function(pbSuccess){
					if(pbSuccess){
						util.Control.redraw(app, "grdCmnReport");
			//			ExtRepeat.setCtlRptRowCnt("rptCmnReport");
						// 정렬 그룹 close
						doCloseGrpDatasetCtl("grpDatasetSort");
					}
				});
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				//서브미션 실행
				util.Submit.send(app, "subOnLoad", function(pbSuccess){
					if(pbSuccess){
						//콤보박스 리드로우
						util.Control.redraw(app, "cbbDataSet");
						//리드로우
						util.Control.redraw(app, "frfCmnReqParam");
						
						util.Control.setEnable(app, false, "btnCond");
						
						//동적으로 그린 그리드를 삭제한다.
						doDynamicGridDelete();	
					}
				});
			}
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbbDataSetSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cbbDataSet = e.control;
				doValueChangedCbbDataSet();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCondClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCond = e.control;
				var vnNodeLength = app.lookup("dsDatasetParamList").getRowCount();
				var vnCondColNodeLength = app.lookup("dsCondColList").getRowCount();
				
				if(vnNodeLength == 0 && vnCondColNodeLength == 0){
					util.Msg.alert("NLS-CMM-M051");
					return;
				}
				
				//1. 조건지정 그룹을 활성화 한다.
				var vaMouPos = [event.clientX, event.clientY];
				doOpenGrpDatasetCtl("grpDatasetCond", vaMouPos, 350, 68);
				
				//2. [조건지정] 필수파라미터 컨트롤 위치 조정
				doReqParamCtlDatasetCond();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearch = e.control;
				//1. 조회조건 필수체크 : 데이터셋 명
				if(!util.validate(app, ["cbbDataSet"])) return false;
				
				//2. 조건 그룹 내역 유효성체크 (필수파라미터 및 조건 그리드)
				if(!doReqParamValidationDatasetCond() || !util.validate(app, "grdCmnDatasetCond")){
					//조건지정버튼실행
					var btnCond = app.lookup("btnCond");
					btnCond.click();
					return false;
				}
				
				//3. 조회한다.
				doList(function(pbSuccess){
					//조회되었습니다
					if(pbSuccess) util.Msg.alert("NLS-INF-M024");
				});
			}
			
			/*
			 * "컬럼제어" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnColVisibleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnColVisible = e.control;
				//컬럼제어 그룹을 활성화한다.
				var vaMouPos = [e.clientX, e.clientY];
				doOpenGrpDatasetCtl("grpDatasetVisible", vaMouPos, 405, 80);
			}
			
			/*
			 * "정렬" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSortClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSort = e.control;
				//정렬 그룹을 활성화 한다.
				var vaMouPos = [e.clientX, e.clientY];
				doOpenGrpDatasetCtl("grpDatasetSort", vaMouPos, 405, 80);
			}
			
			/*
			 * 인풋 박스에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGdIpbValueCondClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var gdIpbValueCond = e.control;
				var vsCondColNm = util.Grid.getCellValue(app, "grdCmnDatasetCond", "COLUMN_NM");
				
				if(ValueUtil.isNull(vsCondColNm)){
					return false;
				}
				
				var vsColType = util.DataSet.findRow(app, "dsCondColList", "COND_KEY == '" + vsCondColNm + "'").getValue("COND_TYPE_CD");
				
				if(vsColType == "CM01603"){
					var vsColClsCd = util.DataSet.findRow(app, "dsCondColList", "COND_KEY == '" + vsCondColNm + "'").getValue("CD_NM");
					
					var vsNodest = "";
					if(ValueUtil.fixNull(vsColClsCd) != ""){
						vsNodest = "CD_CLS == '" + vsColClsCd + "'";
					}
					//조건절 노드셋 설정
			//		util.Control.setUserAttr("cbbCondCode", "nodest", vsNodest);
					util.SelectCtl.setInsBind("cbbCondCode", vsNodest);
					
					util.Control.redraw(app, "cbbCondCode");
					
					doOpenValueCond("grpCode", event.clientX - 250, event.clientY - 85);
					util.Control.setFocus(app, null);
					
				}else if(vsColType == "CM01604"){
					app.lookup("ipbSaNm").iObjDivRcd = "CC009SA";
					doOpenValueCond("grpSaCd", event.clientX - 250, event.clientY -85);
					util.Control.setFocus(app, null);
				}else if(vsColType == "CM01605"){
					app.lookup("ipbSaNm").iObjDivRcd = "CC009OG";
					util.Control.setFocus(app, null);
					doOpenValueCond("grpSaCd", event.clientX - 250, event.clientY -85);	
				}else if(vsColType == "CM01602"){
					util.Control.setFocus(app, null);
					doOpenValueCond("grpDate", event.clientX - 250, event.clientY - 85);
				}
				
				//Value-change가 제대로 발생하지 않아 value-change 로직을 click 이벤트 시 발생하도록 변경
				var vsCondCol = util.DataSet.findRow(app, "dsCondColList", "COND_KEY == '" + vsCondColNm + "'").getValue("COND_COL");
				//텍스트 유형인 경우에는 값변경시... 실제 비교값 컬럼 업데이트
				if(vsColType == "CM01601" || vsColType == "CM01606" ){
					util.Grid.setCellValue(app, "grdCmnDatasetCond", "REAL_VALUE", util.Grid.getCellValue(app, "grdCmnDatasetCond","VALUE"));
				}
				
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "COND_COL", vsCondCol);
				
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "COND_COL_TYPE", vsColType);
			}
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onGdIpbValueCondValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var gdIpbValueCond = e.control;
				var vsCondColNm = util.Grid.getCellValue(app, "grdCmnDatasetCond", "COLUMN_NM");
				
				if(ValueUtil.isNull(vsCondColNm)){
					return false;
				}
				
				var vsColType = util.DataSet.findRow(app, "dsCondColList", "COND_KEY == '" + vsCondColNm + "'").getValue("COND_TYPE_CD");
				var vsCondCol = util.DataSet.findRow(app, "dsCondColList", "COND_KEY == '" + vsCondColNm + "'").getValue("COND_COL");
				//텍스트 유형인 경우에는 값변경시... 실제 비교값 컬럼 업데이트
				if(vsColType == "CM01601" || vsColType == "CM01606" ){
					util.Grid.setCellValue(app, "grdCmnDatasetCond", "REAL_VALUE", util.Grid.getCellValue(app, "grdCmnDatasetCond","VALUE"));
				}
				
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "COND_COL", vsCondCol);
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "COND_TYPE_CD", vsColType);
				
				//COND_TYPE이 아웃풋과 연결되어 있기 때문에 해당 라벨로 value를 찾아 값 재설정
				var vsColTypeCond = util.Control.getValue(app, "gdOptCondTypeCond");
				if(!ValueUtil.isNull(vsColTypeCond)){
					util.SelectCtl.selectItem(app, "gdCbbCondTypeCond", util.SelectCtl.getValueFromLabel("gdCbbCondTypeCond", vsColTypeCond));
				}
			}
			
			/*
			 * 콤보 박스에서 focus 이벤트 발생 시 호출.
			 * 컨트롤이 포커스를 획득한 후 발생하는 이벤트.
			 */
			function onGdCbbCondTypeCondFocus(/* cpr.events.CFocusEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var gdCbbCondTypeCond = e.control;
				doColumnTypeFilterDatasetCond();
			}
			
			/*
			 * "조건추가" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnNewCondClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnNewCond = e.control;	
				var vnCnt = util.Grid.getRowCount(app, "grdCmnDatasetCond");
				util.Grid.insertRow(app, "grdCmnDatasetCond", vnCnt);
			}
			
			/*
			 * "조건삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDeleteCondClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDeleteCond = e.control;
				var vnGrdIdx = util.Grid.getIndex(app, "grdCmnDatasetCond");
				
				//로우 건수 체크
				var vaIdxs = util.Grid.getCheckOrSelectedRowIndex(app, "grdCmnDatasetCond");
				
				if(!ValueUtil.isNull(vaIdxs)){
			//		var voIdx = vsIdxs.split(",");
					for(var i = 0 ; i < vaIdxs.length ; i++){
						var vsReqYn = util.DataSet.getValue(app, "dsCmnDatasetCond", vaIdxs[i], "MAND_YN");
						if(vsReqYn == "Y"){
							//필수조건은 삭제할 수 없습니다.
							util.Msg.warn("M122", ["필수조건"]);
							return false;
						}
					}
				}
				util.Grid.deleteRow(app, "grdCmnDatasetCond");
			}
			
			/*
			 * "적용" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveCondClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSaveCond = e.control;
				//1. 조건 그룹 내역 유효성 체크(필수파라미터 및 조건그리드)
				if(!doReqParamValidationDatasetCond() || !util.validate(app, "grdCmnDatasetCond")){
					return false;
				}
				
				//2. 조회한다.
				doList(function(pbSuccess){
					//조회되었습니다.
					if(pbSuccess) util.Msg.alert("NLS-INF-M024");
				});
				
				//3.조건그룹 close
				doCloseGrpDatasetCtl("grpDatasetCond");
			}
			
			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCancleCondClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCancleCond = e.control;
				//조건그룹 close
				doCloseGrpDatasetCtl("grpDatasetCond");
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCodeClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCode = e.control;
				var vsCode = util.SelectCtl.getValue("cbbCondCode");
				
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "VALUE", vsCode);
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "REAL_VALUE", vsCode);
				
				//부서구분코드 값 설정 후 콤보박스 리셋
				util.Control.reset(app, "cbbCondCode");
				
				doCloseValueCond("grpCode");
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCodeCencleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCodeCencle = e.control;
				doCloseValueCond("grpCode");
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCode1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCode1 = e.control;
				var vsDate = util.SelectCtl.getValue("ipbDate");
				
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "VALUE", vsDate);
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "REAL_VALUE", vsDate);
				util.SelectCtl.setValue(app, "ipbDate", "");
				
				doCloseValueCond("grpDate");
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCodeCencle1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCodeCencle1 = e.control;
				doCloseValueCond("grpDate");
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCode2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCode2 = e.control;
				var vsSaCd = util.DataMap.getValue(app, "dmTempCond", "strSaCd");
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "VALUE", vsSaCd, null);
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "REAL_VALUE", vsSaCd, null);
				
				util.Control.setValue(app, app, "ipbSaNm", "");
				
				doCloseValueCond("grpSaCd");
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCodeCencle2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCodeCencle2 = e.control;
				doCloseValueCond("grpSaCd");
			}
			
			/*
			 * "▲" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnColUpVisibleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnColUpVisible = e.control;
				doSetColVisibleOrderDatasetVisible("UP");
			}
			
			/*
			 * "▼" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnColDownVisibleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnColDownVisible = e.control;
				doSetColVisibleOrderDatasetVisible("DOWN");
			}
			
			/*
			 * "RESET" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnResetVisibleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnResetVisible = e.control;
				//재조회를 통해 RESET 한다.
				util.Submit.send(app, "subColsVisibleResetList", function(pbSuccess){
					if(pbSuccess){
						util.Control.redraw(app, ["grdCmnDatasetVisible", "grdCmnDatasetInVisible"]);
					}
				});
			}
			
			/*
			 * "저장" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveColVisibleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSaveColVisible = e.control;
				// 조회조건의 데이터셋value
				var vsSqlId = util.SelectCtl.getValue("cbbDataSet");
				// 조회조건의 데이터셋value에 따른 언어키를 가져온다.
				var vsLanDivRcd = util.DataSet.findRow(app, "dsDataSetList", "SQL_ID == '" + vsSqlId + "'").getValue("LAN_DIV_RCD");
				
				util.DataMap.setValue(app, "dmReqColVisColsKey", "strLanDivRcd", vsLanDivRcd);
				
				// 데이터셋 사용자정의컬럼을 저장한다.
				util.Submit.send(app, "subColsVisibleSave", function(pbSuccess){
					if(pbSuccess){
						//숨김 그리드에서 본래 있던 데이터가 제대로 저장될 수 있도록 데이터 통신 후 insert 상태로 임의 변경
						util.Grid.setRowStateAll("grdCmnDatasetInVisible", cpr.data.tabledata.RowState.INSERTED);
						util.Control.redraw(app, ["grdCmnDatasetVisible", "grdCmnDatasetInVisible", "grdCmnReport"]);
						
						// 적용버튼이벤트를 호출한다.
						var btnSaveVisible = app.lookup("btnSaveVisible");
						btnSaveVisible.click();
					}
				});
			}
			
			/*
			 * "적용" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveVisibleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSaveVisible = e.control;
				//1. 컬럼 갯수를 가져온다.
				var vnLen = app.lookup("dsDatasetColList").getRowCount();
				
				//2. 컬럼 갯수만큼 for문을 통해 동적그리드를 생성한다.
				for(var i = 0 ; i < vnLen ; i++){
					//2-1. 컬럼명, 컬럼별칭
					var vsColumnName = util.DataSet.getValue(app, "dsDatasetColList", i, "COLUMN_NM"); //명(sorting 설정)
					var vsColumnAilas = util.DataSet.getValue(app, "dsDatasetColList", i, "COLUMN_ALIAS"); //별칭
					var vsColumnType = util.DataSet.getValue(app, "dsDatasetColList", i, "COLUMN_TYPE"); //컬럼타입
					
					//2-2. 목록 detail
					var vcGrdCmnReportDtl = app.lookup("gdOpt" + vsColumnName);
					
					//2-3. 목록 header
					var vcGrdCmnReportHeader = app.lookup("ghBtn" + vsColumnName);
					
					//2-4 목록 detail과 header 삭제
					if(vcGrdCmnReportDtl && vcGrdCmnReportHeader){
						var voHeaderColumn = util.Grid.getHeaderColumn(app, "grdCmnReport", vsColumnName)[0];
						if(voHeaderColumn){
							app.lookup("grdCmnReport").deleteColumn(voHeaderColumn.colIndex);
						}
					}
				}
				
				//보임컬럼 갯수
				var vnColVisible = util.Grid.getRowCount(app, "grdCmnDatasetVisible");
				
				//2. 보임컬럼설정처리
				for(var j = 0 ; j < vnColVisible ; j++){
					var vsColVisibleNm = util.Grid.getCellValue(app, "grdCmnDatasetVisible", "COLUMN_NM", j);
					var vsVisibleColType = util.DataSet.findRow(app, "dsDatasetColList", "COLUMN_NM == '" + vsColVisibleNm + "'").getValue("COLUMN_TYPE"); //컬럼명에 따른 컬럼타입가져오기
					var vsVisibleColAlias = util.DataSet.findRow(app, "dsDatasetColList", "COLUMN_NM == '" + vsColVisibleNm + "'").getValue("COLUMN_ALIAS"); //컬럼명에 따른 컬럼타입가져오기
					
					doCreateGrdDetailColumn(vsColVisibleNm, vsVisibleColType, vsVisibleColAlias, j);
				}
				
				//3. 그리드를 다시 그린다.
				util.Control.redraw(app, "grdCmnReport");
				
				//4. 컬럼제어그룹 close
				doCloseGrpDatasetCtl("grpDatasetVisible");
			}
			
			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCancleVisibleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCancleVisible = e.control;
				//컬럼제어그룹 close
				doCloseGrpDatasetCtl("grpDatasetVisible");
			}
			
			/*
			 * "기준추가" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnNewSortClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnNewSort = e.control;
				//정렬 그리드 신규행 추가
				util.Grid.insertRow(app, "grdCmnDatasetSort");
			}
			
			/*
			 * "기준삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDeleteSortClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDeleteSort = e.control;
				//정렬 그리드 삭제
				util.Grid.deleteRow(app, "grdCmnDatasetSort");
			}
			
			/*
			 * "합계추가" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnNewSumClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnNewSum = e.control;
				//합계 그리드 신규행 추가
				var vnIdx = util.Grid.insertRow(app, "grdCmnDatasetSum");
				util.Grid.setCellValue(app, "grdCmnDatasetSum", "SUM_COL_TYPE", "", vnIdx);
			}
			
			/*
			 * "합계삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDeleteSumClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDeleteSum = e.control;
				//합계 그리드 삭제
				util.Grid.deleteRow(app, "grdCmnDatasetSum");
			}
			
			/*
			 * "RESET" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnResetSortClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnResetSort = e.control;
				util.Control.reset(app, app, ["grdCmnDatasetSort", "grdCmnDatasetSum"]);
			}
			
			/*
			 * "적용" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveSortClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSaveSort = e.control;
				//1. 정렬 그룹 내역 유효성체크(정렬파라미터 및 합계그리드)
				if(!util.validate(app, ["grdCmnDatasetSort", "grdCmnDatasetSum"])){
					return false;
				}
				
				//2. 정렬 및 합계 적용한다.
				doColsSortSumDatasetSort();
			}
			
			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCancleSortClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCancleSort = e.control;
				//정렬 그룹 close
				doCloseGrpDatasetCtl("grpDatasetSort");
			}
			
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnColVisInsertClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnColVisInsert = e.control;
				doMoveColDatasetVisible("grdCmnDatasetVisible", "grdCmnDatasetInVisible");
			}
			
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnColVisRemoveClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnColVisRemove = e.control;
				doMoveColDatasetVisible("grdCmnDatasetInVisible", "grdCmnDatasetVisible");
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onGdCbbCondTypeCondSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var gdCbbCondTypeCond = e.control;
				var vsCondColNm = util.Grid.getCellValue(app, "grdCmnDatasetCond", "COLUMN_NM");
				
				if(ValueUtil.isNull(vsCondColNm)){
					return false;
				}
				
				//조건지정 그리드 콤보박스의 label 과 value 설정을 CD_NM으로 동일하게 할 경우, value가 중복되는 문제로 임의적으로 라벨값을 COND_TYPE에 넣어줌
				var vsCondType = util.SelectCtl.getLabelByValue(app, ("gdCbbCondTypeCond", util.SelectCtl.getValue("gdCbbCondTypeCond"));
				util.Grid.setCellValue(app, "grdCmnDatasetCond", "COND_TYPE", vsCondType);
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onGdCbbColumnNmSortSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var gdCbbColumnNmSort = e.control;
				var vnIdx = util.Grid.getIndex(app, "grdCmnDatasetSort");
				var vsColumnNm = util.Grid.getCellValue(app, "grdCmnDatasetSort", "COLUMN_NM", vnIdx);
				var vsColType = util.DataSet.findRow(app, "dsDatasetColList", "COLUMN_NM == '" + vsColumnNm + "'").getValue("COLUMN_TYPE");
				
				util.Grid.setCellValue(app, "grdCmnDatasetSort", "COLUMN_TYPE", vsColType, vnIdx);
			}
			
			
			/*
			 * 콤보 박스에서 focus 이벤트 발생 시 호출.
			 * 컨트롤이 포커스를 획득한 후 발생하는 이벤트.
			 */
			function onGdCbbSumTypeFocus(/* cpr.events.CFocusEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var gdCbbSumType = e.control;
				var vsColumnNm = util.Grid.getCellValue(app, "grdCmnDatasetSum", "SUM_COL"); //컬럼명
				var vsColumnType = util.DataSet.findRow(app, "dsDatasetColList", "COLUMN_NM == '" + vsColumnNm + "'").getValue("COLUMN_TYPE"); //컬럼명에 따른 컬럼타입 가져오기
				
				if(!("Int" == vsColumnType || "Float" == vsColumnType)){
			//		util.Control.setUserAttr("gdCbbSumType", "nodeset", "CD == 'COUNT'" );
					//선행데이터로 이루어진 콤보박스이기 때문에 컬럼명이 아닌 value로 필터
					util.SelectCtl.setInsBind("gdCbbSumType", "value == 'COUNT'");
				}else{
			//		util.Control.setUserAttr("gdCbbSumType", "nodeset", psAttrValue);
					app.lookup("gdCbbSumType").clearFilter();
				}
				
				util.Control.redraw(app, "gdCbbSumType");
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsDataSetList");
			dataSet_1.parseData({
				"columns": [
					{"name": "SQL_FILE_NM"},
					{"name": "SQL_ID"},
					{"name": "DATASET_NM"},
					{"name": "STD_YN"},
					{"name": "LMT_NUM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsLanDivRcdList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD_NM"},
					{"name": "CD"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsSchYearList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD_NM"},
					{"name": "CD"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsSmtList");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD_NM"},
					{"name": "CD"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsColumnTypeList");
			dataSet_5.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsDatasetColList");
			dataSet_6.parseData({
				"columns": [
					{"name": "COLUMN_ALIAS"},
					{"name": "COLUMN_NM"},
					{"name": "SQL_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "COLUMN_NM"},
					{"name": "COLUMN_ALIAS"},
					{"name": "COLUMN_TYPE"},
					{"name": "MAND_YN"},
					{"name": "SERIAL_NO"},
					{"name": "SUM_TYPE_FILTER"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsDatasetParamList");
			dataSet_7.parseData({
				"columns": [
					{"name": "SQL_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "REQ_PARAM_RCD"},
					{"name": "REQ_PARAM_KEY"},
					{"name": "REQ_PARAM_DEF"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsCmnDatasetCond");
			dataSet_8.parseData({
				"columns": [
					{"name": "COLUMN_NM"},
					{"name": "COND_TYPE"},
					{"name": "VALUE"},
					{"name": "MAND_YN"},
					{"name": "REAL_VALUE"},
					{"name": "COND_COL"},
					{"name": "COND_COL_TYPE"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			
			var dataSet_9 = new cpr.data.DataSet("dsCmnDatasetVisible");
			dataSet_9.parseData({
				"info": "CMN_DATASET_USER_COLS@*",
				"columns": [
					{"name": "COLUMN_NM"},
					{"name": "SQL_ID"},
					{"name": "COLUMN_ALIAS"},
					{"name": "COLUMN_TYPE"},
					{"name": "REQ_YN"},
					{"name": "SERIAL_NO"},
					{"name": "LAN_DIV_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_9);
			
			var dataSet_10 = new cpr.data.DataSet("dsCmnDatasetInVisible");
			dataSet_10.parseData({
				"info": "CMN_DATASET_USER_COLS@*",
				"columns": [
					{"name": "COLUMN_NM"},
					{"name": "SQL_ID"},
					{"name": "COLUMN_ALIAS"},
					{"name": "COLUMN_TYPE"},
					{"name": "REQ_YN"},
					{"name": "SERIAL_NO"},
					{"name": "LAN_DIV_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_10);
			
			var dataSet_11 = new cpr.data.DataSet("dsCmnDatasetSort");
			dataSet_11.parseData({
				"columns": [
					{"name": "COLUMN_NM"},
					{"name": "SORT_TYPE"},
					{"name": "COLUMN_TYPE"},
					{"name": "SUM_YN"}
				],
				"rows": []
			});
			app.register(dataSet_11);
			
			var dataSet_12 = new cpr.data.DataSet("dsCmnDatasetSum");
			dataSet_12.parseData({
				"columns": [
					{"name": "SUM_COL"},
					{"name": "SUM_COL_TYPE"}
				],
				"rows": []
			});
			app.register(dataSet_12);
			
			var dataSet_13 = new cpr.data.DataSet("dsFrfCmnReqParam");
			dataSet_13.parseData({
				"columns": [
					{"name": "BASE_DATE"},
					{"name": "LAN_DIV_RCD"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_13);
			
			var dataSet_14 = new cpr.data.DataSet("dsCondColList");
			dataSet_14.parseData({
				"columns": [
					{"name": "COND_KEY"},
					{"name": "SQL_ID"},
					{"name": "COND_NM"},
					{"name": "COND_TYPE_CD"},
					{"name": "CD_NM"},
					{"name": "SERIAL_NO"},
					{"name": "LAN_DIV_RCD"},
					{"name": "COND_COL_TYPE"}
				],
				"rows": []
			});
			app.register(dataSet_14);
			
			var dataSet_15 = new cpr.data.DataSet("dsCondColdCodeList");
			dataSet_15.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_15);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strSqlId",
						"dataType": "string"
					},
					{
						"name": "strSqlFileNm",
						"dataType": "string"
					},
					{
						"name": "strSortCntYn",
						"dataType": "string"
					},
					{
						"name": "strExcelFileNm",
						"dataType": "string"
					},
					{
						"name": "strLmtNum",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqList");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strKeyDate",
						"dataType": "string"
					},
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					},
					{
						"name": "strSchYearRcd",
						"dataType": "string"
					},
					{
						"name": "strSmtRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmReqColVisColsKey");
			dataMap_3.parseData({
				"columns" : [{
					"name": "strLanDivRcd",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmCmnReport");
			dataMap_4.parseData({
				"columns" : [{
					"name": "row",
					"dataType": "string"
				}]
			});
			app.register(dataMap_4);
			
			var dataMap_5 = new cpr.data.DataMap("dmTempCond");
			dataMap_5.parseData({
				"columns" : [
					{
						"name": "strCodeCd",
						"dataType": "string"
					},
					{
						"name": "strDate",
						"dataType": "string"
					},
					{
						"name": "strSaCd",
						"dataType": "string"
					},
					{
						"name": "strSaNm",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_5);
			
			var dataMap_6 = new cpr.data.DataMap("dmExcelFileInfo");
			dataMap_6.parseData({
				"columns" : [
					{
						"name": "strFileDir",
						"dataType": "string"
					},
					{
						"name": "strFileNm",
						"dataType": "string"
					},
					{
						"name": "strFileChgNm",
						"dataType": "string"
					},
					{
						"name": "strTmpFilePath",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_6);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/cmn/StdCmnReportGrid/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataSet_5, false);
			submission_1.addResponseData(dataSet_6, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subDatasetColList");
			submission_2.action = "/cmn/StdCmnReportGrid/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_6, false);
			submission_2.addResponseData(dataSet_7, false);
			submission_2.addResponseData(dataSet_8, false);
			submission_2.addResponseData(dataSet_9, false);
			submission_2.addResponseData(dataSet_10, false);
			submission_2.addResponseData(dataSet_11, false);
			submission_2.addResponseData(dataSet_12, false);
			submission_2.addResponseData(dataSet_14, false);
			submission_2.addResponseData(dataSet_15, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subList");
			submission_3.action = "/cmn/StdCmnReportGrid/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_1);
			submission_3.addRequestData(dataMap_2);
			submission_3.addRequestData(dataSet_8);
			submission_3.addResponseData(dataMap_4, false);
			submission_3.addResponseData(dataMap_6, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subColsVisibleResetList");
			submission_4.action = "/cmn/StdCmnReportGrid/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_1);
			submission_4.addResponseData(dataSet_9, false);
			submission_4.addResponseData(dataSet_10, false);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subColsVisibleSave");
			submission_5.action = "/cmn/StdCmnReportGrid/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataMap_1);
			submission_5.addRequestData(dataMap_3);
			submission_5.addRequestData(dataSet_10);
			submission_5.addResponseData(dataSet_9, false);
			submission_5.addResponseData(dataSet_10, false);
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("subColsSum");
			submission_6.action = "/cmn/StdCmnReportGrid/";
			submission_6.mediaType = "application/x-www-form-urlencoded";
			submission_6.addRequestData(dataSet_11);
			submission_6.addRequestData(dataSet_12);
			submission_6.addRequestData(dataMap_4);
			submission_6.addResponseData(dataMap_4, false);
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("subExcelDown");
			submission_7.action = "/cmn/StdCmnReportGrid/";
			submission_7.mediaType = "application/x-www-form-urlencoded";
			submission_7.addRequestData(dataMap_1);
			submission_7.addRequestData(dataMap_2);
			submission_7.addRequestData(dataSet_8);
			submission_7.addResponseData(dataMap_6, false);
			app.register(submission_7);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optDataSetNm");
				output_1.value = "데이터셋명";
				output_1.style.setClasses(["require"]);
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "100px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbDataSet");
				comboBox_1.userAttr({"require": "Y"});
				comboBox_1.bind("fieldLabel").toExpression("#optDataSetNm.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strSqlId");
				(function(comboBox_1){
					comboBox_1.setItemSet(app.lookup("dsDataSetList"), {
						"label": "DATASET_NM",
						"value": "SQL_ID"
					});
				})(comboBox_1);
				if(typeof onCbbDataSetSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onCbbDataSetSelectionChange);
				}
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "110px",
					"width": "300px",
					"height": "150px"
				});
				var button_2 = new cpr.controls.Button("btnCond");
				button_2.enabled = false;
				button_2.value = "조건지정";
				if(typeof onBtnCondClick == "function") {
					button_2.addEventListener("click", onBtnCondClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "420px",
					"width": "60px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "32px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCmnReport");
				grid_1.init({
					"dataSet": app.lookup("dsCmnReport"),
					"columns": [{"width": "40px"}],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.text = "No";
							}
						}]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "rowindex";
								cell.style.css({
									"text-align" : "center"
								});
							}
						}]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1215px",
					"height": "535px"
				});
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "315px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "104px",
				"left": "5px",
				"width": "1225px",
				"height": "570px"
			});
			
			var group_3 = new cpr.controls.Container("grpDataTool");
			// Layout
			var xYLayout_4 = new cpr.controls.layouts.XYLayout();
			group_3.setLayout(xYLayout_4);
			(function(container){
				var button_3 = new cpr.controls.Button("btnColVisible");
				button_3.value = "컬럼제어";
				if(typeof onBtnColVisibleClick == "function") {
					button_3.addEventListener("click", onBtnColVisibleClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "5px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnSort");
				button_4.value = "정렬";
				if(typeof onBtnSortClick == "function") {
					button_4.addEventListener("click", onBtnSortClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "70px",
					"width": "60px",
					"height": "25px"
				});
				var image_1 = new cpr.controls.Image("image1");
				image_1.visible = false;
				image_1.src = "images/imgs/icon/file_icon_XLS.png";
				(function(image_1){
				})(image_1);
				container.addChild(image_1, {
					"top": "5px",
					"left": "145px",
					"width": "25px",
					"height": "25px"
				});
			})(group_3);
			container.addChild(group_3, {
				"top": "70px",
				"left": "5px",
				"width": "135px",
				"height": "32px"
			});
			
			var group_4 = new cpr.controls.Container("grpDatasetCond");
			group_4.visible = false;
			// Layout
			var xYLayout_5 = new cpr.controls.layouts.XYLayout();
			group_4.setLayout(xYLayout_5);
			(function(container){
				var group_5 = new cpr.controls.Container("frfCmnReqParam");
				group_5.style.setClasses(["form-box"]);
				// Layout
				var xYLayout_6 = new cpr.controls.layouts.XYLayout();
				group_5.setLayout(xYLayout_6);
				(function(container){
					var output_2 = new cpr.controls.Output("optFrfBaseDate");
					output_2.value = "기준일";
					output_2.style.setClasses(["require"]);
					container.addChild(output_2, {
						"top": "30px",
						"left": "5px",
						"width": "85px",
						"height": "25px"
					});
					var dateInput_1 = new cpr.controls.DateInput("dipFrfBaseDate");
					dateInput_1.format = "YYYY-MM-DD";
					dateInput_1.userAttr({"require": "Y"});
					dateInput_1.bind("fieldLabel").toExpression("#optFrfBaseDate.value");
					dateInput_1.bind("value").toDataMap(app.lookup("dmRow"), "BASE_DATE");
					container.addChild(dateInput_1, {
						"top": "30px",
						"left": "95px",
						"width": "100px",
						"height": "25px"
					});
					var output_3 = new cpr.controls.Output("optFrfLanDivRcd");
					output_3.value = "언어키";
					output_3.style.setClasses(["require"]);
					container.addChild(output_3, {
						"top": "30px",
						"left": "205px",
						"width": "85px",
						"height": "25px"
					});
					var comboBox_2 = new cpr.controls.ComboBox("cbbFrfLanDivRcd");
					comboBox_2.userAttr({"require": "Y"});
					comboBox_2.bind("fieldLabel").toExpression("#optFrfLanDivRcd.value");
					comboBox_2.bind("value").toDataMap(app.lookup("dmRow"), "LAN_DIV_RCD");
					(function(comboBox_2){
						comboBox_2.setItemSet(app.lookup("dsLanDivRcdList"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_2);
					container.addChild(comboBox_2, {
						"top": "30px",
						"left": "294px",
						"width": "95px",
						"height": "25px"
					});
					var output_4 = new cpr.controls.Output("optFrfSchYearRcd");
					output_4.value = "학년도";
					output_4.style.setClasses(["require"]);
					container.addChild(output_4, {
						"top": "55px",
						"left": "5px",
						"width": "85px",
						"height": "25px"
					});
					var comboBox_3 = new cpr.controls.ComboBox("cbbFrfSchYearRcd");
					comboBox_3.userAttr({"require": "Y"});
					comboBox_3.bind("fieldLabel").toExpression("#optFrfSchYearRcd.value");
					comboBox_3.bind("value").toDataMap(app.lookup("dmRow"), "SCH_YEAR_RCD");
					(function(comboBox_3){
						comboBox_3.setItemSet(app.lookup("dsSchYearList"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_3);
					container.addChild(comboBox_3, {
						"top": "55px",
						"left": "95px",
						"width": "100px",
						"height": "25px"
					});
					var comboBox_4 = new cpr.controls.ComboBox("cbbFrfSmtRcd");
					comboBox_4.userAttr({"require": "Y"});
					comboBox_4.bind("value").toDataMap(app.lookup("dmRow"), "SMT_RCD");
					(function(comboBox_4){
						comboBox_4.setItemSet(app.lookup("dsSmtList"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_4);
					container.addChild(comboBox_4, {
						"top": "54px",
						"left": "295px",
						"width": "95px",
						"height": "25px"
					});
					var output_5 = new cpr.controls.Output("optFrfSmtRcd");
					output_5.value = "학기";
					output_5.style.setClasses(["require"]);
					container.addChild(output_5, {
						"top": "54px",
						"left": "205px",
						"width": "85px",
						"height": "25px"
					});
					var userDefinedControl_3 = new udc.com.comFormTitle();
					userDefinedControl_3.bind("title").toLanguage("");
					container.addChild(userDefinedControl_3, {
						"top": "5px",
						"left": "5px",
						"width": "100px",
						"height": "25px"
					});
				})(group_5);
				container.addChild(group_5, {
					"top": "5px",
					"left": "5px",
					"width": "410px",
					"height": "90px"
				});
				var group_6 = new cpr.controls.Container("grpDataCond");
				// Layout
				var xYLayout_7 = new cpr.controls.layouts.XYLayout();
				group_6.setLayout(xYLayout_7);
				(function(container){
					var button_5 = new cpr.controls.Button("btnNewCond");
					button_5.value = "조건추가";
					button_5.style.setClasses(["btn-new"]);
					if(typeof onBtnNewCondClick == "function") {
						button_5.addEventListener("click", onBtnNewCondClick);
					}
					container.addChild(button_5, {
						"top": "5px",
						"left": "5px",
						"width": "60px",
						"height": "25px"
					});
					var button_6 = new cpr.controls.Button("btnDeleteCond");
					button_6.value = "조건삭제";
					button_6.style.setClasses(["btn-delete"]);
					if(typeof onBtnDeleteCondClick == "function") {
						button_6.addEventListener("click", onBtnDeleteCondClick);
					}
					container.addChild(button_6, {
						"top": "5px",
						"left": "70px",
						"width": "60px",
						"height": "25px"
					});
					var grid_2 = linker.grid_2 = new cpr.controls.Grid("grdCmnDatasetCond");
					grid_2.init({
						"dataSet": app.lookup("dsCmnDatasetCond"),
						"columns": [
							{"width": "118px"},
							{"width": "112px"},
							{"width": "91px"},
							{"width": "54px"},
							{
								"width": "101px",
								"visible": false
							},
							{
								"width": "97px",
								"visible": false
							},
							{
								"width": "109px",
								"visible": false
							}
						],
						"header": {
							"rows": [{"height": "27px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.text = "조건명";
										cell.style.setClasses(["require"]);
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.text = "비교값";
										cell.style.setClasses(["require"]);
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.text = "조건절";
										cell.style.setClasses(["require"]);
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.text = "필수";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.text = "비교값(real)";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.text = "쿼리컬럼";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 6},
									"configurator": function(cell){
										cell.text = "조건유형";
									}
								}
							]
						},
						"detail": {
							"rows": [{"height": "25px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.columnName = "COLUMN_NM";
										cell.control = (function(){
											var comboBox_5 = new cpr.controls.ComboBox("gdCbbColumnNmCond");
											comboBox_5.userAttr({"require": "Y"});
											(function(comboBox_5){
												comboBox_5.addItem(new cpr.controls.Item("선택", ""));
												comboBox_5.setItemSet(app.lookup("dsCondColList"), {
													"label": "COND_NM",
													"value": "COND_KEY"
												});
											})(comboBox_5);
											comboBox_5.bind("value").toDataColumn("COLUMN_NM");
											return comboBox_5;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.columnName = "VALUE";
										cell.control = (function(){
											var inputBox_1 = new cpr.controls.InputBox("gdIpbValueCond");
											inputBox_1.userAttr({"require": "Y"});
											inputBox_1.bind("value").toDataColumn("VALUE");
											return inputBox_1;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.columnName = "COND_TYPE";
										cell.control = (function(){
											var comboBox_6 = new cpr.controls.ComboBox("gdCbbCondTypeCond");
											comboBox_6.userAttr({"require": "Y"});
											(function(comboBox_6){
												comboBox_6.addItem(new cpr.controls.Item("선택", ""));
												comboBox_6.setItemSet(app.lookup("dsColumnTypeList"), {
													"label": "CD_NM",
													"value": "CD_NM"
												});
											})(comboBox_6);
											comboBox_6.bind("value").toDataColumn("COND_TYPE");
											return comboBox_6;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.columnName = "MAND_YN";
										cell.control = (function(){
											var checkBox_1 = new cpr.controls.CheckBox("gdCkbMandYnCond");
											checkBox_1.enabled = false;
											checkBox_1.value = "";
											checkBox_1.trueValue = "Y";
											checkBox_1.falseValue = "";
											checkBox_1.text = "";
											checkBox_1.style.css({
												"text-align" : "center"
											});
											checkBox_1.bind("value").toDataColumn("MAND_YN");
											return checkBox_1;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.columnName = "REAL_VALUE";
										cell.control = (function(){
											var inputBox_2 = new cpr.controls.InputBox("gdIpbReadValueCond");
											inputBox_2.userAttr({"require": "Y"});
											inputBox_2.bind("value").toDataColumn("REAL_VALUE");
											return inputBox_2;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.columnName = "COND_COL";
										cell.control = (function(){
											var inputBox_3 = new cpr.controls.InputBox("gdIpbCondCol");
											inputBox_3.userAttr({"require": "Y"});
											inputBox_3.bind("value").toDataColumn("COND_COL");
											return inputBox_3;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 6},
									"configurator": function(cell){
										cell.columnName = "COND_COL_TYPE";
										cell.control = (function(){
											var inputBox_4 = new cpr.controls.InputBox("gdIpbCondColType");
											inputBox_4.userAttr({"require": "Y"});
											inputBox_4.bind("value").toDataColumn("COND_COL_TYPE");
											return inputBox_4;
										})();
									}
								}
							]
						}
					});
					if(typeof onGrdCmnDatasetCondSelectionChange == "function") {
						grid_2.addEventListener("selection-change", onGrdCmnDatasetCondSelectionChange);
					}
					container.addChild(grid_2, {
						"top": "30px",
						"left": "5px",
						"width": "400px",
						"height": "200px"
					});
					var userDefinedControl_4 = linker.userDefinedControl_4 = new udc.com.comTitle();
					userDefinedControl_4.bind("title").toLanguage("");
					container.addChild(userDefinedControl_4, {
						"top": "5px",
						"left": "300px",
						"width": "220px",
						"height": "25px"
					});
					var output_6 = new cpr.controls.Output("optAddCond");
					output_6.value = "[추가 검색 조건 없음]";
					container.addChild(output_6, {
						"top": "5px",
						"left": "155px",
						"width": "150px",
						"height": "25px"
					});
				})(group_6);
				container.addChild(group_6, {
					"top": "100px",
					"left": "5px",
					"width": "410px",
					"height": "235px"
				});
				var button_7 = new cpr.controls.Button("btnSaveCond");
				button_7.value = "적용";
				button_7.style.setClasses(["btn-save"]);
				if(typeof onBtnSaveCondClick == "function") {
					button_7.addEventListener("click", onBtnSaveCondClick);
				}
				container.addChild(button_7, {
					"top": "341px",
					"left": "290px",
					"width": "60px",
					"height": "25px"
				});
				var button_8 = new cpr.controls.Button("btnCancleCond");
				button_8.value = "취소";
				if(typeof onBtnCancleCondClick == "function") {
					button_8.addEventListener("click", onBtnCancleCondClick);
				}
				container.addChild(button_8, {
					"top": "341px",
					"left": "355px",
					"width": "60px",
					"height": "25px"
				});
			})(group_4);
			container.addChild(group_4, {
				"top": "145px",
				"left": "65px",
				"width": "420px",
				"height": "365px"
			});
			
			var group_7 = new cpr.controls.Container("grpDatasetVisible");
			group_7.visible = false;
			// Layout
			var xYLayout_8 = new cpr.controls.layouts.XYLayout();
			group_7.setLayout(xYLayout_8);
			(function(container){
				var button_9 = new cpr.controls.Button("btnResetVisible");
				button_9.value = "RESET";
				if(typeof onBtnResetVisibleClick == "function") {
					button_9.addEventListener("click", onBtnResetVisibleClick);
				}
				container.addChild(button_9, {
					"top": "320px",
					"left": "5px",
					"width": "60px",
					"height": "25px"
				});
				var button_10 = new cpr.controls.Button("btnSaveColVisible");
				button_10.value = "저장";
				button_10.style.setClasses(["btn-save"]);
				if(typeof onBtnSaveColVisibleClick == "function") {
					button_10.addEventListener("click", onBtnSaveColVisibleClick);
				}
				container.addChild(button_10, {
					"top": "320px",
					"left": "230px",
					"width": "60px",
					"height": "25px"
				});
				var button_11 = new cpr.controls.Button("btnSaveVisible");
				button_11.value = "적용";
				button_11.style.setClasses(["btn-save"]);
				if(typeof onBtnSaveVisibleClick == "function") {
					button_11.addEventListener("click", onBtnSaveVisibleClick);
				}
				container.addChild(button_11, {
					"top": "320px",
					"left": "295px",
					"width": "60px",
					"height": "25px"
				});
				var button_12 = new cpr.controls.Button("btnCancleVisible");
				button_12.value = "취소";
				if(typeof onBtnCancleVisibleClick == "function") {
					button_12.addEventListener("click", onBtnCancleVisibleClick);
				}
				container.addChild(button_12, {
					"top": "320px",
					"left": "360px",
					"width": "60px",
					"height": "25px"
				});
				var button_13 = new cpr.controls.Button("btnColUpVisible");
				button_13.value = "▲";
				if(typeof onBtnColUpVisibleClick == "function") {
					button_13.addEventListener("click", onBtnColUpVisibleClick);
				}
				container.addChild(button_13, {
					"top": "5px",
					"left": "5px",
					"width": "60px",
					"height": "25px"
				});
				var button_14 = new cpr.controls.Button("btnColDownVisible");
				button_14.value = "▼";
				if(typeof onBtnColDownVisibleClick == "function") {
					button_14.addEventListener("click", onBtnColDownVisibleClick);
				}
				container.addChild(button_14, {
					"top": "5px",
					"left": "70px",
					"width": "60px",
					"height": "25px"
				});
				var grid_3 = new cpr.controls.Grid("grdCmnDatasetVisible");
				grid_3.init({
					"dataSet": app.lookup("dsCmnDatasetVisible"),
					"columns": [
						{"width": "25px"},
						{"width": "148px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "보임컬럼";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "COLUMN_NM";
									cell.control = (function(){
										var comboBox_7 = new cpr.controls.ComboBox("gdCbbColumnNmVisble");
										comboBox_7.enabled = false;
										comboBox_7.hideButton = true;
										(function(comboBox_7){
											comboBox_7.setItemSet(app.lookup("dsDatasetColList"), {
												"label": "COLUMN_ALIAS",
												"value": "COLUMN_NM"
											});
										})(comboBox_7);
										comboBox_7.bind("value").toDataColumn("COLUMN_NM");
										return comboBox_7;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_3, {
					"top": "30px",
					"left": "5px",
					"width": "185px",
					"height": "285px"
				});
				var button_15 = new cpr.controls.Button("btnColVisInsert");
				button_15.value = "";
				if(typeof onBtnColVisInsertClick == "function") {
					button_15.addEventListener("click", onBtnColVisInsertClick);
				}
				container.addChild(button_15, {
					"top": "105px",
					"left": "195px",
					"width": "25px",
					"height": "25px"
				});
				var button_16 = new cpr.controls.Button("btnColVisRemove");
				button_16.value = "";
				if(typeof onBtnColVisRemoveClick == "function") {
					button_16.addEventListener("click", onBtnColVisRemoveClick);
				}
				container.addChild(button_16, {
					"top": "155px",
					"left": "195px",
					"width": "25px",
					"height": "25px"
				});
				var grid_4 = new cpr.controls.Grid("grdCmnDatasetInVisible");
				grid_4.init({
					"dataSet": app.lookup("dsCmnDatasetInVisible"),
					"columns": [
						{"width": "25px"},
						{"width": "147px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "숨김컬럼";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "COLUMN_NM";
									cell.control = (function(){
										var comboBox_8 = new cpr.controls.ComboBox("gdCbbColumnNmInVisible");
										comboBox_8.enabled = false;
										comboBox_8.hideButton = true;
										(function(comboBox_8){
											comboBox_8.setItemSet(app.lookup("dsDatasetColList"), {
												"label": "COLUMN_ALIAS",
												"value": "COLUMN_NM"
											});
										})(comboBox_8);
										comboBox_8.bind("value").toDataColumn("COLUMN_NM");
										return comboBox_8;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_4, {
					"top": "30px",
					"left": "225px",
					"width": "185px",
					"height": "285px"
				});
			})(group_7);
			container.addChild(group_7, {
				"top": "80px",
				"left": "505px",
				"width": "425px",
				"height": "350px"
			});
			
			var group_8 = new cpr.controls.Container("grpDatasetSort");
			group_8.visible = false;
			// Layout
			var xYLayout_9 = new cpr.controls.layouts.XYLayout();
			group_8.setLayout(xYLayout_9);
			(function(container){
				var button_17 = new cpr.controls.Button("btnResetSort");
				button_17.value = "RESET";
				if(typeof onBtnResetSortClick == "function") {
					button_17.addEventListener("click", onBtnResetSortClick);
				}
				container.addChild(button_17, {
					"top": "195px",
					"left": "5px",
					"width": "60px",
					"height": "25px"
				});
				var button_18 = new cpr.controls.Button("btnSaveSort");
				button_18.value = "적용";
				button_18.style.setClasses(["btn-save"]);
				if(typeof onBtnSaveSortClick == "function") {
					button_18.addEventListener("click", onBtnSaveSortClick);
				}
				container.addChild(button_18, {
					"top": "195px",
					"left": "490px",
					"width": "60px",
					"height": "25px"
				});
				var button_19 = new cpr.controls.Button("btnCancleSort");
				button_19.value = "취소";
				if(typeof onBtnCancleSortClick == "function") {
					button_19.addEventListener("click", onBtnCancleSortClick);
				}
				container.addChild(button_19, {
					"top": "195px",
					"left": "555px",
					"width": "60px",
					"height": "25px"
				});
				var button_20 = new cpr.controls.Button("btnNewSort");
				button_20.value = "기준추가";
				button_20.style.setClasses(["btn-new"]);
				if(typeof onBtnNewSortClick == "function") {
					button_20.addEventListener("click", onBtnNewSortClick);
				}
				container.addChild(button_20, {
					"top": "5px",
					"left": "5px",
					"width": "60px",
					"height": "25px"
				});
				var button_21 = new cpr.controls.Button("btnDeleteSort");
				button_21.value = "기준삭제";
				button_21.style.setClasses(["btn-delete"]);
				if(typeof onBtnDeleteSortClick == "function") {
					button_21.addEventListener("click", onBtnDeleteSortClick);
				}
				container.addChild(button_21, {
					"top": "5px",
					"left": "70px",
					"width": "60px",
					"height": "25px"
				});
				var grid_5 = new cpr.controls.Grid("grdCmnDatasetSort");
				grid_5.init({
					"dataSet": app.lookup("dsCmnDatasetSort"),
					"columns": [
						{"width": "155px"},
						{"width": "82px"},
						{"width": "90px"},
						{
							"width": "90px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "열";
									cell.style.setClasses(["require"]);
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "정렬";
									cell.style.setClasses(["require"]);
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "합계기준여부";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.text = "타입";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "COLUMN_NM";
									cell.control = (function(){
										var comboBox_9 = new cpr.controls.ComboBox("gdCbbColumnNmSort");
										comboBox_9.userAttr({"require": "Y"});
										(function(comboBox_9){
											comboBox_9.addItem(new cpr.controls.Item("선택", ""));
											comboBox_9.setItemSet(app.lookup("dsDatasetColList"), {
												"label": "COLUMN_ALIAS",
												"value": "COLUMN_NM"
											});
										})(comboBox_9);
										comboBox_9.bind("value").toDataColumn("COLUMN_NM");
										return comboBox_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "SORT_TYPE";
									cell.control = (function(){
										var comboBox_10 = new cpr.controls.ComboBox("gdCbbSortTypeSort");
										comboBox_10.userAttr({"require": "Y"});
										(function(comboBox_10){
											comboBox_10.addItem(new cpr.controls.Item("오름차순", "true"));
											comboBox_10.addItem(new cpr.controls.Item("내림차순", "false"));
											comboBox_10.addItem(new cpr.controls.Item("선택", ""));
										})(comboBox_10);
										comboBox_10.bind("value").toDataColumn("SORT_TYPE");
										return comboBox_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "SUM_YN";
									cell.control = (function(){
										var checkBox_2 = new cpr.controls.CheckBox("gdCkbSumYnSort");
										checkBox_2.value = "";
										checkBox_2.trueValue = "Y";
										checkBox_2.falseValue = "";
										checkBox_2.text = "";
										checkBox_2.style.css({
											"text-align" : "center"
										});
										checkBox_2.bind("value").toDataColumn("SUM_YN");
										return checkBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "COLUMN_TYPE";
								}
							}
						]
					}
				});
				container.addChild(grid_5, {
					"top": "30px",
					"left": "5px",
					"width": "345px",
					"height": "160px"
				});
				var button_22 = new cpr.controls.Button("btnNewSum");
				button_22.value = "합계추가";
				button_22.style.setClasses(["btn-new"]);
				if(typeof onBtnNewSumClick == "function") {
					button_22.addEventListener("click", onBtnNewSumClick);
				}
				container.addChild(button_22, {
					"top": "5px",
					"left": "360px",
					"width": "60px",
					"height": "25px"
				});
				var button_23 = new cpr.controls.Button("btnDeleteSum");
				button_23.value = "합계삭제";
				button_23.style.setClasses(["btn-delete"]);
				if(typeof onBtnDeleteSumClick == "function") {
					button_23.addEventListener("click", onBtnDeleteSumClick);
				}
				container.addChild(button_23, {
					"top": "5px",
					"left": "425px",
					"width": "60px",
					"height": "25px"
				});
				var grid_6 = new cpr.controls.Grid("grdCmnDatasetSum");
				grid_6.init({
					"dataSet": app.lookup("dsCmnDatasetSum"),
					"columns": [
						{"width": "144px"},
						{"width": "78px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "합계대상";
									cell.style.setClasses(["require"]);
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "합계형식";
									cell.style.setClasses(["require"]);
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "SUM_COL";
									cell.control = (function(){
										var comboBox_11 = new cpr.controls.ComboBox("gdCbbSumCol");
										comboBox_11.userAttr({"require": "Y"});
										(function(comboBox_11){
											comboBox_11.addItem(new cpr.controls.Item("선택", ""));
											comboBox_11.setItemSet(app.lookup("dsDatasetColList"), {
												"label": "COLUMN_ALIAS",
												"value": "COLUMN_NM"
											});
										})(comboBox_11);
										comboBox_11.bind("value").toDataColumn("SUM_COL");
										return comboBox_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "SUM_COL_TYPE";
									cell.control = (function(){
										var comboBox_12 = new cpr.controls.ComboBox("gdCbbSumType");
										comboBox_12.userAttr({"require": "Y"});
										(function(comboBox_12){
											comboBox_12.addItem(new cpr.controls.Item("선택", ""));
											comboBox_12.setItemSet(app.lookup("dsSumType"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_12);
										comboBox_12.bind("value").toDataColumn("SUM_COL_TYPE");
										return comboBox_12;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_6, {
					"top": "30px",
					"left": "360px",
					"width": "240px",
					"height": "160px"
				});
			})(group_8);
			container.addChild(group_8, {
				"top": "435px",
				"left": "600px",
				"width": "620px",
				"height": "225px"
			});
			
			var group_9 = new cpr.controls.Container("grpCode");
			group_9.visible = false;
			// Layout
			var xYLayout_10 = new cpr.controls.layouts.XYLayout();
			group_9.setLayout(xYLayout_10);
			(function(container){
				var output_7 = new cpr.controls.Output("optCodeNm");
				output_7.value = "";
				output_7.style.setClasses(["require"]);
				output_7.bind("value").toLanguage("UI-DB-CD_NM");
				container.addChild(output_7, {
					"top": "7px",
					"left": "10px",
					"width": "75px",
					"height": "25px"
				});
				var comboBox_13 = new cpr.controls.ComboBox("cbbCondCode");
				comboBox_13.bind("value").toDataMap(app.lookup("dmTempCond"), "strCodeCd");
				(function(comboBox_13){
					comboBox_13.setItemSet(app.lookup("dsCondColdCodeList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_13);
				container.addChild(comboBox_13, {
					"top": "7px",
					"left": "90px",
					"width": "215px",
					"height": "25px"
				});
				var button_24 = new cpr.controls.Button("btnCode");
				button_24.value = "";
				button_24.bind("value").toLanguage("UI-GLS-APLY");
				if(typeof onBtnCodeClick == "function") {
					button_24.addEventListener("click", onBtnCodeClick);
				}
				container.addChild(button_24, {
					"top": "30px",
					"left": "180px",
					"width": "60px",
					"height": "25px"
				});
				var button_25 = new cpr.controls.Button("btnCodeCencle");
				button_25.value = "";
				button_25.bind("value").toLanguage("UI-GLS-CANCEL");
				if(typeof onBtnCodeCencleClick == "function") {
					button_25.addEventListener("click", onBtnCodeCencleClick);
				}
				container.addChild(button_25, {
					"top": "30px",
					"left": "245px",
					"width": "60px",
					"height": "25px"
				});
			})(group_9);
			container.addChild(group_9, {
				"top": "530px",
				"left": "80px",
				"width": "310px",
				"height": "55px"
			});
			
			var group_10 = new cpr.controls.Container("grpDate");
			group_10.visible = false;
			// Layout
			var xYLayout_11 = new cpr.controls.layouts.XYLayout();
			group_10.setLayout(xYLayout_11);
			(function(container){
				var output_8 = new cpr.controls.Output("optDate");
				output_8.value = "";
				output_8.style.setClasses(["require"]);
				output_8.bind("value").toLanguage("UI-DB-CD_NM");
				container.addChild(output_8, {
					"top": "7px",
					"left": "10px",
					"width": "75px",
					"height": "25px"
				});
				var button_26 = new cpr.controls.Button("btnCode1");
				button_26.value = "";
				button_26.bind("value").toLanguage("UI-GLS-APLY");
				if(typeof onBtnCode1Click == "function") {
					button_26.addEventListener("click", onBtnCode1Click);
				}
				container.addChild(button_26, {
					"top": "30px",
					"left": "118px",
					"width": "60px",
					"height": "25px"
				});
				var button_27 = new cpr.controls.Button("btnCodeCencle1");
				button_27.value = "";
				button_27.bind("value").toLanguage("UI-GLS-CANCEL");
				if(typeof onBtnCodeCencle1Click == "function") {
					button_27.addEventListener("click", onBtnCodeCencle1Click);
				}
				container.addChild(button_27, {
					"top": "30px",
					"left": "183px",
					"width": "60px",
					"height": "25px"
				});
				var dateInput_2 = new cpr.controls.DateInput("ipbDate");
				dateInput_2.format = "YYYY-MM-DD";
				dateInput_2.style.css({
					"text-align" : "center"
				});
				dateInput_2.bind("value").toDataMap(app.lookup("dmTempCond"), "strDate");
				container.addChild(dateInput_2, {
					"top": "7px",
					"left": "90px",
					"width": "155px",
					"height": "25px"
				});
			})(group_10);
			container.addChild(group_10, {
				"top": "600px",
				"left": "80px",
				"width": "250px",
				"height": "55px"
			});
			
			var group_11 = new cpr.controls.Container("grpSaCd");
			group_11.visible = false;
			// Layout
			var xYLayout_12 = new cpr.controls.layouts.XYLayout();
			group_11.setLayout(xYLayout_12);
			(function(container){
				var output_9 = new cpr.controls.Output("optDept");
				output_9.value = "";
				output_9.style.setClasses(["require"]);
				output_9.bind("value").toLanguage("UI-GLS-DEPT");
				container.addChild(output_9, {
					"top": "7px",
					"left": "10px",
					"width": "75px",
					"height": "25px"
				});
				var button_28 = new cpr.controls.Button("btnCode2");
				button_28.value = "";
				button_28.bind("value").toLanguage("UI-GLS-APLY");
				if(typeof onBtnCode2Click == "function") {
					button_28.addEventListener("click", onBtnCode2Click);
				}
				container.addChild(button_28, {
					"top": "30px",
					"left": "119px",
					"width": "60px",
					"height": "25px"
				});
				var button_29 = new cpr.controls.Button("btnCodeCencle2");
				button_29.value = "";
				button_29.bind("value").toLanguage("UI-GLS-CANCEL");
				if(typeof onBtnCodeCencle2Click == "function") {
					button_29.addEventListener("click", onBtnCodeCencle2Click);
				}
				container.addChild(button_29, {
					"top": "30px",
					"left": "183px",
					"width": "60px",
					"height": "25px"
				});
				var inputBox_5 = new cpr.controls.InputBox("ipbSaNm");
				inputBox_5.bind("value").toDataMap(app.lookup("dmTempCond"), "strSaNm");
				if(typeof onIpbSaNmKeydown == "function") {
					inputBox_5.addEventListener("keydown", onIpbSaNmKeydown);
				}
				container.addChild(inputBox_5, {
					"top": "7px",
					"left": "90px",
					"width": "127px",
					"height": "25px"
				});
				var button_30 = new cpr.controls.Button("btnSaNm");
				button_30.value = "";
				button_30.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnSaNmClick == "function") {
					button_30.addEventListener("click", onBtnSaNmClick);
				}
				container.addChild(button_30, {
					"top": "8px",
					"left": "221px",
					"width": "20px",
					"height": "25px"
				});
			})(group_11);
			container.addChild(group_11, {
				"top": "600px",
				"left": "340px",
				"width": "250px",
				"height": "55px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaStdCmnPobjSch");
			cpr.core.App.load("app/cmn/impStdCmnPObjSch", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "690px",
				"left": "20px",
				"width": "100px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
			linker.userDefinedControl_4.ctrl = linker.grid_2;
		}
	});
	app.title = "stdCmnSReportGrid";
	cpr.core.Platform.INSTANCE.register(app);
})();
