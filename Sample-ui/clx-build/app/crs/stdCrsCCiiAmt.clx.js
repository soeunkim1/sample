/*
 * App URI: app/crs/stdCrsCCiiAmt
 * Source Location: app/crs/stdCrsCCiiAmt.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/crs/stdCrsCCiiAmt", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCrsCCiiAmt.xtm"/>
			
			
			var stdCrsCCiiAmt = function() {
					
				var moPage = new Page();
				
				//조건에 따라 리피트헤더명 변경해야하는 컨트롤아이디 배열
				var maChangeCol = []; 
				
				// 리피트 ref : detail ctrl
				var moFldNames = {
					REG_FEE_CAT_SA : "rdCbbRegFeeCatSa",
					REG_FEE_CAT_SP : "rdCbbRegFeeCatSp",
					REG_FEE_CAT_STUD : "rdCbbRegFeeCatStud",
					SHYR_FROM : "rdIpbShyrFrom",
					SHYR_TO : "rdIpbShyrTo",
					SMT_FROM : "rdIpbSmtFrom",
					SMT_TO : "rdIpbSmtTo",
					GRDT_TGT_YN : "rdChkGrdtTgtYn",
					RE_ENTR_YN : "rdChkReEntrYn",
					BKG_PNT_FROM : "rdIpbBkgPntFrom",
					BKG_PNT_TO : "rdIpbBkgPntTo",
					BKG_TIME_FROM : "rdIpbBkgTimeFrom",
					BKG_TIME_TO : "rdIpbBkgTimeTo",
					DGR_CRS : "rdCbbDgrCsr"
				};
				
				// 리피트 detail ctrl : 컬럼 사이즈
				var moRdtails = {
					rdCbbRegFeeCatSa : 160,
					rdCbbRegFeeCatSp : 160,
					rdCbbRegFeeCatStud : 160,
					rdIpbShyrFrom : 80,
					rdIpbShyrTo : 70,
					rdIpbSmtFrom : 80,
					rdIpbSmtTo : 70,
					rdChkGrdtTgtYn : 100,
					rdChkReEntrYn : 100,
					rdIpbBkgPntFrom : 140,
					rdIpbBkgPntTo : 125,
					rdIpbBkgTimeFrom : 140,
					rdIpbBkgTimeTo : 125,
					rdCbbDgrCsr : 100
				};
				
				/**
				 * @desc  Header Import onLoad
				 * @return void
				 * @author Aeyoung Lee 2016-02-15
				 */
				moPage.onLoadImportDone_ImpTitle = function() {		
					doHeaderOnLoad();
				};
				
				/**
				 * @desc 온로드 실행
				 * @param 
				 * @return 
				 * @author Aeyoung Lee 2016-02-15
				 */
				moPage.onLoad = function() {
					//리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init("rptCrsCiiAmt");
					//검색조건 초기 설정
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", ["grpData"]);
					
					//리피트 동적컬럼 초기화
					doInitFldVisible();
					doOnLoad();
					
					util.Control.setFocus(app, "cbbCrsMenuItem");
				};
				
				/**
				 * @desc 조회 실행
				 * @param 
				 * @return 
				 * @author Aeyoung Lee 2016-02-15
				 */
				moPage.onClick_BtnSearch = function() {
					//작업영역 리피트 변경 내역 체크
					if(util.Grid.isModified(app, "", "CRM")){
						return false;
					}	
					
					doList(function(pbSuccess){
						if(pbSuccess){
							util.Msg.notify(app, "NLS.INF.M024");
							
						}	
					});	
				};
				
				/**
				 * @desc 신규 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-15
				 */		
				moPage.onClick_BtnNew = function() {
					doSetNewRow();
				};
				
				/**
				 * @desc 삭제 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-15
				 */	
				moPage.onClick_BtnDel = function() {
					util.Grid.deleteRow(app, "grdCrsCiiAmt");
					// 조건에 따라서 리피트 헤더명 변경
					page.doChangeColText();
				};
				
				/**
				 * @desc 작업취소 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-15
				 */	
				moPage.onClick_BtnRestore = function() {
					util.Grid.restoreRow(app, "grdCrsCiiAmt");
					// 조건에 따라서 리피트 헤더명 변경
					page.doChangeColText();
				};
				
				/**
				 * @desc 작업저장 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-15
				 */	
				moPage.onClick_BtnSave = function() {
					doSave();
					
				};
				
				/**
				 * @desc 온로드 실행
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016-02-15
				 */
				function doOnLoad(){
					doOnLoadImpNS("CRS");
					// 서브미션 실행 (실패시 cover page)
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, ["cbbCrsMenuItem"]);
							util.SelectCtl.selectItem(app, "cbbCrsMenuItem", 0);
						}
					}, true);
				};
				
				
				/**
				 * @desc  등록금기준금액을 조회한다
				 * @param {Function} poCallBackFunc 콜백정의
				 * @return void
				 * @author Aeyoung Lee 2016-02-15
				 */
				function doList(poCallBackFunc) {
					
					if(!util.validate(app, ["cbbYearImpNS", "cbbSmtImpNS", "cbbCrsMenuItem"])){
						return false;
					}
					
					util.DataMap.setValue(app, "dmReqKey", "strSchYearRcd", util.Control.getValue(app, "cbbYearImpNS"));
					util.DataMap.setValue(app, "dmReqKey", "strSmtRcd", util.Control.getValue(app, "cbbSmtImpNS"));
					util.DataMap.setValue(app, "dmReqKey", "YEAR", util.Control.getValue(app, "cbbYearImpNS"));
					util.DataMap.setValue(app, "dmReqKey", "SMT", util.Control.getValue(app, "cbbSmtImpNS"));
					
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess){
						if(pbSuccess){
							// 조건에 맞는 컬럼 showColumn 적용
							doChkVisibleFld();
							util.Control.redraw(app, "grdCrsCiiAmt");
							// 조건에 따라서 리피트 헤더명 변경
							doChangeColText();
							
							if(util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
						}
					}); 
				};
				
				/**
				 * @desc   조회시에 리피트 컬럼을 모두 안보이도록 설정
				 * @return  void
				 * @author Aeyoung Lee 2016-02-15
				 */
				function doInitFldVisible(){
					
					for (key in moFldNames){
						var vsRdColumn = moFldNames[key];
						util.Grid.hideColumn(app, "rptCrsCiiAmt",vsRdColumn);
					}
				};
				
				/**
				 * @desc   조건에 맞게 리피트의 showColumn 적용
				 * @return  void
				 * @author Aeyoung Lee 2016-02-15
				 */
				function doChkVisibleFld(){
					// 리피트 컬럼 초기화
					doInitFldVisible();
					
					var vaFldNm = new Array();
					var vaCondType = new Array();
					
					var vnNodeListSize = util.DataSet.getRowCount(app, "dsListCondFld");
					
					for ( var k = 1 ; k <= vnNodeListSize ; k++){
						var vsFldNm = util.DataSet.getValue(app, "dsListCondFld", "CD_PRP1", k);
						var vsCondType = util.DataSet.getValue(app, "dsListCondFld", "COND_TYPE_RCD", k);
						
						vaFldNm.push(vsFldNm);
						vaCondType.push(vsCondType);
					}
					
					doFldVisible(vaFldNm, vaCondType);
				};
				
				/**
				 * @desc   단일인지 멀티인지 조건에 맞게 보여질 컬럼 셋팅
				 * @return  void
				 * @author Aeyoung Lee 2016-02-15
				 */
				function doFldVisible(paFldNm, paCondType){
					
					maChangeCol = [];
					
					var doHideFld = function(psFldNm, pbChange){
						var vsRdColumn = moFldNames[psFldNm];
						var vnRdColumnSize = moRdtails[vsRdColumn];
						util.Grid.showColumn(app, "rptCrsCiiAmt", vsRdColumn , vnRdColumnSize);
						
						if(pbChange) maChangeCol.push(vsRdColumn);				
					}
					
					for(var m = 0, n = paFldNm.length; m < n; m++){
						
						var vsCondType = paCondType[m]; 
						var vsFldNm = paFldNm[m];
						
						for (key in moFldNames){	
							var msFldDtl = key;
							
							// 단일값
							if(vsCondType == "CR002SING"){
								if(msFldDtl == vsFldNm || msFldDtl == vsFldNm + "_FROM"){
									if(msFldDtl.indexOf("FROM") >= 0){
										doHideFld(msFldDtl, true);  
									}else doHideFld(msFldDtl);
								}
							// 범위값	
							}else if(vsCondType == "CR002RANG"){
								if(msFldDtl == vsFldNm || msFldDtl == vsFldNm + "_FROM" || msFldDtl == vsFldNm + "_TO"){
									doHideFld(msFldDtl);
								}
							}
						}
					}
				};
				
				/**
				 * @desc   조건에 따라서 리피트 헤더명 변경(FROM만 있는 경우 FROM 문구제거)
				 * @return  void
				 * @author Aeyoung Lee 2016-02-15
				 */
				function doChangeColText(){
					var vnSize = maChangeCol.length;
					var vsPreText, vsColId, vsHeaderColNm;
					
					for(var i = 0; i < vnSize; i++){
						vsColId = maChangeCol[i];
						vsHeaderColNm = "rhBtn" + vsColId.substring(5, vsColId.length);
						vsPreText = ExtControl.getTextValue(vsHeaderColNm);
						if(vsPreText){
							var vnCutIndex = vsPreText.indexOf("From");
							if(vnCutIndex <= 0) continue;
							vnCutIndex--; 
							ExtControl.setTextValue(vsHeaderColNm, vsPreText.substring(0, vnCutIndex));	
						}
					}
				};
				
				/**
				 * @desc  신규로우를 추가한다.
				 * @return void
				 * @author Aeyoung Lee 2016-02-15
				 */
				function doSetNewRow() {
					var vnMaxSerialNo = Number(moPage.doFindMaxSerialNoII()) + Number(1);
					var vsItemCd     = util.DataMap.getValue(app, "dmReqKey", "strItemCd");
					var vsSchYearRcd = util.DataMap.getValue(app, "dmReqKey", "strSchYearRcd");
					var vsSmtRcd     = util.DataMap.getValue(app, "dmReqKey", "strSmtRcd");
					
					//해당 리피트 insertRow 후 편집 시작할 컬럼 지정		
					var voNewRow = util.Grid.insertRow(app, "grdCrsCiiAmt", "rdIpbPri");	
					
					util.Grid.setCellValue(app, "grdCrsCiiAmt", "PRI"		 , 0			, voNewRow);
					util.Grid.setCellValue(app, "grdCrsCiiAmt", "SERIAL_NO"	 , vnMaxSerialNo, voNewRow);
					util.Grid.setCellValue(app, "grdCrsCiiAmt", "ITEM_CD"     , vsItemCd		, voNewRow);
					util.Grid.setCellValue(app, "grdCrsCiiAmt", "SCH_YEAR_RCD", vsSchYearRcd , voNewRow);
					util.Grid.setCellValue(app, "grdCrsCiiAmt", "SMT_RCD"     , vsSmtRcd		, voNewRow);
				};
				
				
				/**
				 * @desc  순번을 순차적으로 주기위해서 호출시점의 최대값을 구함
				 * @return vnMaxSerialNo 순번최대값
				 * @author Aeyoung Lee 2016-02-15
				 */
				function doFindMaxSerialNoII(){
					var vnMaxSerialNo = 1;
					var vnSize = util.DataSet.getRowCount(app, "dsRptCrsCiiAmt");
					if(vnSize != 0) {
						var voInstRow = null;
			      		var voMap = null;
						for(var i = 1; i <= vnSize; i++){
							var vnTemp = util.DataSet.getValue(app, "dsRptCrsCiiAmt", "SERIAL_NO", i);
							if(Number(vnTemp) > Number(vnMaxSerialNo)) vnMaxSerialNo = vnTemp;
						} 
					}else vnMaxSerialNo = 0;
					return vnMaxSerialNo;
				};
				
				/**
				 * @desc  등록금기준금액을 저장한다.
				 * @return void
				 * @author Aeyoung Lee 2016-02-15
				 */
				function doSave() {
					
					// 리피터 변경사항 체크
					if(!util.Grid.isModified(app, ["grdCrsCiiAmt"], "MSG")){
						return false;
					}
					
					//리피트 validation check
					if(!util.validate(app, "grdCrsCiiAmt")) return false;
					
					var vbSaved = false;
					
					if(doCheckSaveData()){
						//strCommand: save 
						util.Submit.send(app, "subSave", function(pbSuccess){
							if(pbSuccess){
								doList(function(pbListSuccess){
									if(pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
								});
							}
						});
					}
					
					return vbSaved;
				};
				
				/**
				 * @desc 저장하기 전에 체크사항 
				 * @return void
				 * @author Aeyoung Lee 2016-02-15
				 */
				function doCheckSaveData() {
					
					var vnRptCnt = util.Grid.getRowCount(app, "grdCrsCiiAmt");
					var vsMRowStatus;
					
					var vsDetailChilds = ExtRepeat.getRepChildIDList("rptCrsCiiAmt", "detail", "" , ",");
					var vaDetailColList = vsDetailChilds.split(",");
					var voMap = new Map();
						
					for(var k = 1, l = vnRptCnt; k <= l; k++){
						
						vsMRowStatus = util.Grid.getRowState(app, "grdCrsCiiAmt", k);
						if(vsMRowStatus == "delete") continue;
						
						//1. 기준값 중복체크 확인
						var vsTotValue = "";
						for(var i = 0, j = vaDetailColList.length; i < j; i++) {
							var vsColId = vaDetailColList[i];
							if(vsColId != "rdChkSelect" && vsColId != "rdOptUptStatus" && vsColId != "rdOptNo" && vsColId != "rdIpbAmt"){
								vsTotValue += (util.Grid.getCellValue(app, "grdCrsCiiAmt", vsColId, k) + ",");
							}	
						}
						
						if(k != 1 && voMap.get(vsTotValue) == "alreadY"){
							util.Msg.alert("NLS-CRS-M005");
							return false;
						}
						voMap.put(vsTotValue, "alreadY"); 
						
						//2. 화면에 보여지는 필드들이 모두 비었는지 확인
						if(vsMRowStatus == "insert" || vsMRowStatus == "update"){
							var vnCnt = 0;
							var vbPassed = false;	
							
							for (key in moFldNames){	
								
								var vnNodeListSize = util.DataSet.getRowCount(app, "dsListCondFld");
								for ( var m = 1 ; m <= vnNodeListSize ; m++){
									var vsFldNm = util.DataSet.getValue(app, "dsListCondFld", "CD_PRP1", m);
									
									if(key == vsFldNm){
										vnCnt++;
										var vsValue = util.Grid.getCellValue(app, "grdCrsCiiAmt", key, k);
										if(!ValueUtil.isNull(vsValue)){
											vbPassed = true;	
										}	
									}	
								}
							}
							
							if(vnCnt == 0) vbPassed = true;
							if(!vbPassed){
								util.Msg.alert("NLS-CRS-M053");
								return vbPassed;
							}	
						}
					}
					
					return true;
				};
				
				
				/**
				 * @desc   그리드의 값이 변경되었을때 각컬럼별 유효성 체크
				 * @param {String } psDiv 컬럼값
				 * @return void
				 * @author Aeyoung Lee 2016-02-15
				 */
				function doChkGrxValid(psDiv){
					
					var vnRowIdx = util.Grid.getIndex(app, "grdCrsCiiAmt");
					var vsChkValue = util.Grid.getCellValue(app, "grdCrsCiiAmt", psDiv, vnRowIdx);
					var vnFromIndex = psDiv.indexOf("FROM");
					var vnToIndex = psDiv.indexOf("TO");
					
					// 마이너스값 체크
					var doChkMinus = function(psValue){
						if(psValue < 0){
							util.Msg.alert("NLS-CRS-M014");
							util.Grid.setCellValue(app, "grdCrsCiiAmt", psDiv , "", vnRowIdx);
							return false;
						}
						return true;
					}
					
					// From값과 To값을 비교체크
					var modValue = function(psFromVal, psToVal){
						if(psFromVal > psToVal){
							util.Msg.alert("NLS-CRS-M001");
							util.Grid.setCellValue(app, "grdCrsCiiAmt", psDiv, "", vnRowIdx);
							return false;
						}
						return true;
					};
					
					// 우선순위, 금액
					if(psDiv == "PRI" || psDiv == "AMT"){
						if(!doChkMinus(vsChkValue)) return;
					}
					
					// From, To 가 속한 컬럼
					if(vnFromIndex >= 0 || vnToIndex >= 0){			
						if(!doChkMinus(vsChkValue)) return;
						var vsColCutId = null;
						
						//From이 들어있는 컬럼일경우	
						if(vnFromIndex >= 0){
							vsColCutId = psDiv.substring(0, vnFromIndex);
							var vsToId = vsColCutId + "TO";
							var vsToValue = util.Grid.getCellValue(app, "grdCrsCiiAmt", vsToId, vnRowIdx);
							// To값이 0이 아닌경우에만 체크..
							if(vsToValue != 0){
								if(!modValue(vsChkValue, vsToValue)) return;
							}	
						}else{
							// To가 들어있는 컬럼일경우
							vsColCutId = psDiv.substring(0, vnToIndex);
							var vsFromId = vsColCutId + "FROM";
							var vsFromValue = util.Grid.getCellValue(app, "grdCrsCiiAmt", vsFromId, vnRowIdx); 
							// From값이 0이 아닌경우에만 체크
							if(vsFromValue != 0){
								if(!modValue(vsFromValue, vsChkValue)) return;
							}	
						}
					}	
				};	
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsListSchYear");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsListDgrCsr");
			dataSet_2.parseData({
				"columns": [
					{"name": "UPD_DTHR"},
					{"name": "PRT_ORD"},
					{"name": "STD_YN"},
					{"name": "LAN_DIV_RCD"},
					{"name": "UPD_USER_ID"},
					{"name": "CD_NM"},
					{"name": "CRT_PGM_ID"},
					{"name": "UCD"},
					{"name": "UPD_PGM_ID"},
					{"name": "CD_LEN"},
					{"name": "CD_PRP1"},
					{"name": "ULAN_DIV_RCD"},
					{"name": "CD_PRP2"},
					{"name": "CD_PRP3"},
					{"name": "CRT_DTHR"},
					{"name": "CRT_USER_ID"},
					{"name": "CRT_IP_MAC"},
					{"name": "CD_DESC"},
					{"name": "UNIT_SYSTEM_RCD"},
					{"name": "EFFT_END_DT"},
					{"name": "CD_SHORT_NM"},
					{"name": "CD_CLS"},
					{"name": "CD"},
					{"name": "EFFT_ST_DT"},
					{"name": "UPD_IP_MAC"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsListItemCd");
			dataSet_3.parseData({
				"columns": [
					{"name": "ITEM_NM"},
					{"name": "ITEM_CD"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsListRegFeeCatSp");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsListEnrollRsnRcd");
			dataSet_5.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsListRegFeeCatStud");
			dataSet_6.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsListRegFeeCatSa");
			dataSet_7.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsListSmtCd");
			dataSet_8.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			
			var dataSet_9 = new cpr.data.DataSet("dsCrsCiiAmt");
			dataSet_9.parseData({
				"info": "CRS_CII_AMT@ITEM_CD,SCH_YEAR_RCD,SMT_RCD,SERIAL_NO",
				"columns": [
					{"name": "BKG_TIME_FROM"},
					{"name": "REG_FEE_CAT_STUD"},
					{"name": "SMT_TO"},
					{"name": "GRDT_TGT_YN"},
					{"name": "AMT"},
					{"name": "REG_FEE_CAT_SP"},
					{"name": "ITEM_CD"},
					{"name": "BKG_PNT_TO"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "PRI"},
					{"name": "BKG_PNT_FROM"},
					{"name": "SHYR_TO"},
					{"name": "RE_ENTR_YN"},
					{"name": "SMT_RCD"},
					{"name": "SMT_FROM"},
					{"name": "REG_FEE_CAT_SA"},
					{"name": "SERIAL_NO"},
					{"name": "DGR_CRS"},
					{"name": "SHYR_FROM"},
					{"name": "BKG_TIME_TO"}
				],
				"rows": []
			});
			app.register(dataSet_9);
			
			var dataSet_10 = new cpr.data.DataSet("dsListCondFld");
			dataSet_10.parseData({
				"columns": [
					{"name": "CD_PRP1"},
					{"name": "COND_RCD"},
					{"name": "COND_TYPE_RCD"},
					{"name": "CD_NM"},
					{"name": "ITEM_CD"}
				],
				"rows": []
			});
			app.register(dataSet_10);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strSchYearRcd",
						"dataType": "string"
					},
					{
						"name": "strSmtRcd",
						"dataType": "string"
					},
					{
						"name": "strItemCd",
						"dataType": "string"
					},
					{
						"name": "strSmtGrpRcd",
						"dataType": "string"
					},
					{
						"name": "strUnitSystem",
						"dataType": "string"
					},
					{
						"name": "YEAR",
						"dataType": "string"
					},
					{
						"name": "SMT",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "schYear",
						"dataType": "string"
					},
					{
						"name": "smt",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/crs/StdCrsCiiAmt/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataSet_5, false);
			submission_1.addResponseData(dataSet_6, false);
			submission_1.addResponseData(dataSet_7, false);
			submission_1.addResponseData(dataSet_8, false);
			submission_1.addResponseData(dataMap_2, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/crs/StdCrsCiiAmt/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_9, false);
			submission_2.addResponseData(dataSet_10, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/crs/StdCrsCiiAmt/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_9);
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optCrsItemCd");
				output_1.value = "";
				output_1.style.setClasses(["require"]);
				output_1.bind("value").toLanguage("UI-SCR-TUITIONITEM");
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "75px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbCrsMenuItem");
				comboBox_1.userAttr({"require": "Y"});
				comboBox_1.bind("fieldLabel").toExpression("#optCrsItemCd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strItemCd");
				(function(comboBox_1){
					comboBox_1.setItemSet(app.lookup("dsListItemCd"), {
						"label": "ITEM_NM",
						"value": "ITEM_CD"
					});
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "83px",
					"width": "140px",
					"height": "25px"
				});
				var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaYearSmt");
				cpr.core.App.load("app/crs/impCrsYearSmt", function(app) {
					if(app){
						embeddedApp_1.app = app;
					}
				});
				container.addChild(embeddedApp_1, {
					"top": "5px",
					"left": "233px",
					"width": "367px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "32px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-TUISTDMONLST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "310px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnNew");
				button_2.value = "";
				button_2.style.setClasses(["btn-new"]);
				button_2.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewClick == "function") {
					button_2.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "965px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnDel");
				button_3.value = "";
				button_3.style.setClasses(["btn-delete"]);
				button_3.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_3.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "1030px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnRestore");
				button_4.value = "";
				button_4.style.setClasses(["btn-restore"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_4.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "1095px",
					"width": "60px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button("btnSave");
				button_5.value = "";
				button_5.style.setClasses(["btn-save"]);
				button_5.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_5.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_5, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCrsCiiAmt");
				grid_1.init({
					"dataSet": app.lookup("dsCrsCiiAmt"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "75px"},
						{"width": "160px"},
						{"width": "160px"},
						{"width": "160px"},
						{"width": "100px"},
						{"width": "80px"},
						{"width": "70px"},
						{"width": "80px"},
						{"width": "70px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "140px"},
						{"width": "125px"},
						{"width": "140px"},
						{"width": "125px"},
						{"width": "130px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-PRI");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-REG_FEE_CAT_SA");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-REG_FEE_CAT_SP");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-REG_FEE_CAT_STUD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-DGPROC");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SHYR_FROM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SHYR_TO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SMT_FROM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SMT_TO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-GRDT_TGT_YN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-RE_ENTR_YN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-BKG_PNT_FROM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-BKG_PNT_TO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-BKG_TIME_FROM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-BKG_TIME_TO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-AMT");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_2 = new cpr.controls.Output();
										output_2.style.css({
											"text-align" : "center"
										});
										return output_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "PRI";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("gdIpbPri");
										numberEditor_1.spinButton = false;
										numberEditor_1.format = "9999999999";
										numberEditor_1.userAttr({"require": "Y"});
										numberEditor_1.style.css({
											"text-align" : "center"
										});
										numberEditor_1.bind("value").toDataColumn("PRI");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "REG_FEE_CAT_SA";
									cell.control = (function(){
										var comboBox_2 = new cpr.controls.ComboBox("gdCbbRegFeeCatSa");
										(function(comboBox_2){
											comboBox_2.setItemSet(app.lookup("dsListRegFeeCatSa"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_2);
										comboBox_2.bind("value").toDataColumn("REG_FEE_CAT_SA");
										return comboBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "REG_FEE_CAT_SP";
									cell.control = (function(){
										var comboBox_3 = new cpr.controls.ComboBox("gdCbbRegFeeCatSp");
										(function(comboBox_3){
											comboBox_3.setItemSet(app.lookup("dsListRegFeeCatSp"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_3);
										comboBox_3.bind("value").toDataColumn("REG_FEE_CAT_SP");
										return comboBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "REG_FEE_CAT_STUD";
									cell.control = (function(){
										var comboBox_4 = new cpr.controls.ComboBox("gdCbbRegFeeCatStud");
										(function(comboBox_4){
											comboBox_4.setItemSet(app.lookup("dsListRegFeeCatStud"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_4);
										comboBox_4.bind("value").toDataColumn("REG_FEE_CAT_STUD");
										return comboBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "DGR_CRS";
									cell.control = (function(){
										var comboBox_5 = new cpr.controls.ComboBox("gdCbbDgrCsr");
										(function(comboBox_5){
											comboBox_5.setItemSet(app.lookup("dsListDgrCsr"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_5);
										comboBox_5.bind("value").toDataColumn("DGR_CRS");
										return comboBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "SHYR_FROM";
									cell.control = (function(){
										var numberEditor_2 = new cpr.controls.NumberEditor("gdIpbShyrFrom");
										numberEditor_2.spinButton = false;
										numberEditor_2.format = "99";
										numberEditor_2.bind("value").toDataColumn("SHYR_FROM");
										return numberEditor_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "SHYR_TO";
									cell.control = (function(){
										var numberEditor_3 = new cpr.controls.NumberEditor("gdIpbShyrTo");
										numberEditor_3.spinButton = false;
										numberEditor_3.format = "99";
										numberEditor_3.bind("value").toDataColumn("SHYR_TO");
										return numberEditor_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "SMT_FROM";
									cell.control = (function(){
										var numberEditor_4 = new cpr.controls.NumberEditor("gdIpbSmtFrom");
										numberEditor_4.spinButton = false;
										numberEditor_4.format = "99";
										numberEditor_4.bind("value").toDataColumn("SMT_FROM");
										return numberEditor_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "SMT_TO";
									cell.control = (function(){
										var numberEditor_5 = new cpr.controls.NumberEditor("gdIpbSmtTo");
										numberEditor_5.spinButton = false;
										numberEditor_5.format = "99";
										numberEditor_5.bind("value").toDataColumn("SMT_TO");
										return numberEditor_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "GRDT_TGT_YN";
									cell.control = (function(){
										var checkBox_1 = new cpr.controls.CheckBox("gdChkGgdtTgtYn");
										checkBox_1.value = "";
										checkBox_1.trueValue = "Y";
										checkBox_1.falseValue = "";
										checkBox_1.text = "";
										checkBox_1.style.css({
											"text-align" : "center"
										});
										checkBox_1.bind("value").toDataColumn("GRDT_TGT_YN");
										return checkBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "RE_ENTR_YN";
									cell.control = (function(){
										var checkBox_2 = new cpr.controls.CheckBox("gdChkReEntrYn");
										checkBox_2.value = "";
										checkBox_2.trueValue = "Y";
										checkBox_2.falseValue = "";
										checkBox_2.text = "";
										checkBox_2.style.css({
											"text-align" : "center"
										});
										checkBox_2.bind("value").toDataColumn("RE_ENTR_YN");
										return checkBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "BKG_PNT_FROM";
									cell.control = (function(){
										var numberEditor_6 = new cpr.controls.NumberEditor("gdIpbBkgPntFrom");
										numberEditor_6.spinButton = false;
										numberEditor_6.format = "999";
										numberEditor_6.bind("value").toDataColumn("BKG_PNT_FROM");
										return numberEditor_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.columnName = "BKG_PNT_TO";
									cell.control = (function(){
										var numberEditor_7 = new cpr.controls.NumberEditor("gdIpbBkgPntTo");
										numberEditor_7.spinButton = false;
										numberEditor_7.format = "999";
										numberEditor_7.bind("value").toDataColumn("BKG_PNT_TO");
										return numberEditor_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.columnName = "BKG_TIME_FROM";
									cell.control = (function(){
										var numberEditor_8 = new cpr.controls.NumberEditor("gdIpbBkgTimeFrom");
										numberEditor_8.spinButton = false;
										numberEditor_8.format = "999";
										numberEditor_8.bind("value").toDataColumn("BKG_TIME_FROM");
										return numberEditor_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.columnName = "BKG_TIME_TO";
									cell.control = (function(){
										var numberEditor_9 = new cpr.controls.NumberEditor("gdIpbBkgTimeTo");
										numberEditor_9.spinButton = false;
										numberEditor_9.format = "999";
										numberEditor_9.bind("value").toDataColumn("BKG_TIME_TO");
										return numberEditor_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.columnName = "AMT";
									cell.control = (function(){
										var numberEditor_10 = new cpr.controls.NumberEditor("gdIpbAmt");
										numberEditor_10.spinButton = false;
										numberEditor_10.format = "9,990";
										numberEditor_10.userAttr({"require": "Y"});
										numberEditor_10.bind("value").toDataColumn("AMT");
										return numberEditor_10;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1215px",
					"height": "563px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "72px",
				"left": "5px",
				"width": "1225px",
				"height": "598px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "stdCrsCCiiAmt";
	cpr.core.Platform.INSTANCE.register(app);
})();
