/*
 * App URI: app/crs/stdCrsCDivPayType
 * Source Location: app/crs/stdCrsCDivPayType.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/crs/stdCrsCDivPayType", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCrsCDivPayType.xtm"/>
			
			var stdCrsCDivPayType = function() {
					
				var moPage = new Page();
				
				var msDivPayTypeCd = null;
				var msRefKey = null;
				var msLanDivRcd = null;
				var mnDivPayCnt = null;		//분납유형상세 저장시 체크
				
				var mbOnLoadFlag = false;
				
				moPage.TAB = {
					TYPE : "tpgDivPayType",
					LAN  : "tpgDivPayLan",
					DTL  : "tpgDivPayDtl"
				};
				
				var TAB_BTN = {
					tpgDivPayType : "tabBtnDivPayType",
					tpgDivPayLan  : "tabBtnDivPayLan",
					tpgDivPayDtl  : "tabBtnDivPayDtl"
				};	
				
				
				/**
				 * @desc  Header Import onLoad
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */
				moPage.onLoadImportDone_ImpTitle = function() {		
					doHeaderOnLoad();
				};
				
				/**
				 * @desc 온로드 실행
				 * @param 
				 * @return 
				 * @author Aeyoung Lee 2016-02-11
				 */
				moPage.onLoad = function() {
					//리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptDivPayType", "rptDivPayLan", "rptDivPayDtl"]);
					
					// 첫번째 탭으로 이동하도록
					util.Tab.setSelectedTabItem(app, "tabMain", TAB.TYPE);
					
					// 서브미션 실행 (실패시 cover page)
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							util.Msg.notify(app, "NLS.INF.M024");
							util.Control.redraw(app, "grdDivPayType");
						}
						
						mbOnLoadFlag = true;
					}, true);
				};
				
				/**
				 * @desc  탭변경이벤트
				 * @param {String} psCaseId 탭ID
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */
				function doTabChange(psCaseId) {
					
					if (!mbOnLoadFlag) return;
					
					var vsSelTabId = util.Tab.getSelectedId(app, "tabMain");
					
					// 현재 선택된 탭의 상태 체크
					switch (vsSelTabId) {
						// 분납유형
						case TAB.TYPE : {
							var vnSelIdx = util.Grid.getIndex(app, "grdDivPayType");
							
							if(!vnSelIdx) {
								// tab 이동 하지 않음
								ExtTab.setTabBtn("tabMain", TAB_BTN[vsSelTabId]);
								// "라인을 선택하세요." tab 이동 하지 않음
								util.Msg.alert("NLS-INF-M023");
								return false;
							}
							
							if(vnSelIdx) {
								msDivPayTypeCd = util.Grid.getCellValue(app, "grdDivPayType", "DIV_PAY_TYPE_CD", vnSelIdx);
								msRefKey = util.Grid.getCellValue(app, "grdDivPayType", "REF_KEY", vnSelIdx);
								msLanDivRcd = util.Grid.getCellValue(app, "grdDivPayType", "LAN_DIV_RCD", vnSelIdx);
								mnDivPayCnt = util.Grid.getCellValue(app, "grdDivPayType", "DIV_PAY_CNT", vnSelIdx);
							}
							
							util.DataMap.setValue(app, "dmReqKey", "strDivPayTypeCd", msDivPayTypeCd);
							util.DataMap.setValue(app, "dmReqKey", "strRefKey", msRefKey);
							
							// 리피터 변경사항 체크
							if(util.Grid.isModified(app, ["grdDivPayType"], "CRM")){
								
								// tab 이동 하지 않음
								ExtTab.setTabBtn("tabMain", TAB_BTN[vsSelTabId]);
								return false;
							}else{
								
								// 선택된 로우가 신규 로우일 경우 tab 이동 하지 않음 
								if (util.Grid.getRowState(app, "grdDivPayType") == cpr.data.tabledata.RowState.INSERTED) {
									util.Grid.restoreRow(app, "grdDivPayType");
									ExtTab.setTabBtn("tabMain", TAB_BTN[vsSelTabId]);
									return false;
								}
							}	
							
							break;
						}
						
						// 언어확장
						case TAB.LAN : {
							// 리피터 변경사항 체크
							if(util.Grid.isModified(app, ["grdDivPayLan"], "CRM")){
								// tab 이동 하지 않음
								ExtTab.setTabBtn("tabMain", TAB_BTN[vsSelTabId]);
								return false;
							}
							
							break;
						}
						
						// 세부
						case TAB.DTL : {
							// 리피터 변경사항 체크
							if(util.Grid.isModified(app, ["grdDivPayDtl"], "CRM")){
								// tab 이동 하지 않음
								ExtTab.setTabBtn("tabMain", TAB_BTN[vsSelTabId]);
								return false;
							}
							
							break;
						}
						
					}
					
					// 탭변경
					util.Tab.setSelectedTabItem(app, "tabMain", psCaseId);
					
					//탭변경 후 처리 로직
					switch (psCaseId) {
						// 분납유형
						case TAB.TYPE : {
							doListDivPay(function(pbSuccess) {
								// 조회 : "조회되었습니다." header 메세지 표시
								if(pbSuccess) util.Msg.notify(app, "NLS.INF.M024");
								
								var vsFindDivPayTypeCd = util.DataMap.getValue(app, "dmReqKey", "strDivPayTypeCd");
								util.Grid.selectRowByCondition(app, "grdDivPayType" , "/root/resList/rptDivPayType/row/DIV_PAY_TYPE_CD", "==", vsFindDivPayTypeCd, 0);
							});
							
							break;
						}
						// 언어
						case TAB.LAN : {
							doListDivPayLan(function(pbSuccess) {
								if(pbSuccess) util.Msg.notify(app, "NLS.INF.M024");
							});
							
							break;
						}
						// 세부
						case TAB.DTL : {
							doListDivPayDtl(function(pbSuccess) {
								if(pbSuccess) util.Msg.notify(app, "NLS.INF.M024");
							});
							
							break;
						}
					}
				}
				
				/**
				 * @desc 분납유형 조회 실행
				 * @param 
				 * @return 
				 * @author Aeyoung Lee 2016-02-11
				 */
				function doListDivPay(poCallBackFunc) {
					//strCommand: listDiv 
					util.Submit.send(app, "subListDivPayTp", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdDivPayType");
							
							// 조회 후 콜백함수 수행
							if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
						}
					}); 
				};
				
				/**
				 * @desc 분납유형언어 조회 실행
				 * @param 
				 * @return 
				 * @author Aeyoung Lee 2016-02-11
				 */
				function doListDivPayLan(poCallBackFunc) {
					//strCommand: listLan 
					util.Submit.send(app, "subListLan", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdDivPayLan");
							
							// 조회 후 콜백함수 수행
							if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
						}
					}); 
				};
				
				/**
				 * @desc 분납유형세부 조회 실행
				 * @param 
				 * @return 
				 * @author Aeyoung Lee 2016-02-11
				 */
				function doListDivPayDtl(poCallBackFunc) {
					//strCommand: listDtl 
					util.Submit.send(app, "subListDivPayDtl", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdDivPayDtl");
							
							// 조회 후 콜백함수 수행
							if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess); 
						}
					}); 
				};
					
				/**
				 * @desc   분납유형 리피트 변경 이벤트
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				function doAfterValueChangRptDivPayType(psDiv) {
					var vnRowIdx = util.Grid.getIndex(app, "grdDivPayType");
					var vsValue = util.Grid.getCellValue(app, "grdDivPayType", psDiv, vnRowIdx);
					var vnValue = null;
					
					// 폐기여부
					if(psDiv == "EXP_YN"){
						if (vsValue == "Y") {
							var vsCurrDate = util.DataMap.getValue(app, "dmCurrentDate", "CUT_DT");
							util.Grid.setCellValue(app, "grdDivPayType", "EXP_DT", vsCurrDate, vnRowIdx);
						} else {
							util.Grid.setCellValue(app, "grdDivPayType", "EXP_DT", "", vnRowIdx);	
						}
						
						// 폐기여부에 따른 폐기일 bind 처리
			//TO-BE: <ExtControl.refreshBind> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//			ExtControl.refreshBind("binRoDivPayTypeExpDt");
					
					// 분납횟수, 간격, 절사지리	
					}else if(psDiv == "DIV_PAY_CNT" || psDiv == "ITV_VAL" || psDiv == "RND_LOC"){
						vnValue = Number(vsValue);
						
						if(ValueUtil.isNull(vsValue)) return false;
						
						if(psDiv == "DIV_PAY_CNT" && vnValue < 2){
							util.Msg.alert("NLS-CRS-M019");	//분납횟수는 2이상이어야 합니다.
							util.Grid.setCellValue(app, "grdDivPayType", psDiv, "", vnRowIdx);	
							
							return false;	
							
						}else if(psDiv == "ITV_VAL" && (vnValue == 0 || vnValue < 0)){	
							util.Msg.alert("NLS-CRS-M006", [NLS.NSCR.ITVVAL]);
							util.Grid.setCellValue(app, "grdDivPayType", psDiv, "", vnRowIdx);	
							
							return false;
							
						}else if(psDiv == "RND_LOC" && (vnValue == 0 || vnValue < 0)){	
							util.Msg.alert("NLS-CRS-M006", [NLS.NSCR.RNDLOC]);	//절사자리는 0보다 큰 수만 허용됩니다.
							util.Grid.setCellValue(app, "grdDivPayType", psDiv, "", vnRowIdx);	
							
							return false;
						}
					}	
					
				};
				
				/**
				 * @desc 분납유형 신규 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnNewDivPayType = function() {
					//해당 리피트 insertRow 후 편집 시작할 컬럼 지정		
					var voNewRow = util.Grid.insertRow(app, "grdDivPayType", "rdIpbDivPayTypeCd");
					util.Grid.setCellValue(app, "grdDivPayType", "LAN_DIV_RCD" , util.getSystemLocale(), voNewRow);
				};
				
				/**
				 * @desc 분납유형 삭제 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnDeleteDivPayType = function() {
					util.Grid.deleteRow(app, "grdDivPayType");	
				};
				
				/**
				 * @desc 분납유형 작업취소 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnRestoreDivPayType = function() {
					util.Grid.restoreRow(app, "grdDivPayType");
				};
				
				/**
				 * @desc 뷴납유형 작업저장 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnSaveDivPayType = function() {
					// 리피터 변경사항 체크
					if(!util.Grid.isModified(app, ["grdDivPayType"], "MSG")){
						return false;
					}
					
					//리피트 validation check
					if(!util.validate(app, "grdDivPayType")) return false;
					
					var vnRpnCnt = util.Grid.getRowCount(app, "grdDivPayType");
					
					//데이터셋의 로우 중 폐기여부 체크돼있다면 폐기일자 입력했는지 체크
					for(var i = 1; i<vnRpnCnt+1; i++){
						
						var vsExpYnItem = util.Grid.getCellValue(app, "grdDivPayType", "EXP_YN", i);
						var vsExpDtItem = util.Grid.getCellValue(app, "grdDivPayType", "EXP_DT", i); 
						if(vsExpYnItem == "Y" && ValueUtil.isNull(vsExpDtItem)){
							util.Msg.alert("NLS-WRN-M003", [NLS.NSCR.EXPDT]);
							ExtRepeat.setColFocus("rptDivPayType", i, "rdDipExpDtType");
							return false;	
						}else if(vsExpYnItem != "Y" && !ValueUtil.isNull(vsExpDtItem)){
							util.Grid.setCellValue(app, "grdDivPayType", "EXP_DT", "", i);	
						}	
					}	
						
					//strCommand: saveDiv 
					util.Submit.send(app, "subSaveDivPayTp", function(pbSuccess){
						if(pbSuccess){
							doListDivPay(function(pbListSuccess){
								if(pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
							});
						}
					});
				};
				
				
				/**
				 * @desc 뷴납유형언어 신규 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnNewItemLan = function() {
					
					//해당 리피트 insertRow 	
					var vnNewRow = util.Grid.insertRow(app, "grdDivPayLan");
					
					var vsDivPayTypeCd = util.DataMap.getValue(app, "dmReqKey", "strDivPayTypeCd");
					var vsRefKey = util.DataMap.getValue(app, "dmReqKey", "strRefKey");
					
					if(ValueUtil.isNull(vsRefKey)){
						//strCommand: getNewRefKey 
						util.Submit.send(app, "subRefKey", function(pbSuccess){
							if(pbSuccess){
								vsRefKey = util.DataMap.getValue(app, "dmReqKey", "strRefKey");
								
								util.Grid.setCellValue(app, "grdDivPayLan", "DIV_PAY_TYPE_CD", vsDivPayTypeCd, vnNewRow);
								util.Grid.setCellValue(app, "grdDivPayLan", "REF_KEY", vsRefKey, vnNewRow);
								ExtRepeat.setColFocus("rptDivPayLan", vnNewRow, "rdCbbLanDivRcdLan");
							}
						});
					}else{
						util.Grid.setCellValue(app, "grdDivPayLan", "DIV_PAY_TYPE_CD", vsDivPayTypeCd, vnNewRow);
						util.Grid.setCellValue(app, "grdDivPayLan", "REF_KEY", vsRefKey, vnNewRow);
						ExtRepeat.setColFocus("rptDivPayLan", vnNewRow, "rdCbbLanDivRcdLan");
					}
				};
				
				/**
				 * @desc 뷴납유형언어 삭제 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnDeleteItemLan = function() {
					
					// 선택된 로우를 가져옴
					var vsPanelCheckIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdDivPayLan");
					var voPanelChk;
					
					if(String(vsPanelCheckIdx).indexOf(",") != -1){
						voPanelChk = vsPanelCheckIdx.split(",");
					}else{
						voPanelChk = new Array();
						voPanelChk[0] = vsPanelCheckIdx;
					}	
					
					// 지우려고 하는 row가 main table에서 default LAN_DIV_RCD 과 동일하면 삭제할 수 없음
					// new를 지우려 하는 경우는 가능함
					for(var i = voPanelChk.length - 1; i >= 0; i--) {
						var vsLanDivRcd = util.Grid.getCellValue(app, "grdDivPayLan", "LAN_DIV_RCD", voPanelChk[i]);
						var vsUptStatus = util.Grid.getRowState(app, "grdDivPayLan", voPanelChk[i]); 
						
						if (msLanDivRcd == vsLanDivRcd && vsUptStatus != "insert") {
							util.Msg.alert("NLS-WRN-M010");
							return false;
						}
					}
					
					util.Grid.deleteRow(app, "grdDivPayLan");
				};
				
				/**
				 * @desc 뷴납유형언어 작업취소 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnRestoreItemLan = function() {
					util.Grid.restoreRow(app, "grdDivPayLan");
				};
				
				/**
				 * @desc 뷴납유형언어 작업저장 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnSaveItemLan = function() {
					// 리피터 변경사항 체크
					if(!util.Grid.isModified(app, ["grdDivPayLan"], "MSG")){
						return false;
					}
					
					//리피트 validation check
					if(!util.validate(app, "grdDivPayLan")) return false;
						
					//strCommand: saveLan 
					util.Submit.send(app, "subSaveLan", function(pbSuccess){
						if(pbSuccess){
							doListDivPayLan(function(pbListSuccess){
								if(pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
							});
						}
					});
				};
				
				/**
				 * @desc   분납유형세부 리피트 변경 이벤트
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				function doAfterValueChangRptDivPayDtl(psDiv) {
					var vnRowIdx = util.Grid.getIndex(app, "grdDivPayDtl");
					var vsValue = util.Grid.getCellValue(app, "grdDivPayDtl", psDiv, vnRowIdx);
					var vnValue = null;
					
					// 분납차수, 비율분자, 비율분모
					if(psDiv == "DIV_PAY_SEQ" || psDiv == "RATE_NUR" || psDiv == "RATE_DEN"){
						vnValue = Number(vsValue);
						
						if(ValueUtil.isNull(vsValue)) return false;
						
						if(psDiv == "DIV_PAY_SEQ"){
							if(vnValue > mnDivPayCnt){
								util.Msg.alert("NLS-CRS-M012", [mnDivPayCnt]);
								util.Grid.setCellValue(app, "grdDivPayDtl", psDiv, "", vnRowIdx);	
								
								return false;
							} else if (vnValue == 0 || vnValue < 0) {	//분납차수
								util.Msg.alert("NLS-CRS-M006", [NLS.NSCR.DIVPAYSEQ]);	//분납차수는 0보다 큰 수만 허용됩니다.				
								util.Grid.setCellValue(app, "grdDivPayDtl", psDiv, "", vnRowIdx);	
								
								return false;  
							}
							
						}else if(psDiv == "RATE_NUR"){	
							if(vnValue == 0){
								util.Msg.alert("NLS-CRS-M017");	//분자값은 0보다 큰 수만 허용됩니다.
								util.Grid.setCellValue(app, "grdDivPayDtl", psDiv, "", vnRowIdx);	
								
								return false;
							} else if(Number(vnValue)<0){
								util.Msg.alert("NLS-CRS-M014");	//음수는 입력할 수 없습니다.
								util.Grid.setCellValue(app, "grdDivPayDtl", psDiv, "", vnRowIdx);	
								
								return false;
							}
							
						}else if(psDiv == "RATE_DEN"){	
							if(vnValue == 0){
								util.Msg.alert("NLS-CRS-M009");	//분모값은 0보다 큰 수만 허용됩니다.
								util.Grid.setCellValue(app, "grdDivPayDtl", psDiv, "", vnRowIdx);	
								
								return false;
							} else if(Number(vnValue)<0){
								util.Msg.alert("NLS-CRS-M014");	//음수는 입력할 수 없습니다.
								util.Grid.setCellValue(app, "grdDivPayDtl", psDiv, "", vnRowIdx);	
								
								return false;
							}
						}
						
						
						if(psDiv == "RATE_NUR" || psDiv == "RATE_DEN"){
							var vnRateNur = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "RATE_NUR", vnRowIdx));
							var vnRateDen = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "RATE_DEN", vnRowIdx));
							if((vnRateDen != 0) && (vnRateNur > vnRateDen)) {
								util.Msg.alert("NLS-CRS-M010");	//분자는 분모보다 클 수 없습니다.
								util.Grid.setCellValue(app, "grdDivPayDtl", psDiv, "", vnRowIdx);	
								
								return false;
							}
							
						}	
					}	
					
				};
				
				/**
				 * @desc 분납유형세부 신규 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnNewDtl = function() {
					//해당 리피트 insertRow 	
					var vnNewRow = util.Grid.insertRow(app, "grdDivPayDtl");
					
					var vsDivPayTypeCd = util.DataMap.getValue(app, "dmReqKey", "strDivPayTypeCd");
					var vsRefKey = util.DataMap.getValue(app, "dmReqKey", "strRefKey");
					
					util.Grid.setCellValue(app, "grdDivPayDtl", "DIV_PAY_TYPE_CD", vsDivPayTypeCd, vnNewRow);
					ExtRepeat.setColFocus("rptDivPayDtl", vnNewRow, "rdIpbDivPaySeqDtl");
				};
				
				/**
				 * @desc 분납유형세부 삭제 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnDeleteDtl = function() {
					util.Grid.deleteRow(app, "grdDivPayDtl");
				};
				
				/**
				 * @desc 분납유형세부 작업취소 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnRestoreDtl = function() {
					util.Grid.restoreRow(app, "grdDivPayDtl");
				};
				
				/**
				 * @desc 분납유형세부 작업저장 click event
				 * @return void
				 * @author Aeyoung Lee 2016-02-11
				 */	
				moPage.onClick_BtnSaveDtl = function() {
					// 리피터 변경사항 체크
					if(!util.Grid.isModified(app, ["grdDivPayDtl"], "MSG")){
						return false;
					}
					
					//리피트 validation check
					if(!util.validate(app, "grdDivPayDtl")) return false;
					
					//분납차수 누락여부, 등록금항목별 비율분수의 합이 1인지 여부, 같은 차수에 중복등록금항복 입력여부 check
					if(!doCheckDtlData()) return false;
						
					//strCommand: saveDtl 
					util.Submit.send(app, "subSaveDivPayDtl", function(pbSuccess){
						if(pbSuccess){
							doListDivPayDtl(function(pbListSuccess){
								if(pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
							});
						}
					});
				};
				
				/**
				 * @desc 분납차수 누락여부, 등록금항목별 비율분수의 합이 1인지 여부, 같은 차수에 중복등록금항복 입력여부 check
				 * @return void
				 * @author Aeyoung Lee 2016-02-12
				 */	
				function doCheckDtlData() {
					
					var vnRowCnt = util.Grid.getRowCount(app, "grdDivPayDtl");
					var vaDivPaySeqTmp = [];   
					var vnRateSum = 0;
					var vnCurrSeq;
					var vsItemCd;
					var vnRateNur;
					var vnRateDen;
					var vnNextItemCd;
					var vnNextSeq;
					var vnNextRateNur;
					var vnNextRateDen;
					var vbPass1 = true;
					var vbPass2 = true;
					var vbPass3 = true;
					
					for(var i=1; i<=vnRowCnt; i++) {
						
						if(util.Grid.getRowState(app, "grdDivPayDtl", i) == cpr.data.tabledata.RowState.DELETED) continue;
						
						vsItemCd  = util.Grid.getCellValue(app, "grdDivPayDtl", "ITEM_CD", i);
						vnCurrSeq = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "DIV_PAY_SEQ", i));
						vnRateNur = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "RATE_NUR", i)); 
						vnRateDen = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "RATE_DEN", i));  
						
						//항목별 비율분자/분모 합계
						vnRateSum = Number(vnRateNur) / Number(vnRateDen);
						
						vaDivPaySeqTmp.push(vnCurrSeq);
						
						for(var j=1; j<=vnRowCnt; j++){
							
							if(util.Grid.getRowState(app, "grdDivPayDtl", j) == cpr.data.tabledata.RowState.DELETED) continue;
							if(i==j) continue;
							
							vnNextItemCd  = util.Grid.getCellValue(app, "grdDivPayDtl", "ITEM_CD", j);
							vnNextSeq 	  = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "DIV_PAY_SEQ", j)); 
							vnNextRateNur = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "RATE_NUR", j)); 
							vnNextRateDen = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "RATE_DEN", j)); 
							
							//한차수에 동일한 항목코드 존재하는지 체크
							if(vnNextItemCd==vsItemCd && vnNextSeq==vnCurrSeq){
								vbPass2 = false;
							}
							
							//동일항목의 비율분자/분모 합
							if(vsItemCd == vnNextItemCd){	
								vnRateSum = vnRateSum + (vnNextRateNur / vnNextRateDen);
							}
						}
						
						//항목별 비율분자/분모의 총계를 더하여 합이 1인지 체크
						if(vnRateSum != 1) {
							vbPass3 = false;
						}
						vnRateSum = 0;
					}
					
					var vnTmpLength = vaDivPaySeqTmp.length;
					
					// 분납차수가 순차적으로 입력되었는지 확인
					if(vnTmpLength > 0){
						
						// 분납차수 소트
						vaDivPaySeqTmp.sort();
						
						for(var k=0; k<=vnTmpLength; k++) {
							
							vnCurrSeq = vaDivPaySeqTmp[k];
							vnNextSeq = vaDivPaySeqTmp[k+1];
							
							//분납차수가 처음에 1로 시작하는지 체크
							if(k == 0 && vnCurrSeq != 1){
								vbPass1 = false;
								break;
							}	
							
							//마지막 분납차수가 분납회수와 동일한지 체크
							if(k == (vnTmpLength-1) && mnDivPayCnt != vnCurrSeq){
								vbPass1 = false;
								break;
							}	
							
							//다음 숫자가 없는 경우 break
							if(ValueUtil.isNull(vnNextSeq)) break;
							
							//분납차수가 중간에 빈 것이 있는지 체크
							if(!((vnNextSeq-vnCurrSeq==1) || (vnNextSeq-vnCurrSeq==0))){
								vbPass1 = false;
								break;
								
							}
						}
					}
					
					if(!vbPass1){
						 util.Msg.alert("NLS-CRS-M012", [mnDivPayCnt]);
						return false;
					}	
					
					if(!vbPass2){
						 util.Msg.alert("NLS-CRS-M072");
						return false;
					}	
					
					if(!vbPass3){
						 util.Msg.alert("NLS-CRS-M015");
						return false;
					}	
					
					return true;
				};	
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsListItemCd");
			dataSet_1.parseData({
				"columns": [
					{"name": "ITEM_NM"},
					{"name": "ITEM_CD"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsListBlncAddMethodRcd");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsListLanDivRcd");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsListItvTypeRcd");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsDivPayType");
			dataSet_5.parseData({
				"info": "CRS_DIV_PAY_TYPE@DIV_PAY_TYPE_CD",
				"columns": [
					{"name": "DATA_FLAG"},
					{"name": "DIV_PAY_TYPE_CD"},
					{"name": "UPD_DTHR"},
					{"name": "CRT_DTHR"},
					{"name": "CRT_IP_MAC"},
					{"name": "CRT_USER_ID"},
					{"name": "LAN_DIV_RCD"},
					{"name": "EXP_YN"},
					{"name": "EXP_DT"},
					{"name": "REF_KEY"},
					{"name": "DIV_PAY_TYPE_NM"},
					{"name": "DIV_PAY_CNT"},
					{"name": "REMARK"},
					{"name": "ITV_TYPE_RCD"},
					{"name": "UPD_USER_ID"},
					{"name": "RND_LOC"},
					{"name": "ITV_VAL"},
					{"name": "CRT_PGM_ID"},
					{"name": "UPD_PGM_ID"},
					{"name": "BLNC_ADD_METHOD_RCD"},
					{"name": "UPD_IP_MAC"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsDivPayLan");
			dataSet_6.parseData({
				"info": "CRS_DIV_PAY_TYPE_LAN@REF_KEY,DIV_PAY_TYPE_CD,LAN_DIV_RCD",
				"columns": [
					{"name": "DIV_PAY_TYPE_CD"},
					{"name": "UPD_DTHR"},
					{"name": "CRT_DTHR"},
					{"name": "LAN_DIV_RCD"},
					{"name": "CRT_USER_ID"},
					{"name": "CRT_IP_MAC"},
					{"name": "REF_KEY"},
					{"name": "DIV_PAY_TYPE_NM"},
					{"name": "UPD_USER_ID"},
					{"name": "CRT_PGM_ID"},
					{"name": "UPD_PGM_ID"},
					{"name": "UPD_IP_MAC"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsDivPayDtl");
			dataSet_7.parseData({
				"info": "CRS_DIV_PAY_TYPE_DTL@DIV_PAY_TYPE_CD,DIV_PAY_SEQ,ITEM_CD",
				"columns": [
					{"name": "DIV_PAY_TYPE_CD"},
					{"name": "UPD_DTHR"},
					{"name": "CRT_DTHR"},
					{"name": "CRT_IP_MAC"},
					{"name": "CRT_USER_ID"},
					{"name": "DIV_PAY_TYPE_NM"},
					{"name": "RATE_NUR"},
					{"name": "ITEM_CD"},
					{"name": "UPD_USER_ID"},
					{"name": "RATE_DEN"},
					{"name": "CRT_PGM_ID"},
					{"name": "UPD_PGM_ID"},
					{"name": "UPD_IP_MAC"},
					{"name": "DIV_PAY_SEQ"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strDivPayTypeCd",
						"dataType": "string"
					},
					{
						"name": "strRefKey",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmCurrentDate");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "BEF_DT",
						"dataType": "string"
					},
					{
						"name": "CUT_DT",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_3.parseData({
				"columns" : [{
					"name": "strDivPayCnt",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/crs/StdCrsDivPayType/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataMap_2, false);
			submission_1.addResponseData(dataSet_5, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subListDivPayTp");
			submission_2.action = "/crs/StdCrsDivPayType/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addResponseData(dataSet_5, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subListLan");
			submission_3.action = "/crs/StdCrsDivPayType/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_1);
			submission_3.addResponseData(dataSet_6, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subListDivPayDtl");
			submission_4.action = "/crs/StdCrsDivPayType/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_1);
			submission_4.addResponseData(dataSet_7, false);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subSaveDivPayTp");
			submission_5.action = "/crs/StdCrsDivPayType/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataSet_5);
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("subSaveLan");
			submission_6.action = "/crs/StdCrsDivPayType/";
			submission_6.mediaType = "application/x-www-form-urlencoded";
			submission_6.addRequestData(dataSet_6);
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("subSaveDivPayDtl");
			submission_7.action = "/crs/StdCrsDivPayType/";
			submission_7.mediaType = "application/x-www-form-urlencoded";
			submission_7.addRequestData(dataSet_7);
			app.register(submission_7);
			
			var submission_8 = new cpr.protocols.Submission("subRefKey");
			submission_8.action = "/crs/StdCrsDivPayType/";
			submission_8.mediaType = "application/x-www-form-urlencoded";
			submission_8.addRequestData(dataMap_1);
			submission_8.addResponseData(dataMap_1, false);
			app.register(submission_8);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var tabFolder_1 = new cpr.controls.TabFolder("tabMain");
				
				var tabItem_1 = (function(tabFolder){
					var tabItem_1 = new cpr.controls.TabItem();
					tabItem_1.text = "tab1";
					tabItem_1.name = "tpgDivPayType";
					var group_2 = new cpr.controls.Container("grptpgDivPayType");
					// Layout
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.topMargin = "0px";
					formLayout_1.rightMargin = "0px";
					formLayout_1.bottomMargin = "0px";
					formLayout_1.leftMargin = "0px";
					formLayout_1.horizontalSpacing = "0px";
					formLayout_1.verticalSpacing = "0px";
					formLayout_1.setColumns(["1fr"]);
					formLayout_1.setRows(["1fr"]);
					group_2.setLayout(formLayout_1);
					(function(container){
						var button_1 = new cpr.controls.Button("btnSaveDivPayType");
						button_1.value = "";
						button_1.style.setClasses(["btn-save"]);
						button_1.bind("value").toLanguage("UI-SCR-WRKSAVE");
						if(typeof onBtnSaveDivPayTypeClick == "function") {
							button_1.addEventListener("click", onBtnSaveDivPayTypeClick);
						}
						container.addChild(button_1, {
							"top": "5px",
							"left": "1150px",
							"width": "60px",
							"height": "25px"
						});
						var button_2 = new cpr.controls.Button("btnRestoreDivPayType");
						button_2.value = "";
						button_2.style.setClasses(["btn-restore"]);
						button_2.bind("value").toLanguage("UI-SCR-WRKCANCL");
						if(typeof onBtnRestoreDivPayTypeClick == "function") {
							button_2.addEventListener("click", onBtnRestoreDivPayTypeClick);
						}
						container.addChild(button_2, {
							"top": "5px",
							"left": "1085px",
							"width": "60px",
							"height": "25px"
						});
						var button_3 = new cpr.controls.Button("btnDeleteDivPayType");
						button_3.value = "";
						button_3.style.setClasses(["btn-delete"]);
						button_3.bind("value").toLanguage("UI-SCR-DELETE");
						if(typeof onBtnDeleteDivPayTypeClick == "function") {
							button_3.addEventListener("click", onBtnDeleteDivPayTypeClick);
						}
						container.addChild(button_3, {
							"top": "5px",
							"left": "1020px",
							"width": "60px",
							"height": "25px"
						});
						var button_4 = new cpr.controls.Button("btnNewDivPayType");
						button_4.value = "";
						button_4.style.setClasses(["btn-new"]);
						button_4.bind("value").toLanguage("UI-SCR-NEW");
						if(typeof onBtnNewDivPayTypeClick == "function") {
							button_4.addEventListener("click", onBtnNewDivPayTypeClick);
						}
						container.addChild(button_4, {
							"top": "5px",
							"left": "955px",
							"width": "60px",
							"height": "25px"
						});
						var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdDivPayType");
						grid_1.init({
							"dataSet": app.lookup("dsDivPayType"),
							"columns": [
								{"width": "25px"},
								{"width": "25px"},
								{"width": "40px"},
								{"width": "137px"},
								{"width": "172px"},
								{"width": "80px"},
								{"width": "98px"},
								{"width": "73px"},
								{"width": "75px"},
								{"width": "121px"},
								{"width": "72px"},
								{"width": "104px"},
								{"width": "185px"}
							],
							"header": {
								"rows": [{"height": "27px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.columnType = "checkbox";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.text = "F";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.text = "No";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-DB-DIV_PAY_TYPE_CD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-DB-DIV_PAY_TYPE_NM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-DB-DIV_PAY_CNT");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-SCR-INTERTYPE");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-DB-ITV_VAL");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-DB-RND_LOC");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-SCR-BALADDWAY");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-EXP_YN");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-EXP_DT");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-GLS-REMARK");
										}
									}
								]
							},
							"detail": {
								"rows": [{"height": "25px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.columnType = "checkbox";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.control = (function(){
												var output_1 = new cpr.controls.Output();
												output_1.style.css({
													"text-align" : "center"
												});
												return output_1;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.columnType = "rowindex";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.columnName = "DIV_PAY_TYPE_CD";
											cell.control = (function(){
												var inputBox_1 = new cpr.controls.InputBox("gdIpbDivPayTypeCd");
												inputBox_1.maxLength = 10;
												inputBox_1.userAttr({"require": "Y"});
												inputBox_1.style.css({
													"text-align" : "center"
												});
												inputBox_1.bind("value").toDataColumn("DIV_PAY_TYPE_CD");
												return inputBox_1;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.columnName = "DIV_PAY_TYPE_NM";
											cell.control = (function(){
												var inputBox_2 = new cpr.controls.InputBox("gdIptDivPayTypeNm");
												inputBox_2.maxLength = 100;
												inputBox_2.userAttr({"require": "Y"});
												inputBox_2.bind("value").toDataColumn("DIV_PAY_TYPE_NM");
												return inputBox_2;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.columnName = "DIV_PAY_CNT";
											cell.control = (function(){
												var numberEditor_1 = new cpr.controls.NumberEditor("gdIptDivPayCnt");
												numberEditor_1.spinButton = false;
												numberEditor_1.format = "99";
												numberEditor_1.userAttr({"require": "Y"});
												numberEditor_1.bind("value").toDataColumn("DIV_PAY_CNT");
												return numberEditor_1;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.columnName = "ITV_TYPE_RCD";
											cell.control = (function(){
												var comboBox_1 = new cpr.controls.ComboBox("gdCbbItvTypeRcd");
												comboBox_1.userAttr({"require": "Y"});
												(function(comboBox_1){
													comboBox_1.addItem(new cpr.controls.Item("선택", ""));
													comboBox_1.setItemSet(app.lookup("dsListItvTypeRcd"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_1);
												comboBox_1.bind("value").toDataColumn("ITV_TYPE_RCD");
												return comboBox_1;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.columnName = "ITV_VAL";
											cell.control = (function(){
												var numberEditor_2 = new cpr.controls.NumberEditor("gdIptItvVal");
												numberEditor_2.spinButton = false;
												numberEditor_2.format = "999";
												numberEditor_2.userAttr({"require": "Y"});
												numberEditor_2.bind("value").toDataColumn("ITV_VAL");
												return numberEditor_2;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.columnName = "RND_LOC";
											cell.control = (function(){
												var numberEditor_3 = new cpr.controls.NumberEditor("gdIptRndLoc");
												numberEditor_3.spinButton = false;
												numberEditor_3.format = "99";
												numberEditor_3.userAttr({"require": "Y"});
												numberEditor_3.bind("value").toDataColumn("RND_LOC");
												return numberEditor_3;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.columnName = "BLNC_ADD_METHOD_RCD";
											cell.control = (function(){
												var comboBox_2 = new cpr.controls.ComboBox("gdCbbBlncAddMethodRcd");
												comboBox_2.userAttr({"require": "Y"});
												(function(comboBox_2){
													comboBox_2.addItem(new cpr.controls.Item("선택", ""));
													comboBox_2.setItemSet(app.lookup("dsListBlncAddMethodRcd"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_2);
												comboBox_2.bind("value").toDataColumn("BLNC_ADD_METHOD_RCD");
												return comboBox_2;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.columnName = "EXP_YN";
											cell.control = (function(){
												var checkBox_1 = new cpr.controls.CheckBox("gdChkExpYnType");
												checkBox_1.value = "";
												checkBox_1.trueValue = "Y";
												checkBox_1.falseValue = "";
												checkBox_1.text = "";
												checkBox_1.style.css({
													"text-align" : "center"
												});
												checkBox_1.bind("value").toDataColumn("EXP_YN");
												return checkBox_1;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.columnName = "EXP_DT";
											cell.control = (function(){
												var dateInput_1 = new cpr.controls.DateInput("gdDipExpDtType");
												dateInput_1.style.css({
													"text-align" : "center"
												});
												dateInput_1.bind("value").toDataColumn("EXP_DT");
												return dateInput_1;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.columnName = "REMARK";
											cell.control = (function(){
												var inputBox_3 = new cpr.controls.InputBox("gdIpbRemarkType");
												inputBox_3.maxLength = 1000;
												inputBox_3.bind("value").toDataColumn("REMARK");
												return inputBox_3;
											})();
										}
									}
								]
							}
						});
						if(typeof onGrdDivPayTypeSelectionChange == "function") {
							grid_1.addEventListener("selection-change", onGrdDivPayTypeSelectionChange);
						}
						container.addChild(grid_1, {
							"top": "30px",
							"left": "5px",
							"width": "1205px",
							"height": "565px"
						});
						var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
						userDefinedControl_2.bind("title").toLanguage("UI-SCR-PAYTYPELST");
						container.addChild(userDefinedControl_2, {
							"top": "5px",
							"left": "5px",
							"width": "290px",
							"height": "25px"
						});
					})(group_2);
					tabItem_1.content = group_2;
					return tabItem_1;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_1);
				
				var tabItem_2 = (function(tabFolder){
					var tabItem_2 = new cpr.controls.TabItem();
					tabItem_2.text = "tab1";
					tabItem_2.name = "tpgDivPayLan";
					var group_3 = new cpr.controls.Container("grptpgDivPayLan");
					// Layout
					var formLayout_2 = new cpr.controls.layouts.FormLayout();
					formLayout_2.topMargin = "0px";
					formLayout_2.rightMargin = "0px";
					formLayout_2.bottomMargin = "0px";
					formLayout_2.leftMargin = "0px";
					formLayout_2.horizontalSpacing = "0px";
					formLayout_2.verticalSpacing = "0px";
					formLayout_2.setColumns(["1fr"]);
					formLayout_2.setRows(["1fr"]);
					group_3.setLayout(formLayout_2);
					(function(container){
						var userDefinedControl_3 = linker.userDefinedControl_3 = new udc.com.comTitle();
						userDefinedControl_3.bind("title").toLanguage("UI-SCR-PAYTYPLANLST");
						container.addChild(userDefinedControl_3, {
							"top": "5px",
							"left": "5px",
							"width": "265px",
							"height": "25px"
						});
						var grid_2 = linker.grid_2 = new cpr.controls.Grid("grdDivPayLan");
						grid_2.init({
							"dataSet": app.lookup("dsDivPayLan"),
							"columns": [
								{"width": "25px"},
								{"width": "25px"},
								{"width": "40px"},
								{"width": "160px"},
								{"width": "168px"},
								{"width": "281px"}
							],
							"header": {
								"rows": [{"height": "27px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.columnType = "checkbox";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.text = "F";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.text = "No";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-DB-DIV_PAY_TYPE_CD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-DB-LAN_DIV_RCD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-DB-DIV_PAY_TYPE_NM");
										}
									}
								]
							},
							"detail": {
								"rows": [{"height": "25px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.columnType = "checkbox";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.control = (function(){
												var output_2 = new cpr.controls.Output();
												output_2.style.css({
													"text-align" : "center"
												});
												return output_2;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.columnType = "rowindex";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.columnName = "DIV_PAY_TYPE_CD";
											cell.control = (function(){
												var inputBox_4 = new cpr.controls.InputBox("gdIpbDivPayTypeCdLan");
												inputBox_4.readOnly = true;
												inputBox_4.maxLength = 10;
												inputBox_4.style.css({
													"text-align" : "center"
												});
												inputBox_4.bind("value").toDataColumn("DIV_PAY_TYPE_CD");
												return inputBox_4;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.columnName = "LAN_DIV_RCD";
											cell.control = (function(){
												var comboBox_3 = new cpr.controls.ComboBox("gdCbbLanDivRcdLan");
												comboBox_3.userAttr({"require": "Y"});
												(function(comboBox_3){
													comboBox_3.addItem(new cpr.controls.Item("선택", ""));
													comboBox_3.setItemSet(app.lookup("dsListLanDivRcd"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_3);
												comboBox_3.bind("value").toDataColumn("LAN_DIV_RCD");
												return comboBox_3;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.columnName = "DIV_PAY_TYPE_NM";
											cell.control = (function(){
												var inputBox_5 = new cpr.controls.InputBox("gdIpbDivPayTypeNmLan");
												inputBox_5.maxLength = 100;
												inputBox_5.userAttr({"require": "Y"});
												inputBox_5.bind("value").toDataColumn("DIV_PAY_TYPE_NM");
												return inputBox_5;
											})();
										}
									}
								]
							}
						});
						if(typeof onGrdDivPayLanSelectionChange == "function") {
							grid_2.addEventListener("selection-change", onGrdDivPayLanSelectionChange);
						}
						container.addChild(grid_2, {
							"top": "30px",
							"left": "5px",
							"width": "1205px",
							"height": "565px"
						});
						var button_5 = new cpr.controls.Button("btnNewLan");
						button_5.value = "";
						button_5.style.setClasses(["btn-new"]);
						button_5.bind("value").toLanguage("UI-SCR-NEW");
						if(typeof onBtnNewLanClick == "function") {
							button_5.addEventListener("click", onBtnNewLanClick);
						}
						container.addChild(button_5, {
							"top": "5px",
							"left": "955px",
							"width": "60px",
							"height": "25px"
						});
						var button_6 = new cpr.controls.Button("btnDeleteLan");
						button_6.value = "";
						button_6.style.setClasses(["btn-delete"]);
						button_6.bind("value").toLanguage("UI-SCR-DELETE");
						if(typeof onBtnDeleteLanClick == "function") {
							button_6.addEventListener("click", onBtnDeleteLanClick);
						}
						container.addChild(button_6, {
							"top": "5px",
							"left": "1020px",
							"width": "60px",
							"height": "25px"
						});
						var button_7 = new cpr.controls.Button("btnRestoreLan");
						button_7.value = "";
						button_7.style.setClasses(["btn-restore"]);
						button_7.bind("value").toLanguage("UI-SCR-WRKCANCL");
						if(typeof onBtnRestoreLanClick == "function") {
							button_7.addEventListener("click", onBtnRestoreLanClick);
						}
						container.addChild(button_7, {
							"top": "5px",
							"left": "1085px",
							"width": "60px",
							"height": "25px"
						});
						var button_8 = new cpr.controls.Button("btnSaveLan");
						button_8.value = "";
						button_8.style.setClasses(["btn-save"]);
						button_8.bind("value").toLanguage("UI-SCR-WRKSAVE");
						if(typeof onBtnSaveLanClick == "function") {
							button_8.addEventListener("click", onBtnSaveLanClick);
						}
						container.addChild(button_8, {
							"top": "5px",
							"left": "1150px",
							"width": "60px",
							"height": "25px"
						});
					})(group_3);
					tabItem_2.content = group_3;
					return tabItem_2;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_2);
				
				var tabItem_3 = (function(tabFolder){
					var tabItem_3 = new cpr.controls.TabItem();
					tabItem_3.text = "tab1";
					tabItem_3.name = "tpgDivPayDtl";
					var group_4 = new cpr.controls.Container("grptpgDivPayDtl");
					// Layout
					var formLayout_3 = new cpr.controls.layouts.FormLayout();
					formLayout_3.topMargin = "0px";
					formLayout_3.rightMargin = "0px";
					formLayout_3.bottomMargin = "0px";
					formLayout_3.leftMargin = "0px";
					formLayout_3.horizontalSpacing = "0px";
					formLayout_3.verticalSpacing = "0px";
					formLayout_3.setColumns(["1fr"]);
					formLayout_3.setRows(["1fr"]);
					group_4.setLayout(formLayout_3);
					(function(container){
						var userDefinedControl_4 = linker.userDefinedControl_4 = new udc.com.comTitle();
						userDefinedControl_4.bind("title").toLanguage("UI-SCR-PAYTYPDETLST");
						container.addChild(userDefinedControl_4, {
							"top": "5px",
							"left": "5px",
							"width": "265px",
							"height": "25px"
						});
						var grid_3 = linker.grid_3 = new cpr.controls.Grid("grdDivPayDtl");
						grid_3.init({
							"dataSet": app.lookup("dsDivPayDtl"),
							"columns": [
								{"width": "25px"},
								{"width": "25px"},
								{"width": "40px"},
								{"width": "160px"},
								{"width": "80px"},
								{"width": "230px"},
								{"width": "80px"},
								{"width": "94px"}
							],
							"header": {
								"rows": [{"height": "27px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.columnType = "checkbox";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.text = "F";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.text = "No";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-SCR-PAYTYPE");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-DB-DIV_PAY_SEQ");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-SCR-TUITIONITEM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-DB-RATE_NUR");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.style.setClasses(["require"]);
											cell.bind("text").toLanguage("UI-DB-RATE_DEN");
										}
									}
								]
							},
							"detail": {
								"rows": [{"height": "25px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.columnType = "checkbox";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.control = (function(){
												var output_3 = new cpr.controls.Output();
												output_3.style.css({
													"text-align" : "center"
												});
												return output_3;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.columnType = "rowindex";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.columnName = "DIV_PAY_TYPE_CD";
											cell.control = (function(){
												var inputBox_6 = new cpr.controls.InputBox("gdIpbDivPayTypeCdDtl");
												inputBox_6.readOnly = true;
												inputBox_6.maxLength = 10;
												inputBox_6.style.css({
													"text-align" : "center"
												});
												inputBox_6.bind("value").toDataColumn("DIV_PAY_TYPE_CD");
												return inputBox_6;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.columnName = "DIV_PAY_SEQ";
											cell.control = (function(){
												var numberEditor_4 = new cpr.controls.NumberEditor("gdIpbDivPaySeqDtl");
												numberEditor_4.spinButton = false;
												numberEditor_4.format = "99";
												numberEditor_4.userAttr({"require": "Y"});
												numberEditor_4.bind("value").toDataColumn("DIV_PAY_SEQ");
												return numberEditor_4;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.columnName = "ITEM_CD";
											cell.control = (function(){
												var comboBox_4 = new cpr.controls.ComboBox("gdCbbItemCdDtl");
												comboBox_4.userAttr({"require": "Y"});
												(function(comboBox_4){
													comboBox_4.addItem(new cpr.controls.Item("선택", ""));
													comboBox_4.setItemSet(app.lookup("dsListItemCd"), {
														"label": "ITEM_NM",
														"value": "ITEM_CD"
													});
												})(comboBox_4);
												comboBox_4.bind("value").toDataColumn("ITEM_CD");
												return comboBox_4;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.columnName = "RATE_NUR";
											cell.control = (function(){
												var inputBox_7 = new cpr.controls.InputBox("gdIpbRateNurDtl");
												inputBox_7.maxLength = 2;
												inputBox_7.userAttr({"require": "Y"});
												inputBox_7.bind("value").toDataColumn("RATE_NUR");
												return inputBox_7;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.columnName = "RATE_DEN";
											cell.control = (function(){
												var inputBox_8 = new cpr.controls.InputBox("gdIpbRateDenDtl");
												inputBox_8.maxLength = 2;
												inputBox_8.userAttr({"require": "Y"});
												inputBox_8.bind("value").toDataColumn("RATE_DEN");
												return inputBox_8;
											})();
										}
									}
								]
							}
						});
						container.addChild(grid_3, {
							"top": "30px",
							"left": "5px",
							"width": "1205px",
							"height": "565px"
						});
						var button_9 = new cpr.controls.Button("btnNewDtl");
						button_9.value = "";
						button_9.style.setClasses(["btn-new"]);
						button_9.bind("value").toLanguage("UI-SCR-NEW");
						if(typeof onBtnNewDtlClick == "function") {
							button_9.addEventListener("click", onBtnNewDtlClick);
						}
						container.addChild(button_9, {
							"top": "5px",
							"left": "955px",
							"width": "60px",
							"height": "25px"
						});
						var button_10 = new cpr.controls.Button("btnDeleteDtl");
						button_10.value = "";
						button_10.style.setClasses(["btn-delete"]);
						button_10.bind("value").toLanguage("UI-SCR-DELETE");
						if(typeof onBtnDeleteDtlClick == "function") {
							button_10.addEventListener("click", onBtnDeleteDtlClick);
						}
						container.addChild(button_10, {
							"top": "5px",
							"left": "1020px",
							"width": "60px",
							"height": "25px"
						});
						var button_11 = new cpr.controls.Button("btnRestoreDtl");
						button_11.value = "";
						button_11.style.setClasses(["btn-restore"]);
						button_11.bind("value").toLanguage("UI-SCR-WRKCANCL");
						if(typeof onBtnRestoreDtlClick == "function") {
							button_11.addEventListener("click", onBtnRestoreDtlClick);
						}
						container.addChild(button_11, {
							"top": "5px",
							"left": "1085px",
							"width": "60px",
							"height": "25px"
						});
						var button_12 = new cpr.controls.Button("btnSaveDtl");
						button_12.value = "";
						button_12.style.setClasses(["btn-save"]);
						button_12.bind("value").toLanguage("UI-SCR-WRKSAVE");
						if(typeof onBtnSaveDtlClick == "function") {
							button_12.addEventListener("click", onBtnSaveDtlClick);
						}
						container.addChild(button_12, {
							"top": "5px",
							"left": "1150px",
							"width": "60px",
							"height": "25px"
						});
					})(group_4);
					tabItem_3.content = group_4;
					return tabItem_3;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_3);
				tabFolder_1.setSelectedTabItem(tabItem_1);
				container.addChild(tabFolder_1, {
					"top": "34px",
					"left": "5px",
					"width": "1215px",
					"height": "600px"
				});
				var button_13 = new cpr.controls.Button("tabBtnDivPayType");
				button_13.value = "";
				button_13.bind("value").toLanguage("UI-SCR-PAYTYPE");
				if(typeof onTabBtnDivPayTypeClick == "function") {
					button_13.addEventListener("click", onTabBtnDivPayTypeClick);
				}
				container.addChild(button_13, {
					"top": "7px",
					"left": "5px",
					"width": "140px",
					"height": "28px"
				});
				var button_14 = new cpr.controls.Button("tabBtnDivPayLan");
				button_14.value = "";
				button_14.bind("value").toLanguage("UI-SCR-PAYTYPELAN");
				if(typeof onTabBtnDivPayLanClick == "function") {
					button_14.addEventListener("click", onTabBtnDivPayLanClick);
				}
				container.addChild(button_14, {
					"top": "7px",
					"left": "146px",
					"width": "140px",
					"height": "28px"
				});
				var button_15 = new cpr.controls.Button("tabBtnDivPayDtl");
				button_15.value = "";
				button_15.bind("value").toLanguage("UI-SCR-PAYTYPEDET");
				if(typeof onTabBtnDivPayDtlClick == "function") {
					button_15.addEventListener("click", onTabBtnDivPayDtlClick);
				}
				container.addChild(button_15, {
					"top": "7px",
					"left": "287px",
					"width": "140px",
					"height": "28px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "640px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
			linker.userDefinedControl_3.ctrl = linker.grid_2;
			linker.userDefinedControl_4.ctrl = linker.grid_3;
		}
	});
	app.title = "stdCrsCDivPayType";
	cpr.core.Platform.INSTANCE.register(app);
})();
