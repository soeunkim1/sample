/*
 * App URI: app/crs/stdCrsCRegFeeDivPay
 * Source Location: app/crs/stdCrsCRegFeeDivPay.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/crs/stdCrsCRegFeeDivPay", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			///<xtmlink path="./stdCrsCRegFeeDivPay.xtm"/>
			
			var stdCrsCRegFeeDivPay = function() {
			
				var moPage = new Page();
				var moPObject = new PObject();
				
				/**
				 * 분납신규생성팝업 관련 설정사항
				 */
				moPObject.moRegDivPayCrtParam = {
					studId : "",
					schYearRcd : "",
					smtRcd : "",
					regCls : "",
					divPayStatRcd : "",
					divPayDesc : "",
					divPayReqDt : "",
					divPayTypeCd : ""
				};
				
			//	var mbClosePopWindow = false;
				var mbDivPayCrtSucc = false;
				var maAllCtrls = ["btnCrtDivPay", "btnSaveCancDivPay", "btnNew", "btnDel", "btnRestore", "btnSave", "rptDivPayDtl"
								, "cbbFrfDivPayStatRcd", "ipbFrfDivPayDesc", "dipFrfDivPayReqDt", "cbbFrfDivPayType"];
				
				/**
				 * @desc import 서브페이지 초기화
				 * @member stdCrsCRegFeeDivPay
				 * @param
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.onLoadImportDone_ImpSbpHeader = function() {
					doSbpHeaderOnLoad();
				}
				
				/**
				 * @desc 화면 온로드
				 * @member stdCrsCRegFeeDivPay
				 * @param
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.onModelConstructDone_stdCrsCRegFeeDivPay = function() {
					//리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["frfRegFee", "rptDivPayDtl"]);
					
					// 부모창에 있는 값 셋팅
					var voParentInfo = moPage.parent.moCmnInfo;
					
					util.DataMap.setValue(app, "dmSearchData", "strStudId"	, voParentInfo.studId);
					util.DataMap.setValue(app, "dmSearchData", "strSchYearRcd", voParentInfo.schYearRcd);
					util.DataMap.setValue(app, "dmSearchData", "strSmtRcd"	, voParentInfo.smtRcd);
					util.DataMap.setValue(app, "dmSearchData", "strRegClsRcd"	, voParentInfo.regClsRcd);
						
					doOnLoad();
				};
				
				/**
				 * @desc 온로드 서브미션 
				 * @member stdCrsCRegFeeDivPay
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				function doOnLoad() {
					// onload 서브미션
					ExtSubmission.sendEx("subOnLoad", "onLoad");
					
					// 등록금납입여부 체크 서브미션
					//strCommand: checkRegFeePay 
					util.Submit.send(app, "subCheckPay", function(pbSuccess) {
						if (pbSuccess) {
			//				//초기 onload시, 분납생성, 분납취소, 작업저장 : list조회
			//				//분납생성창을 그냥 닫을시 : list조회하지 말것!
			//				if(mbClosePopWindow) {
			//					//doList수행하지 않음!
			//					mbClosePopWindow = false;
			//					var voRegFeePay = ExtInstance.getValue("/root/resList/regFeePayYn");
			//					if(!!voRegFeePay){
			//						//납부데이터 있다면 모든객체 disable
			//						ExtControl.setEnable(false, maAllCtrls);
			//						//분납신청일자, 분납내역, 작업저장 활성
			//						ExtControl.setEnable(true, ["dipFrfDivPayReqDt", "ipbFrfDivPayDesc", "btnSave"]);
			//					} else {
			//						//분납번호가 없는경우 - 분납처리가능(분납생성버튼enable, 취소,신규,삭제 disable)
			//						if(ValueUtil.isNull(ExtFreeForm.getValue("frfRegFee", "DIV_PAY_NO"))) {
			//							ExtControl.setEnable(true, maAllCtrls);	
			//							ExtControl.setEnable(false, ["btnSaveCancDivPay", "btnNew", "btnDel", "btnRestore"]);
			//						}//분납번호가 있는경우-분납상태필드 disable
			//						else {
			//							ExtControl.setEnable(true, maAllCtrls);
			//							ExtControl.setEnable(false, ["cbbFrfDivPayStatRcd"]);
			//						}
			//					}
			//				} else {
								
								doList(function(pbSuccess) {
									if(pbSuccess) {
										//등록대상자가 아니라면 모두 비활성
										var vnNodeListLength = util.DataSet.getRowCount(app, "dsListRegFee");
										if(vnNodeListLength <= 0){
											util.Control.setEnable(app, false, maAllCtrls);
											return;
										}
										
										if(mbDivPayCrtSucc){
											//분납자료가 생성되었습니다.
											this.setParentMsg(NLS.CRS.M069);	
											// 등록사항 재조회
											ExtSubPage.getParent().callScript("doSetRegInfo");	
										}else this.setParentMsg(NLS.INF.M024);
										/*
										var voRegFeePay = util.DataMap.getValue(app, "dmResList", "regFeePayYn");
										if(!!voRegFeePay) {
											//납부데이터 있다면 모든객체 disable
											util.Control.setEnable(app, false, maAllCtrls);
											//분납신청, 분납내역, 작업저장 활성
											util.Control.setEnable(app, true, ["dipFrfDivPayReqDt", "ipbFrfDivPayDesc", "btnSave"]);
											// 2016.06.30 분납고도화
											util.Control.setEnable(app, true, ["btnNew", "btnDel", "btnRestore", "rptDivPayDtl", "cbbFrfDivPayType"]);
										} else {
											//분납번호가 없는경우 - 분납처리가능(분납생성버튼enable, 취소,신규,삭제 disable)
											if(ValueUtil.isNull(util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_NO"))) {
												util.Control.setEnable(app, true, maAllCtrls);	
												util.Control.setEnable(app, false, ["btnSaveCancDivPay", "btnNew", "btnDel", "btnRestore"]);
											}//분납번호가 있는경우-분납상태필드 disable
											else {
												util.Control.setEnable(app, true, maAllCtrls);
												util.Control.setEnable(app, false, ["cbbFrfDivPayStatRcd"]);
											}
										}
										*/
										
										/**
										 * 2016.07.19 분납컨트롤 비활성화처리 관련 재정비
										 */
										var vsRegFeePay = util.DataMap.getValue(app, "dmResList", "regFeePayYn"); //납부여부
										var vsDivPayNo  = util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_NO");	//분납번호
										
										util.Control.setEnable(app, true, maAllCtrls);
										
										// 분납번호가 있는 경우 분납상태 비활성화
										if(!ValueUtil.isNull(vsDivPayNo)){
											util.Control.setEnable(app, false, "cbbFrfDivPayStatRcd");	
										}	
										
										// 분납번호가 있거나 납입자료 존재하는 경우 분납생성 비활성화
										if((!ValueUtil.isNull(vsDivPayNo)) || !!vsRegFeePay){
											util.Control.setEnable(app, false, "btnCrtDivPay");	
										}
										
										// 분납번호가 없거나 납입자료 존재하는 경우 분납취소 비활성화
										if(ValueUtil.isNull(vsDivPayNo) || !!vsRegFeePay){
											util.Control.setEnable(app, false, "btnSaveCancDivPay");	
										}
										
										// 분납번호가 없는 경우 신규/삭제 비활성화
										if(ValueUtil.isNull(vsDivPayNo)){
											util.Control.setEnable(app, false, ["btnNew", "btnDel"]);	
										}
										
									}
								});
			//				}
						}
					});
				};
			
				/**
				 * @desc 분납차수별 내역을 조회한다.
				 * @member stdCrsCRegFeeDivPay
				 * @param poCallBackFunc 콜백 함수
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				function doList(poCallBackFunc) {
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess) {
						if (pbSuccess) {
							//분납번호가 존재여부에 따라 필수값 셋팅
							var vsDivPayNo = util.DataSet.getValue(app, "dsListRegFee", "DIV_PAY_NO", 1);
							var vsDivPayStat = util.DataSet.getValue(app, "dsListRegFee", "DIV_PAY_STAT_RCD", 1);
							
							var vaFrfSetNullCtrls = ["cbbFrfDivPayStatRcd", "cbbFrfDivPayType"];
							
							if(!ValueUtil.isNull(vsDivPayNo)){
								ExtControl.setAttr(vaFrfSetNullCtrls, "emptyitem", "False");
								util.Control.setUserAttr(app, vaFrfSetNullCtrls, "require", "Y");
							}else{
								ExtControl.setAttr(vaFrfSetNullCtrls, "emptyitem", "True");
								util.Control.setUserAttr(app, vaFrfSetNullCtrls, "require", "");
							}	
							
							util.Control.redraw(app, ["frfRegFee" ,"rptDivPayDtl"]);
							// 값이 있는 경우에만 복사하여 프리폼에 데이터 뿌림
							if(util.DataSet.getRowCount(app, "dsListRegFee") > 0) {
			//TO-BE: 단독 프리폼에 대한 데이터 바인딩은 공통단에서 자동 처리됨(삭제 필요)
								ExtFreeForm.copyToInstance("frfRegFee", "/root/resList/listRegFee/row", 1);
							}
							
							if(util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
						}
					});
				};
				
				/**
				 * @desc [btnCrtDivPay] 분납생성 버튼 클릭 이벤트
				 * @member stdCrsCRegFeeDivPay
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.onClick_BtnCrtDivPay = function() {
					//필수입력항목 - 분납상태 확정인지 '분납상태가 확정인 경우만 분납생성이 가능합니다.
					var vsDivPayStat = util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_STAT_RCD");
					if(vsDivPayStat != "CR203CNF"){
						util.Msg.alert("NLS-CRS-M020");
						return;
					}
					//분납번호 존재할시 '이미 분납처리된 건입니다'
					var vsDivPayNo = util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_NO");
					if(!ValueUtil.isNull(vsDivPayNo)){
						util.Msg.alert("NLS-CRS-M032");
						return;
					}
					
					//분납신규생성팝업 호출
					var voMapNode = moPObject.moRegDivPayCrtParam;
					voMapNode.studId = util.DataMap.getValue(app, "dmSearchData", "strStudId");
					voMapNode.schYearRcd = util.DataMap.getValue(app, "dmSearchData", "strSchYearRcd");
					voMapNode.smtRcd = util.DataMap.getValue(app, "dmSearchData", "strSmtRcd");
					voMapNode.regCls = util.DataMap.getValue(app, "dmSearchData", "strRegClsRcd");
					voMapNode.divPayStatRcd = vsDivPayStat;
					voMapNode.divPayDesc = util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_DESC");
					voMapNode.divPayReqDt = util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_REQ_DT");
					voMapNode.divPayTypeCd = util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_TYPE_CD");
					
					ExtPopUp.openLayeredPopup("/xtm/crs/stdCrsCRegFeeDivPayCrt.xtm", 600, 440);
				};
				
				/**
				 * @desc  분납생성 팝업 콜백함수
				 * @member stdCrsCRegFeeDivPay
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.callbackRegFeeDivPayCrt = function(pbSuccess) {
					mbDivPayCrtSucc = pbSuccess;
					doOnLoad();
				};
				
				/**
				 * @desc [btnSaveCancDivPay] 분납취소 버튼 클릭 이벤트
				 * @member stdCrsCRegFeeDivPay
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.onClick_BtnSaveCancDivPay = function() {
					//분납처리된건인지 체크 ; 분납번호 존재 않을경우 '분납처리된 건이 아닙니다.'
					var vsDivPayNo = util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_NO");
					if(ValueUtil.isNull(vsDivPayNo)){
						util.Msg.alert("NLS-CRS-M051");
						return;
					}
					
					//납입자료가 존재하여 처리 불가능합니다.
					var vnRegFeePayCnt = util.DataSet.getRowCount(app, "dsListRegFeePay");
					if(vnRegFeePayCnt > 0){
						util.Msg.alert("NLS-CRS-M052");
						return;
					}
					
					//분납자료가 삭제됩니다. 처리하시겠습니까?
					if(!util.Msg.confirm("NLS-CRS-M021") ) return;
					
					util.DataMap.setValue(app, "dmRegFeeData", "strDivPayStatRcd", util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_STAT_RCD"));
					util.DataMap.setValue(app, "dmRegFeeData", "strDivPayDesc", util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_DESC"));
					util.DataMap.setValue(app, "dmRegFeeData", "strDivPayReqDt", util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_REQ_DT"));
					util.DataMap.setValue(app, "dmRegFeeData", "strDivPayTypeCd", util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_TYPE_CD"));
					util.DataMap.setValue(app, "dmRegFeeData", "strDivPayNo", util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_NO"));
					
					mbDivPayCrtSucc = false;
					
					// 분납취소 서브미션
					//strCommand: cancelDivPay 
					util.Submit.send(app, "subCancDivPay", function(pbSuccess) {
						if (pbSuccess) {
							doOnLoad();
							// 등록사항 재조회
							ExtSubPage.getParent().callScript("doSetRegInfo");	
							//분납취소가 처리되었습니다.
							this.setParentMsg(NLS.CRS.M068);
						}
					});
				};
				
				/**
				 * @desc [rptDivPayDtl] 신규버튼 클릭이벤트
				 * @member stdCrsCRegFeeDivPay
				 * @param   
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.onClick_BtnNew = function() {
					var vnNewRow = util.Grid.insertRow(app, "grdDivPayDtl");
					
					util.Grid.setCellValue(app, "grdDivPayDtl", "DIV_PAY_NO"	 	  , util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_NO"), vnNewRow);
					util.Grid.setCellValue(app, "grdDivPayDtl", "DIV_PAY_SERIAL_NO", doGetSerialNo(), vnNewRow);
				};
				
				/**
				 * doGetSerialNo 순번리턴
				 * @member stdCrsCRegFeeDivPay
				 * @return vnMaxSerialNo 
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				function doGetSerialNo() {
					var vnCnt = util.Grid.getRowCount(app, "grdDivPayDtl");
					var vnMaxSerialNo = 0;
					for (var i = 1; i <= vnCnt; i++) {
						var vsSerialNo = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "DIV_PAY_SERIAL_NO", i));
						if (vnMaxSerialNo < vsSerialNo) {
							vnMaxSerialNo = vsSerialNo;
						}
					}
					return vnMaxSerialNo+1;
				};	
				
				/**
				 * @desc [rptDivPayDtl] 삭제버튼 클릭 이벤트
				 * @member stdCrsCRegFeeDivPay
				 * @param   
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.onClick_BtnDel = function() {
					var vnRowIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdDivPayDtl");
					if(ValueUtil.isNull(vnRowIdx)){
						util.Msg.notify(app, "NLS.INF.M005");
						return;
					}	
					
					var vsPanelCheckIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdDivPayDtl");
					var voPanelChk;
					
					if(String(vsPanelCheckIdx).indexOf(",") != -1){
						voPanelChk = vsPanelCheckIdx.split(",");
					}else{
						voPanelChk = new Array();
						voPanelChk[0] = vsPanelCheckIdx;
					}	
					
					for(var i = 0; i < voPanelChk.length; i++) {
						var vnRow = voPanelChk[i];
						
						var vnAmt = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "AMT", vnRow));
						if(vnAmt < 0){
							//장학금 지급내역으로 삭제할 수 없습니다
							util.Msg.alert("NLS-CRS-M070");
							return;
						}
						
						var vsDivSerialPayYn = util.Grid.getCellValue(app, "grdDivPayDtl", "DIV_SERIAL_PAY_YN", vnRow);
						if(vsDivSerialPayYn == "Y"){
							//납입자료가 존재하여 삭제할 수 없습니다.
							util.Msg.alert("NLS-CRS-M105");
							return;
						}
					}	
					
					util.Grid.deleteRow(app, "grdDivPayDtl");
				};
				
				/**
				 * @desc [rptDivPayDtl] 작업취소 클릭 이벤트
				 * @member stdCrsCRegFeeDivPay
				 * @param   
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.onClick_BtnRestore = function() {
					util.Grid.restoreRow(app, "grdDivPayDtl");
				};
				
				/**
				 * @desc [rptDivPayDtl] 작업저장 클릭 이벤트
				 * @member stdCrsCRegFeeDivPay
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.onClick_BtnSave = function() {
					// 리피터 변경사항 체크
					if(!util.Grid.isModified(app, ["frfRegFee","grdDivPayDtl"], null)){
						this.setParentMsg(NLS.WRN.M007);
						return false;
					}
					
					// Validation Check
					if(!util.validate(app, ["frfRegFee","grdDivPayDtl"])) return false;
					
					var vbRegFeeChg = false;
					var vsDivPayNo = util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_NO");
					if(util.Grid.isModified(app, ["frfRegFee"], null)){
						//분납상태가 확정이 아니고 분납번호에 값이 있다면 '분납처리된 자료가 존재합니다. 분납취소버튼을 이용하시기 바랍니다.'
						var vsDivPayStat = util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_STAT_RCD");
						
						if(vsDivPayStat!="CR203CNF" && !ValueUtil.isNull(vsDivPayNo)){
							util.Msg.alert("NLS-CRS-M034"); 
							return false;
						}		
						vbRegFeeChg = true;
					}	
					
					//분납차수별 내역 리피트 체크
					if(!doCheckGridValue()) return false;
					
					//등록금테이블 변경여부, 분납세부테이블 변경여부 체크
			        if(vbRegFeeChg) {
						util.DataMap.setValue(app, "dmSaveChangeFlg", "dsRegFeeYn", "Y");
					} else {
						util.DataMap.setValue(app, "dmSaveChangeFlg", "dsRegFeeYn", "");
					}
					
					util.DataMap.setValue(app, "dmRegFeeData", "strDivPayNo", vsDivPayNo);
					
					//저장서브미션
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccessSave) {
						if(pbSuccessSave) {
							//저장성공 메세지 출력
							doList(function(pbSuccessList) {
								// "갱신된 데이터가 조회되었습니다."
								if(pbSuccessList) {
									// 등록사항 재조회
									ExtSubPage.getParent().callScript("doSetRegInfo");	
									this.setParentMsg(NLS.INF.M025);
								}
							});
						}
					});
				};
				
				/**
				 * @desc 분납차수별 내역 리피트 체크
				 * @member stdCrsCRegFeeDivPay
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				function doCheckGridValue() {
					var vnRowCnt = util.Grid.getRowCount(app, "grdDivPayDtl");
					var vaDivPaySeqTmp = [];   
					var vnAmtSum = 0;
					var vnCurrSeq;
					var vsItemCd;
					var vnAmt;
					var vnNextItemCd;
					var vnNextSeq;
					var vnNextAmt;
					var vbPass1 = true;
					var vbPass2 = true;
					var vbPass3 = true;
					
					var vsDivPayTypeCd = util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_TYPE_CD");
					var vsDivPayStatRcd = util.FreeForm.getValue(app, "frfRegFee", "DIV_PAY_STAT_RCD");
					var vnDivPayCnt = ExtInstance.getValue("/root/resOnLoad/listDivPayType/row", "DIV_PAY_CNT", "child::DIV_PAY_TYPE_CD='"+vsDivPayTypeCd+"'");
					util.DataMap.setValue(app, "dmReqKey", "strDivPayMax", vnDivPayCnt);
					
					// 확정인 경우 체크
					if(vsDivPayStatRcd == "CR203CNF"){
						
						if(vnRowCnt == 0){
							util.DataMap.setValue(app, "dmSaveChangeFlg", "dsDivPayDtlYn", "");
						}else{	
							
							for(var i=1; i<=vnRowCnt; i++) {
								
								if(util.Grid.getRowState(app, "grdDivPayDtl", i) == cpr.data.tabledata.RowState.DELETED) continue;
								
								vsItemCd  = util.Grid.getCellValue(app, "grdDivPayDtl", "ITEM_CD", i);
								vnCurrSeq = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "DIV_PAY_SEQ", i));
								vnAmt 	  = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "AMT", i));  
								
								//차수별 항목별 합계금액
								vnAmtSum = vnAmt;
								
								vaDivPaySeqTmp.push(vnCurrSeq);
								
								for(var j=1; j<=vnRowCnt; j++){
									
									if(util.Grid.getRowState(app, "grdDivPayDtl", j) == cpr.data.tabledata.RowState.DELETED) continue;
									if(i==j) continue;
									
									vnNextItemCd  = util.Grid.getCellValue(app, "grdDivPayDtl", "ITEM_CD", j);
									vnNextSeq 	  = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "DIV_PAY_SEQ", j)); 
									vnNextAmt	  = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "AMT", j)); 
									
									//한차수에 동일한 항목코드 존재하는지 체크
									if(vnNextItemCd==vsItemCd && vnNextSeq==vnCurrSeq && vnAmt > 0 && vnNextAmt > 0){
										vbPass2 = false;
									}
									
									//차수별항목별 합계금액
									if(vnNextItemCd==vsItemCd && vnNextSeq==vnCurrSeq){
										vnAmtSum = vnAmtSum + vnNextAmt;
									}
								}
								
								//차수별항목별 합계금액
								if(vnAmtSum < 0) {
									vbPass3 = false;
								}
								vnAmtSum = 0;
							}
							
							var vnTmpLength = vaDivPaySeqTmp.length;
							
							// 분납차수가 순차적으로 입력되었는지 확인
							if(vnTmpLength > 0){
								
								// 분납차수 소트
								vaDivPaySeqTmp.sort();
								
								for(var k=0; k<=vnTmpLength; k++) {
									
									vnCurrSeq = vaDivPaySeqTmp[k];
									vnNextSeq = vaDivPaySeqTmp[k+1];
									
									//분납차수가 처음에 1로 시작하는지 체크
									if(k == 0 && vnCurrSeq != 1){
										vbPass1 = false;
										break;
									}	
									
									//마지막 분납차수가 분납회수와 동일한지 체크
									if(k == (vnTmpLength-1) && vnDivPayCnt != vnCurrSeq){
										vbPass1 = false;
										break;
									}	
									
									//다음 숫자가 없는 경우 break
									if(ValueUtil.isNull(vnNextSeq)) break;
									
									//분납차수가 중간에 빈 것이 있는지 체크
									if(!((vnNextSeq-vnCurrSeq==1) || (vnNextSeq-vnCurrSeq==0))){
										vbPass1 = false;
										break;
									}
								}
							}
							
							if(!vbPass1){
								 util.Msg.alert("NLS-CRS-M012", [vnDivPayCnt]);
								return false;
							}	
							
							if(!vbPass2){
								 util.Msg.alert("NLS-CRS-M072");
								return false;
							}	
							
							if(!vbPass3){
								 util.Msg.alert("NLS-CRS-M071");
								return false;
							}
							
							//분납차수별 내역에 입력한 항목별금액과 등록금세부테이블 항목 금액이 일치하는지 체크
							var voRegFeeItemList = ExtInstance.getNodeListObj("/root/resOnLoad/listRegFeeItem/row");
							var vnRegFeeItemCnt = voRegFeeItemList == null ? 0 : voRegFeeItemList.length;
							for(var i = 0; i < vnRegFeeItemCnt; i++){
								
								var voRegFeeItemRow = ExtInstance.getNodeToObject(voRegFeeItemList[i]);
								var vsRegFeeItemCd = voRegFeeItemRow.ITEM_CD;
								var vnRegFeeItemAmt = voRegFeeItemRow.AMT;
								
								var vnSumDivAmt = 0;
			                    var vnSumSeqItemAmt = 0;
								
								for(var m = 1; m <= vnRowCnt; m++) {
									if(util.Grid.getRowState(app, "grdDivPayDtl", m) == cpr.data.tabledata.RowState.DELETED) continue;
			                        
			                        var vsDivItemCd = util.Grid.getCellValue(app, "grdDivPayDtl", "ITEM_CD", m);
			                        var vnDivAmt = Number(util.Grid.getCellValue(app, "grdDivPayDtl", "AMT", m));
			                        if (vsRegFeeItemCd != vsDivItemCd) continue;
			                        
			                        if (vnDivAmt >= 0) {
										vnSumDivAmt = Number(vnSumDivAmt) + Number(vnDivAmt);
									} else {
										vnSumSeqItemAmt = Number(vnSumSeqItemAmt) + Number(vnDivAmt); //수정가능한 등록금항목만(-금액은 장학금지급금액)
									}
			                    }
								
								//등록금 항목별 금액이 일치하지 않습니다.
			                    if (vnSumDivAmt != vnRegFeeItemAmt) {
			                        util.Msg.alert("NLS-CRS-M026"); 
			                        return false;
			                    }
			                    if ((vnSumSeqItemAmt + vnSumDivAmt) < 0) {
			                        util.Msg.alert("NLS-CRS-M026"); 
			                        return false;
			                    }
							}
							
							util.DataMap.setValue(app, "dmSaveChangeFlg", "dsDivPayDtlYn", "Y");
						}
					}	
					
					return true;
				};
				
				/**
				 * @desc [rptDivPayDtl] rowSelect 이벤트 - 바인드 refresh
				 * @member stdCrsCRegFeeDivPay
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.onRowSelect_RptRegFeeDtl = function() {
			//TO-BE: <ExtControl.refreshBind> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtControl.refreshBind("binRoDivPay");
				};
				
				/**
				 * @desc [rptDivPayDtl] 값 변경이벤트
				 * @member stdCrsCRegFeeDivPay
				 * @param psDiv 컬럼 ref
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.onValueChanged_RptRegFeeDtl = function(psDiv) {
					var vnRowIdx = util.Grid.getIndex(app, "grdDivPayDtl");
					var vnChkValue = util.Grid.getCellValue(app, "grdDivPayDtl", psDiv, vnRowIdx)	;
					
					// 금액
					if(psDiv == "AMT"){
						if(Number(vnChkValue) <= 0){
							//-는 입력 안됨 : @은 0보다 큰수만 허용됩니다.
			                util.Msg.alert("NLS-CRS-M006", [NLS.NSCR.AMT]);
							util.Grid.setCellValue(app, "grdDivPayDtl", psDiv, "", vnRowIdx);
							return false;
						}
					}
					// 분납차수
					else if(psDiv == "DIV_PAY_SEQ"){
						if(Number(vnChkValue) <= 0){
							//-는 입력 안됨 : @은 0보다 큰수만 허용됩니다.
							util.Msg.alert("NLS-CRS-M006", [NLS.NSCR.DIVPAYSEQ]);
							util.Grid.setCellValue(app, "grdDivPayDtl", psDiv, "", vnRowIdx);
							return false;
						}
					}	
				};
				
				/**
				 * @desc 부모 헤더에 메세지 뿌리기
				 * @member stdCrsCRegFeeDivPay
				 * @param  psMsgCode 메시지 코드
				 * @param  paMsg 메시지 변수 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				moPage.setParentMsg = function(psMsgCode, paMsg) {
					util.Msg.notify(app, psMsgCode, paMsg);	
				};
				
				/**
				 * @desc 변경사항체크 - 부모창에서 호출용
				 * @member stdCrsCRegFeeDivPay
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 23.
				 */
				function doCheckDataChange() {
					if(util.Grid.isModified(app, ["frfRegFee","grdDivPayDtl"], "CRM") ){
						return false;
					}else{
						return true;
					}
				};
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsListDivPayStat");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsListRegFeeItem");
			dataSet_2.parseData({
				"columns": [
					{"name": "ITEM_CD"},
					{"name": "ITEM_NM"},
					{"name": "AMT"},
					{"name": "REG_CLS_RCD"},
					{"name": "REF_KEY"},
					{"name": "REMARK"},
					{"name": "STUD_ID"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsListDivPayType");
			dataSet_3.parseData({
				"columns": [
					{"name": "DIV_PAY_TYPE_CD"},
					{"name": "DIV_PAY_TYPE_NM"},
					{"name": "EXP_YN"},
					{"name": "EXP_DT"},
					{"name": "DIV_PAY_CNT"},
					{"name": "ITV_TYPE_RCD"},
					{"name": "RND_LOC"},
					{"name": "ITV_VAL"},
					{"name": "BLNC_ADD_METHOD_RCD"},
					{"name": "REMARK"},
					{"name": "REF_KEY"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsListRegFee");
			dataSet_4.parseData({
				"columns": [
					{"name": "DIV_PAY_TYPE_CD"},
					{"name": "IFR_DT"},
					{"name": "BKG_PNT"},
					{"name": "DIV_PAY_STAT_RCD"},
					{"name": "REG_CLS_RCD"},
					{"name": "DIV_PAY_REQ_DT"},
					{"name": "DIV_PAY_NO"},
					{"name": "STUD_ID"},
					{"name": "DIV_PAY_DESC"},
					{"name": "BKG_TIME"},
					{"name": "PAY_CLOSE_DT"},
					{"name": "REMARK"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"},
					{"name": "REF_KEY"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsFrfRegFee");
			dataSet_5.parseData({
				"columns": [
					{"name": "DIV_PAY_TYPE_CD"},
					{"name": "IFR_DT"},
					{"name": "BKG_PNT"},
					{"name": "DIV_PAY_STAT_RCD"},
					{"name": "REG_CLS_RCD"},
					{"name": "DIV_PAY_REQ_DT"},
					{"name": "DIV_PAY_NO"},
					{"name": "STUD_ID"},
					{"name": "DIV_PAY_DESC"},
					{"name": "BKG_TIME"},
					{"name": "PAY_CLOSE_DT"},
					{"name": "REMARK"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"},
					{"name": "REF_KEY"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsListDivPayDtl");
			dataSet_6.parseData({
				"info": "CRS_DIV_PAY_DTL@DIV_PAY_NO,DIV_PAY_SERIAL_NO",
				"columns": [
					{"name": "AMT"},
					{"name": "ITEM_CD"},
					{"name": "DIV_PAY_SERIAL_NO"},
					{"name": "DIV_PAY_NO"},
					{"name": "DIV_PAY_SEQ"},
					{"name": "PAY_CLOSE_DT"},
					{"name": "REMARK"},
					{"name": "REF_KEY"},
					{"name": "DIV_SERIAL_PAY_YN"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsListRegFeePay");
			dataSet_7.parseData({
				"columns": [
					{"name": "STUD_BANK_RCD"},
					{"name": "AMT"},
					{"name": "REFUND_TRANS_RATE_NUR"},
					{"name": "PROC_PLAN_DT"},
					{"name": "ITEM_CD"},
					{"name": "REMARK"},
					{"name": "PAY_GRP_KEY"},
					{"name": "DIV_PAY_NO"},
					{"name": "STUD_ID"},
					{"name": "REFUND_TRANS_RATE_DEN"},
					{"name": "DESC_TYPE_RCD"},
					{"name": "SMT_RCD"},
					{"name": "CII_DT"},
					{"name": "OWNER_NM"},
					{"name": "REG_CLS_RCD"},
					{"name": "REF_KEY"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "PROC_DT"},
					{"name": "DIV_PAY_SERIAL_NO"},
					{"name": "SERIAL_NO"},
					{"name": "PAY_ACCT_RCD"},
					{"name": "STUD_ACCT_NO"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsListScalPmnt");
			dataSet_8.parseData({
				"columns": [
					{"name": "PMNT_SERIAL_NO"},
					{"name": "STUD_BANK_CD"},
					{"name": "AMT"},
					{"name": "REMARK"},
					{"name": "PROC_TYPE_RCD"},
					{"name": "PROC_PLAN_DT"},
					{"name": "ITEM_CD"},
					{"name": "PAY_GRP_KEY"},
					{"name": "DIV_PAY_NO"},
					{"name": "STUD_ID"},
					{"name": "SMT_RCD"},
					{"name": "UNIT_CALC_VAL"},
					{"name": "OWNER_NM"},
					{"name": "REF_KEY"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "PROC_DT"},
					{"name": "SERIAL_NO"},
					{"name": "STUD_ACCT_NO"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			var dataMap_1 = new cpr.data.DataMap("dmSearchData");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strStudId",
						"dataType": "string"
					},
					{
						"name": "strSchYearRcd",
						"dataType": "string"
					},
					{
						"name": "strSmtRcd",
						"dataType": "string"
					},
					{
						"name": "strRegClsRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmSaveChangeFlg");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "dsRegFeeYn",
						"dataType": "string"
					},
					{
						"name": "dsDivPayDtlYn",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmRegFeeData");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "strDivPayNo",
						"dataType": "string"
					},
					{
						"name": "strDivPayReqDt",
						"dataType": "string"
					},
					{
						"name": "strDivPayStatRcd",
						"dataType": "string"
					},
					{
						"name": "strDivPayTypeCd",
						"dataType": "string"
					},
					{
						"name": "strDivPayDesc",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmReqKey");
			dataMap_4.parseData({
				"columns" : [{
					"name": "strDivPayMax",
					"dataType": "string"
				}]
			});
			app.register(dataMap_4);
			
			var dataMap_5 = new cpr.data.DataMap("dmResList");
			dataMap_5.parseData({
				"columns" : [
					{
						"name": "regFeePayYn",
						"dataType": "string"
					},
					{
						"name": "scalPmntYn",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_5);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/crs/StdCrsRegFeeDivPay/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_3, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/crs/StdCrsRegFeeDivPay/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_4, false);
			submission_2.addResponseData(dataSet_6, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/crs/StdCrsRegFeeDivPay/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_5);
			submission_3.addRequestData(dataMap_1);
			submission_3.addRequestData(dataMap_3);
			submission_3.addRequestData(dataMap_2);
			submission_3.addRequestData(dataMap_4);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subCancDivPay");
			submission_4.action = "/crs/StdCrsRegFeeDivPay/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_1);
			submission_4.addRequestData(dataMap_3);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subCheckPay");
			submission_5.action = "/crs/StdCrsRegFeeDivPay/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataMap_1);
			submission_5.addResponseData(dataSet_7, false);
			submission_5.addResponseData(dataMap_5, false);
			app.register(submission_5);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaSbpHeader");
			if(typeof onEmaSbpHeaderAppReady == "function") {
				embeddedApp_1.addEventListener("app-ready", onEmaSbpHeaderAppReady);
			}
			cpr.core.App.load("app/imp/impSbpHeader", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "420px",
				"left": "0px",
				"width": "96px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpDataDtl");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var userDefinedControl_1 = linker.userDefinedControl_1 = new udc.com.comTitle();
				userDefinedControl_1.bind("title").toLanguage("UI-SCR-DIVSEQDESC");
				container.addChild(userDefinedControl_1, {
					"top": "65px",
					"left": "325px",
					"width": "280px",
					"height": "25px"
				});
				var button_1 = new cpr.controls.Button("btnNew");
				button_1.value = "";
				button_1.style.setClasses(["btn-new"]);
				button_1.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewClick == "function") {
					button_1.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_1, {
					"top": "66px",
					"left": "765px",
					"width": "60px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnDel");
				button_2.value = "";
				button_2.style.setClasses(["btn-delete"]);
				button_2.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_2.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_2, {
					"top": "66px",
					"left": "830px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnRestore");
				button_3.value = "";
				button_3.style.setClasses(["btn-restore"]);
				button_3.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_3.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_3, {
					"top": "66px",
					"left": "895px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "";
				button_4.style.setClasses(["btn-save"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"top": "66px",
					"left": "959px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdDivPayDtl");
				grid_1.init({
					"dataSet": app.lookup("dsListDivPayDtl"),
					"columns": [
						{"width": "25px"},
						{"width": "40px"},
						{"width": "92px"},
						{"width": "89px"},
						{"width": "145px"},
						{"width": "134px"},
						{"width": "116px"},
						{"width": "366px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-DIV_PAY_SERIAL_NO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-DIV_PAY_SEQ");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-TUITIONITEM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-AMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-PAYDUEDAT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-REMARK");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.control = (function(){
										var output_1 = new cpr.controls.Output();
										output_1.style.css({
											"text-align" : "center"
										});
										return output_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "DIV_PAY_SERIAL_NO";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("gdIpbDivPaySerialNo");
										inputBox_1.enabled = false;
										inputBox_1.userAttr({"require": "Y"});
										inputBox_1.style.css({
											"text-align" : "center"
										});
										inputBox_1.bind("value").toDataColumn("DIV_PAY_SERIAL_NO");
										return inputBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "DIV_PAY_SEQ";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("gdIpbDivPaySeq");
										numberEditor_1.spinButton = false;
										numberEditor_1.format = "99";
										numberEditor_1.userAttr({"require": "Y"});
										numberEditor_1.style.css({
											"text-align" : "center"
										});
										numberEditor_1.bind("value").toDataColumn("DIV_PAY_SEQ");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "ITEM_CD";
									cell.control = (function(){
										var comboBox_1 = new cpr.controls.ComboBox("gdCbbItemCd");
										comboBox_1.userAttr({"require": "Y"});
										(function(comboBox_1){
											comboBox_1.addItem(new cpr.controls.Item("선택", ""));
											comboBox_1.setItemSet(app.lookup("dsListRegFeeItem"), {
												"label": "ITEM_NM",
												"value": "ITEM_CD"
											});
										})(comboBox_1);
										comboBox_1.bind("value").toDataColumn("ITEM_CD");
										return comboBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "AMT";
									cell.control = (function(){
										var numberEditor_2 = new cpr.controls.NumberEditor("gdIpbAmt");
										numberEditor_2.spinButton = false;
										numberEditor_2.format = "999,999,999,999";
										numberEditor_2.userAttr({"require": "Y"});
										numberEditor_2.bind("value").toDataColumn("AMT");
										return numberEditor_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "PAY_CLOSE_DT";
									cell.control = (function(){
										var dateInput_1 = new cpr.controls.DateInput("gdDipPayCloseDt");
										dateInput_1.userAttr({"require": "Y"});
										dateInput_1.style.css({
											"text-align" : "center"
										});
										dateInput_1.bind("value").toDataColumn("PAY_CLOSE_DT");
										return dateInput_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "REMARK";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("gdIpbRemark");
										inputBox_2.maxLength = 1000;
										inputBox_2.bind("value").toDataColumn("REMARK");
										return inputBox_2;
									})();
								}
							}
						]
					},
					"footer": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.control = (function(){
										var output_2 = new cpr.controls.Output("footer_output");
										output_2.value = "";
										output_2.bind("value").toLanguage("UI-GLS-SUM");
										return output_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_3 = new cpr.controls.Output("footer_output");
										output_3.value = "";
										output_3.bind("value").toLanguage("UI-GLS-SUM");
										return output_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.control = (function(){
										var output_4 = new cpr.controls.Output("footer_output");
										output_4.value = "";
										output_4.bind("value").toLanguage("UI-GLS-SUM");
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.control = (function(){
										var output_5 = new cpr.controls.Output("footer_output");
										output_5.value = "";
										output_5.bind("value").toLanguage("UI-GLS-SUM");
										return output_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.control = (function(){
										var output_6 = new cpr.controls.Output("footer_output");
										output_6.value = "합계";
										output_6.bind("value").toLanguage("UI-GLS-SUM");
										return output_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.expr = "getSum(\"AMT\")";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.control = (function(){
										var output_7 = new cpr.controls.Output("footer_output");
										output_7.value = "";
										output_7.bind("value").toLanguage("UI-GLS-SUM");
										return output_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.control = (function(){
										var output_8 = new cpr.controls.Output("footer_output");
										output_8.value = "";
										output_8.bind("value").toLanguage("UI-GLS-SUM");
										return output_8;
									})();
								}
							}
						]
					}
				});
				if(typeof onGrdDivPayDtlSelectionChange == "function") {
					grid_1.addEventListener("selection-change", onGrdDivPayDtlSelectionChange);
				}
				container.addChild(grid_1, {
					"top": "90px",
					"left": "5px",
					"width": "1014px",
					"height": "333px"
				});
				var group_2 = new cpr.controls.Container("frfRegFee");
				group_2.style.setClasses(["form-box"]);
				// Layout
				var xYLayout_3 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_3);
				(function(container){
					var inputBox_3 = new cpr.controls.InputBox("ipbFrfDivPayDesc");
					inputBox_3.maxLength = 500;
					inputBox_3.bind("fieldLabel").toExpression("#optFrfDivPayDesc.value");
					inputBox_3.bind("value").toDataMap(app.lookup("dmRow"), "DIV_PAY_DESC");
					container.addChild(inputBox_3, {
						"top": "5px",
						"left": "315px",
						"width": "686px",
						"height": "25px"
					});
					var output_9 = new cpr.controls.Output("optFrfDivPayDesc");
					output_9.value = "";
					output_9.bind("value").toLanguage("UI-SCR-DIVPAYLST");
					container.addChild(output_9, {
						"top": "5px",
						"left": "230px",
						"width": "80px",
						"height": "25px"
					});
					var output_10 = new cpr.controls.Output("optFrfDivPayReqDt");
					output_10.value = "";
					output_10.bind("value").toLanguage("UI-DB-DIV_PAY_REQ_DT");
					container.addChild(output_10, {
						"top": "30px",
						"left": "5px",
						"width": "80px",
						"height": "25px"
					});
					var dateInput_2 = new cpr.controls.DateInput("dipFrfDivPayReqDt");
					dateInput_2.maxDate = new Date(9999, 11, 31);
					dateInput_2.style.css({
						"text-align" : "center"
					});
					dateInput_2.bind("fieldLabel").toExpression("#optFrfDivPayReqDt.value");
					dateInput_2.bind("value").toDataMap(app.lookup("dmRow"), "DIV_PAY_REQ_DT");
					container.addChild(dateInput_2, {
						"top": "30px",
						"left": "90px",
						"width": "130px",
						"height": "25px"
					});
					var output_11 = new cpr.controls.Output("optFrfDivPayType");
					output_11.value = "";
					output_11.style.setClasses(["require"]);
					output_11.bind("value").toLanguage("UI-SCR-PAYTYPE");
					container.addChild(output_11, {
						"top": "30px",
						"left": "230px",
						"width": "80px",
						"height": "25px"
					});
					var comboBox_2 = new cpr.controls.ComboBox("cbbFrfDivPayType");
					comboBox_2.userAttr({"require": "Y"});
					comboBox_2.bind("fieldLabel").toExpression("#optFrfDivPayType.value");
					comboBox_2.bind("value").toDataMap(app.lookup("dmRow"), "DIV_PAY_TYPE_CD");
					(function(comboBox_2){
						comboBox_2.setItemSet(app.lookup("dsListDivPayType"), {
							"label": "DIV_PAY_TYPE_NM",
							"value": "DIV_PAY_TYPE_CD"
						});
					})(comboBox_2);
					container.addChild(comboBox_2, {
						"top": "30px",
						"left": "315px",
						"width": "130px",
						"height": "25px"
					});
					var output_12 = new cpr.controls.Output("optFrfDivPayNo");
					output_12.value = "";
					output_12.bind("value").toLanguage("NLS-SCR-DIVPAYNO");
					container.addChild(output_12, {
						"top": "30px",
						"left": "455px",
						"width": "80px",
						"height": "25px"
					});
					var numberEditor_3 = new cpr.controls.NumberEditor("ipbFrfDivPayNo");
					numberEditor_3.enabled = false;
					numberEditor_3.format = "9,999,999,999";
					numberEditor_3.bind("fieldLabel").toExpression("#optFrfDivPayNo.value");
					numberEditor_3.bind("value").toDataMap(app.lookup("dmRow"), "DIV_PAY_NO");
					container.addChild(numberEditor_3, {
						"top": "30px",
						"left": "540px",
						"width": "461px",
						"height": "25px"
					});
					var output_13 = new cpr.controls.Output("optFrfDivPayStatRcd");
					output_13.value = "";
					output_13.style.setClasses(["require"]);
					output_13.bind("value").toLanguage("UI-SCR-DIVPAYSTAT");
					container.addChild(output_13, {
						"top": "5px",
						"left": "5px",
						"width": "80px",
						"height": "25px"
					});
					var comboBox_3 = new cpr.controls.ComboBox("cbbFrfDivPayStatRcd");
					comboBox_3.userAttr({"require": "Y"});
					comboBox_3.bind("fieldLabel").toExpression("#optFrfDivPayStatRcd.value");
					comboBox_3.bind("value").toDataMap(app.lookup("dmRow"), "DIV_PAY_STAT_RCD");
					(function(comboBox_3){
						comboBox_3.setItemSet(app.lookup("dsListDivPayStat"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_3);
					container.addChild(comboBox_3, {
						"top": "5px",
						"left": "90px",
						"width": "130px",
						"height": "25px"
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "5px",
					"left": "5px",
					"width": "1014px",
					"height": "56px"
				});
				var button_5 = new cpr.controls.Button("btnCrtDivPay");
				button_5.value = "";
				button_5.bind("value").toLanguage("UI-SCR-DIVPAYMK");
				if(typeof onBtnCrtDivPayClick == "function") {
					button_5.addEventListener("click", onBtnCrtDivPayClick);
				}
				container.addChild(button_5, {
					"top": "65px",
					"left": "5px",
					"width": "60px",
					"height": "25px"
				});
				var button_6 = new cpr.controls.Button("btnSaveCancDivPay");
				button_6.value = "";
				button_6.style.setClasses(["btn-save"]);
				button_6.bind("value").toLanguage("UI-SCR-DIVPAYCACL");
				if(typeof onBtnSaveCancDivPayClick == "function") {
					button_6.addEventListener("click", onBtnSaveCancDivPayClick);
				}
				container.addChild(button_6, {
					"top": "65px",
					"left": "70px",
					"width": "60px",
					"height": "25px"
				});
				var userDefinedControl_2 = new udc.com.comFormTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-DIVPAY");
				container.addChild(userDefinedControl_2, {
					"top": "65px",
					"left": "145px",
					"width": "165px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"left": "0px",
				"width": "1025px",
				"height": "430px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_1.ctrl = linker.grid_1;
		}
	});
	app.title = "stdCrsCRegFeeDivPay";
	cpr.core.Platform.INSTANCE.register(app);
})();
