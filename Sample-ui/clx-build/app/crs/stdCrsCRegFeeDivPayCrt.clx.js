/*
 * App URI: app/crs/stdCrsCRegFeeDivPayCrt
 * Source Location: app/crs/stdCrsCRegFeeDivPayCrt.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/crs/stdCrsCRegFeeDivPayCrt", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCrsCRegFeeDivPayCrt.xtm"/>
			
			/**
			 * 분할납부신규생성
			 * @class stdCrsCRegFeeDivPayCrt
			 * @author Aeyoung Lee 2016. 3. 24
			 */
			var stdCrsCRegFeeDivPayCrt = function() {
				var moPage = new Page();
				
				/**
				 * @desc import 헤더 초기화
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 3. 24
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc OnLoad 이벤트
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				moPage.onLoadImportDone_StdCssPCollScalPmntCrt = function() {
					// 리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptDivPayProcPop"]);
					
					// 서브미션 호출
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, ["cbbDivPayType"]);
							
							doSetCondition();
						}
					});
				};
				
				/**
				 * @desc 부모창으로부터 받은 조건 세팅
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 24
				 */
				function doSetCondition() {
					// 부모창 값 셋팅
					var voRegDivPayCrtParam =  ExtPopUp.getParentVal("moRegDivPayCrtParam");
					
					util.Control.setValue(app, "dipDivPayReqDt", voRegDivPayCrtParam.divPayReqDt);
					util.Control.setValue(app, "ipbDivPayStatRcd", voRegDivPayCrtParam.divPayStatRcd);
					util.Control.setValue(app, "ipbDivPayDesc", voRegDivPayCrtParam.divPayDesc);
					util.Control.setValue(app, "cbbDivPayType", voRegDivPayCrtParam.divPayTypeCd);
					
					util.DataMap.setValue(app, "dmSearchData", "strStudId", voRegDivPayCrtParam.studId);
					util.DataMap.setValue(app, "dmSearchData", "strSchYearRcd", voRegDivPayCrtParam.schYearRcd);
					util.DataMap.setValue(app, "dmSearchData", "strSmtRcd", voRegDivPayCrtParam.smtRcd);
					util.DataMap.setValue(app, "dmSearchData", "strRegClsRcd", voRegDivPayCrtParam.regCls);
					
					doList(function(pbSuccess) {
						if (pbSuccess){
							// "조회되었습니다."
							util.Msg.notify(app, "NLS.INF.M024");					
						}
					});
					
				};		
				
				/**
				 * @desc 분납대상 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 24
				 */
				function doList(poCallBackFunc) {
					
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdDivPayProcPop");
						} 
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				};
				
				/**
				 * @desc [btnSaveCrtDivPay]분납생성 onClick 이벤트
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 24
				 */
				moPage.onClick_BtnCrtDivPay = function() {
					// Validation Check
					if(!util.validate(app, ["grpCond"])) return false;
					
					var vnRptRowCnt = util.Grid.getRowCount(app, "grdDivPayProcPop");
					if (vnRptRowCnt <= 0 ) {
						util.Msg.alert("NLS-CRS-M055");	//분납대상자료가 없습니다. 
						return false;
					}
					
					var vnTotAmt = 0;
					for(var i = 1; i <= vnRptRowCnt; i++) {
						var vsDivItemCd = util.Grid.getCellValue(app, "grdDivPayProcPop", "ITEM_CD", i);
						var vnDivAmt = Number(util.Grid.getCellValue(app, "grdDivPayProcPop", "AMT", i));
						
						vnTotAmt = vnTotAmt + vnDivAmt;
						
						var vnItemSumAmt = 0; //항목별 합계금액
						
						for(var j = 1; j <= vnRptRowCnt; j++) {
							var vsSubDivItemCd = util.Grid.getCellValue(app, "grdDivPayProcPop", "ITEM_CD", j);
							var vnSubDivAmt = Number(util.Grid.getCellValue(app, "grdDivPayProcPop", "AMT", j));
							
							if(vsDivItemCd != vsSubDivItemCd) continue;
							
							vnItemSumAmt = vnItemSumAmt + vnSubDivAmt;
						}
						
						//장학금이 등록금보다 더 큰 항목이 존재합니다. 처리 불가능합니다. 
						if(vnItemSumAmt < 0) {	
							util.Msg.alert("NLS-CRS-M057"); 
							return;
						}	
					}	
					
					// 분납처리할 대상금액이 없습니다.
					if(vnTotAmt == 0){
						util.Msg.alert("NLS-CRS-M056"); 
						return;
					} 
					
					util.Grid.setRowStateAll(app, "grdDivPayProcPop", cpr.data.tabledata.RowState.UPDATED); 
					
					// 분납생성 서브미션
					//strCommand: createDivPay 
					util.Submit.send(app, "subCrtDivPay", function(pbSuccess){
						if(pbSuccess){
							if(ExtPopUp.isPopUp()){
								ExtPopUp.closeLayeredPopup("callbackRegFeeDivPayCrt", true);
							}	
						}	
					});
				};
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsListDivPayType");
			dataSet_1.parseData({
				"columns": [
					{"name": "DIV_PAY_TYPE_CD"},
					{"name": "DIV_PAY_TYPE_NM"},
					{"name": "EXP_YN"},
					{"name": "EXP_DT"},
					{"name": "DIV_PAY_CNT"},
					{"name": "ITV_TYPE_RCD"},
					{"name": "RND_LOC"},
					{"name": "ITV_VAL"},
					{"name": "BLNC_ADD_METHOD_RCD"},
					{"name": "REMARK"},
					{"name": "REF_KEY"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsListDivPayProc");
			dataSet_2.parseData({
				"info": "CRS_DIV_PAY_DTL@DIV_PAY_NO,DIV_PAY_SERIAL_NO",
				"columns": [
					{"name": "REF_KEY"},
					{"name": "FEE_GBN"},
					{"name": "DIV_PAY_NO"},
					{"name": "PAY_CLOSE_DT"},
					{"name": "DIV_PAY_SERIAL_NO"},
					{"name": "ITEM_NM"},
					{"name": "DIV_PAY_SEQ"},
					{"name": "ITEM_CD"},
					{"name": "AMT"},
					{"name": "REMARK"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmSearchData");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strStudId",
						"dataType": "string"
					},
					{
						"name": "strSchYearRcd",
						"dataType": "string"
					},
					{
						"name": "strSmtRcd",
						"dataType": "string"
					},
					{
						"name": "strRegClsRcd",
						"dataType": "string"
					},
					{
						"name": "strPaycloseDt",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmRegFeeData");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strDivPayReqDt",
						"dataType": "string"
					},
					{
						"name": "strDivPayStatRcd",
						"dataType": "string"
					},
					{
						"name": "strDivPayTypeCd",
						"dataType": "string"
					},
					{
						"name": "strDivPayDesc",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/crs/StdCrsRegFeeDivPayCrt/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/crs/StdCrsRegFeeDivPayCrt/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subCrtDivPay");
			submission_3.action = "/crs/StdCrsRegFeeDivPayCrt/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_1);
			submission_3.addRequestData(dataMap_2);
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpCond");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var dateInput_1 = new cpr.controls.DateInput("dipDivPayReqDt");
				dateInput_1.style.css({
					"text-align" : "center"
				});
				dateInput_1.bind("fieldLabel").toExpression("#optDivPayReqDt.value");
				dateInput_1.bind("value").toDataMap(app.lookup("dmRegFeeData"), "strDivPayReqDt");
				container.addChild(dateInput_1, {
					"top": "5px",
					"left": "100px",
					"width": "110px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optDivPayReqDt");
				output_1.value = "";
				output_1.bind("value").toLanguage("UI-DB-DIV_PAY_REQ_DT");
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "90px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optDivPayStatRcd");
				output_2.value = "";
				output_2.style.setClasses(["require"]);
				output_2.bind("value").toLanguage("UI-SCR-DIVPAYSTAT");
				container.addChild(output_2, {
					"top": "5px",
					"left": "220px",
					"width": "110px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optDivPayDesc");
				output_3.value = "";
				output_3.bind("value").toLanguage("UI-SCR-DIVPAYLST");
				container.addChild(output_3, {
					"top": "29px",
					"left": "5px",
					"width": "90px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbDivPayDesc");
				inputBox_1.maxLength = 500;
				inputBox_1.bind("fieldLabel").toExpression("#optDivPayDesc.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmRegFeeData"), "strDivPayDesc");
				container.addChild(inputBox_1, {
					"top": "29px",
					"left": "100px",
					"width": "485px",
					"height": "25px"
				});
				var output_4 = new cpr.controls.Output("optDivPayType");
				output_4.value = "";
				output_4.style.setClasses(["require"]);
				output_4.bind("value").toLanguage("UI-SCR-PAYTYPE");
				container.addChild(output_4, {
					"top": "53px",
					"left": "5px",
					"width": "90px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbDivPayType");
				comboBox_1.userAttr({"require": "Y"});
				comboBox_1.bind("fieldLabel").toExpression("#optDivPayType.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmRegFeeData"), "strDivPayTypeCd");
				(function(comboBox_1){
					comboBox_1.setItemSet(app.lookup("dsListDivPayType"), {
						"label": "DIV_PAY_TYPE_NM",
						"value": "DIV_PAY_TYPE_CD"
					});
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"top": "53px",
					"left": "100px",
					"width": "110px",
					"height": "25px"
				});
				var output_5 = new cpr.controls.Output("optPayCloseDt");
				output_5.value = "";
				output_5.style.setClasses(["require"]);
				output_5.bind("value").toLanguage("UI-SCR-FIRPAYDUEDT");
				container.addChild(output_5, {
					"top": "53px",
					"left": "220px",
					"width": "110px",
					"height": "25px"
				});
				var dateInput_2 = new cpr.controls.DateInput("dipPayCloseDt");
				dateInput_2.userAttr({"require": "Y"});
				dateInput_2.style.css({
					"text-align" : "center"
				});
				dateInput_2.bind("fieldLabel").toExpression("#optPayCloseDt.value");
				dateInput_2.bind("value").toDataMap(app.lookup("dmSearchData"), "strPaycloseDt");
				container.addChild(dateInput_2, {
					"top": "53px",
					"left": "334px",
					"width": "140px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbDivPayStatRcd");
				inputBox_2.visible = false;
				inputBox_2.maxLength = 500;
				inputBox_2.userAttr({"require": "Y"});
				inputBox_2.bind("fieldLabel").toExpression("#optDivPayStatRcd.value");
				inputBox_2.bind("value").toDataMap(app.lookup("dmRegFeeData"), "strDivPayStatRcd");
				container.addChild(inputBox_2, {
					"top": "5px",
					"left": "334px",
					"width": "111px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "590px",
				"height": "80px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-DIVPAYOBJLST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "252px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdDivPayProcPop");
				grid_1.init({
					"dataSet": app.lookup("dsListDivPayProc"),
					"columns": [
						{"width": "40px"},
						{"width": "117px"},
						{"width": "126px"},
						{"width": "177px"},
						{"width": "105px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-TUITIONITEM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-AMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-REMARK");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-DIVISION");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "ITEM_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "AMT";
									cell.control = (function(){
										var output_6 = new cpr.controls.Output("gdOptAmt");
										output_6.dataType = "number";
										output_6.format = "s#,###";
										output_6.style.css({
											"text-align" : "right"
										});
										output_6.bind("value").toDataColumn("AMT");
										return output_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "REMARK";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "FEE_GBN";
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "580px",
					"height": "255px"
				});
				var button_1 = new cpr.controls.Button("btnSaveCrtDivPay");
				button_1.value = "";
				button_1.style.setClasses(["btn-save"]);
				button_1.bind("value").toLanguage("UI-SCR-DIVPAYMK");
				if(typeof onBtnSaveCrtDivPayClick == "function") {
					button_1.addEventListener("click", onBtnSaveCrtDivPayClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "525px",
					"width": "60px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "120px",
				"left": "5px",
				"width": "590px",
				"height": "290px"
			});
			
			var button_2 = new cpr.controls.Button("btnCloseCancel");
			button_2.value = "";
			button_2.style.setClasses(["btn-commit"]);
			button_2.bind("value").toLanguage("UI-SCR-SCRNCLS");
			if(typeof onBtnCloseCancelClick == "function") {
				button_2.addEventListener("click", onBtnCloseCancelClick);
			}
			container.addChild(button_2, {
				"top": "415px",
				"left": "5px",
				"width": "60px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "분할납부신규생성";
	cpr.core.Platform.INSTANCE.register(app);
})();
