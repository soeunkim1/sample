/*
 * App URI: app/crs/stdCrsCRegFeeMgt
 * Source Location: app/crs/stdCrsCRegFeeMgt.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/crs/stdCrsCRegFeeMgt", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCrsCRegFeeMgt.xtm"/>
			
			
			var stdCrsCRegFeeMgt = function() {
				var moPage = new Page();
				//임포트용 데이터 통신 오브젝트
				var moPObject = new PObject();
				
				// 트리뷰 
				var msTrv = {
					initVal : null,
					initValNm : null,
					beforeVal : null,
					beforeValNm : null
				};
				
				// 학생정보 오브젝트 정보 및 학년도 학기 정보 
				// 서브페이지 사용용
				moPage.moCmnInfo = {
					studId		: null,
					studNo		: null,
					studNm		: null,
					ogCd		: null,
					ogNm		: null,
					saCd   		: null,
					saNm		: null,
					spCd		: null,
					spNm		: null,
					statRcd		: null,
					statNm		: null,
					
					schYearRcd 	: null,
					smtRcd 		: null,
					currentDt 	: null,
					stDt 		: null,
					endDt 		: null
				};
				
				/**
				 * 학생검색팝업 관련 설정사항
				 * 설정가능 유형 : 
				 *   1. 인스턴스((/root/시작))
				 *   2. 그리드의 셀 (ghc시작)
				 *   3. 컨트롤 id
				 * 각 변수별 설명
				 *  iXXX : 팝업으로 input 전달될 파라미터
				 *  oXXX : 팝업에서 선택한 값을 받을 컬럼 아이디
				 *  1. controlId 		: 최초 이벤트의 버튼이나 그리드 id	(필수)
				 *  2. iStudNo 			: 검색조건 학번						(선택) (값이 존재할 경우 4자리 이상)
				 *  3. iStudId 			: 검색조건 학번오브젝트				(선택)
				 *  4. iStudNm 			: 이름        						(선택) (값이 존재할 경우 2자리 이상)
				 *  5. iKeyDate 		: 기준일 							(필수)
				 *  6. iObjDivRcd 		: 객체구분코드 						(선택)
				 *  7. iObjCd 			: 부서코드							(선택)
				 *  8. iObjNm 			: 부서명							(선택) 
				 *  9. iAuthYN			: 권한미적용여부 (미적용시: "Y")	(선택) 
				 *  10. iStatRcd		: 학적상태							(선택) 
				 *  11. iStudDivRcd		: 학생구분							(선택) 
				 *  12. oStudId			: 학번오브젝트
				 *  13. oStudNo 		: 학번
				 *  14. oStudNm 		: 이름
				 *  15. oStatNm 		: 학적상태명
				 *  16. oStatRcd 		: 학적상태코드
				 *  17. oProcRslt 		: 진급학기
				 *  18. oProcRsltYear 	: 진급학년
				 *  19. oSaCd 			: 학사부서코드명
				 *  20. oSaNm 			: 학사부서명
				 *  21. oSpCd 			: 이수과정코드명
				 *  22. oSpNm 			: 이수과정명
				 *  23. oOgCd 			: 행정부서코드명
				 *  24. oOgNm 			: 행정부서명
				 *  25. oStudDivRcd		: 학생구분코드
				 *  26. oStudDivNm		: 학생구분명
				 *  27. oBirthday		: 생년월일
				 *  28. oGenderRcd		: 성별코드
				 *  29. oGenderNm		: 성별명
				 *  30. func 			: 팝업에서 선택한 값을 받은 후 추가 로직이 필요한 경우 함수 작성
				 */
				moPObject.moIdsForStdCsrPStSearch = [
				{
					controlId 		: "btnPopSearch",
					iStudNo 		: "ipbSchStudId",	
					iStudId 		: "",
					iStudNm 		: "",
					iKeyDate 		: "", 
					iObjDivRcd 		: "",
					iObjCd 			: "",
					iObjNm 			: "",
					iAuthYN 		: "",
					iStatRcd 		: "",
					iStudDivRcd		: "",
					oStudId 		: "ipbSchStudIdObj",
					oStudNo 		: "ipbSchStudId",
					oStudNm 		: "",
					oStatNm 		: "",
					oStatRcd 		: "",
					oProcRslt 		: "",
					oProcRsltYear 	: "",
					oSaNm			: "",
					oSaCd 			: "",
					oSpNm 			: "",
					oSpCd 			: "",
					oOgNm 			: "",
					oOgCd 			: "",
					oStudDivRcd		: "",
					oStudDivNm		: "",
					oBirthday		: "",
					oGenderRcd		: "",
					oGenderNm		: "",
					func : function(poParam) {
						doStSearch(poParam);
					}
				}
				];
				
				/**
				 * @desc import 헤더 초기화
				 * @member stdCrsCRegFeeMgt
				 * @param
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					doHeaderOnLoad();
				};
				
				/**
				 * @desc import 학생정보 임포트 초기화
				 * @member stdCrsCRegFeeMgt
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */
				moPage.onLoadImportDone_ImpStudInfo = function() {
					impStudInfo();
				};
				
				/**
				 * @desc 공통코드 호출 및 화면 초기화
				 * @member stdCrsCRegFeeMgt
				 * @param
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */	
				function doOnLoad() {
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", "grpData");
					
					//학년도 학기 검색임포트
					doOnLoadImpNS("CRS");
					
					util.DataMap.setValue(app, "dmReqKey", "strOprtRoleId", moPageInfo.oprt_role_id);
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, ["cbbRegCls","trvMenuList"]);
							
							// 학년도 학기 기본값 셋팅
							moCmnInfo.schYearRcd = util.Control.getValue(app, "cbbYearImpNS");
							moCmnInfo.smtRcd = util.Control.getValue(app, "cbbSmtImpNS");
							moCmnInfo.stDt = ExtInstance.getValue("instance('impCommonN')/root/date/ST_DT");
							moCmnInfo.endDt = ExtInstance.getValue("instance('impCommonN')/root/date/END_DT");
							moCmnInfo.currentDt = util.DataMap.getValue(app, "dmDate", "CUT_DT");
							
							// 등록분류 초기값 셋팅
							var vsDefaultRegCls = ExtInstance.getValue("/root/resOnLoad/listRegCls/row", "CD" , "child::CD_PRP1='Y'");
							moCmnInfo.regClsRcd = vsDefaultRegCls;
							
							moPObject.moIdsForStdCsrPStSearch[0].iKeyDate = moCmnInfo.endDt;
							
							if(ExtInstance.getNodeListLength("/root/resOnLoad/trvMenuList") > 0){
								//스텝1프로그램 추출: PRT_ORD 첫번째(ORDERED BY PRT_ORD되어있음)
								msTrv.initVal = util.DataSet.getValue(app, "dsTrvMenuList, 1, "CD_PRP2");
								msTrv.initValNm = util.DataSet.getValue(app, "dsTrvMenuList, 1, "CD_PRP1");
								msTrv.beforeVal = msTrv.initVal;
								msTrv.beforeValNm = msTrv.initValNm;
							}
							
						}
						
						util.SelectCtl.selectItem(app, "cbbRegCls", vsDefaultRegCls);
						util.Control.setFocus(app, "ipbSchStudId");
						
						//impStudInf02(학생정보 임포트) 초기화
						initSize();
					});
				};
				
				/**
				 * @desc 학년도 학기 임포트 값 변경 시 호출 함수 
				 * 		- 기준일자 셋팅및 학생정보 초기화
				 * @member stdCrsCRegFeeMgt
				 * @author Aeyoung Lee 2016. 3. 30.
				 */
				function doSetKeyDateYearSmtImp() {
					var vsEndDt = ExtInstance.getValue("instance('impCommonN')/root/date/END_DT");
					moPObject.moIdsForStdCsrPStSearch[0].iKeyDate = vsEndDt;
					
					// 2016.08.31 학년도/학기에 따른 학번 클리어 주석
			//		// 변경 시 학생정보 초기화
			//		ExtControl.setValue("ipbSchStudId", "");
			//		ExtControl.setValue("ipbSchStudIdObj", "");
			//		
			//		moPage.doStSearch(null);
				};	
				
				/**
				 * @desc 등록분류 입력창 클릭 이벤트 
				 * @member stdCrsCRegFeeMgt
				 * @author Aeyoung Lee 2016. 3. 30.
				 */
				moPage.onFocusReceive_CbbRegCls = function() {
					// 학생정보 및 등록사항 초기화
					doRestImpInfo();
				};
				
				/**
				 * @desc 학생검색 입력창 클릭 이벤트 
				 * @member stdCrsCRegFeeMgt
				 * @author Aeyoung Lee 2016. 3. 30.
				 */
				moPage.onClick_IpbSchStudId = function() {
					// 학생정보 및 등록사항 초기화
					doRestImpInfo();
				};
				
				/**
				 * @desc 학생정보 및 등록사항 초기화
				 * @member stdCrsCRegFeeMgt
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 30.
				 */
				function doRestImpInfo() {
					// 2016.04.22 학생정보, 등록사항이 프리폼으로 변경해서 초기화작업이 공통단에서 이루어 지도록 함
			//		// 학생정보 초기화
			//		clearImpStudInfo02();
			//		// 등록사항 초기화
			//		ExtControl.setValue("ipbRegInfo", "");
				};
				
				/**
				 * @desc 학생검색 팝업을 호출한다.
				 * @member stdCrsCRegFeeMgt
				 * @param sender 버튼의 이벤트 객체
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */
				moPage.onClick_BtnPopSearch = function(sender) {
					// 학생정보 및 등록사항 초기화
					doRestImpInfo();
					
					if(!util.validate(app, "cbbYearImpNS", "cbbSmtImpNS")) return;
					
					doOnClickStdCsrPStSearch(sender);
				};
				
				/**
				 * @desc 학생 검색
				 * @member stdCrsCRegFeeMgt
				 * @param sender 인풋박스 이벤트 객체
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */
				moPage.onValueChanged_IpbSchStudId = function(sender) {
					if(!util.validate(app, "cbbYearImpNS", "cbbSmtImpNS")) return;
					
					doOnChangeStdCsrPStSearch(sender);
				};
				
				/**
				 * @desc 입력된 학생정보 셋팅한 후 조회이벤트 호출
				 * @member stdCrsCRegFeeMgt
				 * @param poParam 학생정보
				 * @param poCallbackFunc 콜백함수정의
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */	
				function doStSearch(poParam, poCallbackFunc) {
					moCmnInfo.studId 	= null;
					moCmnInfo.studNo 	= null;
					moCmnInfo.studNm 	= null;
					moCmnInfo.ogCd		= null;
					moCmnInfo.ogNm		= null;
					moCmnInfo.saCd   	= null;
					moCmnInfo.saNm		= null;
					moCmnInfo.spCd		= null;
					moCmnInfo.spNm		= null;
					moCmnInfo.statRcd	= null;
					moCmnInfo.statNm	= null;
					
					var vsStudId = util.Control.getValue(app, "ipbSchStudId");
					
					if(!ValueUtil.isNull(vsStudId)){
						moCmnInfo.studId 	= poParam.Result.strStudId;
						moCmnInfo.studNo 	= poParam.Result.strStudNo; 
						moCmnInfo.studNm 	= poParam.Result.strStudNm;
						moCmnInfo.ogCd		= poParam.Result.strOgCd;
						moCmnInfo.ogNm		= poParam.Result.strOgNm;
						moCmnInfo.saCd   	= poParam.Result.strSaCd;
						moCmnInfo.saNm		= poParam.Result.strSaNm;
						moCmnInfo.spCd		= poParam.Result.strSpCd;
						moCmnInfo.spNm		= poParam.Result.strSpNm;
						moCmnInfo.statRcd	= poParam.Result.strStatRcd;
						moCmnInfo.statNm	= poParam.Result.strStatNm;
						
						var vsYear 	 = util.Control.getValue(app, "cbbYearImpNS");
						var vsSmt 	 = util.Control.getValue(app, "cbbSmtImpNS");
						var vsRegCls = util.Control.getValue(app, "cbbRegCls");
						
						if((!ValueUtil.isNull(vsYear)) && (!ValueUtil.isNull(vsSmt)) && (!ValueUtil.isNull(vsRegCls))){
							util.Header.clickSearch(app);
						}
					}
				};
				
				/**
				 * @desc 조회버튼 클릭 이벤트
				 * @member stdCrsCRegFeeMgt
				 * @param
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */
				moPage.onClick_BtnSearch = function() {
					if(!util.validate(app, ["grpSearch"])) return false;
					
					// 학년도 학기 기본값 셋팅
					moCmnInfo.schYearRcd = util.Control.getValue(app, "cbbYearImpNS");
					moCmnInfo.smtRcd = util.Control.getValue(app, "cbbSmtImpNS");
					moCmnInfo.stDt = ExtInstance.getValue("instance('impCommonN')/root/date/ST_DT");
					moCmnInfo.endDt = ExtInstance.getValue("instance('impCommonN')/root/date/END_DT");
					moCmnInfo.currentDt = util.DataMap.getValue(app, "dmDate", "CUT_DT");
					moCmnInfo.regClsRcd = util.DataMap.getValue(app, "dmReqKey", "strRegClsRcd");
					
					var poImpStudInfoCallbackFunc = function(pbImpStudInfoCallBack) {
							
						if(pbImpStudInfoCallBack) {
							ExtTreeView.findItemValue("trvMenuList",  msTrv.initVal, "VALUE", false);
							
							//subPage 권한
							this.checkOperSbp(msTrv.initVal, function(pbOperSbp) {
								if(pbOperSbp){
									//초기 서브페이지 호출
									ExtSubPage.setPage("htmlObjFrame", "xtm/crs/"+msTrv.initVal+".xtm", true);
								} 
							});
							
							//등록정보서비스팩토리콜	
							doSetRegInfo();
						}
					}
					
					//학번에 해당하는 학생정보를 가져온다.
					var vsStudId = util.DataMap.getValue(app, "dmReqKey", "strStudId");
					setImpStudInfo(vsStudId, moCmnInfo.endDt, null, poImpStudInfoCallbackFunc);
				};
				
				
				/**
				 * @desc subPage 권한을 체크한다.
				 * @member stdCrsCRegFeeMgt
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */	
				moPage.checkOperSbp = function(pbPgmId, poCallbackFunc) {
					
					util.DataMap.setValue(app, "dmReqKey", "strPgmId",pbPgmId);
					//strCommand: operSbp 
					util.Submit.send(app, "subOperSbp", function(pbSuccess){
						if(pbSuccess){
							
							var vsOperSbp =  util.DataMap.getValue(app, "dmResOnLoad", "strOperSbp");
							if(util.isFunc(poCallbackFunc)) poCallbackFunc(vsOperSbp); 
							
						}else{
							if(util.isFunc(poCallbackFunc)) poCallbackFunc(false); 
						}	
					});	
				};	
				
				/**
				 * @desc 등록정보 서비스팩토리 호출하여 등록사항에 셋팅
				 * @member stdCrsCRegFeeMgt
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */	
				function doSetRegInfo() {
					
					//strCommand: regInfo 
					util.Submit.send(app, "subRegInfo", function(pbSuccess){
						if(!pbSuccess){
							util.DataMap.setValue(app, "dmFrfCrsInfo", "strRegInfo", NLS.CRS.M060);
						}
						util.Control.redraw(app, "ipbRegInfo");
					});	
				};
				
				/**
				 * @desc 트리 항목 선택시 해당 서브페이지 호출
				 * @member stdCrsCRegFeeMgt
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */
				moPage.onSelectionChanged_TrvMenuList = function() {
					var vsPageVal = util.Tree.getSelectedValue(app, "trvMenuList");
					if(vsPageVal == null) return false;
					
					//if(msTrv.beforeVal == vsPageVal) return;
					
					// 변경내역 확인 & 페이지 이동
					doCheckSaveData(function(pbSuccess){
						if (pbSuccess) {
							var vsTrvValue = util.Tree.getSelectedValue(app, "trvMenuList");
							
							this.checkOperSbp(vsTrvValue, function(pbOperSbp){
								if(pbOperSbp){
									ExtSubPage.setPage("htmlObjFrame", "xtm/crs/"+vsTrvValue+".xtm", true);
								} else {
									util.Msg.alert("NLS-CMM-M019(this-getPageNm(vsPageVal") + "(" + vsPageVal + ")"));
									ExtTreeView.findItemValue("trvMenuList", msTrv.beforeVal, "VALUE", false);
								}
							});
							
						}else{
							ExtTreeView.findItemValue("trvMenuList", msTrv.beforeVal, "VALUE", false);
						}		
					});
					
				};
				
				/**
				 * @desc 트리 선택 이벤트 발생시 이전 페이지 값을 세팅
				 * @member stdCrsCRegFeeMgt
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */
				moPage.onDeselectionChanged_TrvMenuList = function() {
					// 이전 메뉴
					msTrv.beforeVal = util.Tree.getSelectedValue(app, "trvMenuList");
				};
				
				/**
				 * @desc 메뉴클릭시 서브페이지의 변경여부 확인/저장 로직
				 * @member stdCrsCRegFeeMgt
				 * @param poCallbackFunc 변경여부 확인 후 실행 될 콜백 함수
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 21.
				 */	
				function doCheckSaveData(poCallbackFunc){
			
					//** 서브페이지 함수에 접근하는지 확인 - 데이타 변경여부를 확인
					var voSbpFramePage = ExtSubPage.getSubPage("htmlObjFrame");
					
					if (voSbpFramePage != null && voSbpFramePage.callScript("doCheckDataChange", null)) {
						if(util.isFunc(poCallbackFunc)) poCallbackFunc(true);
					}else{
						//이전 서브페이지에 멈춰있음
						ExtTreeView.findItemValue("trvMenuList",  msTrv.beforeVal, "VALUE", false);
						if(util.isFunc(poCallbackFunc)) poCallbackFunc(false);
					}
				};
				
				/**
				 * @desc CD값에 대한 코드명을 가져온다.
				 * @member stdCrsCRegFeeMgt
				 * @param psTrvNodeVal 트리컨트롤에서 선택한 아이템 노드의 Value
				 * @return {String} 코드명 반환
				 * @author Aeyoung Lee 2016. 3. 21.
				 */ 
				moPage.getPageNm = function(psTrvNodeVal) {
					var vsPageNm = ExtInstance.getValue("/root/resOnLoad/trvMenuList/row", "CD_PRP1", "child::CD='" + psTrvNodeVal + "'");
					return vsPageNm;
				};
				
				/**
				 * @desc header에 메시지 출력(서브페이지에서 사용)
				 * @member stdCrsCRegFeeMgt
				 * @param psMsgCode 메시지 코드
				 * @param paMsg 메시지 변수 
				 * @author Aeyoung Lee 2016. 3. 21.
				 */ 
				function doSetMsg(psMsg, paMsg) {
					util.Msg.notify(app, "psMsg", paMsg);
				};
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsTrvMenuList");
			dataSet_1.parseData({
				"columns": [
					{"name": "PRT_ORD"},
					{"name": "STD_YN"},
					{"name": "LAN_DIV_RCD"},
					{"name": "CD_NM"},
					{"name": "UCD"},
					{"name": "CD_LEN"},
					{"name": "CD_PRP10"},
					{"name": "CD_PRP1"},
					{"name": "ULAN_DIV_RCD"},
					{"name": "CD_PRP2"},
					{"name": "CD_PRP3"},
					{"name": "CD_PRP4"},
					{"name": "CD_PRP5"},
					{"name": "CD_PRP6"},
					{"name": "CD_PRP7"},
					{"name": "CD_PRP8"},
					{"name": "CD_PRP9"},
					{"name": "CD_DESC"},
					{"name": "UNIT_SYSTEM_RCD"},
					{"name": "EFFT_END_DT"},
					{"name": "CD"},
					{"name": "CD_CLS"},
					{"name": "CD_SHORT_NM"},
					{"name": "EFFT_ST_DT"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsListRegCls");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strYearRcd",
						"dataType": "string"
					},
					{
						"name": "strSmtRcd",
						"dataType": "string"
					},
					{
						"name": "strRegClsRcd",
						"dataType": "string"
					},
					{
						"name": "strStudId",
						"dataType": "string"
					},
					{
						"name": "strStudNo",
						"dataType": "string"
					},
					{
						"name": "strOprtRoleId",
						"dataType": "string"
					},
					{
						"name": "strPgmId",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmDate");
			dataMap_2.parseData({
				"columns" : [{
					"name": "CUT_DT",
					"dataType": "string"
				}]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "strOperSbp",
						"dataType": "string"
					},
					{
						"name": "strExistFlag",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmFrfCrsInfo");
			dataMap_4.parseData({
				"columns" : [{
					"name": "strRegInfo",
					"dataType": "string"
				}]
			});
			app.register(dataMap_4);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/crs/StdCrsRegFeeMgt/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataMap_2, false);
			submission_1.addResponseData(dataSet_2, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subOperSbp");
			submission_2.action = "/crs/StdCrsRegFeeMgt/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataMap_3, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subRegInfo");
			submission_3.action = "/crs/StdCrsRegFeeMgt/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_1);
			submission_3.addRequestData(dataMap_2);
			submission_3.addResponseData(dataMap_4, false);
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaStudInfo");
				if(typeof onEmaStudInfoAppReady == "function") {
					embeddedApp_1.addEventListener("app-ready", onEmaStudInfoAppReady);
				}
				cpr.core.App.load("app/csr/impStudInf02", function(app) {
					if(app){
						embeddedApp_1.app = app;
					}
				});
				container.addChild(embeddedApp_1, {
					"top": "5px",
					"left": "5px",
					"width": "1215px",
					"height": "120px"
				});
				var hTMLObject_1 = new cpr.controls.HTMLObject("htmlObjFrame");
				container.addChild(hTMLObject_1, {
					"top": "155px",
					"left": "190px",
					"width": "1025px",
					"height": "445px"
				});
				var group_2 = new cpr.controls.Container("frfCrsInfo");
				group_2.style.setClasses(["form-box"]);
				// Layout
				var xYLayout_3 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_3);
				(function(container){
					var output_1 = new cpr.controls.Output("optScalInfo");
					output_1.value = "";
					output_1.bind("value").toLanguage("UI-GLS-REG");
					container.addChild(output_1, {
						"top": "5px",
						"left": "105px",
						"width": "75px",
						"height": "25px"
					});
					var inputBox_1 = new cpr.controls.InputBox("ipbRegInfo");
					inputBox_1.readOnly = true;
					inputBox_1.bind("value").toDataMap(app.lookup("dmFrfCrsInfo"), "strRegInfo");
					container.addChild(inputBox_1, {
						"top": "5px",
						"left": "185px",
						"width": "1025px",
						"height": "25px"
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "125px",
					"left": "5px",
					"width": "1215px",
					"height": "30px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "72px",
				"left": "5px",
				"width": "1225px",
				"height": "602px"
			});
			
			var group_3 = new cpr.controls.Container("grpSearch");
			group_3.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_4 = new cpr.controls.layouts.XYLayout();
			group_3.setLayout(xYLayout_4);
			(function(container){
				var output_2 = new cpr.controls.Output("optSchStId");
				output_2.value = "";
				output_2.style.setClasses(["require"]);
				output_2.bind("value").toLanguage("NLS-SCR-STUDID");
				container.addChild(output_2, {
					"top": "5px",
					"left": "580px",
					"width": "70px",
					"height": "25px"
				});
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbSchStudId");
				inputBox_2.userAttr({"require": "Y"});
				inputBox_2.bind("fieldLabel").toExpression("#optSchStId.value");
				inputBox_2.bind("value").toDataMap(app.lookup("dmReqKey"), "strStudNo");
				if(typeof onIpbSchStudIdValueChange == "function") {
					inputBox_2.addEventListener("value-change", onIpbSchStudIdValueChange);
				}
				if(typeof onIpbSchStudIdClick == "function") {
					inputBox_2.addEventListener("click", onIpbSchStudIdClick);
				}
				container.addChild(inputBox_2, {
					"top": "5px",
					"left": "655px",
					"width": "130px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnPopSearch");
				button_2.value = "";
				button_2.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnPopSearchClick == "function") {
					button_2.addEventListener("click", onBtnPopSearchClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "785px",
					"width": "20px",
					"height": "25px"
				});
				var embeddedApp_2 = new cpr.controls.EmbeddedApp("emaYearSmt");
				cpr.core.App.load("app/crs/impCrsYearSmt", function(app) {
					if(app){
						embeddedApp_2.app = app;
					}
				});
				container.addChild(embeddedApp_2, {
					"top": "5px",
					"left": "5px",
					"width": "331px",
					"height": "25px"
				});
				var inputBox_3 = new cpr.controls.InputBox("ipbSchStudIdObj");
				inputBox_3.visible = false;
				inputBox_3.userAttr({"require": "Y"});
				inputBox_3.bind("fieldLabel").toExpression("#optSchStId.value");
				inputBox_3.bind("value").toDataMap(app.lookup("dmReqKey"), "strStudId");
				if(typeof onIpbSchStudIdObjKeydown == "function") {
					inputBox_3.addEventListener("keydown", onIpbSchStudIdObjKeydown);
				}
				if(typeof onIpbSchStudIdObjValueChange == "function") {
					inputBox_3.addEventListener("value-change", onIpbSchStudIdObjValueChange);
				}
				if(typeof onIpbSchStudIdObjClick == "function") {
					inputBox_3.addEventListener("click", onIpbSchStudIdObjClick);
				}
				container.addChild(inputBox_3, {
					"top": "5px",
					"left": "805px",
					"width": "96px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optcbbRegCls");
				output_3.value = "";
				output_3.style.setClasses(["require"]);
				output_3.bind("value").toLanguage("UI-SCR-REGDIV");
				container.addChild(output_3, {
					"top": "5px",
					"left": "345px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbRegCls");
				comboBox_1.userAttr({"require": "Y"});
				comboBox_1.bind("fieldLabel").toExpression("#optcbbRegCls.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strRegClsRcd");
				(function(comboBox_1){
					comboBox_1.setItemSet(app.lookup("dsListRegCls"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				if(typeof onCbbRegClsFocus == "function") {
					comboBox_1.addEventListener("focus", onCbbRegClsFocus);
				}
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "430px",
					"width": "140px",
					"height": "25px"
				});
			})(group_3);
			container.addChild(group_3, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "32px"
			});
			
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var embeddedApp_3 = new cpr.controls.EmbeddedApp("emaort2");
			cpr.core.App.load("app/csr/impStdCsrPStSearch", function(app) {
				if(app){
					embeddedApp_3.app = app;
				}
			});
			container.addChild(embeddedApp_3, {
				"top": "665px",
				"left": "5px",
				"width": "100px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "등록금관리";
	cpr.core.Platform.INSTANCE.register(app);
})();
