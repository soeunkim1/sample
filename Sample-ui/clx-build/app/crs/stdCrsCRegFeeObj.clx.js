/*
 * App URI: app/crs/stdCrsCRegFeeObj
 * Source Location: app/crs/stdCrsCRegFeeObj.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/crs/stdCrsCRegFeeObj", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			///<xtmlink path="./stdCrsCRegFeeObj.xtm"/>
			
			var stdCrsCRegFeeObj = function() {
			
				var moPage = new Page();
				var moPObject = new PObject();
				
				/**
				 * @desc import 서브페이지 초기화
				 * @member stdCrsCRegFeeObj
				 * @param
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				moPage.onLoadImportDone_ImpSbpHeader = function() {
					doSbpHeaderOnLoad();
				}
				
				/**
				 * @desc 화면 온로드
				 * @member stdCrsCRegFeeObj
				 * @param
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				moPage.onModelConstructDone_stdCrsCRegFeeObj = function() {
					//리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["frfRegFee", "rptRegFeeDtl", "rptScalStudPmnt"]);
					
					// 부모창에 있는 값 셋팅
					var voParentInfo = moPage.parent.moCmnInfo;
					
					util.DataMap.setValue(app, "dmReqKey", "strStudId"	 , voParentInfo.studId);
					util.DataMap.setValue(app, "dmReqKey", "strSchYearRcd", voParentInfo.schYearRcd);
					util.DataMap.setValue(app, "dmReqKey", "strSmtRcd"	 , voParentInfo.smtRcd);
					util.DataMap.setValue(app, "dmReqKey", "strStDt"		 , voParentInfo.stDt);
					util.DataMap.setValue(app, "dmReqKey", "strEndDt" 	 , voParentInfo.endDt);
					util.DataMap.setValue(app, "dmReqKey", "strRegClsRcd" , voParentInfo.regClsRcd);
					util.DataMap.setValue(app, "dmReqKey", "strCurrentDt" , voParentInfo.currentDt);
					
					// 등록분류 01이 아니면, 장학금 수혜내역 그리드를 보이지 않도록 처리
					if(voParentInfo.regClsRcd != "CR30101"){
						util.Control.setVisible(app, false, ["rptScalStudPmnt", "lblTitleRptScalStudPmnt", "lblRowCnt_rptScalStudPmnt"]);
						
						util.Control.setStyleAttr(app, "rptRegFeeDtl", "width", 1015);
						util.Control.setStyleAttr(app, "btnSave", "left", 959);
						util.Control.setStyleAttr(app, "btnRestore", "left", 895);
						util.Control.setStyleAttr(app, "btnDel", "left", 830);
						util.Control.setStyleAttr(app, "btnNew", "left", 765);
						util.Control.setStyleAttr(app, "lblRowCnt_rptRegFeeDtl", "left", 700);
					}	
						
					// 조회
					doList(function(pbSuccess) {
						if (pbSuccess){
							//등록금테이블/등록금세부테이블확인
							var vsUsedFlag = util.DataMap.getValue(app, "dmResList", "strUsedFlag");
							if (vsUsedFlag == "N") {
								doSetFrfDefaultData();
								//(팝업)등록금자료가 없습니다. 등록금을 자동생성하시겠습니까? 
								doShowRegFeeObjPrcdCrt("impStdCrsRegFeeObjPrcd");
							} else {
								// "조회되었습니다."
								this.setParentMsg(NLS.INF.M024);		
							}	
						}
					});
				};
			
				/**
				 * @desc 등록금, 등록금세부, 장학생지급 내역을 조회한다.
				 * @member stdCrsCRegFeeObj
				 * @param poCallBackFunc 콜백 함수
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				function doList(poCallBackFunc) {
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess) {
						if (pbSuccess) {
							util.Control.redraw(app, ["frfRegFee" ,"rptRegFeeDtl", "rptScalStudPmnt"]);
							
							// 값이 있는 경우에만 복사하여 프리폼에 데이터 뿌림
							if(util.DataSet.getRowCount(app, "dsListRegFee") > 0) {
			//TO-BE: 단독 프리폼에 대한 데이터 바인딩은 공통단에서 자동 처리됨(삭제 필요)
								ExtFreeForm.copyToInstance("frfRegFee", "/root/resList/listRegFee/row", 1);
							}
			//TO-BE: <ExtControl.refreshBind> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//				ExtControl.refreshBind(["binRoDivPayAmt"]);
							
							// 분납번호가 있는 경우 저장 못하도록 함
							var vsDivPayNo = util.Grid.getCellValue(app, "frfRegFee", "DIV_PAY_NO", 1);
							
							if(!ValueUtil.isNull(vsDivPayNo)){
								util.Control.setEnable(app, false, ["btnSaveDeleteReg", "btnNew", "btnDel", "btnRestore"]);
							}else{
								util.Control.setEnable(app, true, ["btnSaveDeleteReg", "btnNew", "btnDel", "btnRestore"]);
							}	
							
							doSetTotPayAmt();
							
							if(util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
						}
					});
				};
				
				/**
				 * @desc 프리폼 insert모드로 셋팅
				 * @member stdCrsCRegFeeObj
				 * @param poCallBackFunc 콜백 함수
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				function doSetFrfDefaultData() {
					util.FreeForm.insertRow(app, "frfRegFee");
					util.Grid.setCellValue(app, "frfRegFee", "STUD_ID"		, util.DataMap.getValue(app, "dmReqKey", "strStudId"), 1);
					util.Grid.setCellValue(app, "frfRegFee", "SCH_YEAR_RCD"	, util.DataMap.getValue(app, "dmReqKey", "strSchYearRcd"), 1);
					util.Grid.setCellValue(app, "frfRegFee", "SMT_RCD"		, util.DataMap.getValue(app, "dmReqKey", "strSmtRcd"), 1);
					util.Grid.setCellValue(app, "frfRegFee", "REG_CLS_RCD"	, util.DataMap.getValue(app, "dmReqKey", "strRegClsRcd"), 1);
					util.Grid.setCellValue(app, "frfRegFee", "IFR_DT"		, util.DataMap.getValue(app, "dmReqKey", "strCurrentDt"), 1); 
					util.Grid.setCellValue(app, "frfRegFee", "PAY_CLOSE_DT"	, util.DataMap.getValue(app, "dmResList", "strPayCloseDt"), 1);
				};
				
				/**
				 * @desc 등록금 계산
				 * @member stdCrsCRegFeeObj
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				function doFeeCalculatePrcd(pbPrcdCd, poCallbackFunc) {
					var vsErrorMsg = null;
					util.DataMap.setValue(app, "dmReqKey", "strPrcdCd", pbPrcdCd);
					
					// 등록금 계산 서브미션
					//strCommand: feeCalculatePrcd 
					util.Submit.send(app, "subFeeCalculatePrcd", function(pbSuccess) {
						if(pbSuccess) {
							vsErrorMsg = util.DataMap.getValue(app, "dmResList", "strErrorMsg");
							if(ValueUtil.isNull(vsErrorMsg)){
								
								util.Control.redraw(app, ["frfRegFee" ,"rptRegFeeDtl", "rptScalStudPmnt"]);
								// 값이 있는 경우에만 복사하여 프리폼에 데이터 뿌림
								if(util.DataSet.getRowCount(app, "dsListRegFee") > 0) {
			//TO-BE: 단독 프리폼에 대한 데이터 바인딩은 공통단에서 자동 처리됨(삭제 필요)
									ExtFreeForm.copyToInstance("frfRegFee", "/root/resList/listRegFee/row", 1);
									util.Grid.setRowState(app, "frfRegFee", cpr.data.tabledata.RowState.INSERTED, 1);
								}
								
								util.Control.redraw(app, ["rptRegFeeDtl", "rptScalStudPmnt"]);
			//TO-BE: <ExtControl.refreshBind> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//					ExtControl.refreshBind(["binRoDivPayAmt"]);
								
								//상태값 변경
								var vnRowCnt = util.Grid.getRowCount(app, "grdRegFeeDtl");
								for (var j = 1; j <= vnRowCnt; j++) {
									util.Grid.setRowState(app, "grdRegFeeDtl", cpr.data.tabledata.RowState.INSERTED, j);
									util.Grid.setCellValue(app, "grdRegFeeDtl", "UPT_STATUS", "N", j);
								}
								
							}else{
								this.setParentMsg(vsErrorMsg);
								
								util.Control.redraw(app, ["frfRegFee" ,"rptRegFeeDtl", "rptScalStudPmnt"]);
								// 값이 있는 경우에만 복사하여 프리폼에 데이터 뿌림
								if(util.DataSet.getRowCount(app, "dsListRegFee") > 0) {
			//TO-BE: 단독 프리폼에 대한 데이터 바인딩은 공통단에서 자동 처리됨(삭제 필요)
									ExtFreeForm.copyToInstance("frfRegFee", "/root/resList/listRegFee/row", 1);
								}
								
			//TO-BE: <ExtControl.refreshBind> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//					ExtControl.refreshBind(["binRoDivPayAmt"]);
								
								doSetFrfDefaultData();
							}
							
							if(util.isFunc(poCallbackFunc)) poCallbackFunc(vsErrorMsg);
						}else{
							//자동산출 실패했습니다.
							vsErrorMsg = NLS.NSCR.AUTOCALCUFAILED;
							if(util.isFunc(poCallbackFunc)) poCallbackFunc(vsErrorMsg);	
						}
						
						doSetTotPayAmt();
					});
				};
				
				/**
				 * @desc [rptRegFeeDtl] 신규버튼 클릭이벤트
				 * @member stdCrsCRegFeeObj
				 * @param   
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				moPage.onClick_BtnNew = function() {
					var vnNewRow = util.Grid.insertRow(app, "grdRegFeeDtl", "rdCbbItemCdReg");
					
					util.Grid.setCellValue(app, "grdRegFeeDtl", "STUD_ID"	 , util.DataMap.getValue(app, "dmReqKey", "strStudId"), vnNewRow);
					util.Grid.setCellValue(app, "grdRegFeeDtl", "SCH_YEAR_RCD", util.DataMap.getValue(app, "dmReqKey", "strSchYearRcd"), vnNewRow);
					util.Grid.setCellValue(app, "grdRegFeeDtl", "SMT_RCD"	 , util.DataMap.getValue(app, "dmReqKey", "strSmtRcd"), vnNewRow);
					util.Grid.setCellValue(app, "grdRegFeeDtl", "REG_CLS_RCD" , util.DataMap.getValue(app, "dmReqKey", "strRegClsRcd"), vnNewRow);
				};
				
				/**
				 * @desc [rptRegFeeDtl] 삭제버튼 클릭 이벤트
				 * @member stdCrsCRegFeeObj
				 * @param   
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				moPage.onClick_BtnDel = function() {
					var vnRowIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdRegFeeDtl");
					if(ValueUtil.isNull(vnRowIdx)){
						util.Msg.notify(app, "NLS.INF.M005");
						return;
					}	
					
					var vsPanelCheckIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdRegFeeDtl");
					var voPanelChk;
					
					if(String(vsPanelCheckIdx).indexOf(",") != -1){
						voPanelChk = vsPanelCheckIdx.split(",");
					}else{
						voPanelChk = new Array();
						voPanelChk[0] = vsPanelCheckIdx;
					}	
					
					for(var i = 0; i < voPanelChk.length; i++) {
						var vnRow = voPanelChk[i];
						
						var vsRegFeePay = util.Grid.getCellValue(app, "grdRegFeeDtl", "REG_FEE_PAY", vnRow);
						if(vsRegFeePay == "Y"){
							//등록금납입 정보가 존재함으로 삭제할 수 없습니다.
							util.Msg.alert("NLS-CRS-M063");
							return false;
						}
					}
					
					util.Grid.deleteRow(app, "grdRegFeeDtl");
					
					doSetTotPayAmt();
				};
				
				/**
				 * @desc [rptRegFeeDtl] 작업취소 클릭 이벤트
				 * @member stdCrsCRegFeeObj
				 * @param   
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				moPage.onClick_BtnRestore = function() {
					util.Grid.restoreRow(app, "grdRegFeeDtl");
					
					doSetTotPayAmt();
				};
				
				/**
				 * @desc [rptRegFeeDtl] 작업저장 클릭 이벤트
				 * @member stdCrsCRegFeeObj
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				moPage.onClick_BtnSave = function() {
					doSave();
				};
				
				/**
				 * @desc 작업저장
				 * @member stdCrsCRegFeeObj
				 * @param poCallbackFunc 콜백함수
				 * @return Boolean
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				function doSave(poCallbackFunc) {
					// 리피터 변경사항 체크
					if(!util.Grid.isModified(app, ["frfRegFee","grdRegFeeDtl"], null)){
						this.setParentMsg(NLS.WRN.M007);
						return false;
					}
					
					// Validation Check(기본, 고지일자/납부일자, 금액 0 이상)
					if(!util.validate(app, ["frfRegFee","grdRegFeeDtl"])) return false;
					
					//등록금세부테이블의 Row수 체크
					var vnRegDtlLength = ExtInstance.getNodeListLength("/root/resList/rptRegFeeDtl/row[child::UPT_STATUS!='D']");
					if (vnRegDtlLength <= 0 ) {
						//적어도 1개의 등록금 항목을 입력하셔야 합니다.
						util.Msg.alert("NLS-CRS-M028");
						return false;
					}
					
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccessSave) {
						if(pbSuccessSave) {
							//저장성공 메세지 출력
							doList(function(pbSuccessList) {
								// "갱신된 데이터가 조회되었습니다."
								if(pbSuccessList) {
									this.setParentMsg(NLS.INF.M025);
								}
								
								if(util.isFunc(poCallbackFunc))	poCallbackFunc(pbSuccessList);
							});
						}
					});
				};
				
				/**
				 * @desc [btnSaveDeleteReg] 등록대상자 삭제 버튼 클릭 이벤트
				 * @member stdCrsCRegFeeObj
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				moPage.onClick_BtnSaveDeleteReg = function() {
					// 등록대상자 정보를 모두 삭제합니다. 계속하시겠습니까?
					if(!util.Msg.confirm("NLS-CRS-M062") ) return;
					
					//strCommand: deleteReg 
					util.Submit.send(app, "subDeleteReg", function(pbSuccess) {
						if (pbSuccess) {
							// 등록사항 재조회
							ExtSubPage.getParent().callScript("doSetRegInfo");	
							
							// 조회
							doList(function(pbSuccess) {
								if (pbSuccess){
									doSetFrfDefaultData();	
									// "삭제되었습니다."
									this.setParentMsg(NLS.INF.M008);	
								}
							});
						}
					});
				};
				
				/**
				 * @desc [rptRegFeeDtl] 금액 변경 이벤트 - footer 적용
				 * @member stdCrsCRegFeeObj
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				moPage.onValueChanged_RdIpbAmtReg = function() {
					ExtRepeat.refresh("rptRegFeeDtl");
					doSetTotPayAmt();
				};
				
				/**
				 * @desc [rptRegFeeDtl] rowSelect 이벤트 - 바인드 refresh
				 * @member stdCrsCRegFeeObj
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				moPage.onRowSelect_RptRegFeeDtl = function() {
			//TO-BE: <ExtControl.refreshBind> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtControl.refreshBind(["binRoDivPayAmt"]);
				};
				
				/**
				 * @desc 등록금금액 - 장학금금액을 리턴하여 납부금액에 셋팅한다.
				 * @member stdCrsCRegFeeObj
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				function doSetTotPayAmt() {
					var vnRegAmt = 0;
					var vnScalAmt = 0;
					for (var i = 1; i <= util.Grid.getRowCount(app, "grdRegFeeDtl"); i++) {
						util.Grid.getRowState(app, "grdRegFeeDtl", i);
						
						if (util.Grid.getRowState(app, "grdRegFeeDtl", i) != cpr.data.tabledata.RowState.DELETED) {
							vnRegAmt += Number(util.Grid.getCellValue(app, "grdRegFeeDtl", "AMT", i));
						}
					}
					
					for (var i = 1; i <= util.Grid.getRowCount(app, "grdScalStudPmnt"); i++) {
						vnScalAmt += Number(util.Grid.getCellValue(app, "grdScalStudPmnt", "AMT", i));
					}
					
					util.FreeForm.setValue(app, "frfRegFee", "TOT_PAY_AMT", vnRegAmt-vnScalAmt);
				};
				
				/**
				 * @desc 부모 헤더에 메세지 뿌리기
				 * @member stdCrsCRegFeeObj
				 * @param  psMsgCode 메시지 코드
				 * @param  paMsg 메시지 변수 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				moPage.setParentMsg = function(psMsgCode, paMsg) {
					util.Msg.notify(app, psMsgCode, paMsg);	
				};
				
				/**
				 * @desc 변경사항체크 - 부모창에서 호출용
				 * @member stdCrsCRegFeeObj
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 3.
				 */
				function doCheckDataChange() {
					if(util.Grid.isModified(app, ["frfRegFee","grdRegFeeDtl"], "CRM") ){
						return false;
					}else{
						return true;
					}
				};
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsListItemCd");
			dataSet_1.parseData({
				"columns": [
					{"name": "ITEM_CD"},
					{"name": "ITEM_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsListRegStudDivRcd");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsListRegFee");
			dataSet_3.parseData({
				"columns": [
					{"name": "REG_STUD_DIV_RCD"},
					{"name": "DIV_PAY_TYPE_CD"},
					{"name": "IFR_DT"},
					{"name": "BKG_PNT"},
					{"name": "DIV_PAY_STAT_RCD"},
					{"name": "REG_CLS_RCD"},
					{"name": "DIV_PAY_REQ_DT"},
					{"name": "DIV_PAY_NO"},
					{"name": "STUD_ID"},
					{"name": "DIV_PAY_DESC"},
					{"name": "BKG_TIME"},
					{"name": "PAY_CLOSE_DT"},
					{"name": "REMARK"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"},
					{"name": "REF_KEY"},
					{"name": "TOT_PAY_AMT"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsFrfRegFee");
			dataSet_4.parseData({
				"columns": [
					{"name": "REG_STUD_DIV_RCD"},
					{"name": "DIV_PAY_TYPE_CD"},
					{"name": "IFR_DT"},
					{"name": "BKG_PNT"},
					{"name": "DIV_PAY_STAT_RCD"},
					{"name": "REG_CLS_RCD"},
					{"name": "DIV_PAY_REQ_DT"},
					{"name": "DIV_PAY_NO"},
					{"name": "STUD_ID"},
					{"name": "DIV_PAY_DESC"},
					{"name": "BKG_TIME"},
					{"name": "PAY_CLOSE_DT"},
					{"name": "REMARK"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"},
					{"name": "REF_KEY"},
					{"name": "TOT_PAY_AMT"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsRegFeeDtl");
			dataSet_5.parseData({
				"info": "CRS_REG_FEE_DTL@STUD_ID,SCH_YEAR_RCD,SMT_RCD,REG_CLS_RCD,ITEM_CD",
				"columns": [
					{"name": "AMT"},
					{"name": "ITEM_CD"},
					{"name": "REG_CLS_RCD"},
					{"name": "REG_FEE_PAY"},
					{"name": "STUD_ID"},
					{"name": "REMARK"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"},
					{"name": "REF_KEY"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsScalStudPmnt");
			dataSet_6.parseData({
				"columns": [
					{"name": "PROC_DT"},
					{"name": "FNRE_DIV_NM"},
					{"name": "AMT"},
					{"name": "SCAL_FEE_CD"},
					{"name": "PROC_PLAN_DT"},
					{"name": "ITEM_CD"},
					{"name": "DIV_PAY_NO"},
					{"name": "SCAL_FEE_NM"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strStudId",
						"dataType": "string"
					},
					{
						"name": "strSchYearRcd",
						"dataType": "string"
					},
					{
						"name": "strSmtRcd",
						"dataType": "string"
					},
					{
						"name": "strStDt",
						"dataType": "string"
					},
					{
						"name": "strEndDt",
						"dataType": "string"
					},
					{
						"name": "strRegClsRcd",
						"dataType": "string"
					},
					{
						"name": "strCurrentDt",
						"dataType": "string"
					},
					{
						"name": "strPrcdCd",
						"dataType": "string"
					},
					{
						"name": "strItemCd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmResList");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strUsedFlag",
						"dataType": "string"
					},
					{
						"name": "strPayCloseDt",
						"dataType": "string"
					},
					{
						"name": "strErrorMsg",
						"dataType": "string"
					},
					{
						"name": "strRegStudDivRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmPanel");
			dataMap_3.parseData({
				"columns" : [{
					"name": "TOT_PAY_AMT",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/crs/StdCrsRegFeeObj/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_5, false);
			submission_1.addResponseData(dataSet_6, false);
			submission_1.addResponseData(dataMap_2, false);
			submission_1.addResponseData(dataSet_3, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subFeeCalculatePrcd");
			submission_2.action = "/crs/StdCrsRegFeeObj/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_3, false);
			submission_2.addResponseData(dataSet_5, false);
			submission_2.addResponseData(dataMap_2, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/crs/StdCrsRegFeeObj/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_4);
			submission_3.addRequestData(dataSet_5);
			submission_3.addRequestData(dataMap_1);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subDeleteReg");
			submission_4.action = "/crs/StdCrsRegFeeObj/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataSet_4);
			submission_4.addRequestData(dataSet_5);
			submission_4.addRequestData(dataMap_1);
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaSbpHeader");
			if(typeof onEmaSbpHeaderAppReady == "function") {
				embeddedApp_1.addEventListener("app-ready", onEmaSbpHeaderAppReady);
			}
			cpr.core.App.load("app/imp/impSbpHeader", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "420px",
				"left": "0px",
				"width": "96px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpDataDtl");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var userDefinedControl_1 = linker.userDefinedControl_1 = new udc.com.comTitle();
				userDefinedControl_1.bind("title").toLanguage("UI-SCR-REGITEMLST");
				container.addChild(userDefinedControl_1, {
					"top": "90px",
					"left": "5px",
					"width": "280px",
					"height": "25px"
				});
				var button_1 = new cpr.controls.Button("btnNew");
				button_1.value = "";
				button_1.style.setClasses(["btn-new"]);
				button_1.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewClick == "function") {
					button_1.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_1, {
					"top": "90px",
					"left": "245px",
					"width": "60px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnDel");
				button_2.value = "";
				button_2.style.setClasses(["btn-delete"]);
				button_2.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_2.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_2, {
					"top": "90px",
					"left": "310px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnRestore");
				button_3.value = "";
				button_3.style.setClasses(["btn-restore"]);
				button_3.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_3.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_3, {
					"top": "90px",
					"left": "375px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "";
				button_4.style.setClasses(["btn-save"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"top": "90px",
					"left": "439px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdRegFeeDtl");
				grid_1.init({
					"dataSet": app.lookup("dsRegFeeDtl"),
					"columns": [
						{"width": "25px"},
						{"width": "40px"},
						{"width": "107px"},
						{"width": "116px"},
						{"width": "202px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-TUITIONITEM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-AMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-REMARK");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.control = (function(){
										var output_1 = new cpr.controls.Output();
										output_1.style.css({
											"text-align" : "center"
										});
										return output_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "ITEM_CD";
									cell.control = (function(){
										var comboBox_1 = new cpr.controls.ComboBox("gdCbbItemCdReg");
										comboBox_1.userAttr({"require": "Y"});
										(function(comboBox_1){
											comboBox_1.addItem(new cpr.controls.Item("선택", ""));
											comboBox_1.setItemSet(app.lookup("dsListItemCd"), {
												"label": "ITEM_NM",
												"value": "ITEM_CD"
											});
										})(comboBox_1);
										comboBox_1.bind("value").toDataColumn("ITEM_CD");
										return comboBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "AMT";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("gdIpbAmtReg");
										numberEditor_1.spinButton = false;
										numberEditor_1.format = "999,999,999,999";
										numberEditor_1.bind("value").toDataColumn("AMT");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "REMARK";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("gdIpbRemarkReg");
										inputBox_1.maxLength = 1000;
										inputBox_1.bind("value").toDataColumn("REMARK");
										return inputBox_1;
									})();
								}
							}
						]
					},
					"footer": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.control = (function(){
										var output_2 = new cpr.controls.Output("footer_output");
										output_2.value = "";
										output_2.bind("value").toLanguage("UI-GLS-SUM");
										return output_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_3 = new cpr.controls.Output("footer_output");
										output_3.value = "";
										output_3.bind("value").toLanguage("UI-GLS-SUM");
										return output_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.control = (function(){
										var output_4 = new cpr.controls.Output("footer_output");
										output_4.value = "합계";
										output_4.bind("value").toLanguage("UI-GLS-SUM");
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.expr = "getSum(\"AMT\")";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.control = (function(){
										var output_5 = new cpr.controls.Output("footer_output");
										output_5.value = "";
										output_5.bind("value").toLanguage("UI-GLS-SUM");
										return output_5;
									})();
								}
							}
						]
					}
				});
				if(typeof onGrdRegFeeDtlSelectionChange == "function") {
					grid_1.addEventListener("selection-change", onGrdRegFeeDtlSelectionChange);
				}
				container.addChild(grid_1, {
					"top": "115px",
					"left": "5px",
					"width": "500px",
					"height": "309px"
				});
				var grid_2 = linker.grid_2 = new cpr.controls.Grid("grdScalStudPmnt");
				grid_2.init({
					"dataSet": app.lookup("dsScalStudPmnt"),
					"columns": [
						{"width": "40px"},
						{"width": "97px"},
						{"width": "63px"},
						{"width": "73px"},
						{"width": "75px"},
						{"width": "80px"},
						{"width": "80px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SCRSSRT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-FIRSRDIVRCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-AMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-ITEMZ");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PROC_PLAN_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PROC_DT");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "SCAL_FEE_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "FNRE_DIV_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "AMT";
									cell.control = (function(){
										var output_6 = new cpr.controls.Output("gdOptAmtScal");
										output_6.dataType = "number";
										output_6.format = "s#,###";
										output_6.style.css({
											"text-align" : "right"
										});
										output_6.bind("value").toDataColumn("AMT");
										return output_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "ITEM_CD";
									cell.control = (function(){
										var comboBox_2 = new cpr.controls.ComboBox("gdCbbItemCdScal");
										comboBox_2.enabled = false;
										comboBox_2.hideButton = true;
										(function(comboBox_2){
											comboBox_2.setItemSet(app.lookup("dsListItemCd"), {
												"label": "ITEM_NM",
												"value": "ITEM_CD"
											});
										})(comboBox_2);
										comboBox_2.bind("value").toDataColumn("ITEM_CD");
										return comboBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "PROC_PLAN_DT";
									cell.control = (function(){
										var output_7 = new cpr.controls.Output("gdOptProcPlanDtScal");
										output_7.dataType = "date";
										output_7.format = "YYYY-MM-DD";
										output_7.style.css({
											"text-align" : "center"
										});
										output_7.bind("value").toDataColumn("PROC_PLAN_DT");
										return output_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "PROC_DT";
									cell.control = (function(){
										var output_8 = new cpr.controls.Output("gdOptProcDtScal");
										output_8.dataType = "date";
										output_8.format = "YYYY-MM-DD";
										output_8.style.css({
											"text-align" : "center"
										});
										output_8.bind("value").toDataColumn("PROC_DT");
										return output_8;
									})();
								}
							}
						]
					},
					"footer": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.control = (function(){
										var output_9 = new cpr.controls.Output("footer_output");
										output_9.value = "";
										output_9.bind("value").toLanguage("UI-GLS-SUM");
										return output_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_10 = new cpr.controls.Output("footer_output");
										output_10.value = "";
										output_10.bind("value").toLanguage("UI-GLS-SUM");
										return output_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.control = (function(){
										var output_11 = new cpr.controls.Output("footer_output");
										output_11.value = "합계";
										output_11.bind("value").toLanguage("UI-GLS-SUM");
										return output_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.expr = "getSum(\"AMT\")";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.control = (function(){
										var output_12 = new cpr.controls.Output("footer_output");
										output_12.value = "";
										output_12.bind("value").toLanguage("UI-GLS-SUM");
										return output_12;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.control = (function(){
										var output_13 = new cpr.controls.Output("footer_output");
										output_13.value = "";
										output_13.bind("value").toLanguage("UI-GLS-SUM");
										return output_13;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.control = (function(){
										var output_14 = new cpr.controls.Output("footer_output");
										output_14.value = "";
										output_14.bind("value").toLanguage("UI-GLS-SUM");
										return output_14;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_2, {
					"top": "115px",
					"left": "510px",
					"width": "509px",
					"height": "309px"
				});
				var button_5 = new cpr.controls.Button("btnSaveDeleteReg");
				button_5.value = "";
				button_5.style.setClasses(["btn-save"]);
				button_5.bind("value").toLanguage("UI-SCR-REGCANCL");
				if(typeof onBtnSaveDeleteRegClick == "function") {
					button_5.addEventListener("click", onBtnSaveDeleteRegClick);
				}
				container.addChild(button_5, {
					"top": "5px",
					"left": "5px",
					"width": "105px",
					"height": "25px"
				});
				var group_2 = new cpr.controls.Container("frfRegFee");
				group_2.style.setClasses(["form-box"]);
				// Layout
				var xYLayout_3 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_3);
				(function(container){
					var inputBox_2 = new cpr.controls.InputBox("ipbFrfRemark");
					inputBox_2.maxLength = 1000;
					inputBox_2.bind("fieldLabel").toExpression("#optFrfReqDesc.value");
					inputBox_2.bind("value").toDataMap(app.lookup("dmRow"), "REMARK");
					container.addChild(inputBox_2, {
						"top": "30px",
						"left": "90px",
						"width": "915px",
						"height": "25px"
					});
					var output_15 = new cpr.controls.Output("optFrfRemark");
					output_15.value = "";
					output_15.bind("value").toLanguage("UI-GLS-REMARK");
					container.addChild(output_15, {
						"top": "30px",
						"left": "5px",
						"width": "80px",
						"height": "25px"
					});
					var output_16 = new cpr.controls.Output("optFrfIfrDt");
					output_16.value = "";
					output_16.style.setClasses(["require"]);
					output_16.bind("value").toLanguage("UI-DB-IFR_DT");
					container.addChild(output_16, {
						"top": "5px",
						"left": "200px",
						"width": "80px",
						"height": "25px"
					});
					var dateInput_1 = new cpr.controls.DateInput("dipFrfIfrDt");
					dateInput_1.maxDate = new Date(9999, 11, 31);
					dateInput_1.userAttr({"require": "Y"});
					dateInput_1.style.css({
						"text-align" : "center"
					});
					dateInput_1.bind("fieldLabel").toExpression("#optFrfIfrDt.value");
					dateInput_1.bind("value").toDataMap(app.lookup("dmRow"), "IFR_DT");
					container.addChild(dateInput_1, {
						"top": "5px",
						"left": "285px",
						"width": "100px",
						"height": "25px"
					});
					var output_17 = new cpr.controls.Output("optFrfPayCloseDt");
					output_17.value = "";
					output_17.style.setClasses(["require"]);
					output_17.bind("value").toLanguage("UI-SCR-PAYDUEDAT");
					container.addChild(output_17, {
						"top": "5px",
						"left": "395px",
						"width": "80px",
						"height": "25px"
					});
					var output_18 = new cpr.controls.Output("optFrfAmtSum");
					output_18.value = "";
					output_18.bind("value").toLanguage("UI-SCR-PAYOBJAMT");
					container.addChild(output_18, {
						"top": "5px",
						"left": "5px",
						"width": "80px",
						"height": "25px"
					});
					var dateInput_2 = new cpr.controls.DateInput("dipFrfPayCloseDt");
					dateInput_2.maxDate = new Date(9999, 11, 31);
					dateInput_2.style.css({
						"text-align" : "center"
					});
					dateInput_2.bind("fieldLabel").toExpression("#optFrfPayCloseDt.value");
					dateInput_2.bind("value").toDataMap(app.lookup("dmRow"), "PAY_CLOSE_DT");
					container.addChild(dateInput_2, {
						"top": "5px",
						"left": "480px",
						"width": "100px",
						"height": "25px"
					});
					var numberEditor_2 = new cpr.controls.NumberEditor("ipbFrfAmtSum");
					numberEditor_2.enabled = false;
					numberEditor_2.readOnly = true;
					numberEditor_2.format = "9,999,999,999";
					numberEditor_2.bind("fieldLabel").toExpression("#optFrfAmtSum.value");
					numberEditor_2.bind("value").toDataMap(app.lookup("dmRow"), "TOT_PAY_AMT");
					container.addChild(numberEditor_2, {
						"top": "5px",
						"left": "90px",
						"width": "100px",
						"height": "25px"
					});
					var output_19 = new cpr.controls.Output("optFrfRegStudDivRcd");
					output_19.value = "";
					output_19.bind("value").toLanguage("UI-SCR-REGSTUDIV");
					container.addChild(output_19, {
						"top": "5px",
						"left": "590px",
						"width": "80px",
						"height": "25px"
					});
					var comboBox_3 = new cpr.controls.ComboBox("cbbFrfRegStudDivRcd");
					comboBox_3.bind("fieldLabel").toExpression("#optFrfRegStudDivRcd.value");
					comboBox_3.bind("value").toDataMap(app.lookup("dmRow"), "REG_STUD_DIV_RCD");
					(function(comboBox_3){
						comboBox_3.setItemSet(app.lookup("dsListRegStudDivRcd"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_3);
					container.addChild(comboBox_3, {
						"top": "5px",
						"left": "675px",
						"width": "110px",
						"height": "25px"
					});
					var output_20 = new cpr.controls.Output("optFrfDivPayNo");
					output_20.value = "";
					output_20.bind("value").toLanguage("UI-SCR-SCRSFNDTN");
					container.addChild(output_20, {
						"top": "5px",
						"left": "795px",
						"width": "80px",
						"height": "25px"
					});
					var numberEditor_3 = new cpr.controls.NumberEditor("ipbFrfDivPayNo");
					numberEditor_3.visible = false;
					numberEditor_3.enabled = false;
					numberEditor_3.readOnly = true;
					numberEditor_3.format = "9,999,999,999";
					numberEditor_3.bind("fieldLabel").toExpression("#optFrfDivPayNo.value");
					numberEditor_3.bind("value").toDataMap(app.lookup("dmRow"), "DIV_PAY_NO");
					container.addChild(numberEditor_3, {
						"top": "5px",
						"left": "880px",
						"width": "100px",
						"height": "25px"
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "30px",
					"left": "5px",
					"width": "1014px",
					"height": "56px"
				});
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-SSLST");
				container.addChild(userDefinedControl_2, {
					"top": "90px",
					"left": "510px",
					"width": "265px",
					"height": "25px"
				});
				var userDefinedControl_3 = new udc.com.comFormTitle();
				userDefinedControl_3.bind("title").toLanguage("UI-SCR-REGOBJ");
				container.addChild(userDefinedControl_3, {
					"top": "5px",
					"left": "120px",
					"width": "165px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"left": "0px",
				"width": "1025px",
				"height": "430px"
			});
			
			var embeddedApp_2 = new cpr.controls.EmbeddedApp("emaStdCrsRegFeeObjPrcd");
			cpr.core.App.load("app/crs/impDialogCrsRegFeeObjPrcd", function(app) {
				if(app){
					embeddedApp_2.app = app;
				}
			});
			container.addChild(embeddedApp_2, {
				"top": "0px",
				"left": "1026px",
				"width": "426px",
				"height": "90px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_1.ctrl = linker.grid_1;
			linker.userDefinedControl_2.ctrl = linker.grid_2;
		}
	});
	app.title = "stdCrsCRegFeeObj";
	cpr.core.Platform.INSTANCE.register(app);
})();
