/*
 * App URI: app/crs/stdCrsCRegFeePayCrt
 * Source Location: app/crs/stdCrsCRegFeePayCrt.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/crs/stdCrsCRegFeePayCrt", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCrsCRegFeePayCrt.xtm"/>
			
			/**
			 * 등록납입신규생성
			 * @class stdCrsCRegFeeDivPayCrt
			 * @author Aeyoung Lee 2016. 3. 28.
			 */
			var stdCrsCRegFeePayCrt = function() {
				var moPage = new Page();
				var moPObject = new PObject();
				
				/* 
				 * 납입계좌 검색팝업 관련 설정사항
				 */
				moPObject.moIdsForStdCrsPAcctSch = [
				{
					controlId : "btnPayAcctNmPop",
					iCd : "",
					iNm : "ipbPayAcctNm",
					oAcctCd : "ipbPayAcctNo",
					oAcctNm : "ipbPayAcctNm",
					func : null
				}
				]
				
				/**
				 * @desc import 헤더 초기화
				 * @member stdCrsCRegFeeDivPayCrt
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 3. 28.
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc OnLoad 이벤트
				 * @member stdCrsCRegFeeDivPayCrt
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 3. 28.
				 */
				moPage.onLoadImportDone_StdCrsCRegFeePayCrt = function() {
					// 리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptRegFeePayCrtPop"]);
					
					doSetCondition();
				};
				
				/**
				 * @desc 부모창으로부터 받은 조건 세팅
				 * @member stdCrsCRegFeeDivPayCrt
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 28.
				 */
				function doSetCondition() {
					// 부모창 값 셋팅
					var voRegFeePayCrtParam =  ExtPopUp.getParentVal("moRegFeePayCrtParam");
					
					util.DataMap.setValue(app, "dmReqKey", "strStudId"	 , voRegFeePayCrtParam.studId);
					util.DataMap.setValue(app, "dmReqKey", "strSchYearRcd", voRegFeePayCrtParam.schYearRcd);
					util.DataMap.setValue(app, "dmReqKey", "strSmtRcd"	 , voRegFeePayCrtParam.smtRcd);
					util.DataMap.setValue(app, "dmReqKey", "strRegClsRcd" , voRegFeePayCrtParam.regCls);
					
					doList(function(pbSuccess) {
						if (pbSuccess){
							// "조회되었습니다."
							util.Msg.notify(app, "NLS.INF.M024");					
						}
					});
					
				};		
				
				/**
				 * @desc 납부계좌 변경 이벤트
				 * @member stdCrsCRegFeeDivPayCrt
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 28.
				 */
				moPage.onValueChanged_IpbPayAcctNm = function(sender) {
					doOnChangeStdCrsPAcctSch(sender);
				};
				
				/**
				 * @desc 납부계좌검색 버튼 클릭 이벤트
				 * @member stdCrsCRegFeeDivPayCrt
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 28.
				 */
				moPage.onClick_BtnDeptNmPopImp = function(sender) {
					doOnClickStdCrsPAcctSch(sender);
				};
				
				/**
				 * @desc 항목별 납입목록 조회
				 * @member stdCrsCRegFeeDivPayCrt
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 28.
				 */
				function doList(poCallBackFunc) {
					
					//strCommand: listCrt 
					util.Submit.send(app, "subList", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdRegFeePayCrtPop");
							util.Control.redraw(app, "dipProcDt");
						} 
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				};
				
				/**
				 * @desc [rptRegFeePayCrt] 값 변경이벤트
				 * @member stdCrsCRegFeeDivPayCrt
				 * @param psDiv 컬럼 ref
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 28.
				 */
				moPage.onValueChanged_RptRegFeePayCrt = function(psDiv) {
					var vnRowIdx = util.Grid.getIndex(app, "grdRegFeePayCrtPop");
					var vnChkValue = util.Grid.getCellValue(app, "grdRegFeePayCrtPop", psDiv, vnRowIdx)	;
					
					// 금액
					if(psDiv == "AMT"){
						if(Number(vnChkValue) < 0){
							//음수는 입력할 수 없습니다.
							util.Msg.alert("NLS-CRS-M014");
							util.Grid.setCellValue(app, "grdRegFeePayCrtPop", psDiv, "", vnRowIdx);
							return false;
						}
					}
				};
				
				/**
				 * @desc [btnSaveCreate]납입생성 onClick 이벤트
				 * @member stdCrsCRegFeeDivPayCrt
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 28.
				 */
				moPage.onClick_BtnCreate = function() {
					
					var vnChekNodeLength = ExtInstance.getNodeListLength("/root/resList/rptRegFeePayCrtPop/row[child::DEL_CKB='Y']");
					if (vnChekNodeLength <= 0 ) {
						var vsMsgParam = util.Grid.getTitle(app, "grdRegFeePayCrtPopRegFeePayCrtPop");
						// "@(을)를 선택해주세요" 메시지 출력
						util.Msg.alert("NLS-INF-M045", [vsMsgParam]);
						return;
					}
					
					util.Grid.setRowStateAll(app, "grdRegFeePayCrtPop", cpr.data.tabledata.RowState.UNCHANGED);
					
					var vsPanelCheckIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdRegFeePayCrtPop");
					var voPanelChk;
					
					if(String(vsPanelCheckIdx).indexOf(",") != -1){
						voPanelChk = vsPanelCheckIdx.split(",");
					}else{
						voPanelChk = new Array();
						voPanelChk[0] = vsPanelCheckIdx;
					}	
					
					for(var i = 0; i < voPanelChk.length; i++) {
						var vnRow = voPanelChk[i];
						var vnPayPlanAmt = Number(util.Grid.getCellValue(app, "grdRegFeePayCrtPop", "PAY_PLAN_AMT", vnRow));
						var vnScalPlanAmt = Number(util.Grid.getCellValue(app, "grdRegFeePayCrtPop", "SCAL_PLAN_AMT", vnRow));
						var vnAmt = util.Grid.getCellValue(app, "grdRegFeePayCrtPop", "AMT", vnRow);
						
						//@1번째 항목은 차감할금액이 납부할금액보다 크기때문에 납입할 수 없습니다.
						if (vnPayPlanAmt < vnScalPlanAmt) {
							util.Msg.alert("NLS-CRS-M067", [vnRow]); 
							return;
						}	
						
						//@1번째 항목의 금액은 필수입력 사항입니다.
						if(ValueUtil.isNull(vnAmt)){
							util.Msg.alert("NLS-CRS-M065", [vnRow]);
							ExtRepeat.setColFocus("rptRegFeePayCrtPop", vnRow, "rdIpbAmt");
							return;
						}	
						
						util.Grid.setRowState(app, "grdRegFeePayCrtPop", cpr.data.tabledata.RowState.UPDATED, vnRow);
					}	
					
					if(!util.validate(app, ["grpCond"])) return false;
					
					// 납입생성 서브미션
					//strCommand: create 
					util.Submit.send(app, "subCreate", function(pbSuccess){
						if(pbSuccess){
							if(ExtPopUp.isPopUp()){
								ExtPopUp.closeLayeredPopup("callbackRegFeePayCrt");
							}	
						}	
					});
				};
				
				/**
				 * @desc [rptRegFeePayCrtPop] 로우 select  이벤트
				 * @member stdCrsCRegFeeDivPayCrt
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 28.
				 */
				moPage.onRowSelect_RptRegFeePayCrtPop = function() {
			//TO-BE: <ExtControl.refreshBind> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtControl.refreshBind("binRoAmt");
				};
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsRegFeePayCrtPop");
			dataSet_1.parseData({
				"info": "CRS_REG@ITEM_CD",
				"columns": [
					{"name": "SCAL_AMT"},
					{"name": "DIV_PAY_SEQ"},
					{"name": "PAY_AMT"},
					{"name": "SCAL_PLAN_AMT"},
					{"name": "DIV_PAY_NO"},
					{"name": "ITEM_NM"},
					{"name": "PAY_PLAN_AMT"},
					{"name": "ITEM_CD"},
					{"name": "AMT"},
					{"name": "UNPAID_AMT"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strStudId",
						"dataType": "string"
					},
					{
						"name": "strSchYearRcd",
						"dataType": "string"
					},
					{
						"name": "strSmtRcd",
						"dataType": "string"
					},
					{
						"name": "strRegClsRcd",
						"dataType": "string"
					},
					{
						"name": "strPayDt",
						"dataType": "string"
					},
					{
						"name": "strPayAcctNm",
						"dataType": "string"
					},
					{
						"name": "strRemark",
						"dataType": "string"
					},
					{
						"name": "strPayAcctNo",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subList");
			submission_1.action = "/crs/StdCrsRegFeePay/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataMap_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subCreate");
			submission_2.action = "/crs/StdCrsRegFeePay/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addRequestData(dataSet_1);
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpCond");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var dateInput_1 = new cpr.controls.DateInput("dipProcDt");
				dateInput_1.userAttr({"require": "Y"});
				dateInput_1.style.css({
					"text-align" : "center"
				});
				dateInput_1.bind("fieldLabel").toExpression("#optProcDt.value");
				dateInput_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strPayDt");
				container.addChild(dateInput_1, {
					"top": "5px",
					"left": "100px",
					"width": "110px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optProcDt");
				output_1.value = "";
				output_1.style.setClasses(["require"]);
				output_1.bind("value").toLanguage("UI-SCR-PAYDT");
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "90px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optRemark");
				output_2.value = "";
				output_2.bind("value").toLanguage("UI-GLS-REMARK");
				container.addChild(output_2, {
					"top": "55px",
					"left": "5px",
					"width": "90px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optPayAcctNm");
				output_3.value = "";
				output_3.style.setClasses(["require"]);
				output_3.bind("value").toLanguage("UI-SCR-PAYACT");
				container.addChild(output_3, {
					"top": "30px",
					"left": "5px",
					"width": "90px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbPayAcctNm");
				inputBox_1.maxLength = 500;
				inputBox_1.userAttr({"require": "Y"});
				inputBox_1.bind("fieldLabel").toExpression("#optPayAcctNm.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strPayAcctNm");
				if(typeof onIpbPayAcctNmValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbPayAcctNmValueChange);
				}
				container.addChild(inputBox_1, {
					"top": "30px",
					"left": "100px",
					"width": "111px",
					"height": "25px"
				});
				var button_1 = new cpr.controls.Button("btnPayAcctNmPop");
				button_1.value = "";
				button_1.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnPayAcctNmPopClick == "function") {
					button_1.addEventListener("click", onBtnPayAcctNmPopClick);
				}
				container.addChild(button_1, {
					"top": "30px",
					"left": "211px",
					"width": "20px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbPayAcctNo");
				inputBox_2.visible = false;
				inputBox_2.userAttr({"require": "Y"});
				inputBox_2.bind("fieldLabel").toExpression("#optPayAcctNm.value");
				inputBox_2.bind("value").toDataMap(app.lookup("dmReqKey"), "strPayAcctNo");
				container.addChild(inputBox_2, {
					"top": "30px",
					"left": "234px",
					"width": "26px",
					"height": "25px"
				});
				var textArea_1 = new cpr.controls.TextArea("txtRemark");
				textArea_1.maxLength = 1000;
				textArea_1.bind("fieldLabel").toExpression("#optRemark.value");
				textArea_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strRemark");
				container.addChild(textArea_1, {
					"top": "55px",
					"left": "100px",
					"width": "820px",
					"height": "40px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "925px",
				"height": "100px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-ITEMPAYLST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "265px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdRegFeePayCrtPop");
				grid_1.init({
					"dataSet": app.lookup("dsRegFeePayCrtPop"),
					"columns": [
						{"width": "25px"},
						{"width": "40px"},
						{"width": "105px"},
						{"width": "80px"},
						{"width": "110px"},
						{"width": "110px"},
						{"width": "110px"},
						{"width": "110px"},
						{"width": "110px"},
						{"width": "110px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-TUITIONITEM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-DIV_PAY_SEQ");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-FORPAYAMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-FORDEDAMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-PAIDAMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-DEDUCTAMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-UNPAIDAMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-GLS-AMT");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "ITEM_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "DIV_PAY_SEQ";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "PAY_PLAN_AMT";
									cell.control = (function(){
										var output_4 = new cpr.controls.Output("gdOptPayPlanAmt");
										output_4.dataType = "number";
										output_4.format = "s#,###";
										output_4.style.css({
											"text-align" : "right"
										});
										output_4.bind("value").toDataColumn("PAY_PLAN_AMT");
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "SCAL_PLAN_AMT";
									cell.control = (function(){
										var output_5 = new cpr.controls.Output("gdOptScalPlanAmt");
										output_5.dataType = "number";
										output_5.format = "s#,###";
										output_5.style.css({
											"text-align" : "right"
										});
										output_5.bind("value").toDataColumn("SCAL_PLAN_AMT");
										return output_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "PAY_AMT";
									cell.control = (function(){
										var output_6 = new cpr.controls.Output("gdOptPayAmt");
										output_6.dataType = "number";
										output_6.format = "s#,###";
										output_6.style.css({
											"text-align" : "right"
										});
										output_6.bind("value").toDataColumn("PAY_AMT");
										return output_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "SCAL_AMT";
									cell.control = (function(){
										var output_7 = new cpr.controls.Output("gdOptScalAmt");
										output_7.dataType = "number";
										output_7.format = "s#,###";
										output_7.style.css({
											"text-align" : "right"
										});
										output_7.bind("value").toDataColumn("SCAL_AMT");
										return output_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "UNPAID_AMT";
									cell.control = (function(){
										var output_8 = new cpr.controls.Output("gdOptUnpaidAmt");
										output_8.dataType = "number";
										output_8.format = "s#,###";
										output_8.style.css({
											"text-align" : "right"
										});
										output_8.bind("value").toDataColumn("UNPAID_AMT");
										return output_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "AMT";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("gdIpbAmt");
										numberEditor_1.spinButton = false;
										numberEditor_1.format = "999,999,999,999";
										numberEditor_1.userAttr({"require": "Y"});
										numberEditor_1.bind("value").toDataColumn("AMT");
										return numberEditor_1;
									})();
								}
							}
						]
					}
				});
				if(typeof onGrdRegFeePayCrtPopSelectionChange == "function") {
					grid_1.addEventListener("selection-change", onGrdRegFeePayCrtPopSelectionChange);
				}
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "915px",
					"height": "240px"
				});
				var button_2 = new cpr.controls.Button("btnSaveCreate");
				button_2.value = "";
				button_2.style.setClasses(["btn-save"]);
				button_2.bind("value").toLanguage("UI-SCR-PAYMK");
				if(typeof onBtnSaveCreateClick == "function") {
					button_2.addEventListener("click", onBtnSaveCreateClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "860px",
					"width": "60px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "140px",
				"left": "5px",
				"width": "925px",
				"height": "275px"
			});
			
			var button_3 = new cpr.controls.Button("btnCloseCancel");
			button_3.value = "";
			button_3.style.setClasses(["btn-commit"]);
			button_3.bind("value").toLanguage("UI-SCR-SCRNCLS");
			if(typeof onBtnCloseCancelClick == "function") {
				button_3.addEventListener("click", onBtnCloseCancelClick);
			}
			container.addChild(button_3, {
				"top": "420px",
				"left": "5px",
				"width": "60px",
				"height": "25px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaStdCrsPRegFeePayAcctSch");
			cpr.core.App.load("app/crs/impStdCrsPRegFeePayAcctPop", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "420px",
				"left": "75px",
				"width": "100px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "등록금납입신규";
	cpr.core.Platform.INSTANCE.register(app);
})();
