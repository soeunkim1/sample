/*
 * App URI: app/crs/stdCrsCRegFeeRefund
 * Source Location: app/crs/stdCrsCRegFeeRefund.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/crs/stdCrsCRegFeeRefund", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			///<xtmlink path="./stdCrsCRegFeeRefund.xtm"/>
			
			var stdCrsCRegFeeRefund = function() {
			
				var moPage = new Page();
			
				/**
				 * @desc import 서브페이지 초기화
				 * @member stdCrsCRegFeeRefund
				 * @param
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 29.
				 */
				moPage.onLoadImportDone_ImpSbpHeader = function() {
					doSbpHeaderOnLoad();
				}
				
				/**
				 * @desc 화면 온로드
				 * @member stdCrsCRegFeeRefund
				 * @param
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 29.
				 */
				moPage.onModelConstructDone_StdCrsCRegFeeRefund = function() {
					
					//리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init("rptRegFeeRefund");
					
					//암호화컬럼 설정
					ExtRepeat.addOriginCol("rptRegFeeRefund", ["STUD_ACCT_NO"]);
					
					// 부모창에 있는 값 셋팅
					var voParentInfo = moPage.parent.moCmnInfo;
					
					util.DataMap.setValue(app, "dmReqKey", "strStudId"	 , voParentInfo.studId);
					util.DataMap.setValue(app, "dmReqKey", "strSchYearRcd", voParentInfo.schYearRcd);
					util.DataMap.setValue(app, "dmReqKey", "strSmtRcd"	 , voParentInfo.smtRcd);
					util.DataMap.setValue(app, "dmReqKey", "strRegClsRcd" , voParentInfo.regClsRcd);
						
					// 조회
					doList(function(pbSuccess) {
						if (pbSuccess){
							// "조회되었습니다."
							moPage.setParentMsg(NLS.INF.M024);		
						}
					});
				};
			
				/**
				 * @desc 등록금환불내역 목록을 조회한다.
				 * @member stdCrsCRegFeeRefund
				 * @param poCallBackFunc 콜백 함수
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 29.
				 */
				function doList(poCallBackFunc) {
					
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess) {
						if (pbSuccess) {
							util.Control.redraw(app, ["rptRegFeeRefund"]);
						}
						
						if(util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				};
				
				/**
				 * @desc 신규버튼 클릭 이벤트
				 * @member stdCrsCRegFeeRefund
				 * @param   
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 29.
				 */
				moPage.onClick_BtnNew = function() {
					var vnNewRow = util.Grid.insertRow(app, "grdRegFeeRefund", "rdCbbProcRsnRcd");
					
					util.Grid.setCellValue(app, "grdRegFeeRefund", "STUD_ID"		 , util.DataMap.getValue(app, "dmReqKey", "strStudId"), vnNewRow);
					util.Grid.setCellValue(app, "grdRegFeeRefund", "SCH_YEAR_RCD" , util.DataMap.getValue(app, "dmReqKey", "strSchYearRcd"), vnNewRow);
					util.Grid.setCellValue(app, "grdRegFeeRefund", "SMT_RCD"		 , util.DataMap.getValue(app, "dmReqKey", "strSmtRcd"), vnNewRow);
					util.Grid.setCellValue(app, "grdRegFeeRefund", "REG_CLS_RCD"	 , util.DataMap.getValue(app, "dmReqKey", "strRegClsRcd"), vnNewRow);
					util.Grid.setCellValue(app, "grdRegFeeRefund", "DESC_TYPE_RCD", "CR302REF", vnNewRow);
					util.Grid.setCellValue(app, "grdRegFeeRefund", "STUD_BANK_RCD", util.DataSet.getValue(app, "dsListShreg", "BANK_RCD", "1"), vnNewRow);
					util.Grid.setCellValue(app, "grdRegFeeRefund", "STUD_ACCT_NO" , util.DataSet.getValue(app, "dsListShreg", "ACCT_NO", "1"), vnNewRow);
					util.Grid.setCellValue(app, "grdRegFeeRefund", "OWNER_NM"	 , util.DataSet.getValue(app, "dsListShreg", "OWNER_NM", "1"), vnNewRow);
				};
				
				/**
				 * @desc 삭제버튼 클릭 이벤트
				 * @member stdCrsCRegFeeRefund
				 * @param   
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 29.
				 */
				moPage.onClick_BtnDel = function() {
					util.Grid.deleteRow(app, "grdRegFeeRefund");
				};
				
				/**
				 * @desc 작업취소버튼 클릭 이벤트
				 * @member stdCrsCRegFeeRefund
				 * @param   
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 29.
				 */
				moPage.onClick_BtnRestore = function() {
					util.Grid.restoreRow(app, "grdRegFeeRefund");
				};
				
				/**
				 * @desc 작업저장버튼 클릭 이벤트
				 * @member stdCrsCRegFeeRefund
				 * @param   
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 29.
				 */
				moPage.onClick_BtnSave = function() {
					// 리피터 변경사항 체크
					if(!util.Grid.isModified(app, ["grdRegFeeRefund"], null)){
						moPage.setParentMsg(NLS.WRN.M007);
						return false;
					}
					
					// Validation Check
					if(!util.validate(app, ["grdRegFeeRefund"])) return false;
					
					//저장전 체크사항
					if(!doChkBefSave()) return false;
					
					//저장서브미션
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccessSave) {
						if(pbSuccessSave) {
							//저장성공 메세지 출력
							doList(function(pbSuccessList) {
								// "갱신된 데이터가 조회되었습니다."
								if(pbSuccessList) {
									// 등록사항 재조회
									ExtSubPage.getParent().callScript("doSetRegInfo");	
									this.setParentMsg(NLS.INF.M025);
								}
							});
						}
					});
				};
				
				/**
				 * doChkBefSave 저장전 로직 체크
				 * - 분자와 분모값 둘 중 하나만 입력하였는지 체크
				 * - 환불액은 실제 납입액을 초과할 수 없음
				 * @member stdCrsCRegFeeRefund
				 * @return vbChked 체크여부
				 * @author Aeyoung Lee 2016. 3. 29.
				 */	
				function doChkBefSave(){
					var vbChked = true;
					var vsColId;
					var voItemMap = new Map();
					var voRegFeeRecMap = new Map();
					
					for (var i = 1; i <= util.Grid.getRowCount(app, "grdRegFeeRefund"); i++) {
						var vsUptStatus = util.Grid.getRowState(app, "grdRegFeeRefund", i);
						
						if(vsUptStatus == "delete") continue;
						
						var vsRateNur = util.Grid.getCellValue(app, "grdRegFeeRefund", "REFUND_TRANS_RATE_NUR", i);
						var vsRateDen = util.Grid.getCellValue(app, "grdRegFeeRefund", "REFUND_TRANS_RATE_DEN", i);
						var vsItemCd  = util.Grid.getCellValue(app, "grdRegFeeRefund", "ITEM_CD", i);
						var vnRefundAmt = Number(util.Grid.getCellValue(app, "grdRegFeeRefund", "AMT", i));
						
						if (ValueUtil.isNull(vsRateNur) && !ValueUtil.isNull(vsRateDen)) {
							vsColId = "REFUND_TRANS_RATE_NUR";
							vbChked = false;
						}
						if (ValueUtil.isNull(vsRateDen) && !ValueUtil.isNull(vsRateNur)) {
							vsColId = "REFUND_TRANS_RATE_DEN";
							vbChked = false;
						}						
						if (!vbChked) {		
							util.Grid.setCellValue(app, "grdRegFeeRefund", vsColId, "", i);
							// 분자와 분모값은 하나만 입력될 수 없습니다.
							util.Msg.alert("NLS-CRS-M074");
							return;
						}
						
						// 항목별 환불금액을 map에 넣음
						var vsItemGetValue = voItemMap.get(vsItemCd);
						if (ValueUtil.isNull(vsItemGetValue)) {
							voItemMap.put(vsItemCd, vnRefundAmt);
						} else {
							voItemMap.put(vsItemCd, Number(vsItemGetValue) + vnRefundAmt);
						}
					}
					if(voItemMap.size() > 0){
						
						// 항목별 수납데이터를 항목별로 map에 넣음
						var voRegFeeRecList = ExtInstance.getNodeListObj("/root/resList/listRegFeeRec/row");
						var vnRegFeeRecCnt = voRegFeeRecList == null ? 0 : voRegFeeRecList.length;
						
						for(var j = 0; j < vnRegFeeRecCnt; j++){
							
							var voRegFeeRecRow = ExtInstance.getNodeToObject(voRegFeeRecList [j]);
							var vsRegFeeRecItemCd = voRegFeeRecRow.ITEM_CD;
							var vnRegFeeRecAmt = Number(voRegFeeRecRow.AMT);
							
							var vsRegFeeRecGetValue = voRegFeeRecMap.get(vsRegFeeRecItemCd);
							if (ValueUtil.isNull(vsRegFeeRecGetValue)) {
								voRegFeeRecMap.put(vsRegFeeRecItemCd, vnRegFeeRecAmt);
							} else {
								voRegFeeRecMap.put(vsRegFeeRecItemCd, Number(vsRegFeeRecGetValue) + vnRegFeeRecAmt);
							}
						}
						
						// 수납데이터와 환불데이터를 비교
						var iter = voItemMap.keySet().iterator();
						while (iter.hasNext()) {
							var key =  iter.next();
							var vsRefAmt = Number(voItemMap.get(key));
							var vsRecAmt = Number(voRegFeeRecMap.get(key));
							
							// 환불액은 실제 납부금액을 초과할 수 없습니다.
							if(vsRefAmt > vsRecAmt) {
								util.Msg.alert("NLS-CRS-M025");
								return vbChked = false;
							}	
						}	
					}	
					
					return vbChked;
				};
				
				/**
				 * onValueChanged_RptRegFeeRefund 등록금 환불내역 변경 이벤트
				 * @member stdCrsCRegFeeRefund
				 * @return vbChked 체크여부
				 * @author Aeyoung Lee 2016. 3. 29.
				 */	
				moPage.onValueChanged_RptRegFeeRefund = function(psColDiv) {
					var vnIdx = util.Grid.getIndex(app, "grdRegFeeRefund");
					var vsValue = util.Grid.getCellValue(app, "grdRegFeeRefund", psColDiv, vnIdx);
					
					// 등록금항목
					if(psColDiv == "ITEM_CD"){
						if(!ValueUtil.isNull(vsValue)){
							util.Grid.setCellValue(app, "grdRegFeeRefund", "SERIAL_NO", doGetSerialNo(vnIdx, vsValue), vnIdx);	
						}else{
							util.Grid.setCellValue(app, "grdRegFeeRefund", "SERIAL_NO", "", vnIdx);	
						}	
			        }
					
					// 환불금액
					if(psColDiv == "AMT"){
						if(vsValue.length != 0 && Number(vsValue) < 1){
							//-는 입력 안됨 : @은 0보다 큰수만 허용됩니다.
			                util.Msg.alert("NLS-CRS-M006", [NLS.NSCR.RFDAMT]);
							util.Grid.setCellValue(app, "grdRegFeeRefund", psColDiv, "", vnIdx);
							return;
						}
			        }
					
					// 환불율분자, 환불율분모
					if(psColDiv == "REFUND_TRANS_RATE_NUR" || psColDiv == "REFUND_TRANS_RATE_DEN"){
						if(vsValue.length != 0 && Number(vsValue) < 1){
							
							if(psColDiv == "REFUND_TRANS_RATE_NUR"){
								util.Msg.alert("NLS-CRS-M006", [NLS.NSCR.RFDRATNMRT]);
							}else{
								util.Msg.alert("NLS-CRS-M006", [NLS.NSCR.RFDRATDMRT]);
							}	
							
							util.Grid.setCellValue(app, "grdRegFeeRefund", psColDiv, "", vnIdx);
							return;
						}
						
						var vnRateNur = util.Grid.getCellValue(app, "grdRegFeeRefund", "REFUND_TRANS_RATE_NUR", vnIdx);
						var vnRateDen = util.Grid.getCellValue(app, "grdRegFeeRefund", "REFUND_TRANS_RATE_DEN", vnIdx);
						if((!ValueUtil.isNull(vnRateDen)) && (!ValueUtil.isNull(vnRateNur)) && Number(vnRateDen) < Number(vnRateNur)){
							//분자는 분모보다 클 수 없습니다.
							util.Msg.alert("NLS-CRS-M080", [NLS.NSCR.RFDRATNMRT, NLS.NSCR.RFDRATDMRT]);
							util.Grid.setCellValue(app, "grdRegFeeRefund", psColDiv, "", vnIdx);
							return;
						}
					}
					
					if(psColDiv == "PROC_RSN_RCD" || psColDiv == "ITEM_CD" || psColDiv == "CII_DT" || psColDiv == "REFUND_TRANS_RATE_NUR" || psColDiv == "REFUND_TRANS_RATE_DEN"){
						var vsProcRsnRcd = util.Grid.getCellValue(app, "grdRegFeeRefund", "PROC_RSN_RCD", vnIdx);
						var vsItemCd = util.Grid.getCellValue(app, "grdRegFeeRefund", "ITEM_CD", vnIdx);
						
						//환불사유에 따른 자동계산 여부
						var vsRefCalc = ExtInstance.getValue ("/root/resList/listProcRsnCd/row", "CD_PRP1", "child::CD='"+ vsProcRsnRcd +"'");
						
						if((!ValueUtil.isNull(vsProcRsnRcd)) && (!ValueUtil.isNull(vsItemCd))){
							doRefundAmt(vnIdx);
						}	
					}	
				};
				
				/**
				 * doGetSerialNo 순번리턴
				 * @member stdCrsCRegFeeRefund
				 * @param  pnIdx 선택된 로우 인덱스
				 * @param  psItemCd 선택된 등록금항목 코드
				 * @return vnMaxSerialNo 
				 * @author Aeyoung Lee 2016. 3. 29.
				 */
				function doGetSerialNo(pnIdx, psItemCd) {
					var vnMaxSerialNo = null;
					for (var i = 1; i <= util.Grid.getRowCount(app, "grdRegFeeRefund"); i++) {
						
						if(pnIdx == i) continue;
						var vsItemCd = util.Grid.getCellValue(app, "grdRegFeeRefund", "ITEM_CD", i);
						
						if(psItemCd == vsItemCd){
							var vnSerialNo = Number(util.Grid.getCellValue(app, "grdRegFeeRefund", "SERIAL_NO", i));
							
							if(vnMaxSerialNo == null){
								vnMaxSerialNo = vnSerialNo
							}else{
								if(vnMaxSerialNo < vnSerialNo) vnMaxSerialNo = vnSerialNo;
							}	
						}	
					}	
					return vnMaxSerialNo + 1;
				};	
				
				/**
				 * doRefundAmt 환불금액 자동계산 서브미션 호출
				 * @member stdCrsCRegFeeRefund
				 * @return vnMaxSerialNo 
				 * @author Aeyoung Lee 2016. 3. 29.
				 */
				function doRefundAmt(pnIdx) {
					util.DataMap.setValue(app, "dmReqKey", "strItemCd"	 , util.Grid.getCellValue(app, "grdRegFeeRefund", "ITEM_CD", pnIdx));
					util.DataMap.setValue(app, "dmReqKey", "strCiiDt"	 , util.Grid.getCellValue(app, "grdRegFeeRefund", "CII_DT", pnIdx));
					util.DataMap.setValue(app, "dmReqKey", "strProcRsnRcd", util.Grid.getCellValue(app, "grdRegFeeRefund", "PROC_RSN_RCD", pnIdx));
					util.DataMap.setValue(app, "dmReqKey", "strRateNur" 	 , util.Grid.getCellValue(app, "grdRegFeeRefund", "REFUND_TRANS_RATE_NUR", pnIdx));
					util.DataMap.setValue(app, "dmReqKey", "strRateDen"	 , util.Grid.getCellValue(app, "grdRegFeeRefund", "REFUND_TRANS_RATE_DEN", pnIdx));
					
					//서브미션
					//strCommand: getCalcRefund 
					util.Submit.send(app, "subRefundAmt", function(pbSuccess) {
						if(pbSuccess) {
			                //환불SF결과 금액, 기준일자, 환불율분모, 분자의 값이 하나라도 있을경우 수행						
							var vsSfAmt = util.DataMap.getValue(app, "dmResRefund", "AMT");
							var vsSfDt  = util.DataMap.getValue(app, "dmResRefund", "CII_DT");
							var vsSfNur = util.DataMap.getValue(app, "dmResRefund", "REFUND_TRANS_RATE_NUR");
							var vsSfDen = util.DataMap.getValue(app, "dmResRefund", "REFUND_TRANS_RATE_DEN");
							
							if(!ValueUtil.isNull(vsSfAmt)) util.Grid.setCellValue(app, "grdRegFeeRefund", "AMT", vsSfAmt , pnIdx);
							if(!ValueUtil.isNull(vsSfDt))  util.Grid.setCellValue(app, "grdRegFeeRefund", "CII_DT", vsSfDt, pnIdx);
							if(!ValueUtil.isNull(vsSfNur)) util.Grid.setCellValue(app, "grdRegFeeRefund", "REFUND_TRANS_RATE_NUR", vsSfNur, pnIdx);
							if(!ValueUtil.isNull(vsSfDen)) util.Grid.setCellValue(app, "grdRegFeeRefund", "REFUND_TRANS_RATE_DEN", vsSfDen, pnIdx);   
						}
					});
				};	
				
				/**
				 * @desc 부모 헤더에 메세지 뿌리기
				 * @member stdCrsCRegFeeRefund
				 * @param psMsgCode 메시지 코드
				 * @param  paMsg 메시지 변수 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 29.
				 */
				moPage.setParentMsg = function(psMsgCode, paMsg) {
					util.Msg.notify(app, psMsgCode, paMsg);	
				};
				
				/**
				 * @desc 변경사항체크 - 부모창에서 호출용
				 * @member stdCrsCRegFeeRefund
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 29.
				 */
				function doCheckDataChange() {
					if(util.Grid.isModified(app, ["grdRegFeeRefund"], "CRM") ){
						return false;
					}else{
						return true;
					}
				};
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsListProcRsnCd");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsListCrsItem");
			dataSet_2.parseData({
				"columns": [
					{"name": "ITEM_CD"},
					{"name": "ITEM_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsListBank");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsListRegFeeRec");
			dataSet_4.parseData({
				"columns": [
					{"name": "ITEM_CD"},
					{"name": "AMT"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsListShreg");
			dataSet_5.parseData({
				"columns": [
					{"name": "BANK_RCD"},
					{"name": "ACCT_NO"},
					{"name": "OWNER_NM"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsListRefundCii");
			dataSet_6.parseData({
				"columns": [
					{"name": "RND_TYPE_RCD"},
					{"name": "RND_LOC"},
					{"name": "LSN_END_DT"},
					{"name": "LSN_ST_DT"},
					{"name": "SMT_RCD"},
					{"name": "RATE_NUR"},
					{"name": "ITEM_CD"},
					{"name": "RATE_DEN"},
					{"name": "SCH_YEAR_RCD"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsRegFeeRefund");
			dataSet_7.parseData({
				"info": "CRS_REG_FEE_PAY@ITEM_CD,SERIAL_NO,STUD_ID,SCH_YEAR_RCD,SMT_RCD,REG_CLS_RCD,DESC_TYPE_RCD",
				"columns": [
					{"name": "PROC_RSN_RCD"},
					{"name": "ITEM_CD"},
					{"name": "SERIAL_NO"},
					{"name": "CII_DT"},
					{"name": "AMT"},
					{"name": "REFUND_TRANS_RATE_NUR"},
					{"name": "REFUND_TRANS_RATE_DEN"},
					{"name": "PROC_PLAN_DT"},
					{"name": "PROC_DT"},
					{"name": "PAY_BANK_RCD"},
					{"name": "STUD_BANK_RCD"},
					{"name": "STUD_ACCT_NO"},
					{"name": "OWNER_NM"},
					{"name": "REMARK"},
					{"name": "STUD_ID"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SMT_RCD"},
					{"name": "REG_CLS_RCD"},
					{"name": "DESC_TYPE_RCD"},
					{"name": "DIV_PAY_SEQ"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strStudId",
						"dataType": "string"
					},
					{
						"name": "strSchYearRcd",
						"dataType": "string"
					},
					{
						"name": "strSmtRcd",
						"dataType": "string"
					},
					{
						"name": "strRegClsRcd",
						"dataType": "string"
					},
					{
						"name": "strItemCd",
						"dataType": "string"
					},
					{
						"name": "strCiiDt",
						"dataType": "string"
					},
					{
						"name": "strProcRsnRcd",
						"dataType": "string"
					},
					{
						"name": "strRateNur",
						"dataType": "string"
					},
					{
						"name": "strRateDen",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmResRefund");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "REFUND_TRANS_RATE_DEN",
						"dataType": "string"
					},
					{
						"name": "AMT",
						"dataType": "string"
					},
					{
						"name": "CII_DT",
						"dataType": "string"
					},
					{
						"name": "REFUND_TRANS_RATE_NUR",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/crs/StdCrsRegFeeRefund/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_5, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_7, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subChkRefund");
			submission_2.action = "/crs/StdCrsRegFeeRefund/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_6, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subRefundAmt");
			submission_3.action = "/crs/StdCrsRegFeeRefund/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_1);
			submission_3.addResponseData(dataMap_2, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subSave");
			submission_4.action = "/crs/StdCrsRegFeeRefund/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_1);
			submission_4.addRequestData(dataSet_7);
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpSearchRegi");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.visible = false;
				button_1.value = "조회";
				button_1.style.setClasses(["btn-search"]);
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "0px",
					"left": "110px",
					"width": "15px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "5px",
				"left": "465px",
				"width": "115px",
				"height": "25px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaSbpHeader");
			if(typeof onEmaSbpHeaderAppReady == "function") {
				embeddedApp_1.addEventListener("app-ready", onEmaSbpHeaderAppReady);
			}
			cpr.core.App.load("app/imp/impSbpHeader", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "415px",
				"left": "0px",
				"width": "96px",
				"height": "25px"
			});
			
			var group_2 = new cpr.controls.Container("grpDataDtl");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_1 = linker.userDefinedControl_1 = new udc.com.comTitle();
				userDefinedControl_1.bind("title").toLanguage("UI-SCR-REGFEERFDRECLST");
				container.addChild(userDefinedControl_1, {
					"top": "5px",
					"left": "5px",
					"width": "315px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnNew");
				button_2.value = "";
				button_2.style.setClasses(["btn-new"]);
				button_2.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnNewClick == "function") {
					button_2.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "764px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnDel");
				button_3.value = "";
				button_3.style.setClasses(["btn-delete"]);
				button_3.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_3.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "829px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdRegFeeRefund");
				grid_1.init({
					"dataSet": app.lookup("dsRegFeeRefund"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "92px"},
						{"width": "94px"},
						{"width": "59px"},
						{"width": "98px"},
						{"width": "98px"},
						{"width": "92px"},
						{"width": "93px"},
						{"width": "93px"},
						{"width": "91px"},
						{"width": "90px"},
						{"width": "137px"},
						{"width": "94px"},
						{"width": "184px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-RFDRSN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-TUITIONITEM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-GLS-SERIAL_NO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-RFDSTDT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-RFDAMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-RFDRATNMRT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-RFDRATDMRT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-RFDPLANDT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-RFDDT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-GLS-BANK");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-ACCT_NO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-ACTHOLDER");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-REMARK");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_1 = new cpr.controls.Output();
										output_1.style.css({
											"text-align" : "center"
										});
										return output_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "PROC_RSN_RCD";
									cell.control = (function(){
										var comboBox_1 = new cpr.controls.ComboBox("gdCbbProcRsnRcd");
										comboBox_1.userAttr({"require": "Y"});
										(function(comboBox_1){
											comboBox_1.addItem(new cpr.controls.Item("선택", ""));
											comboBox_1.setItemSet(app.lookup("dsListProcRsnCd"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_1);
										comboBox_1.bind("value").toDataColumn("PROC_RSN_RCD");
										return comboBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "ITEM_CD";
									cell.control = (function(){
										var comboBox_2 = new cpr.controls.ComboBox("gdCbbItemCd");
										comboBox_2.userAttr({"require": "Y"});
										(function(comboBox_2){
											comboBox_2.addItem(new cpr.controls.Item("선택", ""));
											comboBox_2.setItemSet(app.lookup("dsListCrsItem"), {
												"label": "ITEM_NM",
												"value": "ITEM_CD"
											});
										})(comboBox_2);
										comboBox_2.bind("value").toDataColumn("ITEM_CD");
										return comboBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "SERIAL_NO";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "CII_DT";
									cell.control = (function(){
										var dateInput_1 = new cpr.controls.DateInput("gdDipCiiDt");
										dateInput_1.style.css({
											"text-align" : "center"
										});
										dateInput_1.bind("value").toDataColumn("CII_DT");
										return dateInput_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "AMT";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("gdIpbAmt");
										numberEditor_1.spinButton = false;
										numberEditor_1.format = "999,999,999,999";
										numberEditor_1.userAttr({"require": "Y"});
										numberEditor_1.bind("value").toDataColumn("AMT");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "REFUND_TRANS_RATE_NUR";
									cell.control = (function(){
										var numberEditor_2 = new cpr.controls.NumberEditor("gdIpbRefundTransRateNur");
										numberEditor_2.spinButton = false;
										numberEditor_2.format = "999";
										numberEditor_2.bind("value").toDataColumn("REFUND_TRANS_RATE_NUR");
										return numberEditor_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "REFUND_TRANS_RATE_DEN";
									cell.control = (function(){
										var numberEditor_3 = new cpr.controls.NumberEditor("gdIpbRefundTransRateDen");
										numberEditor_3.spinButton = false;
										numberEditor_3.format = "999";
										numberEditor_3.bind("value").toDataColumn("REFUND_TRANS_RATE_DEN");
										return numberEditor_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "PROC_PLAN_DT";
									cell.control = (function(){
										var dateInput_2 = new cpr.controls.DateInput("gdDipProcPlanDt");
										dateInput_2.userAttr({"require": "Y"});
										dateInput_2.style.css({
											"text-align" : "center"
										});
										dateInput_2.bind("value").toDataColumn("PROC_PLAN_DT");
										return dateInput_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "PROC_DT";
									cell.control = (function(){
										var dateInput_3 = new cpr.controls.DateInput("gdDipProcDt");
										dateInput_3.style.css({
											"text-align" : "center"
										});
										dateInput_3.bind("value").toDataColumn("PROC_DT");
										return dateInput_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "STUD_BANK_RCD";
									cell.control = (function(){
										var comboBox_3 = new cpr.controls.ComboBox("gdCbbStudBankRcd");
										comboBox_3.userAttr({"require": "Y"});
										(function(comboBox_3){
											comboBox_3.addItem(new cpr.controls.Item("선택", ""));
											comboBox_3.setItemSet(app.lookup("dsListBank"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_3);
										comboBox_3.bind("value").toDataColumn("STUD_BANK_RCD");
										return comboBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "STUD_ACCT_NO";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("gdIpbStudAcctNo");
										inputBox_1.maxLength = 30;
										inputBox_1.userAttr({"require": "Y"});
										inputBox_1.bind("value").toDataColumn("STUD_ACCT_NO");
										return inputBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "OWNER_NM";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("gdIpbOwnerNm");
										inputBox_2.maxLength = 100;
										inputBox_2.userAttr({"require": "Y"});
										inputBox_2.bind("value").toDataColumn("OWNER_NM");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.columnName = "REMARK";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("gdIpbRemark");
										inputBox_3.maxLength = 1000;
										inputBox_3.bind("value").toDataColumn("REMARK");
										return inputBox_3;
									})();
								}
							}
						]
					},
					"footer": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.control = (function(){
										var output_2 = new cpr.controls.Output("footer_output");
										output_2.value = "";
										output_2.bind("value").toLanguage("UI-GLS-SUM");
										return output_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_3 = new cpr.controls.Output("footer_output");
										output_3.value = "";
										output_3.bind("value").toLanguage("UI-GLS-SUM");
										return output_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.control = (function(){
										var output_4 = new cpr.controls.Output("footer_output");
										output_4.value = "";
										output_4.bind("value").toLanguage("UI-GLS-SUM");
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.control = (function(){
										var output_5 = new cpr.controls.Output("footer_output");
										output_5.value = "";
										output_5.bind("value").toLanguage("UI-GLS-SUM");
										return output_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.control = (function(){
										var output_6 = new cpr.controls.Output("footer_output");
										output_6.value = "";
										output_6.bind("value").toLanguage("UI-GLS-SUM");
										return output_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.control = (function(){
										var output_7 = new cpr.controls.Output("footer_output");
										output_7.value = "";
										output_7.bind("value").toLanguage("UI-GLS-SUM");
										return output_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.control = (function(){
										var output_8 = new cpr.controls.Output("footer_output");
										output_8.value = "합계";
										output_8.bind("value").toLanguage("UI-GLS-SUM");
										return output_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.expr = "getSum(\"AMT\")";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.control = (function(){
										var output_9 = new cpr.controls.Output("footer_output");
										output_9.value = "";
										output_9.bind("value").toLanguage("UI-GLS-SUM");
										return output_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.control = (function(){
										var output_10 = new cpr.controls.Output("footer_output");
										output_10.value = "";
										output_10.bind("value").toLanguage("UI-GLS-SUM");
										return output_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.control = (function(){
										var output_11 = new cpr.controls.Output("footer_output");
										output_11.value = "";
										output_11.bind("value").toLanguage("UI-GLS-SUM");
										return output_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.control = (function(){
										var output_12 = new cpr.controls.Output("footer_output");
										output_12.value = "";
										output_12.bind("value").toLanguage("UI-GLS-SUM");
										return output_12;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.control = (function(){
										var output_13 = new cpr.controls.Output("footer_output");
										output_13.value = "";
										output_13.bind("value").toLanguage("UI-GLS-SUM");
										return output_13;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.control = (function(){
										var output_14 = new cpr.controls.Output("footer_output");
										output_14.value = "";
										output_14.bind("value").toLanguage("UI-GLS-SUM");
										return output_14;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.control = (function(){
										var output_15 = new cpr.controls.Output("footer_output");
										output_15.value = "";
										output_15.bind("value").toLanguage("UI-GLS-SUM");
										return output_15;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.control = (function(){
										var output_16 = new cpr.controls.Output("footer_output");
										output_16.value = "";
										output_16.bind("value").toLanguage("UI-GLS-SUM");
										return output_16;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1014px",
					"height": "394px"
				});
				var button_4 = new cpr.controls.Button("btnRestore");
				button_4.value = "";
				button_4.style.setClasses(["btn-restore"]);
				button_4.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_4.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "894px",
					"width": "60px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button("btnSave");
				button_5.value = "";
				button_5.style.setClasses(["btn-save"]);
				button_5.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_5.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_5, {
					"top": "5px",
					"left": "959px",
					"width": "60px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "0px",
				"left": "0px",
				"width": "1025px",
				"height": "430px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_1.ctrl = linker.grid_1;
		}
	});
	app.title = "stdCrsCRegFeeRefund";
	cpr.core.Platform.INSTANCE.register(app);
})();
