/*
 * App URI: app/csr/extCsrCGudProfClass
 * Source Location: app/csr/extCsrCGudProfClass.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/csr/extCsrCGudProfClass", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			///<xtmlink path="./extCsrCGudProfClass.xtm"/>
			
			var extCsrCGudProfClass = function() {
			
				var moPage = new Page();
				//임포트용 데이터 통신 오브젝트
				var moPObject = new PObject();
				//개별 조회조건
				var moPerCrt = ["lblStudNo", "ipbStudNo", "btnStudPopSearch"];
				//개별 외 조회조건
				var moOtherCrt = ["lblSaNm", "ipbSaNm", "btnSaPopSearch", "lblSchYearRcd", "cbbSchYearRcd", "lblSmtRcd", "cbbSmtRcd", "lblStatRcd", "cbbStatRcd", 
				                          "lblProcRsltYear", "cbbProcRsltYear", "lblRepNm", "ipbProfNm", "btnProfPopSearch", "lblClassRcd", "cbbClassRcd", "lblGenderRcd", "cbbGenderRcd",
										  "lblNatYn", "ckbNatYn"];
				
				/**
				 * 학생검색팝업 관련 설정사항
				 * 설정가능 유형 : 
				 *   1. 인스턴스((/root/시작))
				 *   2. 그리드의 셀 (ghc시작)
				 *   3. 컨트롤 id
				 * 각 변수별 설명
				 *  iXXX : 팝업으로 input 전달될 파라미터
				 *  oXXX : 팝업에서 선택한 값을 받을 컬럼 아이디
				 *  1. controlId 			: 최초 이벤트의 버튼이나 그리드 id	(필수)
				 *  2. iStudNo 			: 검색조건 학번								(선택) (값이 존재할 경우 4자리 이상)
				 *  3. iStudId 				: 검색조건 학번오브젝트					(선택)
				 *  4. iStudNm 			: 이름        									(선택) (값이 존재할 경우 2자리 이상)
				 *  5. iKeyDate 			: 기준일 										(필수)
				 *  6. iObjDivRcd 		: 객체구분코드 								(선택)
				 *  7. iObjCd 				: 부서코드										(선택)
				 *  8. iObjNm 			: 부서명											(선택) 
				 *  10. iStatRcd			: 학적상태										(선택) 
				 *  11. iStudDivRcd		: 학생구분										(선택) 
				 *  12. oStudId			: 학번오브젝트
				 *  13. oStudNo 			: 학번
				 *  14. oStudNm 		: 이름
				 *  15. oStatNm 			: 학적상태명
				 *  16. oStatRcd 			: 학적상태코드
				 *  17. oProcRslt 		: 진급학기
				 *  18. oProcRsltYear 	: 진급학년
				 *  19. oSaCd 			: 학사부서코드명
				 *  20. oSaNm 			: 학사부서명
				 *  21. oSpCd 			: 이수과정코드명
				 *  22. oSpNm 			: 이수과정명
				 *  23. oOgCd 			: 행정부서코드명
				 *  24. oOgNm 			: 행정부서명
				 *  25. oStudDivRcd		: 학생구분코드
				 *  26. oStudDivNm		: 학생구분명
				 *  27. oBirthday			: 생년월일
				 *  28. oGenderRcd		: 성별코드
				 *  29. oGenderNm		: 성별명
				 *  30. func 				: 팝업에서 선택한 값을 받은 후 추가 로직이 필요한 경우 함수 작성
				 */
				moPObject.moIdsForStdCsrPStSearch = [
				{
					controlId 					: "btnStudPopSearch",
					iStudNo 					: "ipbStudNo",	
					iStudId 						: "",
					iStudNm 					: "",
					iKeyDate 					: "/root/resOnLoad/strKeyDate", 
					iObjDivRcd 				: "",
					iObjCd 						: "",
					iObjNm 					: "",
					iStatRcd 					: "",
					iStudDivRcd				: "",
					oStudId 					: "/root/reqList/strStudId",
					oStudNo 					: "ipbStudNo",
					oStudNm 					: "",
					oStatNm 					: "",
					oStatRcd 					: "",
					oProcRslt 					: "",
					oProcRsltYear 			: "",
					oSaNm						: "",
					oSaCd 						: "",
					oSpNm 					: "",
					oSpCd 						: "",
					oOgNm 					: "",
					oOgCd 						: "",
					oStudDivRcd				: "",
					oStudDivNm				: "",
					oBirthday					: "",
					oGenderRcd				: "",
					oGenderNm				: "",
					func : function() {
					}
				}
				];
				
				/******************************************************************************************************
				 *  객체검색팝업 관련 설정사항
				 *  ▶ 설정가능 유형
				 *      1. 인스턴스
				 *      2. 리피트 디테일 셀 ID
				 *      3. 컨트롤 ID
				 *  ▶ 각 변수별 설명
				 *      iXXX : 팝업에 전달될  input 파라미터
				 *      oXXX : 팝업에서 선택한 값을 받을 데이터
				 *  	1. controlId 		: 최초 이벤트의 버튼이나 그리드 id             (필수)
				 *  	2. iCd 				: 검색조건 부서코드                                 (선택) 
				 *  	3. iNm 				: 검색조건 부서명									(선택)	
				 *  	4. iObjDivRcd 	: 검색될 객체구분코드 종류						(필수)
				 *								  (CC009OG : "행정부서", CC009SA : "학사부서", CC009SP : "이수과정", CC009CU : "교과그룹", CC009OT : "외부부서")
				 *  	5. iStartObject 	: 검색시작부서 										(선택)
				 *								  ("CC009OG20000,CC009OG70000",) 
				 *		6. iOtDivRcd 		: 외부부서구분코드 									(선택)
				 *								  (외부부서[CC009OT]일때 사용) ("CB008UNIV, CB008HSCL")
				 *		7. iOtIsTreeView	: 트리보이기 유무 									(선택)
				 *								  default : N (외부부서[CC009OT]일때 사용) "Y" 
				 *  	8. iLanDivRcd 	: 언어키													(선택)
				 *  	9. iKeyDate 		: 기준일													(필수)
				 *  	10. oObjDivRcd 	: 객체구분코드 
				 *  	11. oCd 			: 부서코드
				 *  	12. oCdNm 		: 부서명
				 *  	13. oBegDt 		: 시작일
				 *  	14. oEndDt 		: 종료일
				 *  	15. oLanDivRcd 	: 언어키
				 *  	16. func 			: 팝업에서 선택한 값을 받은 후 추가 로직이 필요한 경우 함수
				 *									  
				 *******************************************************************************************************/	
				moPObject.moIdsForStdCmnPObjSch = [
					{   //소속 조회조건 행정,학사 부서
						controlId			:	"btnSaPopSearch",
						iCd					:	"",
						iNm					:	"ipbSaNm",
						iObjDivRcd			:	["CC009SA", "CC009OG"],
						iStartObject    	:   "",
						iOtDivRcd			:	"",
						iOtIsTreeView	:	"",
						iLanDivRcd		:	"",
						iKeyDate			:	"/root/reqList/strKeyDate",
						iKeyEndDate		:	"",
						oObjDivRcd		:	"/root/reqList/strObjDivRcd",
						oCd					:	"/root/reqList/strSaCd",
						oCdNm				:	"ipbSaNm",
						oBegDt				:	"",
						oEndDt				:	"",
						oLanDivRcd		:	"",
						func 					:  null
					}
				];
				
				
				/*******************필수정의사항 start**********************/ 
				/**
				 * 교직원검색팝업 관련 설정사항
				 * 각 변수별 설명
				 *  iXXX : 팝업으로 input 전달될 파라미터
				 *  oXXX : 팝업에서 선택한 값을 받을 컬럼 아이디
				 *  [IN]
				 *   1. controlId					: (필수) 최초 이벤트의 버튼id
				 *   2. istrStaffGrpAuth			: (선택) 교직원 그룹에 대한 인사자료권한 적용여부(적용시 : true)
				 *   3. istrWkdtyAuth			: (선택) 보직에 해당되는 사람 조회여부(조회시 : true), 현재사용하지 않음(2013.04.11)
				 *   4. iKeyDate					: (선택) 기준일자(NULL일 경우 현재일자)
				 *   4. iStaffNo					: (선택) 교직원번호
				 *   5. iStaffGrpRcd				: (선택) 교직원 그룹[CF001]
				 *   6. iStaffGrpRcdLock		: (선택) 교직원그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
				 *   7. iStaffSubGrpRcd		: (선택) 교직원 하위그룹[CF003]
				 *   8. iStaffSubGrpRcdLock	: (선택) 교직원 하위그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
				 *   9. iStatusRcd				: (선택) 상태[CF005](재직, 휴직, 퇴직 등을 말함)
				 *  10. iRepNm					: (선택) 성명
				 *  11. iObjDivRcd				: (선택) 객체구분코드[CC009]
				 *  12. iObjCd						: (선택) 부서코드
				 *  13. iObjNm					: (선택) 부서명
				 *  14. istrObjCdInList			: (선택) 복수 행정부서 지정(부서에 대한 IN조건 "'A','B','C'" 형식으로 셋팅)
				 *  15. iWkgrdRcd				: (선택) 직급[CF007]
				 *  [OUT]
				 *  16. oObjNo					: 오브젝트번호
				 *  17. oStaffNo					: 교직원번호
				 *  18. oRepNm					: 성명
				 *  19. oBirthday					: 생년월일
				 *  20. oStatNm					: 상태명
				 *  21. oStatRcd					: 상태코드
				 *  22. oOgNm					: 부서명
				 *  23. oOgCd						: 부서코드
				 *  24. oPosNm					: 포지션명
				 *  25. oPosCd					: 포지션코드
				 *  26. oWkgrdNm				: 직급명
				 *  27. oWkgrdRcd				: 직급코드
				 *  28. oStaffGrpRcd			: 교직원그룹코드
				 *  29. oStaffSubGrpRcd		: 교직원하위그룹코드
				 *  30. oHoRcd					: 호봉코드
				 *  31. oSsn						: 주민등록번호
				 *  32. oWkdtyRcd				: 직책코드
				 *  33. oWkdtyNm				: 직책명
				 *  34. func						: 팝업에서 선택한 값을 받은 후 추가 로직이 필요한 경우 함수 작성
				 * @member impStdCmnPPrsnSearch
				 * @type Array
				 * @author cis at 16. 3. 29
				 */ 
				 moPObject.moIdsForStdCmnPPrsnSearch = [
					 { 
						 controlId					: "btnProfPopSearch",				//(필수)교직원검색 버튼ID
						 istrStaffGrpAuth			: "",										//(선택)셋팅 교직원 그룹에 대한 인사자료권한 적용여부(적용시 : true)
						 istrWkdtyAuth			: "true",									//(선택)셋팅 보직에 해당되는 사람 조회여부(조회시 : true), 현재사용하지 않음(2013.04.11)
						 iKeyDate					: "/root/reqList/strKeyDate",	//(선택) 셋팅 기준일자(NULL일 경우 현재일자)
						 iStaffNo					: "ipbProfNm",						//(선택) 셋팅 교직원번호
						 iStaffGrpRcd				: "",										//(선택) 셋팅 교직원그룹
						 iStaffGrpRcdLock		: "", 										//(선택) 셋팅 교직원그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
						 iStaffSubGrpRcd		: "",										//(선택) 셋팅 교직원 하위그룹[CF003]
						 iStaffSubGrpRcdLock	: "",										//(선택) 셋팅 교직원 하위그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
						 iStatusRcd				: "",										//(선택) 셋팅 상태[CF005](재직, 휴직, 퇴직 등을 말함)
						 iRepNm					: "",										//(선택) 셋팅 성명
						 iObjDivRcd				: "",										//(선택) 셋팅 객체구분코드[CC009]
						 iObjCd						: "",										//(선택) 셋팅 부서코드
						 iObjNm					: "",										//(선택) 셋팅 부서명
						 istrObjCdInList			: "",										//(선택) 셋팅 복수 행정부서 지정(부서에 대한 IN조건 "'A','B','C'" 형식으로 셋팅)
						 iWkgrdRcd				: "",										//(선택) 셋팅 직급[CF007]
						  
						 oObjNo					: "/root/reqList/strProfId",		//리턴 오브젝트번호
						 oStaffNo					: "",										//리턴 교직원번호
						 oRepNm					: "ipbProfNm",						//리턴 성명
						 oBirthday					: "",										//리턴 생년월일[CF001]
						 oStatNm					: "",										//리턴 상태명
						 oStatRcd					: "",										//리턴 상태코드
						 oOgNm					: "",										//리턴 부서명
						 oOgCd						: "",										//리턴 부서코드
						 oPosNm					: "",										//리턴 직위명
						 oPosCd					: "",										//리턴 직위코드
						 oWkgrdNm				: "",										//리턴 직급명
						 oWkgrdRcd				: "",										//리턴 직급
						 oStaffGrpRcd				: "",										//리턴 교직원그룹 
						 oStaffSubGrpRcd		: "",										//리턴 교직원 하위그룹 
						 oHoRcd					: "",										//리턴 호봉코드
						 oSsn						: "",										//리턴 주민번호
						 oWkdtyRcd				: "",										//리턴 직책코드 
						 oWkdtyNm				: "",										//리턴 직책명 
						 func                         : null
					 },
					 { 
						 controlId					: "btnBatchProfPopSearch",		//(필수)교직원검색 버튼ID
						 istrStaffGrpAuth			: "",										//(선택)셋팅 교직원 그룹에 대한 인사자료권한 적용여부(적용시 : true)
						 istrWkdtyAuth			: "true",									//(선택)셋팅 보직에 해당되는 사람 조회여부(조회시 : true), 현재사용하지 않음(2013.04.11)
						 iKeyDate					: "/root/reqList/strKeyDate",	//(선택) 셋팅 기준일자(NULL일 경우 현재일자)
						 iStaffNo					: "ipbBatchRepNm",				//(선택) 셋팅 교직원번호
						 iStaffGrpRcd				: "",										//(선택) 셋팅 교직원그룹
						 iStaffGrpRcdLock		: "", 										//(선택) 셋팅 교직원그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
						 iStaffSubGrpRcd		: "",										//(선택) 셋팅 교직원 하위그룹[CF003]
						 iStaffSubGrpRcdLock	: "",										//(선택) 셋팅 교직원 하위그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
						 iStatusRcd				: "",										//(선택) 셋팅 상태[CF005](재직, 휴직, 퇴직 등을 말함)
						 iRepNm					: "",										//(선택) 셋팅 성명
						 iObjDivRcd				: "",										//(선택) 셋팅 객체구분코드[CC009]
						 iObjCd						: "",										//(선택) 셋팅 부서코드
						 iObjNm					: "",										//(선택) 셋팅 부서명
						 istrObjCdInList			: "",										//(선택) 셋팅 복수 행정부서 지정(부서에 대한 IN조건 "'A','B','C'" 형식으로 셋팅)
						 iWkgrdRcd				: "",										//(선택) 셋팅 직급[CF007]
						  
						 oObjNo					: "/root/reqList/strBatchProfId",//리턴 오브젝트번호
						 oStaffNo					: "",										//리턴 교직원번호
						 oRepNm					: "ipbBatchRepNm",				//리턴 성명
						 oBirthday					: "",										//리턴 생년월일[CF001]
						 oStatNm					: "",										//리턴 상태명
						 oStatRcd					: "",										//리턴 상태코드
						 oOgNm					: "",										//리턴 부서명
						 oOgCd						: "",										//리턴 부서코드
						 oPosNm					: "",										//리턴 직위명
						 oPosCd					: "",										//리턴 직위코드
						 oWkgrdNm				: "",										//리턴 직급명
						 oWkgrdRcd				: "",										//리턴 직급
						 oStaffGrpRcd				: "",										//리턴 교직원그룹 
						 oStaffSubGrpRcd		: "",										//리턴 교직원 하위그룹 
						 oHoRcd					: "",										//리턴 호봉코드
						 oSsn						: "",										//리턴 주민번호
						 oWkdtyRcd				: "",										//리턴 직책코드 
						 oWkdtyNm				: "",										//리턴 직책명 
						 func                         : null
					 },
					 { 
						 controlId					: "rdBtnProfNm",						//(필수)교직원검색 버튼ID
						 istrStaffGrpAuth			: "",										//(선택)셋팅 교직원 그룹에 대한 인사자료권한 적용여부(적용시 : true)
						 istrWkdtyAuth			: "true",									//(선택)셋팅 보직에 해당되는 사람 조회여부(조회시 : true), 현재사용하지 않음(2013.04.11)
						 iKeyDate					: "/root/reqList/strKeyDate",	//(선택) 셋팅 기준일자(NULL일 경우 현재일자)
						 iStaffNo					: "rdIpbProfNm",						//(선택) 셋팅 교직원번호
						 iStaffGrpRcd				: "",										//(선택) 셋팅 교직원그룹
						 iStaffGrpRcdLock		: "", 										//(선택) 셋팅 교직원그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
						 iStaffSubGrpRcd		: "",										//(선택) 셋팅 교직원 하위그룹[CF003]
						 iStaffSubGrpRcdLock	: "",										//(선택) 셋팅 교직원 하위그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
						 iStatusRcd				: "",										//(선택) 셋팅 상태[CF005](재직, 휴직, 퇴직 등을 말함)
						 iRepNm					: "",										//(선택) 셋팅 성명
						 iObjDivRcd				: "",										//(선택) 셋팅 객체구분코드[CC009]
						 iObjCd						: "",										//(선택) 셋팅 부서코드
						 iObjNm					: "",										//(선택) 셋팅 부서명
						 istrObjCdInList			: "",										//(선택) 셋팅 복수 행정부서 지정(부서에 대한 IN조건 "'A','B','C'" 형식으로 셋팅)
						 iWkgrdRcd				: "",										//(선택) 셋팅 직급[CF007]
						  
						 oObjNo					: "rdOptProfId",						//리턴 오브젝트번호
						 oStaffNo					: "",										//리턴 교직원번호
						 oRepNm					: "rdIpbProfNm",						//리턴 성명
						 oBirthday					: "",										//리턴 생년월일[CF001]
						 oStatNm					: "",										//리턴 상태명
						 oStatRcd					: "",										//리턴 상태코드
						 oOgNm					: "",										//리턴 부서명
						 oOgCd						: "",										//리턴 부서코드
						 oPosNm					: "",										//리턴 직위명
						 oPosCd					: "",										//리턴 직위코드
						 oWkgrdNm				: "",										//리턴 직급명
						 oWkgrdRcd				: "",										//리턴 직급
						 oStaffGrpRcd				: "",										//리턴 교직원그룹 
						 oStaffSubGrpRcd		: "",										//리턴 교직원 하위그룹 
						 oHoRcd					: "",										//리턴 호봉코드
						 oSsn						: "",										//리턴 주민번호
						 oWkdtyRcd				: "",										//리턴 직책코드 
						 oWkdtyNm				: "",										//리턴 직책명 
						 func                         : null
					 }
				];
				
				/**
				 * @desc 헤더 온로드
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					doHeaderOnLoad();
				};
			
				/**
				 * @desc 화면 온로드
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onModelConstructDone_extCsrCGudProfClass = function() {
					//리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptCsrShreg", "rptCsrGudProf", "rptCsrClass"]);
					// 2. 검색조건 초기 설정
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", ["grpData"]);
					
					//서브미션 실행 (실패시 cover page)
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							
							util.DataMap.setValue(app, "dmReqList", "strSchYearRcd", util.DataMap.getValue(app, "dmResOnLoad", "strSchYearRcd"));
							util.DataMap.setValue(app, "dmReqList", "strSmtRcd", util.DataMap.getValue(app, "dmResOnLoad", "strSmtRcd"));
							util.DataMap.setValue(app, "dmReqList", "strStatRcd", "CT301ATTE");
							util.DataMap.setValue(app, "dmReqList", "strKeyDate", util.DataMap.getValue(app, "dmResOnLoad", "strKeyDate"));				
							
							util.Control.redraw(app, ["cbbDivRcd", "cbbDivRcd", "cbbSchYearRcd", "cbbSmtRcd", "cbbStatRcd", "cbbProcRsltYear", "cbbClassRcd", "cbbGenderRcd", "cbbBatchClassRcd"]);
						}
					});
				}
			
				/**
				 * @desc 조회버튼 클릭
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onClick_BtnSearch = function() {
					
					if(util.Grid.isModified(app, "", "CRM")){
						return false;
					}
					// 조회조건 필수 체크
					//개별 변경일시 배정구분과 학번만 체크
					if(util.DataMap.getValue(app, "dmReqList", "strDivRcd") != "CSR13005"){
						if(!util.validate(app, ["cbbDivRcd", "ipbSaNm", "cbbSchYearRcd", "cbbSmtRcd"])){
							return false;
						}
					}else{
						if(!util.validate(app, ["cbbDivRcd", "ipbStudNo"])){
							return false;
						}
					}
					
					doList(function(pbSuccess) {
						// 조회 : "조회되었습니다." header 메세지 표시
						if(pbSuccess) {
							util.Msg.notify(app, "NLS.INF.M024");
						}
					});
				};
				
				/**
				 * @desc 학생목록 조회
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				function doList(poCallBackFunc) {
					
					//strCommand: list 
					util.Submit.send(app, "subList",  function(pbSuccess) {
						if(pbSuccess){
							//rebuild
							util.Control.redraw(app, ["rptCsrShreg"]);
						}
						if(util.Grid.getRowCount(app, "grdCsrShreg") < 1){
							util.Control.reset(app, ["rptCsrGudProf", "rptCsrClass"]);
						}
						if(util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				}
			
				/**
				 * @desc 지도교수, 반정보 조회
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onRowSelect_RptCsrShreg = function() {
					util.DataMap.setValue(app, "dmReqDetailList", "strStudId", util.Grid.getCellValue(app, "grdCsrShreg", "STUD_ID"));
					doDetailList();
				};
				
				function doDetailList() {
					//strCommand: detailList 
					util.Submit.send(app, "subDetailList",  function(pbSuccess) {
						if(pbSuccess){
							//rebuild
							util.Control.redraw(app, ["rptCsrGudProf", "rptCsrClass"]);
						}
					});
				}
				
				/**
				 * @desc 작업취소
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onClick_BtnRestore = function() {
					util.Grid.restoreRow(app, "grdCsrShreg");
				};
				
				/**
				 * @desc 저장버튼 클릭
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onClick_BtnSave = function() {
					doSave();
				};
				
				/**
				 * @desc 지도교수 반정보 저장
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				function doSave() {
					
					// 리피터 변경사항 체크
					if(!util.Grid.isModified(app, ["grdCsrShreg"], "MSG")){
						return false;
					}
					//리피트 validation check
					if(!util.validate(app, "grdCsrShreg")) return false;
					
					var vsDivRcd = util.DataMap.getValue(app, "dmReqList", "strDivRcd");
			
					var vsDivRcdPrp1 = ExtInstance.getValue("/root/resOnLoad/divRcdList/row", "CD_PRP1", "child::CD='"+vsDivRcd+"'");
					
					util.DataMap.setValue(app, "dmReqList", "strRsnDivRcd", vsDivRcdPrp1);
					
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccessSave) {
							if(pbSuccessSave) {
								//저장성공 메세지 출력
								doList(function(pbSuccessList) {
									// 조회 : "조회되었습니다." header 메세지 표시
									if(pbSuccessList) {
										util.Msg.notify(app, "NLS.INF.M025");
									}
								});
							}
						}
					);
				}
			
				/**
				 * @desc 리피트 panel click event
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onValueChanged_RhCkbSelect = function() {
			//TO-BE: <ExtRepeat.selectedAllPanel> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.selectedAllPanel("rhCkbSelect");
				};
			
				/**
				 * @desc 배정구분 변경
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onValueChanged_CbbDivRcd = function() {
					//개별 변경일시 배정구분과 학 만 보여줌
					if(util.DataMap.getValue(app, "dmReqList", "strDivRcd") == "CSR13005"){
						doSetCtlVisibleByDivRcd(true);
					}else{
						doSetCtlVisibleByDivRcd(false);
					}
				};
				
				/**
				 * @desc 선택한 학생 일괄배치
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onClick_BtnBatch = function() {
					
					var voRpt = ExtControl.getControl("rptCsrShreg");
					var vsPath = voRpt.getRepeatAttr().getNodeSet();
					var vbPanel = false;
					var vsResult = "";
					var psUpdStatusId = AppConstants.DEL_COL_REF;
					// 리피트 패널 존재 여부 체크
					if(ExtInstance.getNodeObj(vsPath + "/" + AppConstants.DEL_COL_REF) != null){
						vbPanel = true;
					}
					
					if(ExtControl.getControl(psUpdStatusId)){
						 var vsRef = ExtControl.getControl(psUpdStatusId).getAttr("ref");
			             vsRef = vsRef.substr(vsRef.lastIndexOf("/")+1, vsRef.length);
			             psUpdStatusId = vsRef;
					}   
					
					if(vbPanel) {
			
						vsResult = voRpt.dataSet.find(psUpdStatusId + ":Y");
						
						if(vsResult == ""){
							// 라인을 선택하세요.
							util.Msg.alert("NLS-INF-M023");
							return false;
						}
						
					}else{
						// 라인을 선택하세요.
						util.Msg.alert("NLS-INF-M023");
						return false;
					}
					
					var vsBatchProfId = util.DataMap.getValue(app, "dmReqList", "strBatchProfId");
					var vsBatchProfNm = util.DataMap.getValue(app, "dmReqList", "strBatchProf");
					var vsBatchClass = util.DataMap.getValue(app, "dmReqList", "strBatchClass");
					
					//지도교수나 반 중 반드시 한개는 존재해야 함
					if(ValueUtil.isNull(vsBatchProfNm) && ValueUtil.isNull(vsBatchClass)){
						//지도교수, 반 중 1가지는 필수 입력해야 합니다.
						util.Msg.alert("NLS-CSR-EXT001");
						return false
					}
					
					var voPanelChk;
					
					if(String(vsResult).indexOf(",") != -1){
						voPanelChk = vsResult.split(",");
					}else{
						voPanelChk = new Array();
						voPanelChk[0] = vsResult;
					}
					
					for(var i = voPanelChk.length - 1; i >= 0; i--) {
						util.Grid.setRowState(app, "grdCsrShreg", cpr.data.tabledata.RowState.UPDATED, voPanelChk[i]);
						if(!ValueUtil.isNull(vsBatchProfNm)){
							util.Grid.setCellValue(app, "grdCsrShreg", "PROF_OBJ_NO", vsBatchProfId,  voPanelChk[i], true);
							util.Grid.setCellValue(app, "grdCsrShreg", "PROF_NM", vsBatchProfNm,  voPanelChk[i], true);
							util.Grid.setCellValue(app, "grdCsrShreg", "UPT_STATUS", "U",  voPanelChk[i], true);
						}
						if(!ValueUtil.isNull(vsBatchClass)){
							util.Grid.setCellValue(app, "grdCsrShreg", "CLASS_RCD", vsBatchClass,  voPanelChk[i], true);
							util.Grid.setCellValue(app, "grdCsrShreg", "UPT_STATUS", "U",  voPanelChk[i], true);
						}
					}
				};
				
				/**
				 * @desc 배정구분 변경에 따른 컨트롤제어
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				function doSetCtlVisibleByDivRcd(pbVisible){
					//개별변경 일시 배정구분과 학번만 보여줌 
					util.Control.setVisible(app, pbVisible, moPerCrt);
					util.Control.setVisible(app, !pbVisible, moOtherCrt);
				}
				
				/**
				 * @desc 학년도 학기 변경에 따른 표준일자 반환
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onValueChanged_CbbSchYearRcd = function() {
					doGetKeyDate();
				};
				
				/**
				 * @desc 학년도 학기 변경에 따른 표준일자 반환
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onValueChanged_CbbSmtRcd = function() {
					doGetKeyDate();
				};
				
				/**
				 * @desc 학년도 학기 변경에 따른 표준일자 반환
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				function doGetKeyDate() {
					//1. 서브미션 수행
					//strCommand: getKeyDate 
					util.Submit.send(app, "subGetKeyDate", function(pbSuccess){
						if(pbSuccess) {
							//전체권한일시 최상위 부서가 셋팅 되어 있으면 초기화 하지 않음
							var strSaCd = util.DataMap.getValue(app, "dmReqList", "strSaCd");
							if(moPageInfo.authRngRcd == "CC00102"){
								if(strSaCd != ExtInstance.getValue("instance('insStdCmnPObjSch')/root/resListObjInfo/strObjCd")){
									util.Control.reset(app, ["ipbSaNm", "ipbSaCd", "ipbStudNo", "ipbStudId", "ipbBatchRepNm", "ipbBatchRepNm"]);
									util.DataMap.setValue(app, "dmReqList", "strObjDivRcd", "");
								}
							// 전체권한 이외의 권한일시 자신의 소속 부서가 셋팅되어 있으면 초기화 하지 않음
							}else if(moPageInfo.authRngRcd == "CC00101" || moPageInfo.authRngRcd == "CC00105" || moPageInfo.authRngRcd == "CC00106" || moPageInfo.authRngRcd == "CC00107"){
								if(strSaCd != moUserInfo.asgnDeptCd){
									util.Control.reset(app, ["ipbSaNm", "ipbSaCd", "ipbStudNo", "ipbStudId", "ipbBatchRepNm", "ipbBatchRepNm"]);
									util.DataMap.setValue(app, "dmReqList", "strObjDivRcd", "");		
								}
							}
							util.DataMap.setValue(app, "dmReqList", "strKeyDate", util.DataMap.getValue(app, "dmResGetKeyDate", "strKeyDate"));
						}else{
							util.Control.reset(app, ["ipbSaNm", "ipbSaCd", "ipbStudNo", "ipbStudId", "ipbBatchRepNm", "ipbBatchRepNm", "cbbSchYearRcd", "cbbSmtRcd"]);
							util.DataMap.setValue(app, "dmReqList", "strObjDivRcd", "");
							util.DataMap.setValue(app, "dmReqList", "strKeyDate", util.DataMap.getValue(app, "dmResGetKeyDate", "strKeyDate"));
						}
					});
				};
			
			
				/**
				 * @desc 소속 조회
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onValueChanged_IpbSaNm = function(sender) {
					doOnChangeStdCmnPObjSch(sender);
				}
				
				/**
				 * @desc 소속조회 팝업 호출
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onClick_BtnSaPopSearch = function(sender) {
					doOnClickStdCmnPObjSch(sender);
				};
				
				/**
				 * @desc 학생조회 팝업 호출
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onClick_BtnStudPopSearch = function(sender) {
					doOnClickStdCsrPStSearch(sender);
				};
				
				/**
				 * @desc 학생 조회
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onValueChanged_IpbStudNo = function(sender) {
					doOnChangeStdCsrPStSearch(sender);
				};
				
				/**
				 * @desc 지도교수조회 팝업 호출(조회조건)
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onClick_BtnProfPopSearch = function(sender) {
					doOnClickStdCmnPPrsnSearch(sender);
				};
				
				/**
				 * @desc 지도교수조회(조회조건)
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onValueChanged_IpbProfNm = function(sender) {
					doOnChangeStdCmnPPrsnSearch(sender);
				};
				
				/**
				 * @desc 지도교수조회(일괄배정)
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onValueChanged_IpbBatchRepNm = function(sender) {
					doOnChangeStdCmnPPrsnSearch(sender);
				};
			
				/**
				 * @desc 지도교수조회 팝업 호출(일괄배정)
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onClick_BtnBatchProfPopSearch = function(sender) {
					doOnClickStdCmnPPrsnSearch(sender);
				};
				
				/**
				 * @desc 지도교수조회 팝업 호출(리피트)
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onClick_RdBtnProfNm = function(sender) {
					doOnClickStdCmnPPrsnSearch(sender);
				};
				
				/**
				 * @desc 지도교수조회(리피트)
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 29
				 */
				moPage.onValueChanged_RdIpbProfNm = function(sender) {
					doOnChangeStdCmnPPrsnSearch(sender);
				};
				
				
				moPage.onLoadImportDone_ImpStdCmnPobjSch = function() {
					setStdCmnPObjSchObjInfo();
				};
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsDivRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsSchYearRcdList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsSmtRcdList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsStatRcdList");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsClassRcdList");
			dataSet_5.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsGenderRcdList");
			dataSet_6.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsCsrShreg");
			dataSet_7.parseData({
				"info": "CSR_SHREG@STUD_ID",
				"columns": [
					{"name": "STUD_ID"},
					{"name": "ST_DT"},
					{"name": "PROF_OBJ_NO"},
					{"name": "DIV_RCD"},
					{"name": "STUD_NO"},
					{"name": "REP_NM"},
					{"name": "SA_NM"},
					{"name": "BIRTHDAY"},
					{"name": "STAT_RCD"},
					{"name": "STAT_NM"},
					{"name": "GENDER_RCD"},
					{"name": "GENDER_NM"},
					{"name": "PROC_RSLT_YEAR"},
					{"name": "DAY_NIGHT_DIV_RCD"},
					{"name": "DAY_NIGHT_DIV_NM"},
					{"name": "SP_DN_DIV_RCD"},
					{"name": "PROF_NM"},
					{"name": "CLASS_RCD"},
					{"name": "ASS"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsGudProf");
			dataSet_8.parseData({
				"info": "CSR_GUD_PROF@STUD_ID,SERIAL_NO",
				"columns": [
					{"name": "STUD_ID"},
					{"name": "SERIAL_NO"},
					{"name": "ST_DT"},
					{"name": "END_DT"},
					{"name": "PROF_OBJ_NO"},
					{"name": "CHG_RSN_RCD"},
					{"name": "CHG_RSN_NM"},
					{"name": "PROF_NM"},
					{"name": "PROF_NO"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			
			var dataSet_9 = new cpr.data.DataSet("dsClass");
			dataSet_9.parseData({
				"info": "CSR_CLASS@STUD_ID,SERIAL_NO",
				"columns": [
					{"name": "STUD_ID"},
					{"name": "SERIAL_NO"},
					{"name": "ST_DT"},
					{"name": "END_DT"},
					{"name": "CLASS_RCD"},
					{"name": "CLASS_NM"},
					{"name": "CHG_RSN_RCD"},
					{"name": "CHG_RSN_NM"}
				],
				"rows": []
			});
			app.register(dataSet_9);
			var dataMap_1 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strKeyDate",
						"dataType": "string"
					},
					{
						"name": "strSchYearRcd",
						"dataType": "string"
					},
					{
						"name": "strSmtRcd",
						"dataType": "string"
					},
					{
						"name": "strCutDt",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqList");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strDivRcd",
						"dataType": "string"
					},
					{
						"name": "strSaNm",
						"dataType": "string"
					},
					{
						"name": "strStudNo",
						"dataType": "string"
					},
					{
						"name": "strSchYearRcd",
						"dataType": "string"
					},
					{
						"name": "strSmtRcd",
						"dataType": "string"
					},
					{
						"name": "strStatRcd",
						"dataType": "string"
					},
					{
						"name": "strProcRsltYear",
						"dataType": "string"
					},
					{
						"name": "strRepNm",
						"dataType": "string"
					},
					{
						"name": "strClassRcd",
						"dataType": "string"
					},
					{
						"name": "strGenderRcd",
						"dataType": "string"
					},
					{
						"name": "strNatYn",
						"dataType": "string"
					},
					{
						"name": "strBatchProf",
						"dataType": "string"
					},
					{
						"name": "strBatchProfId",
						"dataType": "string"
					},
					{
						"name": "strBatchClass",
						"dataType": "string"
					},
					{
						"name": "strSaCd",
						"dataType": "string"
					},
					{
						"name": "strStudId",
						"dataType": "string"
					},
					{
						"name": "strProfId",
						"dataType": "string"
					},
					{
						"name": "strKeyDate",
						"dataType": "string"
					},
					{
						"name": "strObjDivRcd",
						"dataType": "string"
					},
					{
						"name": "strRsnDivRcd",
						"dataType": "string"
					},
					{
						"name": "strStDt",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmReqDetailList");
			dataMap_3.parseData({
				"columns" : [{
					"name": "strStudId",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmResGetKeyDate");
			dataMap_4.parseData({
				"columns" : [{
					"name": "strKeyDate",
					"dataType": "string"
				}]
			});
			app.register(dataMap_4);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/csr/ExtCsrGudProfClass/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataSet_5, false);
			submission_1.addResponseData(dataSet_6, false);
			submission_1.addResponseData(dataMap_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/csr/ExtCsrGudProfClass/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_2);
			submission_2.addResponseData(dataSet_7, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/csr/ExtCsrGudProfClass/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_7);
			submission_3.addRequestData(dataMap_2);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subDetailList");
			submission_4.action = "/csr/ExtCsrGudProfClass/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_3);
			submission_4.addResponseData(dataSet_8, false);
			submission_4.addResponseData(dataSet_9, false);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subGetKeyDate");
			submission_5.action = "/csr/ExtCsrGudProfClass/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataMap_2);
			submission_5.addResponseData(dataMap_4, false);
			app.register(submission_5);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optDivRcd");
				output_1.value = "배정구분";
				output_1.style.setClasses(["require"]);
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbDivRcd");
				comboBox_1.userAttr({"require": "Y"});
				comboBox_1.bind("fieldLabel").toExpression("#optDivRcd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strDivRcd");
				(function(comboBox_1){
					comboBox_1.setItemSet(app.lookup("dsDivRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				if(typeof onCbbDivRcdSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onCbbDivRcdSelectionChange);
				}
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "90px",
					"width": "100px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optStudNo");
				output_2.value = "";
				output_2.style.setClasses(["require"]);
				output_2.bind("value").toLanguage("UI-GLS-STUD_ID");
				container.addChild(output_2, {
					"top": "5px",
					"left": "200px",
					"width": "80px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optSaNm");
				output_3.value = "";
				output_3.style.setClasses(["require"]);
				output_3.bind("value").toLanguage("UI-GLS-ASGN");
				container.addChild(output_3, {
					"top": "5px",
					"left": "200px",
					"width": "80px",
					"height": "25px"
				});
				var output_4 = new cpr.controls.Output("optSchYearRcd");
				output_4.value = "";
				output_4.style.setClasses(["require"]);
				output_4.bind("value").toLanguage("UI-GLS-SCH_YEAR");
				container.addChild(output_4, {
					"top": "5px",
					"left": "445px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_2 = new cpr.controls.ComboBox("cbbSchYearRcd");
				comboBox_2.userAttr({"require": "Y"});
				comboBox_2.bind("fieldLabel").toExpression("#optSchYearRcd.value");
				comboBox_2.bind("value").toDataMap(app.lookup("dmReqList"), "strSchYearRcd");
				(function(comboBox_2){
					comboBox_2.setItemSet(app.lookup("dsSchYearRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_2);
				if(typeof onCbbSchYearRcdSelectionChange == "function") {
					comboBox_2.addEventListener("selection-change", onCbbSchYearRcdSelectionChange);
				}
				container.addChild(comboBox_2, {
					"top": "5px",
					"left": "530px",
					"width": "95px",
					"height": "25px"
				});
				var output_5 = new cpr.controls.Output("optSmtRcd");
				output_5.value = "";
				output_5.style.setClasses(["require"]);
				output_5.bind("value").toLanguage("UI-GLS-SMT");
				container.addChild(output_5, {
					"top": "5px",
					"left": "635px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_3 = new cpr.controls.ComboBox("cbbSmtRcd");
				comboBox_3.userAttr({"require": "Y"});
				comboBox_3.bind("fieldLabel").toExpression("#optSmtRcd.value");
				comboBox_3.bind("value").toDataMap(app.lookup("dmReqList"), "strSmtRcd");
				(function(comboBox_3){
					comboBox_3.setItemSet(app.lookup("dsSmtRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_3);
				if(typeof onCbbSmtRcdSelectionChange == "function") {
					comboBox_3.addEventListener("selection-change", onCbbSmtRcdSelectionChange);
				}
				container.addChild(comboBox_3, {
					"top": "5px",
					"left": "720px",
					"width": "115px",
					"height": "25px"
				});
				var output_6 = new cpr.controls.Output("optStatRcd");
				output_6.value = "";
				output_6.bind("value").toLanguage("UI-SCR-SCHREGST");
				container.addChild(output_6, {
					"top": "5px",
					"left": "845px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_4 = new cpr.controls.ComboBox("cbbStatRcd");
				comboBox_4.bind("fieldLabel").toExpression("#optStatRcd.value");
				comboBox_4.bind("value").toDataMap(app.lookup("dmReqList"), "strStatRcd");
				(function(comboBox_4){
					comboBox_4.addItem(new cpr.controls.Item("전체", ""));
					comboBox_4.setItemSet(app.lookup("dsStatRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_4);
				container.addChild(comboBox_4, {
					"top": "5px",
					"left": "930px",
					"width": "100px",
					"height": "25px"
				});
				var output_7 = new cpr.controls.Output("optProcRsltYear");
				output_7.value = "";
				output_7.bind("value").toLanguage("UI-GLS-SHYR");
				container.addChild(output_7, {
					"top": "30px",
					"left": "5px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_5 = new cpr.controls.ComboBox("cbbProcRsltYear");
				comboBox_5.bind("fieldLabel").toExpression("#optProcRsltYear.value");
				comboBox_5.bind("value").toDataMap(app.lookup("dmReqList"), "strProcRsltYear");
				(function(comboBox_5){
					comboBox_5.addItem(new cpr.controls.Item("1학년", "1"));
					comboBox_5.addItem(new cpr.controls.Item("2학년", "2"));
					comboBox_5.addItem(new cpr.controls.Item("3학년", "3"));
					comboBox_5.addItem(new cpr.controls.Item("전체", ""));
				})(comboBox_5);
				container.addChild(comboBox_5, {
					"top": "30px",
					"left": "90px",
					"width": "100px",
					"height": "25px"
				});
				var output_8 = new cpr.controls.Output("optRepNm");
				output_8.value = "";
				output_8.bind("value").toLanguage("UI-DB-GUD_PROF");
				container.addChild(output_8, {
					"top": "30px",
					"left": "200px",
					"width": "80px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbProfNm");
				inputBox_1.bind("fieldLabel").toExpression("#optRepNm.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strRepNm");
				if(typeof onIpbProfNmValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbProfNmValueChange);
				}
				container.addChild(inputBox_1, {
					"top": "30px",
					"left": "285px",
					"width": "100px",
					"height": "25px"
				});
				var output_9 = new cpr.controls.Output("optClassRcd");
				output_9.value = "";
				output_9.bind("value").toLanguage("UI-GLS-CLASSZ");
				container.addChild(output_9, {
					"top": "30px",
					"left": "445px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_6 = new cpr.controls.ComboBox("cbbClassRcd");
				comboBox_6.bind("fieldLabel").toExpression("#optClassRcd.value");
				comboBox_6.bind("value").toDataMap(app.lookup("dmReqList"), "strClassRcd");
				(function(comboBox_6){
					comboBox_6.addItem(new cpr.controls.Item("전체", ""));
					comboBox_6.setItemSet(app.lookup("dsClassRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_6);
				container.addChild(comboBox_6, {
					"top": "30px",
					"left": "530px",
					"width": "95px",
					"height": "25px"
				});
				var output_10 = new cpr.controls.Output("optGenderRcd");
				output_10.value = "";
				output_10.bind("value").toLanguage("UI-GLS-GENDER");
				container.addChild(output_10, {
					"top": "30px",
					"left": "635px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_7 = new cpr.controls.ComboBox("cbbGenderRcd");
				comboBox_7.bind("fieldLabel").toExpression("#optGenderRcd.value");
				comboBox_7.bind("value").toDataMap(app.lookup("dmReqList"), "strGenderRcd");
				(function(comboBox_7){
					comboBox_7.addItem(new cpr.controls.Item("전체", ""));
					comboBox_7.setItemSet(app.lookup("dsGenderRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_7);
				container.addChild(comboBox_7, {
					"top": "30px",
					"left": "720px",
					"width": "100px",
					"height": "25px"
				});
				var output_11 = new cpr.controls.Output("optNatYn");
				output_11.value = "";
				output_11.bind("value").toLanguage("UI-DB-FOREIGN_YN");
				container.addChild(output_11, {
					"top": "30px",
					"left": "845px",
					"width": "80px",
					"height": "25px"
				});
				var checkBox_1 = new cpr.controls.CheckBox("ckbNatYn");
				checkBox_1.value = "";
				checkBox_1.trueValue = "Y";
				checkBox_1.falseValue = "";
				checkBox_1.text = "";
				checkBox_1.style.css({
					"text-align" : "center"
				});
				checkBox_1.bind("fieldLabel").toExpression("#optNatYn.value");
				checkBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strNatYn");
				container.addChild(checkBox_1, {
					"top": "30px",
					"left": "930px",
					"width": "20px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbStudNo");
				inputBox_2.visible = false;
				inputBox_2.userAttr({"require": "Y"});
				inputBox_2.bind("fieldLabel").toExpression("#optStudNo.value");
				inputBox_2.bind("value").toDataMap(app.lookup("dmReqList"), "strStudNo");
				if(typeof onIpbStudNoValueChange == "function") {
					inputBox_2.addEventListener("value-change", onIpbStudNoValueChange);
				}
				container.addChild(inputBox_2, {
					"top": "5px",
					"left": "285px",
					"width": "100px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnStudPopSearch");
				button_2.visible = false;
				button_2.value = "";
				button_2.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnStudPopSearchClick == "function") {
					button_2.addEventListener("click", onBtnStudPopSearchClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "386px",
					"width": "20px",
					"height": "25px"
				});
				var inputBox_3 = new cpr.controls.InputBox("ipbStudId");
				inputBox_3.visible = false;
				inputBox_3.bind("value").toDataMap(app.lookup("dmReqList"), "strStudId");
				container.addChild(inputBox_3, {
					"top": "5px",
					"left": "405px",
					"width": "10px",
					"height": "25px"
				});
				var inputBox_4 = new cpr.controls.InputBox("ipbSaNm");
				inputBox_4.userAttr({"require": "Y"});
				inputBox_4.bind("fieldLabel").toExpression("#optSaNm.value");
				inputBox_4.bind("value").toDataMap(app.lookup("dmReqList"), "strSaNm");
				if(typeof onIpbSaNmValueChange == "function") {
					inputBox_4.addEventListener("value-change", onIpbSaNmValueChange);
				}
				container.addChild(inputBox_4, {
					"top": "5px",
					"left": "285px",
					"width": "130px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnSaPopSearch");
				button_3.value = "";
				button_3.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnSaPopSearchClick == "function") {
					button_3.addEventListener("click", onBtnSaPopSearchClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "416px",
					"width": "20px",
					"height": "25px"
				});
				var inputBox_5 = new cpr.controls.InputBox("ipbSaCd");
				inputBox_5.visible = false;
				inputBox_5.bind("value").toDataMap(app.lookup("dmReqList"), "strSaCd");
				container.addChild(inputBox_5, {
					"top": "5px",
					"left": "435px",
					"width": "10px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnProfPopSearch");
				button_4.value = "";
				button_4.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnProfPopSearchClick == "function") {
					button_4.addEventListener("click", onBtnProfPopSearchClick);
				}
				container.addChild(button_4, {
					"top": "30px",
					"left": "386px",
					"width": "20px",
					"height": "25px"
				});
				var inputBox_6 = new cpr.controls.InputBox("ipbProfId");
				inputBox_6.visible = false;
				inputBox_6.bind("value").toDataMap(app.lookup("dmReqList"), "strProfId");
				container.addChild(inputBox_6, {
					"top": "30px",
					"left": "405px",
					"width": "10px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "57px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "265px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button("btnRestore");
				button_5.value = "";
				button_5.style.setClasses(["btn-restore"]);
				button_5.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_5.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_5, {
					"top": "5px",
					"left": "1095px",
					"width": "60px",
					"height": "25px"
				});
				var button_6 = new cpr.controls.Button("btnSave");
				button_6.value = "";
				button_6.style.setClasses(["btn-save"]);
				button_6.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_6.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_6, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCsrShreg");
				grid_1.init({
					"dataSet": app.lookup("dsCsrShreg"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "90px"},
						{"width": "100px"},
						{"width": "279px"},
						{"width": "70px"},
						{"width": "70px"},
						{"width": "80px"},
						{"width": "45px"},
						{"width": "45px"},
						{"width": "56px"},
						{"width": "59px"},
						{"width": "61px"},
						{"width": "173px"},
						{"width": "110px"},
						{
							"width": "110px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-STUD_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PER_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-DEPTNAME");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-BIRTHDAY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-ST_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SCHREGST");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-GENDER");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SHYR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-DNDIS");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-ASS");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-CLASSZ");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-GUD_PROF");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.text = "오브젝트ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.text = "지도교수 오브젝트번호";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_12 = new cpr.controls.Output();
										output_12.style.css({
											"text-align" : "center"
										});
										return output_12;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "STUD_NO";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "REP_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "SA_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "BIRTHDAY";
									cell.control = (function(){
										var output_13 = new cpr.controls.Output("gdOptBirthday");
										output_13.dataType = "date";
										output_13.format = "YYYY-MM-DD";
										output_13.style.css({
											"text-align" : "center"
										});
										output_13.bind("value").toDataColumn("BIRTHDAY");
										return output_13;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "ST_DT";
									cell.control = (function(){
										var output_14 = new cpr.controls.Output("gdOptEntrDt");
										output_14.dataType = "date";
										output_14.format = "YYYY-MM-DD";
										output_14.style.css({
											"text-align" : "center"
										});
										output_14.bind("value").toDataColumn("ST_DT");
										return output_14;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "STAT_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "GENDER_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "PROC_RSLT_YEAR";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "DAY_NIGHT_DIV_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "ASS";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "CLASS_RCD";
									cell.control = (function(){
										var comboBox_8 = new cpr.controls.ComboBox("gdCbbClassRcd");
										(function(comboBox_8){
											comboBox_8.setItemSet(app.lookup("dsClassRcdList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_8);
										comboBox_8.bind("value").toDataColumn("CLASS_RCD");
										return comboBox_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "PROF_NM";
									cell.control = (function(){
										var inputBox_7 = new cpr.controls.InputBox("gdIpbProfNm");
										inputBox_7.bind("value").toDataColumn("PROF_NM");
										return inputBox_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.columnName = "STUD_ID";
									cell.control = (function(){
										var inputBox_8 = new cpr.controls.InputBox("gdIpbStudId");
										inputBox_8.maxLength = 20;
										inputBox_8.userAttr({"require": "Y"});
										inputBox_8.bind("value").toDataColumn("STUD_ID");
										return inputBox_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.columnName = "PROF_OBJ_NO";
								}
							}
						]
					}
				});
				if(typeof onGrdCsrShregSelectionChange == "function") {
					grid_1.addEventListener("selection-change", onGrdCsrShregSelectionChange);
				}
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1215px",
					"height": "340px"
				});
				var output_15 = new cpr.controls.Output("optBatchRepNm");
				output_15.value = "";
				output_15.bind("value").toLanguage("UI-DB-GUD_PROF");
				container.addChild(output_15, {
					"top": "5px",
					"left": "610px",
					"width": "80px",
					"height": "25px"
				});
				var inputBox_9 = new cpr.controls.InputBox("ipbBatchRepNm");
				inputBox_9.bind("fieldLabel").toExpression("#optRepNm.value");
				inputBox_9.bind("value").toDataMap(app.lookup("dmReqList"), "strBatchProf");
				if(typeof onIpbBatchRepNmValueChange == "function") {
					inputBox_9.addEventListener("value-change", onIpbBatchRepNmValueChange);
				}
				container.addChild(inputBox_9, {
					"top": "5px",
					"left": "695px",
					"width": "100px",
					"height": "25px"
				});
				var button_7 = new cpr.controls.Button("btnBatchProfPopSearch");
				button_7.value = "";
				button_7.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnBatchProfPopSearchClick == "function") {
					button_7.addEventListener("click", onBtnBatchProfPopSearchClick);
				}
				container.addChild(button_7, {
					"top": "5px",
					"left": "796px",
					"width": "20px",
					"height": "25px"
				});
				var inputBox_10 = new cpr.controls.InputBox("ipbBatchProfId");
				inputBox_10.visible = false;
				inputBox_10.bind("value").toDataMap(app.lookup("dmReqList"), "strBatchProfId");
				container.addChild(inputBox_10, {
					"top": "5px",
					"left": "815px",
					"width": "10px",
					"height": "25px"
				});
				var userDefinedControl_3 = linker.userDefinedControl_3 = new udc.com.comTitle();
				userDefinedControl_3.bind("title").toLanguage("UI-SCR-CLASSINFO");
				container.addChild(userDefinedControl_3, {
					"top": "375px",
					"left": "690px",
					"width": "265px",
					"height": "25px"
				});
				var grid_2 = linker.grid_2 = new cpr.controls.Grid("grdCsrClass");
				grid_2.init({
					"dataSet": app.lookup("dsClass"),
					"columns": [
						{"width": "40px"},
						{"width": "88px"},
						{"width": "90px"},
						{"width": "90px"},
						{"width": "103px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-CLASSZ");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-ST_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-END_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-CHGRSNNM");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "CLASS_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "ST_DT";
									cell.control = (function(){
										var output_16 = new cpr.controls.Output("gdOptClassStDt");
										output_16.dataType = "date";
										output_16.format = "YYYY-MM-DD";
										output_16.style.css({
											"text-align" : "center"
										});
										output_16.bind("value").toDataColumn("ST_DT");
										return output_16;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "END_DT";
									cell.control = (function(){
										var output_17 = new cpr.controls.Output("gdOptClassEndDt");
										output_17.dataType = "date";
										output_17.format = "YYYY-MM-DD";
										output_17.style.css({
											"text-align" : "center"
										});
										output_17.bind("value").toDataColumn("END_DT");
										return output_17;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "CHG_RSN_NM";
								}
							}
						]
					}
				});
				container.addChild(grid_2, {
					"top": "400px",
					"left": "690px",
					"width": "530px",
					"height": "170px"
				});
				var grid_3 = linker.grid_3 = new cpr.controls.Grid("grdCsrGudProf");
				grid_3.init({
					"dataSet": app.lookup("dsGudProf"),
					"columns": [
						{"width": "40px"},
						{"width": "136px"},
						{"width": "107px"},
						{"width": "90px"},
						{"width": "90px"},
						{"width": "113px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-GUD_PROF");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-GUDPROF");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-ST_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-END_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-CHGRSNNM");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "PROF_NO";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "PROF_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "ST_DT";
									cell.control = (function(){
										var output_18 = new cpr.controls.Output("gdOptProfStDt");
										output_18.dataType = "date";
										output_18.format = "YYYY-MM-DD";
										output_18.style.css({
											"text-align" : "center"
										});
										output_18.bind("value").toDataColumn("ST_DT");
										return output_18;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "END_DT";
									cell.control = (function(){
										var output_19 = new cpr.controls.Output("gdOptProfEndDt");
										output_19.dataType = "date";
										output_19.format = "YYYY-MM-DD";
										output_19.style.css({
											"text-align" : "center"
										});
										output_19.bind("value").toDataColumn("END_DT");
										return output_19;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "CHG_RSN_NM";
								}
							}
						]
					}
				});
				container.addChild(grid_3, {
					"top": "400px",
					"left": "5px",
					"width": "680px",
					"height": "170px"
				});
				var userDefinedControl_4 = linker.userDefinedControl_4 = new udc.com.comTitle();
				userDefinedControl_4.bind("title").toLanguage("UI-SCR-GUDPROFINFO");
				container.addChild(userDefinedControl_4, {
					"top": "375px",
					"left": "5px",
					"width": "265px",
					"height": "25px"
				});
				var button_8 = new cpr.controls.Button("btnSaveBatch");
				button_8.value = "";
				button_8.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnSaveBatchClick == "function") {
					button_8.addEventListener("click", onBtnSaveBatchClick);
				}
				container.addChild(button_8, {
					"top": "5px",
					"left": "1020px",
					"width": "60px",
					"height": "25px"
				});
				var output_20 = new cpr.controls.Output("optBatchClassRcd");
				output_20.value = "";
				output_20.bind("value").toLanguage("UI-GLS-CLASSZ");
				container.addChild(output_20, {
					"top": "5px",
					"left": "825px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_9 = new cpr.controls.ComboBox("cbbBatchClassRcd");
				comboBox_9.bind("fieldLabel").toExpression("#optClassRcd.value");
				comboBox_9.bind("value").toDataMap(app.lookup("dmReqList"), "strBatchClass");
				(function(comboBox_9){
					comboBox_9.setItemSet(app.lookup("dsClassRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_9);
				container.addChild(comboBox_9, {
					"top": "5px",
					"left": "910px",
					"width": "100px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "97px",
				"left": "5px",
				"width": "1225px",
				"height": "575px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaort1");
			cpr.core.App.load("app/cmn/impStdCmnPPrsnSearch", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "677px",
				"left": "-10px",
				"width": "100px",
				"height": "25px"
			});
			
			var embeddedApp_2 = new cpr.controls.EmbeddedApp("emaort2");
			cpr.core.App.load("app/csr/impStdCsrPStSearch", function(app) {
				if(app){
					embeddedApp_2.app = app;
				}
			});
			container.addChild(embeddedApp_2, {
				"top": "680px",
				"left": "130px",
				"width": "100px",
				"height": "25px"
			});
			
			var embeddedApp_3 = new cpr.controls.EmbeddedApp("emaStdCmnPobjSch");
			if(typeof onEmaStdCmnPobjSchAppReady == "function") {
				embeddedApp_3.addEventListener("app-ready", onEmaStdCmnPobjSchAppReady);
			}
			cpr.core.App.load("app/cmn/impStdCmnPObjSch", function(app) {
				if(app){
					embeddedApp_3.app = app;
				}
			});
			container.addChild(embeddedApp_3, {
				"top": "680px",
				"left": "245px",
				"width": "95px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
			linker.userDefinedControl_3.ctrl = linker.grid_2;
			linker.userDefinedControl_4.ctrl = linker.grid_3;
		}
	});
	app.title = "extCsrCGudProfClass";
	cpr.core.Platform.INSTANCE.register(app);
})();
