/*
 * App URI: app/csr/stdCsrCHandicapInfo
 * Source Location: app/csr/stdCsrCHandicapInfo.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/csr/stdCsrCHandicapInfo", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCsrCHandicapInfo.xtm"/>
			
			
			var stdCsrCHandicapInfo = function() {
				var moPage = new Page();
				
				/********************************
				 * 사용자 정의 메소드, 변수
				 *******************************/
				var msStudId = "";
				
				/********************************
				 * 폼 신규 상태 체크 
				 *******************************/
				moPage.mbIsInsertRowFrf = false;
				
				moPage.onLoadImportDone_impSbpHeader = function() {
					doSbpHeaderOnLoad();
				};
				
				moPage.onModelConstructDone_StdCsrCMstBase = function() {
					doOnLoad();
				};
				
				/**
				 * @desc 프리폼 변경여부 반환
				 * @param 
				 * @return boolean 변경여부
				 * @author Choi In Seong 2016. 3. 3
				 */
				function doCheckDataChange() {
			
					if(util.Grid.isModified(app, ["frfCsrHandicap"], "CRM") ){
						return false;
					}else{
						return true;
					}
					
				}
				
				/**
				 * @desc doOnLoad 화면 초기화
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 3
				 */
				function doOnLoad(){
					//리피트 초기화
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["frfCsrHandicap"]);
					
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess) {
						if (pbSuccess) {
							
							util.Control.redraw(app, ["frfCsrHandicap","cbbFrfHdcGrdRcd"]);
							
							// 부모멤버변수에담긴학번받음
							msStudId = moPage.parent.moParentObj.studId;
							
							util.DataMap.setValue(app, "dmReqList", "strStudId", msStudId);
							
							//장애정보 조회
							doList(function(pbSuccess) {
								if (pbSuccess) {
									// 조회 : "조회되었습니다." header 메세지 표시
									if(pbSuccess) moPage.parentSendMsg("lblTitlefrfCsrHandicap", NLS.INF.M024);
								}
							});
						}
					});
				}
				
				/**
				 * @desc 해당 학생의 장애정보 데이터를 가져온다.
				 * @param poFunc 콜백함수
				 * @return void
				 * @author Choi In Seong 2016. 3. 3
				 */
				function doList(poFunc) {
					
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess) {
						if (pbSuccess) {
							
							util.Control.redraw(app, ["frfCsrHandicap"]);
							
							var vsRowCnt = util.DataMap.getValue(app, "dmResList", "rowCnt");
							if (vsRowCnt == "0") {
								doSubInsertRow();
							}else{
								moPage.mbIsInsertRowFrf = false;
								util.Control.setEnable(app, true, ["frfCsrEntrInfoList"]);
							}
						}
						// 조회 후 콜백함수 수행
						if (util.isFunc(poFunc)) poFunc(pbSuccess);
					});
				};
				
				/**
				 * @desc 작업저장
				 * @param poCallbackFunc 콜백함수
				 * @return Boolean
				 * @author Choi In Seong 2016. 3. 3
				 */
				function doSubSave(poCallbackFunc) {
			
					// 프리폼 변경사항 체크
					if(!util.Grid.isModified(app, ["frfCsrHandicap"], null)){
						moPage.parentSendMsg("lblTitlefrfCsrHandicap",NLS.WRN.M007);
						if(util.isFunc(poCallbackFunc)) poCallbackFunc(false);
						return false;
					}
					
					// 필수값 체크
					if(!util.validate(app, "frfCsrHandicap")){
						if(util.isFunc(poCallbackFunc)) poCallbackFunc(false);
						return false;
					}
					
					doSave(poCallbackFunc);
				};
				
				/**
				 * @desc 작업저장
				 * @param poCallbackFunc 콜백함수
				 * @return Boolean
				 * @author Choi In Seong 2016. 3. 3
				 */
				function doSave(poCallbackFunc) {
			
					//신규일 경우 fiag insert 로 변경
					if( moPage.mbIsInsertRowFrf ){
						//신규입력일 경우 신규 플래그 설정
						util.Grid.setRowState(app, "frfCsrHandicap",cpr.data.tabledata.RowState.INSERTED,'1');
					}
					
					//save submission call
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccessSave) {
							if(pbSuccessSave) {
								var voCallBackSaveAfter = function(pbSuccessAfter) {
									if(pbSuccessAfter) {
										//저장성공 메세지 출력
										moPage.parentSendMsg("lblTitlefrfCsrHandicap", NLS.INF.M025);
																		
										if(util.isFunc(poCallbackFunc))	poCallbackFunc(true);
									}
								};
								doList(voCallBackSaveAfter);
								return true;
							}else{
								return false;
							}
						}
					);
				};
			
				/**
				 * @desc 데이터 셋에 row 추가
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 3. 3
				 */
				function doSubInsertRow() {
					util.FreeForm.setValue(app, "frfCsrHandicap",AppConstants.CUD_COL_REF, "N");
					//vcRpt.setCellVal(vnInsRowIdx, AppConstants.CUD_COL_REF, "N", true, true);
					//프리폼 신규
					util.FreeForm.insertRow(app, "frfCsrHandicap");
					//학생 ObjectId 셋팅
					util.FreeForm.setValue(app, "frfCsrHandicap", "STUD_ID", msStudId);
					//상태 오픈 상태로 변경 :트리 변경시 변경사항 유무 체크 피하기 위함
					util.Grid.setRowState(app, "frfCsrHandicap",cpr.data.tabledata.RowState.UNCHANGED,'1');
					//신규입력이 Ok
					moPage.mbIsInsertRowFrf = true;
					util.Control.setEnable(app, true, ["frfCsrHandicap"]);
			
					
				};
				
				/**
				 * @desc 부모 헤더에 메세지 뿌리기
				 * @param psCtrlId 
				 * @param psMsgCode 
				 * @return void
				 * @author Choi In Seong 2016. 3. 3
				 */
				moPage.parentSendMsg = function(psCtrlId, psMsgCodeNm) {
					var vsMsg = ExtControl.getTextValue(psCtrlId);
					vsMsg     = "[" + vsMsg + "]";
				
					util.Msg.notify(app, vsMsg + psMsgCodeNm);	
				};
				
				/**
				 * @desc 저장 버튼 클릭
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 3
				 */
				moPage.onClick_BtnSave = function() {
					doSubSave();
				};
				
				/**
				 * @desc 장애정도 유효성 체크
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 3
				 */
				moPage.onValueChanged_IpbFrfHdcDeg = function() {
					ValidUtil.checkIntegerDecimal("ipbFrfHdcDeg", 1, 3, true);
				};
				
				/**
				 * @desc 장애정보 삭제
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 3
				 */
				moPage.onClick_BtnDel = function() {
					
					var vsLabel = ExtControl.getTextValue("lblTitlefrfCsrHandicap");
					
					//신규일 경우 삭제 불가 처리 
					if (moPage.mbIsInsertRowFrf) {
						//삭제할 데이터가 없습니다. 
						moPage.parentSendMsg("lblTitlefrfCsrHandicap", NLS.INF.M005);
						return;
					}else{
						util.Grid.deleteRow(app, "frfCsrHandicap");
						//삭제버튼 상태변경
						util.Control.setEnable(app, false, ["frfCsrHandicap"]);	
					}
				}
				
				/**
				 * @desc 장애정보 작업취소
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 3
				 */
				moPage.onClick_BtnRestore = function() {
					util.Grid.restoreRow(app, "frfCsrHandicap");
					util.Control.setEnable(app, true, ["frfCsrHandicap"]);
					
					var vsRowCnt = util.DataMap.getValue(app, "dmResList", "rowCnt");
						if (vsRowCnt == "0") {
							doSubInsertRow();
						}
					}
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsListHdcGrd");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dmReqList");
			dataMap_1.parseData({
				"columns" : [{
					"name": "strStudId",
					"dataType": "string"
				}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmFrfList");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "STUD_ID",
						"dataType": "string"
					},
					{
						"name": "HDC_GRD_RCD",
						"dataType": "string"
					},
					{
						"name": "REMARK",
						"dataType": "string"
					},
					{
						"name": "HDC_DEG",
						"dataType": "string"
					},
					{
						"name": "HDCP_ID",
						"dataType": "string"
					},
					{
						"name": "HDC_TYPE",
						"dataType": "string"
					},
					{
						"name": "HDCP_ID_END_DT",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmResList");
			dataMap_3.parseData({
				"columns" : [{
					"name": "rowCnt",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/csr/StdCsrHandicapInfo/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subSave");
			submission_2.action = "/csr/StdCsrHandicapInfo/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subList");
			submission_3.action = "/csr/StdCsrHandicapInfo/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_1);
			submission_3.addResponseData(dataMap_2, false);
			submission_3.addResponseData(dataMap_3, false);
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp_frfCsrShreg");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var group_2 = new cpr.controls.Container("frfCsrHandicap");
				group_2.style.setClasses(["form-box"]);
				// Layout
				var xYLayout_3 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_3);
				(function(container){
					var output_1 = new cpr.controls.Output("optFrfHdcType");
					output_1.value = "";
					output_1.style.setClasses(["require"]);
					output_1.bind("value").toLanguage("UI-DB-HDC_TYPE");
					container.addChild(output_1, {
						"top": "5px",
						"left": "5px",
						"width": "110px",
						"height": "25px"
					});
					var output_2 = new cpr.controls.Output("optFrfHdcGrdRcd");
					output_2.value = "";
					output_2.bind("value").toLanguage("UI-DB-HDC_GRD_RCD");
					container.addChild(output_2, {
						"top": "30px",
						"left": "5px",
						"width": "110px",
						"height": "25px"
					});
					var output_3 = new cpr.controls.Output("optFrfHdcpId");
					output_3.value = "";
					output_3.bind("value").toLanguage("UI-DB-HDCP_ID");
					container.addChild(output_3, {
						"top": "80px",
						"left": "5px",
						"width": "110px",
						"height": "25px"
					});
					var inputBox_1 = new cpr.controls.InputBox("ipbFrfHdcType");
					inputBox_1.maxLength = 100;
					inputBox_1.userAttr({"require": "Y"});
					inputBox_1.bind("fieldLabel").toExpression("#optFrfHdcType.value");
					inputBox_1.bind("value").toDataMap(app.lookup("dmFrfList"), "HDC_TYPE");
					container.addChild(inputBox_1, {
						"top": "5px",
						"left": "120px",
						"width": "310px",
						"height": "25px"
					});
					var comboBox_1 = new cpr.controls.ComboBox("cbbFrfHdcGrdRcd");
					comboBox_1.bind("fieldLabel").toExpression("#optFrfHdcGrdRcd.value");
					comboBox_1.bind("value").toDataMap(app.lookup("dmFrfList"), "HDC_GRD_RCD");
					(function(comboBox_1){
						comboBox_1.setItemSet(app.lookup("dsListHdcGrd"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_1);
					container.addChild(comboBox_1, {
						"top": "30px",
						"left": "120px",
						"width": "55px",
						"height": "25px"
					});
					var inputBox_2 = new cpr.controls.InputBox("ipbFrfHdcpId");
					inputBox_2.maxLength = 100;
					inputBox_2.bind("fieldLabel").toExpression("#optFrfHdcpId.value");
					inputBox_2.bind("value").toDataMap(app.lookup("dmFrfList"), "HDCP_ID");
					container.addChild(inputBox_2, {
						"top": "80px",
						"left": "120px",
						"width": "135px",
						"height": "25px"
					});
					var output_4 = new cpr.controls.Output("optFrfHdcpIdEndDt");
					output_4.value = "";
					output_4.bind("value").toLanguage("UI-DB-HDCP_ID_END_DT");
					container.addChild(output_4, {
						"top": "105px",
						"left": "5px",
						"width": "110px",
						"height": "25px"
					});
					var output_5 = new cpr.controls.Output("optFrfHdcDeg");
					output_5.value = "";
					output_5.bind("value").toLanguage("UI-DB-HDC_DEG");
					container.addChild(output_5, {
						"top": "55px",
						"left": "5px",
						"width": "110px",
						"height": "25px"
					});
					var output_6 = new cpr.controls.Output("optFrfRemark");
					output_6.value = "";
					output_6.bind("value").toLanguage("UI-GLS-REMARK");
					container.addChild(output_6, {
						"top": "130px",
						"left": "5px",
						"width": "110px",
						"height": "25px"
					});
					var dateInput_1 = new cpr.controls.DateInput("dipFrfHdcpIdEndDt");
					dateInput_1.format = "YYYY-MM-DD";
					dateInput_1.style.css({
						"text-align" : "center"
					});
					dateInput_1.bind("fieldLabel").toExpression("#optFrfHdcpIdEndDt.value");
					dateInput_1.bind("value").toDataMap(app.lookup("dmFrfList"), "HDCP_ID_END_DT");
					container.addChild(dateInput_1, {
						"top": "105px",
						"left": "120px",
						"width": "90px",
						"height": "25px"
					});
					var numberEditor_1 = new cpr.controls.NumberEditor("ipbFrfHdcDeg");
					numberEditor_1.format = "99,999";
					numberEditor_1.bind("fieldLabel").toExpression("#optFrfHdcDeg.value");
					numberEditor_1.bind("value").toDataMap(app.lookup("dmFrfList"), "HDC_DEG");
					if(typeof onIpbFrfHdcDegValueChange == "function") {
						numberEditor_1.addEventListener("value-change", onIpbFrfHdcDegValueChange);
					}
					container.addChild(numberEditor_1, {
						"top": "55px",
						"left": "120px",
						"width": "55px",
						"height": "25px"
					});
					var inputBox_3 = new cpr.controls.InputBox("ipbFrfRemark");
					inputBox_3.maxLength = 300;
					inputBox_3.bind("fieldLabel").toExpression("#optFrfRemark.value");
					inputBox_3.bind("value").toDataMap(app.lookup("dmFrfList"), "REMARK");
					container.addChild(inputBox_3, {
						"top": "130px",
						"left": "120px",
						"width": "475px",
						"height": "25px"
					});
					var output_7 = new cpr.controls.Output("optFrfStudId");
					output_7.value = "오브젝트번호";
					output_7.style.setClasses(["require"]);
					container.addChild(output_7, {
						"top": "5px",
						"left": "455px",
						"width": "100px",
						"height": "25px"
					});
					var inputBox_4 = new cpr.controls.InputBox("ipbStudId");
					inputBox_4.visible = false;
					inputBox_4.enabled = false;
					inputBox_4.userAttr({"require": "Y"});
					inputBox_4.bind("fieldLabel").toExpression("#optFrfStudId.value");
					inputBox_4.bind("value").toDataMap(app.lookup("dmFrfList"), "STUD_ID");
					container.addChild(inputBox_4, {
						"top": "5px",
						"left": "560px",
						"width": "75px",
						"height": "25px"
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "30px",
					"left": "5px",
					"width": "1014px",
					"height": "428"
				});
				var userDefinedControl_1 = new udc.com.comFormTitle();
				userDefinedControl_1.bind("title").toLanguage("UI-SCR-ERRINFO");
				container.addChild(userDefinedControl_1, {
					"top": "5px",
					"left": "5px",
					"width": "136px",
					"height": "25px"
				});
				var button_1 = new cpr.controls.Button("btnSave");
				button_1.value = "";
				button_1.style.setClasses(["btn-save"]);
				button_1.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_1.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "960px",
					"width": "60px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnDel");
				button_2.value = "";
				button_2.style.setClasses(["btn-delete"]);
				button_2.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_2.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "830px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnRestore");
				button_3.value = "";
				button_3.style.setClasses(["btn-restore"]);
				button_3.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_3.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "895px",
					"width": "60px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"left": "0px",
				"width": "1025px",
				"height": "463"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaSbpHeader");
			if(typeof onEmaSbpHeaderAppReady == "function") {
				embeddedApp_1.addEventListener("app-ready", onEmaSbpHeaderAppReady);
			}
			cpr.core.App.load("app/imp/impSbpHeader", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "430px",
				"left": "40px",
				"width": "96px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "stdCsrCHandicapInfo";
	cpr.core.Platform.INSTANCE.register(app);
})();
