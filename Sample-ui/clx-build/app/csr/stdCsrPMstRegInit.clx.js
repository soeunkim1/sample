/*
 * App URI: app/csr/stdCsrPMstRegInit
 * Source Location: app/csr/stdCsrPMstRegInit.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/csr/stdCsrPMstRegInit", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCsrPMstRegInit.xtm"/>
			
			
			var stdCsrPMstRegInit = function() {
				var moPage = new Page();
				//임포트용 데이터 통신 오브젝트
				var moPObject = new PObject();
				
				// 조회완료여부
				var mbSearchYn = false;
				
				var maFrfCtl = ["cbbFrfSchYearRcd", "cbbFrfSmtRcd", "cbbFrfEnrollDivRcd",
								"cbbFrfSpDivRcd", "ipbSaNm", "cbbFrfSpCd", "ipbFrfStDt"];
				
				moPObject.moIdsForStdCmnPObjSch = [
					{   // 행정부서
						controlId			:	"btnPopSearch",
						iCd					:	"",
						iNm					:	"ipbSaNm",
						iObjDivRcd			:	["CC009SA"],
						iStartObject    	:   "",
						iOtDivRcd			:	"",
						iOtIsTreeView	:	"",
						iLanDivRcd		:	"",
						iKeyDate			:	"/root/sessionDate/stDt",
						iKeyEndDate		:	"",
						oObjDivRcd		:	"",
						oCd					:	"ipbFrfSaCd",
						oCdNm				:	"ipbSaNm",
						oStDt				:	"",
						oEndDt				:	"",
						oLanDivRcd		:	"",
						func : function() {
							doGetSpCdList();
						}
					}
				];
			
				/**
				 * @desc onModelConstructDone 이벤트
				 * @param 
				 * @return void
				 * @author	 Choi In Seong 2016. 2. 2.
				 */
				moPage.onModelConstructDone_StdCsrPMstRegInit = function() {
					//리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init("frfCsrEnroll");
			
					//화면 온로드 서브미션 호출
					doOnLoad();		
				};
				
				/**
				 * @desc 받아온 변수 조회조건에 셋팅
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 01. 12.
				 */
				function doOnLoad() {
					var voRegiObj = ExtPopUp.getParentVal("moRegiObj");
					
					// 부모멤버변수에담긴학번받음
					var vsStudId = voRegiObj["studId"];
					var vsStudNo = voRegiObj["studNo"];
					var vsHeaderStud = voRegiObj["headerStud"];
					
					util.DataMap.setValue(app, "dmReqKey", "strStudNo", vsStudNo);
					util.DataMap.setValue(app, "dmReqKey", "strStudInfo", vsHeaderStud);
					
					//학생id 셋팅
					util.DataMap.setValue(app, "dmReqKey", "strStudId", vsStudId);
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess) {
						if (pbSuccess) {
							
							util.Control.redraw(app, ["frfCsrEnroll"]);
							
							var vnRowCnt = util.DataSet.getRowCount(app, "dsRptCsrEnroll");
							
							if (vnRowCnt != 0) {
								doSubInsertRow();
							}
							
							// 학생의 학번정보를 화면에 입력
							util.Control.setValue(app, "optStudNo", vsStudNo);
							util.Control.setValue(app, "optStud", vsHeaderStud);
							
							// 신규임으로 ENROLL_STAT = CT109ENRO(등록)으로 설정
							util.FreeForm.setValue(app, "frfCsrEnroll", "REG_STAT_RCD", "CT109ENRO");
							
							//학년도 학기 시작일 종료일 초기값 설정
							var vsYear  = util.DataMap.getValue(app, "dmSessionDate", "year");
							var vsSmt   = util.DataMap.getValue(app, "dmSessionDate", "smt");
							var vsStDt = util.DataMap.getValue(app, "dmSessionDate", "stDt");
							
							//현재일자를 가져와서 처리일자에 기본세팅한다. (2011.08.22 JJH 추가)
							var vsProcDt = util.DataMap.getValue(app, "dmResOnLoad", "strProcDt");
							
							util.FreeForm.setValue(app, "frfCsrEnroll", "SCH_YEAR_RCD", vsYear);
							util.FreeForm.setValue(app, "frfCsrEnroll", "SMT_RCD", vsSmt);
							util.FreeForm.setValue(app, "frfCsrEnroll", "ST_DT", vsStDt);
							util.FreeForm.setValue(app, "frfCsrEnroll", "END_DT", "99991231000000");
							util.FreeForm.setValue(app, "frfCsrEnroll", "PROC_DT", moPage.addZoreDate(vsProcDt));
							util.FreeForm.setValue(app, "frfCsrEnroll", "ENROLL_DT", moPage.addZoreDate(vsProcDt)); // 학적등록일자 추가 (2016.11.28 )
							util.FreeForm.setValue(app, "frfCsrEnroll", "CUR_APLY_YEAR_RCD", vsYear);
							mbSearchYn = true;
						} else {
							//2013.12.16. onLoad실패시 팝업닫기
			//				moPage.onClick_btnClose();
							ExtModel.dispatch("btnCloseCancel", "DOMActivate");
						}
					});
				}
			
				/**
				 * @desc //입력받은 날짜에 초를 000000으로 세팅
				 * @param psDate 시분초를 추가할 날짜
				 * @return vsDate 시분초가 추가된 날짜
				 * @author Choi In Seong 2016. 2. 2
				 */
				moPage.addZoreDate = function(psDate) {
					var vsDate = psDate.substring(0, 8);
					vsDate += "000000";
					return vsDate;
				};
				
				/**
				 * @desc 조회 내역이 없을시 신규
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 2. 2
				 */
				function doSubInsertRow() {
					util.FreeForm.setValue(app, "frfCsrEnroll",AppConstants.CUD_COL_REF, "N");
					//프리폼 신규
					util.FreeForm.insertRow(app, "frfCsrEnroll");
					//학생 ObjectId 셋팅
					var vsStudId = util.DataMap.getValue(app, "dmReqKey", "strStudId");
					util.FreeForm.setValue(app, "frfCsrEnroll", "STUD_ID", vsStudId);
					//신규입력이 Ok
					util.Control.setEnable(app, true, ["frfCsrEnroll"]);
				};
				
				/**
				 * @desc 학년도 학기 변경
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 2. 2
				 */
				moPage.getDateFromSession = function() {
			
					var vsEnrollDiv	= util.FreeForm.getValue(app, "frfCsrEnroll", "ENROLL_DIV_RCD");
					var vsYear			= util.FreeForm.getValue(app, "frfCsrEnroll", "SCH_YEAR_RCD");
					// 학년도, 학기의 기준일자(시작일)에 영향을 받는 사용자 input 필드는 초기화
					util.FreeForm.setValue(app, "frfCsrEnroll", "SA_CD_NM", "");
					util.FreeForm.setValue(app, "frfCsrEnroll", "SA_CD", "", false);
					util.FreeForm.setValue(app, "frfCsrEnroll", "SP_CD", "", false);
					doSetSpCdList();
					util.FreeForm.setValue(app, "frfCsrEnroll", "OG_CD_NM", "");
					util.FreeForm.setValue(app, "frfCsrEnroll", "OG_CD", "");
					
					// 학년도, 학기 변동에 따른 학사력 기준일자 가져오기
					var vsSmt = util.FreeForm.getValue(app, "frfCsrEnroll", "SMT_RCD");
					
					if (ValueUtil.isNull(vsYear)||ValueUtil.isNull(vsSmt)) return;
					
					util.DataMap.setValue(app, "dmSessionDate", "year", vsYear);
					util.DataMap.setValue(app, "dmSessionDate", "smt", vsSmt);
					util.DataMap.setValue(app, "dmSessionDate", "stDt", "");
					util.DataMap.setValue(app, "dmSessionDate", "endDt", "");
					
					//strCommand: getDateFromSession 
					util.Submit.send(app, "subDateFromSession", function(pbSuccess) {
						if (pbSuccess) {
							var vsStDt = util.DataMap.getValue(app, "dmSessionDate", "stDt");
							
							if (ValueUtil.isNull(vsStDt)) {
								//시작일자  값이 없으면, reset
								util.FreeForm.setValue(app, "frfCsrEnroll", "SCH_YEAR_RCD", "", false);
								util.FreeForm.setValue(app, "frfCsrEnroll", "SMT_RCD", "", false);
								util.FreeForm.setValue(app, "frfCsrEnroll", "ST_DT", "");
								util.FreeForm.setValue(app, "frfCsrEnroll", "END_DT", "");
								
								if(vsEnrollDiv == "CT103MAIN"){//주과정일 경우
									util.FreeForm.setValue(app, "frfCsrEnroll", "CUR_APLY_YEAR_RCD", "", false);
								}
							} else {
								util.FreeForm.setValue(app, "frfCsrEnroll", "ST_DT", vsStDt);
								util.FreeForm.setValue(app, "frfCsrEnroll", "END_DT", "99991231000000");
								if(vsEnrollDiv == "CT103MAIN"){//주과정일 경우
									util.FreeForm.setValue(app, "frfCsrEnroll", "CUR_APLY_YEAR_RCD", vsYear, false);
								}
							}
						} else {
							util.FreeForm.setValue(app, "frfCsrEnroll", "SCH_YEAR_RCD", "", false);
							util.FreeForm.setValue(app, "frfCsrEnroll", "SMT_RCD", "", false);
							util.FreeForm.setValue(app, "frfCsrEnroll", "ST_DT", "");
							util.FreeForm.setValue(app, "frfCsrEnroll", "END_DT", "");
							
							if(vsEnrollDiv == "CT103MAIN"){//주과정일 경우
								util.FreeForm.setValue(app, "frfCsrEnroll", "CUR_APLY_YEAR_RCD", "", false);
							}
						}
					});
				};
				
				/**
				 * @desc 이수과정구분으로 이수과정 필터링
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				function doGetSpCdList() {
			
					util.FreeForm.setValue(app, "frfCsrEnroll", "SP_CD", "", false);
					
					// subMission 하기 전에 ogtCdNm와 ogtCd 초기화
					util.DataMap.setValue(app, "dmResOnLoad", "ogCdNm", "");
					util.DataMap.setValue(app, "dmResOnLoad", "ogCd", "");
					
					//기준일자 /SACD
					var vsKeyDate = util.FreeForm.getValue(app, "frfCsrEnroll", "ST_DT");
					var vsSaCd = util.FreeForm.getValue(app, "frfCsrEnroll", "SA_CD");
					
					util.DataMap.setValue(app, "dmReqSelCourse", "strKeyDate", vsKeyDate);
					util.DataMap.setValue(app, "dmReqSelCourse", "strSaCd", vsSaCd);
					
					//strCommand: selCourse 
					util.Submit.send(app, "subSelCourse", function(pbSuccess) {
						if (pbSuccess) {
							
							util.Control.redraw(app, ["cbbFrfSpCd"]);
							
							// 학사부서 선택시 상위 행정부서를 가져옴
							var vsOgtCdNm = util.DataMap.getValue(app, "dmResOnLoad", "ogCdNm");
							var vsOgtCd = util.DataMap.getValue(app, "dmResOnLoad", "ogCd");
							if (vsOgtCdNm == null) {
								vsOgtCdNm = "";
							}
							if (vsOgtCd == null) {
								vsOgtCd = "";
							}
							util.FreeForm.setValue(app, "frfCsrEnroll", "OG_CD_NM", vsOgtCdNm);
							util.FreeForm.setValue(app, "frfCsrEnroll", "OG_CD", vsOgtCd);
							
							//이수과정구분 세팅
							doSetSpCdList();
						}
					});
				};
				
				/**
				 * @desc 이수과정 필터링
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				function doSetSpCdList() {
					ExtSelectCtl.cascadeList("cbbFrfSpDivRcd", "cbbFrfSpCd", "SP_DIV_RCD");
				};
				
				/**
				 * @desc 학적상태를 체크하는 로직추가. (여러세션창을 오픈하여 작업하는 경우, 체크logic )
				 * @param poCallBackFunc 콜백함수
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				function doCheckNewRegi(poCallBackFunc) {
					//등록신규시, 최종학적상태확인
					//strCommand: status 
					util.Submit.send(app, "subStatus", function(pbSuccess) {
						if (pbSuccess) {
							var vsStatRcd = util.DataMap.getValue(app, "dmResStatus", "statRcd");
							//학적상태가 없거나, 재학, 휴학 인 경우만 신규등록 가능
							
							if (ValueUtil.isNull(vsStatRcd) || vsStatRcd == "CT301ATTE" || vsStatRcd == "CT301ABSE") {
								
								if(util.isFunc(poCallBackFunc)) poCallBackFunc(true);
								
							} else {
								//그외는 error 메시지 
								var vsStatNm = util.DataMap.getValue(app, "dmResStatus", "statNm");
								util.Msg.alert("NLS-CSR-M022", [vsStatNm, NLS.CSR.M050]);
								
								if(util.isFunc(poCallBackFunc)) poCallBackFunc(false);
							}
							
						}
					});
				};
				
				/**
				 * @desc 학적등록 저장 버튼 event
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				moPage.onClick_BtnSave = function() {
					// 리피터 변경사항 체크
					if(!util.Grid.isModified(app, ["frfCsrEnroll"], "MSG")){
						return false;
					}
					//리피트 validation check
					if(!util.validate(app, maFrfCtl)){
						return false;
					}
					
					// 주과정등록의 경우 학적등록사유를 반드시 입력해야함
					if (util.FreeForm.getValue(app, "frfCsrEnroll", "ENROLL_DIV_RCD") == "CT103MAIN") {
						if (!util.validate(app, ["cbbFrfEnrollRsnRcd"])) return false;
					}
					
					/**
					 * 학적상태를 체크하는 로직추가. (여러세션창을 오픈하여 작업하는 경우, 체크logic ) 2012.8.16
					 * 2013.12.10. 학적상태 확인 후, 가능한 경우 저장로직 수행하도록 함.
					 */
					doCheckNewRegi(function (pbPossibleNewRegi) {
						if(pbPossibleNewRegi) {
							doSave();
						}
					});
				};
				
				/**
				 * @desc 학적등록 저장
				 * @param pnStep 저장 차수
				 * @return boolean
				 * @author Choi In Seong 2016. 2. 2.
				 */
				function doSave(pnStep) {
					if (!pnStep) {
						pnStep = "0";
					}
					
					util.DataMap.setValue(app, "dmInteractiveMsg", "intStep", pnStep);
					
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccess) {
						if (pbSuccess) {
							var vsMsg = util.DataMap.getValue(app, "dmInteractiveMsg", "strMsg");
							if (vsMsg != "") {
								// @1\n  계속하시겠습니까?
								if (util.Msg.confirm("NLS-CRM-M034", [vsMsg]) ) {
									var vnStep = util.DataMap.getValue(app, "dmInteractiveMsg", "intStep");
									return doSave(vnStep);
								} else {
									return false;
								}
							} else {
								//부모창 목록 재조회
								//팝업창 닫기
								ExtPopUp.closeLayeredPopup("doPopCallList");
								return true;
							}
						}
					});
				};
				
				/**
				 * @desc 학적등록구분 변경
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				moPage.onValueChanged_CbbFrfEnrollDivRcd = function() {
					
					// 이수과정구분 콘트롤을 초기화 한다. (2011.12.01 정정호 수정)
					util.FreeForm.setValue(app, "frfCsrEnroll", "SP_DIV_RCD", "", false);
					
					// 학적등록구분 주과정이 아니면  학적등록사유와 교과과정 적용년도 비활성 
					var vsEnrollDiv = util.FreeForm.getValue(app, "frfCsrEnroll", "ENROLL_DIV_RCD");
					if (vsEnrollDiv == "CT103MAIN") {
						//교과과정 적용년도 세팅 
						var vsInitYear = util.FreeForm.getValue(app, "frfCsrEnroll", "SCH_YEAR_RCD");
						util.FreeForm.setValue(app, "frfCsrEnroll", "CUR_APLY_YEAR_RCD", vsInitYear, false);
						
						util.Control.setEnable(app, true, ["cbbFrfCurAplyYearRcd"]);
						
						// 학적등록사유 값 설정
						var vsEnrollReason = util.DataMap.getValue(app, "dmResOnLoad", "enrollRcd");
						if (!ValueUtil.isNull(vsEnrollReason)) {
							//등록사유가 있을경우 세팅 + edit불가
							util.FreeForm.setValue(app, "frfCsrEnroll", "ENROLL_RSN_RCD", vsEnrollReason);
							util.Control.setEnable(app, false, ["cbbFrfEnrollRsnRcd"]);
						} else {
							util.Control.setEnable(app, true, ["cbbFrfEnrollRsnRcd"]);
						}
						
					} else {
						util.FreeForm.setValue(app, "frfCsrEnroll", "CUR_APLY_YEAR_RCD", "", false);
						util.FreeForm.setValue(app, "frfCsrEnroll", "ENROLL_RSN_RCD", "");
						util.Control.setEnable(app, false, ["cbbFrfCurAplyYearRcd", "cbbFrfEnrollRsnRcd"]);
					}
					
					//학적이수과정구분 거르기 
					ExtSelectCtl.cascadeList("cbbFrfEnrollDivRcd", "cbbFrfSpDivRcd", "CD_PRP1", 0);
					
					util.FreeForm.setValue(app, "frfCsrEnroll", "SP_CD", "", false);
					doGetSpCdList();
				};
				
				/**
				 * @desc 선택닫기 버튼 클릭
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				moPage.onClick_BtnCloseOk = function() {
					doCloseOk();
				};
				
				/**
				 * @desc 헤더 온로드 실행
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					doHeaderOnLoad();
				};
				
				/**
				 * @desc 객체팝업 호출
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				moPage.onClick_BtnPopSearch = function(sender) {
					var vsKeyDate = util.DataMap.getValue(app, "dmSessionDate", "stDt");
					
					if (ValueUtil.isNull(vsKeyDate)) {
						//학년도, 학기를 선택하세요.
						util.Msg.alert("NLS-INF-M028");
						return;
					}
					
					doOnClickStdCmnPObjSch(sender);
				}
				
				/**
				 * @desc 객체검색
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				moPage.onValueChanged_IpbSaNm = function(sender) {
					var vsKeyDate = util.DataMap.getValue(app, "dmSessionDate", "stDt");
					
					if (ValueUtil.isNull(vsKeyDate)) {
						//학년도, 학기를 선택하세요.
						util.Msg.alert("NLS-INF-M028");
						return;
					}
					
					doOnChangeStdCmnPObjSch(sender);
				}
				
				/**
				 * @desc 학년도, 학기 변경 시 기준일자 셋팅
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				moPage.onValueChanged_CbbFrfSchYearRcd = function() {
					//조회 완료 여부
					if(!mbSearchYn) return;
					moPage.getDateFromSession();
				};
				
				/**
				 * @desc 학년도, 학기 변경 시 기준일자 셋팅
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */	
				moPage.onValueChanged_CbbFrfSmtRcd = function() {
					//조회 완료 여부
					if(!mbSearchYn) return;
					moPage.getDateFromSession();
				};
				
					/**
				 * @desc 이수과정구분 변경시 이수과정콤보 필터
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				moPage.onValueChanged_CbbFrfSpDivRcd = function() {
					util.FreeForm.setValue(app, "frfCsrEnroll", "SP_CD", "", false);
					doGetSpCdList();
				};
				
				/**
				 * @desc 이수과정 변경시 학사코드, 이수과정구분코드 체크
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				moPage.onValueChanged_CbbFrfSpCd = function() {
					
					// 이수과정 
					//학사부서에 선택된 부서에 대한 이수과정 에 이수과정구분으로 필터링
					//학사부서 입력여부 확인
					var vsCtlValue = util.FreeForm.getValue(app, "frfCsrEnroll", "SA_CD");
					var vsCtlTitle = ExtControl.getTextValue("lblSaNm");
					
					if (ValueUtil.isNull(vsCtlValue)) {
						util.Msg.alert("NLS-CSR-M021", [vsCtlTitle]);
						return;
					}
					//이수과정 구분과 학사부서 입력여부 확인
					vsCtlValue = util.FreeForm.getValue(app, "frfCsrEnroll", "SP_DIV_RCD");
					vsCtlTitle =  ExtControl.getTextValue("lblFrfSpDivRcd");
					
					if (ValueUtil.isNull(vsCtlValue)) {
						util.Msg.alert("NLS-CSR-M021", [vsCtlTitle]);
						return;
					}
				};
				
				/**
				 * @desc 교과과정적용학년도 변경시 체크
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				moPage.onValueChanged_CbbFrfCurAplyYearRcd = function() {
					// 조회 완료 여부
					if(!mbSearchYn) return;
					var vsCurAplyYear = util.Control.getValue(app, "cbbFrfCurAplyYearRcd");
					if (!ValueUtil.isNull(vsCurAplyYear)) {
						util.Msg.alert("NLS-CSR-M026");
					}
				};
			
				/**
				 * @desc 화면닫기 버튼 클릭
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 2.
				 */
				moPage.onClick_BtnCloseCancel = function() {
					app.close();
				};
			
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsCsrEnroll");
			dataSet_1.parseData({
				"columns": [
					{"name": "SA_CD"},
					{"name": "SHREG_ALT_KEY"},
					{"name": "ENROLL_DIV_RCD"},
					{"name": "ENROLL_RSN_RCD"},
					{"name": "STUD_ID"},
					{"name": "SP_CD"},
					{"name": "PRI"},
					{"name": "OG_CD_NM"},
					{"name": "ENROLL_CANCEL_RSN_RCD"},
					{"name": "SMT_RCD"},
					{"name": "REG_STAT_RCD"},
					{"name": "OG_CD"},
					{"name": "ST_DT"},
					{"name": "UREF_KEY"},
					{"name": "END_DT"},
					{"name": "REF_KEY"},
					{"name": "SA_CD_NM"},
					{"name": "CUR_APLY_YEAR_RCD"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SP_DIV_RCD"},
					{"name": "PROC_DT"},
					{"name": "ENROLL_DT"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsYearList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsEnrollDivList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsSmtList");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsPgmDivList");
			dataSet_5.parseData({
				"columns": [
					{"name": "CD_PRP1"},
					{"name": "CD_NM"},
					{"name": "CD"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsEnrollRcdList");
			dataSet_6.parseData({
				"columns": [
					{"name": "CD_NM"},
					{"name": "CD"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsSptCdList");
			dataSet_7.parseData({
				"columns": [
					{"name": "SP_CD"},
					{"name": "SP_DIV_RCD"},
					{"name": "SP_NM"},
					{"name": "SHORT_NM"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strStudId",
						"dataType": "string"
					},
					{
						"name": "strCancelYn",
						"dataType": "string"
					},
					{
						"name": "strStudNo",
						"dataType": "string"
					},
					{
						"name": "strStudInfo",
						"dataType": "string"
					},
					{
						"name": "strStudViewId",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "ogCdNm",
						"dataType": "string"
					},
					{
						"name": "strProcDt",
						"dataType": "string"
					},
					{
						"name": "ogCd",
						"dataType": "string"
					},
					{
						"name": "enrollRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmSessionDate");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "stDt",
						"dataType": "string"
					},
					{
						"name": "endDt",
						"dataType": "string"
					},
					{
						"name": "year",
						"dataType": "string"
					},
					{
						"name": "smt",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmReqSelCourse");
			dataMap_4.parseData({
				"columns" : [
					{
						"name": "strSaCd",
						"dataType": "string"
					},
					{
						"name": "strKeyDate",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_4);
			
			var dataMap_5 = new cpr.data.DataMap("dmInteractiveMsg");
			dataMap_5.parseData({
				"columns" : [
					{
						"name": "intStep",
						"dataType": "string"
					},
					{
						"name": "strMsg",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_5);
			
			var dataMap_6 = new cpr.data.DataMap("dmResStatus");
			dataMap_6.parseData({
				"columns" : [
					{
						"name": "statNm",
						"dataType": "string"
					},
					{
						"name": "statRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_6);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/csr/StdCsrMstRegInit/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_5, false);
			submission_1.addResponseData(dataSet_7, false);
			submission_1.addResponseData(dataSet_6, false);
			submission_1.addResponseData(dataMap_3, false);
			submission_1.addResponseData(dataMap_2, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subSave");
			submission_2.action = "/csr/StdCsrMstRegInit/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_5);
			submission_2.addResponseData(dataMap_5, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subDateFromSession");
			submission_3.action = "/csr/StdCsrMstRegInit/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_3);
			submission_3.addResponseData(dataMap_3, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subSelCourse");
			submission_4.action = "/csr/StdCsrMstRegInit/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_4);
			submission_4.addRequestData(dataMap_1);
			submission_4.addResponseData(dataSet_7, false);
			submission_4.addResponseData(dataMap_2, false);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subStatus");
			submission_5.action = "/csr/StdCsrMstRegi/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataMap_1);
			submission_5.addResponseData(dataMap_6, false);
			app.register(submission_5);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp_frfCsrEnroll");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var group_2 = new cpr.controls.Container("frfCsrEnroll");
				group_2.style.setClasses(["form-box"]);
				// Layout
				var xYLayout_3 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_3);
				(function(container){
					var output_1 = new cpr.controls.Output("optSaNm");
					output_1.value = "";
					output_1.style.setClasses(["require"]);
					output_1.bind("value").toLanguage("UI-GLS-SA");
					container.addChild(output_1, {
						"top": "55px",
						"left": "5px",
						"width": "125px",
						"height": "25px"
					});
					var inputBox_1 = new cpr.controls.InputBox("ipbSaNm");
					inputBox_1.userAttr({"require": "Y"});
					inputBox_1.bind("fieldLabel").toExpression("#optSaNm.value");
					inputBox_1.bind("value").toDataMap(app.lookup("dmRow"), "SA_CD_NM");
					if(typeof onIpbSaNmValueChange == "function") {
						inputBox_1.addEventListener("value-change", onIpbSaNmValueChange);
					}
					container.addChild(inputBox_1, {
						"top": "55px",
						"left": "135px",
						"width": "140px",
						"height": "25px"
					});
					var button_1 = new cpr.controls.Button("btnPopSearch");
					button_1.value = "";
					button_1.style.setClasses(["btn-pop-search"]);
					if(typeof onBtnPopSearchClick == "function") {
						button_1.addEventListener("click", onBtnPopSearchClick);
					}
					container.addChild(button_1, {
						"top": "55px",
						"left": "275px",
						"width": "20px",
						"height": "25px"
					});
					var output_2 = new cpr.controls.Output("optFrfSchYearRcd");
					output_2.value = "";
					output_2.style.setClasses(["require"]);
					output_2.bind("value").toLanguage("UI-GLS-SCH_YEAR");
					container.addChild(output_2, {
						"top": "5px",
						"left": "5px",
						"width": "125px",
						"height": "25px"
					});
					var output_3 = new cpr.controls.Output("optFrfEnrollDivRcd");
					output_3.value = "";
					output_3.style.setClasses(["require"]);
					output_3.bind("value").toLanguage("UI-SCR-SCREGDIV");
					container.addChild(output_3, {
						"top": "30px",
						"left": "5px",
						"width": "125px",
						"height": "25px"
					});
					var output_4 = new cpr.controls.Output("optFrfEnrollRsnRcd");
					output_4.value = "";
					output_4.style.setClasses(["require"]);
					output_4.bind("value").toLanguage("UI-SCR-SCHREGRSN");
					container.addChild(output_4, {
						"top": "80px",
						"left": "5px",
						"width": "125px",
						"height": "25px"
					});
					var output_5 = new cpr.controls.Output("optFrfCurAplyYearRcd");
					output_5.value = "";
					output_5.bind("value").toLanguage("UI-SCR-SUBPROCYRS");
					container.addChild(output_5, {
						"top": "105px",
						"left": "5px",
						"width": "125px",
						"height": "25px"
					});
					var output_6 = new cpr.controls.Output("optFrfStDt");
					output_6.value = "";
					output_6.style.setClasses(["require"]);
					output_6.bind("value").toLanguage("UI-SCR-EFETSTDT");
					container.addChild(output_6, {
						"top": "130px",
						"left": "5px",
						"width": "125px",
						"height": "25px"
					});
					var output_7 = new cpr.controls.Output("optFrfOgCdNm");
					output_7.value = "";
					output_7.bind("value").toLanguage("UI-GLS-OG");
					container.addChild(output_7, {
						"top": "155px",
						"left": "5px",
						"width": "125px",
						"height": "25px"
					});
					var output_8 = new cpr.controls.Output("optFrfSmtRcd");
					output_8.value = "";
					output_8.style.setClasses(["require"]);
					output_8.bind("value").toLanguage("UI-GLS-SMT");
					container.addChild(output_8, {
						"top": "5px",
						"left": "305px",
						"width": "100px",
						"height": "25px"
					});
					var output_9 = new cpr.controls.Output("optFrfSpDivRcd");
					output_9.value = "";
					output_9.style.setClasses(["require"]);
					output_9.bind("value").toLanguage("UI-SCR-SPCORSDIV");
					container.addChild(output_9, {
						"top": "30px",
						"left": "305px",
						"width": "100px",
						"height": "25px"
					});
					var output_10 = new cpr.controls.Output("optFrfSpCd");
					output_10.value = "";
					output_10.style.setClasses(["require"]);
					output_10.bind("value").toLanguage("UI-GLS-SP");
					container.addChild(output_10, {
						"top": "55px",
						"left": "305px",
						"width": "100px",
						"height": "25px"
					});
					var output_11 = new cpr.controls.Output("optFrfPri");
					output_11.value = "";
					output_11.bind("value").toLanguage("UI-DB-PRI");
					container.addChild(output_11, {
						"top": "80px",
						"left": "305px",
						"width": "100px",
						"height": "25px"
					});
					var output_12 = new cpr.controls.Output("optFrfProcDt");
					output_12.value = "";
					output_12.bind("value").toLanguage("UI-SCR-ENROLLDT");
					container.addChild(output_12, {
						"top": "105px",
						"left": "305px",
						"width": "100px",
						"height": "25px"
					});
					var output_13 = new cpr.controls.Output("optFrfEndDt");
					output_13.value = "";
					output_13.bind("value").toLanguage("UI-SCR-EFETEDDT");
					container.addChild(output_13, {
						"top": "130px",
						"left": "305px",
						"width": "100px",
						"height": "25px"
					});
					var comboBox_1 = new cpr.controls.ComboBox("cbbFrfSchYearRcd");
					comboBox_1.userAttr({"require": "Y"});
					comboBox_1.bind("fieldLabel").toExpression("#optFrfSchYearRcd.value");
					comboBox_1.bind("value").toDataMap(app.lookup("dmRow"), "SCH_YEAR_RCD");
					(function(comboBox_1){
						comboBox_1.setItemSet(app.lookup("dsYearList"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_1);
					if(typeof onCbbFrfSchYearRcdSelectionChange == "function") {
						comboBox_1.addEventListener("selection-change", onCbbFrfSchYearRcdSelectionChange);
					}
					container.addChild(comboBox_1, {
						"top": "5px",
						"left": "135px",
						"width": "160px",
						"height": "25px"
					});
					var comboBox_2 = new cpr.controls.ComboBox("cbbFrfEnrollDivRcd");
					comboBox_2.userAttr({"require": "Y"});
					comboBox_2.bind("fieldLabel").toExpression("#optFrfEnrollDivRcd.value");
					comboBox_2.bind("value").toDataMap(app.lookup("dmRow"), "ENROLL_DIV_RCD");
					(function(comboBox_2){
						comboBox_2.setItemSet(app.lookup("dsEnrollDivList"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_2);
					if(typeof onCbbFrfEnrollDivRcdSelectionChange == "function") {
						comboBox_2.addEventListener("selection-change", onCbbFrfEnrollDivRcdSelectionChange);
					}
					container.addChild(comboBox_2, {
						"top": "30px",
						"left": "135px",
						"width": "160px",
						"height": "25px"
					});
					var comboBox_3 = new cpr.controls.ComboBox("cbbFrfSmtRcd");
					comboBox_3.userAttr({"require": "Y"});
					comboBox_3.bind("fieldLabel").toExpression("#optFrfSmtRcd.value");
					comboBox_3.bind("value").toDataMap(app.lookup("dmRow"), "SMT_RCD");
					(function(comboBox_3){
						comboBox_3.setItemSet(app.lookup("dsSmtList"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_3);
					if(typeof onCbbFrfSmtRcdSelectionChange == "function") {
						comboBox_3.addEventListener("selection-change", onCbbFrfSmtRcdSelectionChange);
					}
					container.addChild(comboBox_3, {
						"top": "5px",
						"left": "410px",
						"width": "163px",
						"height": "25px"
					});
					var comboBox_4 = new cpr.controls.ComboBox("cbbFrfSpDivRcd");
					comboBox_4.userAttr({"require": "Y"});
					comboBox_4.bind("fieldLabel").toExpression("#optFrfSpDivRcd.value");
					comboBox_4.bind("value").toDataMap(app.lookup("dmRow"), "SP_DIV_RCD");
					(function(comboBox_4){
						comboBox_4.setItemSet(app.lookup("dsPgmDivList"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_4);
					if(typeof onCbbFrfSpDivRcdSelectionChange == "function") {
						comboBox_4.addEventListener("selection-change", onCbbFrfSpDivRcdSelectionChange);
					}
					container.addChild(comboBox_4, {
						"top": "30px",
						"left": "410px",
						"width": "163px",
						"height": "25px"
					});
					var comboBox_5 = new cpr.controls.ComboBox("cbbFrfSpCd");
					comboBox_5.userAttr({"require": "Y"});
					comboBox_5.bind("fieldLabel").toExpression("#optFrfSpCd.value");
					comboBox_5.bind("value").toDataMap(app.lookup("dmRow"), "SP_CD");
					(function(comboBox_5){
						comboBox_5.setItemSet(app.lookup("dsSptCdList"), {
							"label": "SHORT_NM",
							"value": "SP_CD"
						});
					})(comboBox_5);
					if(typeof onCbbFrfSpCdSelectionChange == "function") {
						comboBox_5.addEventListener("selection-change", onCbbFrfSpCdSelectionChange);
					}
					container.addChild(comboBox_5, {
						"top": "55px",
						"left": "410px",
						"width": "163px",
						"height": "25px"
					});
					var comboBox_6 = new cpr.controls.ComboBox("cbbFrfEnrollRsnRcd");
					comboBox_6.userAttr({"require": "Y"});
					comboBox_6.bind("fieldLabel").toExpression("#optFrfEnrollRsnRcd.value");
					comboBox_6.bind("value").toDataMap(app.lookup("dmRow"), "ENROLL_RSN_RCD");
					(function(comboBox_6){
						comboBox_6.setItemSet(app.lookup("dsEnrollRcdList"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_6);
					container.addChild(comboBox_6, {
						"top": "80px",
						"left": "135px",
						"width": "160px",
						"height": "25px"
					});
					var comboBox_7 = new cpr.controls.ComboBox("cbbFrfCurAplyYearRcd");
					comboBox_7.bind("fieldLabel").toExpression("#optFrfCurAplyYearRcd.value");
					comboBox_7.bind("value").toDataMap(app.lookup("dmRow"), "CUR_APLY_YEAR_RCD");
					(function(comboBox_7){
						comboBox_7.setItemSet(app.lookup("dsYearList"), {
							"label": "CD_NM",
							"value": "CD"
						});
					})(comboBox_7);
					if(typeof onCbbFrfCurAplyYearRcdSelectionChange == "function") {
						comboBox_7.addEventListener("selection-change", onCbbFrfCurAplyYearRcdSelectionChange);
					}
					container.addChild(comboBox_7, {
						"top": "105px",
						"left": "135px",
						"width": "160px",
						"height": "25px"
					});
					var dateInput_1 = new cpr.controls.DateInput("ipbFrfStDt");
					dateInput_1.userAttr({"require": "Y"});
					dateInput_1.bind("fieldLabel").toExpression("#optFrfStDt.value");
					dateInput_1.bind("value").toDataMap(app.lookup("dmRow"), "ST_DT");
					container.addChild(dateInput_1, {
						"top": "130px",
						"left": "135px",
						"width": "90px",
						"height": "25px"
					});
					var dateInput_2 = new cpr.controls.DateInput("ipbFrfProcDt");
					dateInput_2.visible = false;
					dateInput_2.enabled = false;
					dateInput_2.bind("fieldLabel").toExpression("#optFrfProcDt.value");
					dateInput_2.bind("value").toDataMap(app.lookup("dmRow"), "PROC_DT");
					container.addChild(dateInput_2, {
						"top": "130px",
						"left": "600px",
						"width": "90px",
						"height": "25px"
					});
					var dateInput_3 = new cpr.controls.DateInput("ipbFrfEndDt");
					dateInput_3.enabled = false;
					dateInput_3.bind("fieldLabel").toExpression("#optFrfEndDt.value");
					dateInput_3.bind("value").toDataMap(app.lookup("dmRow"), "END_DT");
					container.addChild(dateInput_3, {
						"top": "130px",
						"left": "410px",
						"width": "90px",
						"height": "25px"
					});
					var inputBox_2 = new cpr.controls.InputBox("ipbFrfOgCdNm");
					inputBox_2.enabled = false;
					inputBox_2.bind("fieldLabel").toExpression("#optFrfOgCdNm.value");
					inputBox_2.bind("value").toDataMap(app.lookup("dmRow"), "OG_CD_NM");
					container.addChild(inputBox_2, {
						"top": "155px",
						"left": "135px",
						"width": "438px",
						"height": "25px"
					});
					var inputBox_3 = new cpr.controls.InputBox("ipbFrfSaCd");
					inputBox_3.visible = false;
					inputBox_3.bind("fieldLabel").toExpression("#optSaNm.value");
					inputBox_3.bind("value").toDataMap(app.lookup("dmRow"), "SA_CD");
					container.addChild(inputBox_3, {
						"top": "55px",
						"left": "290px",
						"width": "10px",
						"height": "25px"
					});
					var inputBox_4 = new cpr.controls.InputBox("ipbFrfStudId");
					inputBox_4.visible = false;
					inputBox_4.bind("value").toDataMap(app.lookup("dmRow"), "STUD_ID");
					container.addChild(inputBox_4, {
						"top": "80px",
						"left": "480px",
						"width": "10px",
						"height": "25px"
					});
					var inputBox_5 = new cpr.controls.InputBox("ipbFrfOgCd");
					inputBox_5.visible = false;
					inputBox_5.bind("value").toDataMap(app.lookup("dmRow"), "OG_CD");
					container.addChild(inputBox_5, {
						"top": "80px",
						"left": "495px",
						"width": "10px",
						"height": "25px"
					});
					var numberEditor_1 = new cpr.controls.NumberEditor("ipbFrfPri");
					numberEditor_1.format = "99";
					numberEditor_1.bind("fieldLabel").toExpression("#optFrfPri.value");
					numberEditor_1.bind("value").toDataMap(app.lookup("dmRow"), "PRI");
					container.addChild(numberEditor_1, {
						"top": "80px",
						"left": "410px",
						"width": "55px",
						"height": "25px"
					});
					var dateInput_4 = new cpr.controls.DateInput("ipbFrfEnrolllDt");
					dateInput_4.bind("fieldLabel").toExpression("#optFrfEnrollDt.value");
					dateInput_4.bind("value").toDataMap(app.lookup("dmRow"), "ENROLL_DT");
					container.addChild(dateInput_4, {
						"top": "105px",
						"left": "409px",
						"width": "90px",
						"height": "25px"
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "90px",
					"left": "5px",
					"width": "579px",
					"height": "180px"
				});
				var userDefinedControl_1 = linker.userDefinedControl_1 = new udc.com.comTitle();
				userDefinedControl_1.ctrl = app.lookup("grdCsrEnroll");
				userDefinedControl_1.bind("title").toLanguage("UI-SCR-STUDTINFO");
				container.addChild(userDefinedControl_1, {
					"top": "65px",
					"left": "5px",
					"width": "235px",
					"height": "25px"
				});
				var group_3 = new cpr.controls.Container("frfStudInfo");
				group_3.style.setClasses(["form-box"]);
				// Layout
				var xYLayout_4 = new cpr.controls.layouts.XYLayout();
				group_3.setLayout(xYLayout_4);
				(function(container){
					var output_14 = new cpr.controls.Output("optStud");
					output_14.value = "";
					output_14.bind("value").toDataMap(app.lookup("dmReqKey"), "strStudInfo");
					container.addChild(output_14, {
						"top": "30px",
						"left": "135px",
						"width": "440px",
						"height": "25px"
					});
					var output_15 = new cpr.controls.Output("optStudNm");
					output_15.value = "";
					output_15.bind("value").toLanguage("UI-GLS-PER_NM");
					container.addChild(output_15, {
						"top": "30px",
						"left": "5px",
						"width": "125px",
						"height": "25px"
					});
					var output_16 = new cpr.controls.Output("optStudNo");
					output_16.value = "";
					output_16.bind("value").toLanguage("UI-GLS-STUD_ID");
					container.addChild(output_16, {
						"top": "5px",
						"left": "5px",
						"width": "125px",
						"height": "25px"
					});
					var output_17 = new cpr.controls.Output("optStudNo");
					output_17.value = "";
					output_17.bind("value").toDataMap(app.lookup("dmReqKey"), "strStudNo");
					container.addChild(output_17, {
						"top": "5px",
						"left": "135px",
						"width": "440px",
						"height": "25px"
					});
				})(group_3);
				container.addChild(group_3, {
					"top": "5px",
					"left": "5px",
					"width": "580px",
					"height": "55px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "590px",
				"height": "275px"
			});
			
			var button_2 = new cpr.controls.Button("btnCloseCancel");
			button_2.value = "";
			button_2.bind("value").toLanguage("UI-SCR-SCRNCLS");
			if(typeof onBtnCloseCancelClick == "function") {
				button_2.addEventListener("click", onBtnCloseCancelClick);
			}
			container.addChild(button_2, {
				"top": "315px",
				"left": "5px",
				"width": "60px",
				"height": "25px"
			});
			
			var userDefinedControl_2 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_2, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaStdCmnPobjSch");
			cpr.core.App.load("app/cmn/impStdCmnPObjSch", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "320px",
				"left": "85px",
				"width": "50px",
				"height": "25px"
			});
			
			var button_3 = new cpr.controls.Button("btnSave");
			button_3.value = "";
			button_3.style.setClasses(["btn-save"]);
			button_3.bind("value").toLanguage("UI-SCR-WRKSAVE");
			if(typeof onBtnSaveClick == "function") {
				button_3.addEventListener("click", onBtnSaveClick);
			}
			container.addChild(button_3, {
				"top": "315px",
				"left": "535px",
				"width": "60px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "신규등록";
	cpr.core.Platform.INSTANCE.register(app);
})();
