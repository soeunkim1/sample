/*
 * App URI: app/csr/stdCsrSMstRegi
 * Source Location: app/csr/stdCsrSMstRegi.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/csr/stdCsrSMstRegi", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			///<xtmlink path="./stdCsrSMstRegi.xtm"/>
			
			var stdCsrSMstRegi = function() {
			
				var moPage = new Page();
				//임포트용 데이터 통신 오브젝트
				var moPObject = new PObject();
			
				var msStudId = "";
				var msStudNo = "";
				var msKeyDt = "";
					
				//등록 popUp에 학년도 Text,학기Text,학적등록구분Text,이수과정구분Text,이수과정text,학적등록사유Text 추가해서 넘겨줌 
				//등록 popUp에 넘겨줄 값 
				moPObject.moRegiObj = {
					headerStud		: "", 		//학적사항관리 창의 헤더정보(학생) 
					studId				: "", 		//학적사항관리 창의 조회된 학번값		
					enrollDivRcd		: "", 		//학적등록구분 
					spDivRcd			: "", 		//이수과정 구분 
					schYearRcd		: "", 		//학년도 
					smtRcd 			: "", 		//학기 
					regStatRcd 		: "", 		//등록상태 
					saCd 				: "", 		//학사부서
					spCd 				: "", 		//이수과정
					procDt 				: "", 		//처리일자 
					studNo 				: "", 		// STUD_ID -> STUD_NO로 변경되면서 추가된 부분 (정정호 2011.08.05)
					keyDt	 			: ""		//기준일자
				};
			
			
				moPage.onLoadImportDone_ImpSbpHeader = function() {
					doSbpHeaderOnLoad();
				}
				
				/**
				 * @desc 화면 온로드
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 2. 1
				 */
				moPage.onModelConstructDone_stdCsrSMstRegi = function() {
					
					//리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init("rptCsrEnroll");
			
					//서브미션 실행 (실패시 cover page)
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							var voParentPage = ExtSubPage.getParent();
							
							// 부모멤버변수에담긴학번받음
							msStudId = moPage.parent.moParentObj.studId;
							msStudNo = moPage.parent.moParentObj.studNo;
							msKeyDt = moPage.parent.moParentObj.keyDate;
							
							moPObject.moRegiObj.studId = msStudId;
							moPObject.moRegiObj.studNo = msStudNo; // STUD_ID -> STUD_NO로 변경되면서 추가된 부분 (정정호 2011.08.05)
							moPObject.moRegiObj.headerStud = moPage.parent.moParentObj.headerStud;
							
							doList(function(pbSuccess) {
								// 조회 : "조회되었습니다." header 메세지 표시
								if(pbSuccess) {
									util.Control.setEnable(app, true, ["grpData"]);
									moPage.parentSendMsg("lblTitleRptCsrEnroll", NLS.INF.M024);
								}
							});
						}
					});
				}
			
				/**
				 * @desc 등록정보를 조회한다.
				 * @param poCallBackFunc 콜백 함수
				 * @return void
				 * @author Choi In Seong 2016. 2. 1
				 */
				function doList(poCallBackFunc) {
					
					//취소내역포함 유무
					var vsCancelYn = "";
					var vsCancelCkb = util.Control.getValue(app, "ckbCancel");
				
					if (vsCancelCkb == "Y") {
						vsCancelYn = "Y";
					} else {
						vsCancelYn = "N";
					}
					
					util.DataMap.setValue(app, "dmReqKey", "strStudId", msStudId);
					util.DataMap.setValue(app, "dmReqKey", "strCancelYn", vsCancelYn);
					
					//strCommand: list 
					util.Submit.send(app, "subList", function(pbSuccess) {
							if (pbSuccess) {
								util.Control.redraw(app, ["rptCsrEnroll"]);
								util.Control.redraw(app, "lblRowCnt_rptCsrEnroll");
							}
							
							if(util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
						}
					);
					
				}
				
				/**
				 * @desc 작업저장
				 * @param poCallbackFunc 콜백함수
				 * @return Boolean
				 * @author Choi In Seong 2016. 2. 1
				 */
				function doSubSave(poCallbackFunc) {
					// 리피터 변경사항 체크
					if(!util.Grid.isModified(app, ["grdCsrEnroll"], null)){
						moPage.parentSendMsg("lblTitleRptCsrEnroll",NLS.WRN.M007);
						if(util.isFunc(poCallbackFunc)) poCallbackFunc(false);
						return false;
					}
					//리피트 validation check
					if(!util.validate(app, "grdCsrEnroll")){
						if(util.isFunc(poCallbackFunc)) poCallbackFunc(false);
						return false;
					}
					
					//strCommand: save 
					util.Submit.send(app, "subSave", function(pbSuccessSave) {
							if(pbSuccessSave) {
								var voCallBackSaveAfter = function(pbSuccessAfter) {
									if(pbSuccessAfter) {
										//저장성공 메세지 출력
										doList(function(pbSuccessList) {
											// 조회 : "조회되었습니다." header 메세지 표시
											if(pbSuccessList) {
												util.Control.setEnable(app, true, ["grpData"]);
												moPage.parentSendMsg("lblTitleRptCsrEnroll",NLS.INF.M025);
											}
											if(util.isFunc(poCallbackFunc))	poCallbackFunc(pbSuccessList);
										});
									}
								};
								ExtSubPage.getParent().callScript("doSaveAfter", voCallBackSaveAfter);
							}
						}
					);
				};
				
				/**
				 * @desc 부모 헤더에 메세지 뿌리기
				 * @param psCtrlId 
				 * @param psMsgCode 
				 * @return void
				 * @author Choi In Seong 2016. 2. 1
				 */
				moPage.parentSendMsg = function(psCtrlId, psMsgCodeNm) {
					var vsMsg = ExtControl.getTextValue(psCtrlId);
					vsMsg     = "[" + vsMsg + "]";
				
					util.Msg.notify(app, vsMsg + psMsgCodeNm);	
				};
				
				/**
				 * @desc 등록신규시, 최종학적상태확인
				 * @param 
				 * @return boolean
				 * @author Choi In Seong 2016. 2. 1
				 */
				function doCheckNewRegi() {
					util.DataMap.setValue(app, "dmReqKey", "strStudId", msStudId);
					//strCommand: status 
					util.Submit.send(app, "subStatus", function(pbSuccess) {
							if (pbSuccess) {
								
								var vsStatRcd = util.DataMap.getValue(app, "dmResStatus", "statRcd");
								
								//학적상태가 없거나, 재학, 휴학 인 경우만 신규등록 가능
								if (ValueUtil.isNull(vsStatRcd) || vsStatRcd == "CT301ATTE" || vsStatRcd == "CT301ABSE") {
									ExtPopUp.openLayeredPopup("/xtm/csr/stdCsrPMstRegInit.xtm", 600, 345);
								} else {
									//그외는 error 메시지 
									var vsStatNm = util.DataMap.getValue(app, "dmResStatus", "statNm");
									util.Msg.alert("NLS-CSR-M022", [vsStatNm, NLS.CSR.M050]);
									return false;
								}
							}
						}
					);
				};
				
				/**
				 * @desc pop up창 띄울때 check로직  & 데이터를 담아줌(dsRegi)
				 * @param voConId 컨트롤 아이디
				 * @return boolean
				 * @author Choi In Seong 2016. 2. 1
				 */
				function doCheckCallPopUp(voConId) {
					
					var voIndex = util.Grid.getIndex(app, "grdCsrEnroll");
								
					// 선택된 Grid의 Row가져옴 
					if (ValueUtil.isNull(voIndex)||voIndex==0) {
						//라인선택 안됨 
						util.Msg.alert("NLS-INF-M023")
						return false;
					}
					
					//선택된 라인의 등록상태를 가져옴 
					
					var vsEnrollStat = util.Grid.getCellValue(app, "grdCsrEnroll", "REG_STAT_RCD", voIndex);
					
					//등록상태가아니면 메시지   "CT109ENRO"
					if (vsEnrollStat != "CT109ENRO") {
						var vsEnrollStatNm = util.Grid.getCellValue(app, "grdCsrEnroll", "REG_STAT_NM", voIndex);
						var vsRegiCls = NLS.CSR.M054; //취소
						var vsRegiChg = NLS.CSR.M051; //변경
						switch (voConId) {
							case "btnNewChange" : {
								util.Msg.alert("NLS-CSR-M002", [vsEnrollStatNm, vsRegiChg]);
								return false;
							}
							case "btnNewCancel" : {
								util.Msg.alert("NLS-CSR-M002", [vsEnrollStatNm, vsRegiCls]);
								return false;
							}
						}
					}
					
					//등록 PopUp에 넘길 key값 세팅 
					moPObject.moRegiObj.studId 			= util.Grid.getCellValue(app, "grdCsrEnroll", "STUD_ID", 				voIndex);
					moPObject.moRegiObj.regStatRcd 	= util.Grid.getCellValue(app, "grdCsrEnroll", "REG_STAT_RCD", 		voIndex);
					moPObject.moRegiObj.enrollDivRcd	= util.Grid.getCellValue(app, "grdCsrEnroll", "ENROLL_DIV_RCD", 	voIndex);
					moPObject.moRegiObj.spDivRcd 		= util.Grid.getCellValue(app, "grdCsrEnroll", "SP_DIV_RCD", 			voIndex);
					moPObject.moRegiObj.schYearRcd	= util.Grid.getCellValue(app, "grdCsrEnroll", "SCH_YEAR_RCD", 		voIndex);
					moPObject.moRegiObj.smtRcd		= util.Grid.getCellValue(app, "grdCsrEnroll", "SMT_RCD", 				voIndex);
					moPObject.moRegiObj.saCd 			= util.Grid.getCellValue(app, "grdCsrEnroll", "SA_CD", 					voIndex);
					moPObject.moRegiObj.spCd 			= util.Grid.getCellValue(app, "grdCsrEnroll", "SP_CD", 					voIndex);
					moPObject.moRegiObj.procDt 			= util.Grid.getCellValue(app, "grdCsrEnroll", "PROC_DT", 				voIndex);
					moPObject.moRegiObj.keyDt  			= util.Grid.getCellValue(app, "grdCsrEnroll", "ST_DT", 					voIndex);
					return true;
				};
				
				/**
				 * @desc 변경여부 반환
				 * @param 
				 * @return boolean 변경여부
				 * @author Choi In Seong 2016. 2. 1
				 */
				function doCheckDataChange() {
					if(util.Grid.isModified(app, ["grdCsrEnroll"], "CRM") ){
						return false;
					}else{
						return true;
					}
				};
				
				/**
				 * @desc 신규등록 팝업 호출
				 * @param   
				 * @return void
				 * @author Choi In Seong 2016. 2. 1
				 */
				moPage.onClick_BtnNew = function() {
					//해당 리피트 insertRow 후 편집 시작할 컬럼 지정
					doCheckNewRegi();
				};
			
				/**
				 * @desc 등록변경 팝업 호출
				 * @param 
				 * @return boolean 변경여부
				 * @author Choi In Seong 2016. 2. 1
				 */
				moPage.onClick_BtnChange = function() {
					var vbCheckCallPopUp = moPage.doCheckCallPopUp("btnNewChange");
					if (vbCheckCallPopUp) {
						ExtPopUp.openLayeredPopup("/xtm/csr/stdCsrPMstRegChg.xtm", 600, 575);
					}
				};
			
				/**
				 * @desc 등록취소 팝업 호출
				 * @param 
				 * @return boolean 변경여부
				 * @author Choi In Seong 2016. 2. 1
				 */
				moPage.onClick_BtnCancel = function() {
					var vbCheckCallPopUp = moPage.doCheckCallPopUp("btnNewCancel");
					if (vbCheckCallPopUp) {
						ExtPopUp.openLayeredPopup("/xtm/csr/stdCsrPMstRegCancel.xtm", 610, 365);
					}
				};
			
				
				/**
				 * @desc 등록정보 저장
				 * @param 
				 * @return boolean 변경여부
				 * @author Choi In Seong 2016. 2. 1
				 */
				moPage.onClick_BtnSave = function() {
					doSubSave();
				};
			
				/**
				 * @desc 조회버튼 클릭
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 2. 1
				 */
				moPage.onClick_BtnSearch = function() {
					 //작업영역 리피트 변경 내역 체크
					if(util.Grid.isModified(app, "", "CRM")){
						return false;
					}
					doList(function(pbSuccess) {
						// 조회 : "조회되었습니다." header 메세지 표시
						if (pbSuccess) {
							util.Control.setEnable(app, true, ["grpData"]);
							moPage.parentSendMsg("lblTitleRptCsrEnroll", NLS.INF.M024);
						}
					});
				};
				
				/**
				 * @desc 등록정보 조회
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 2. 1
				 */
				moPage.onValueChanged_CkbCancel = function() {
					doList(function(pbSuccess) {
						// 조회 : "조회되었습니다." header 메세지 표시
						if (pbSuccess) {
							moPage.parentSendMsg("lblTitleRptCsrEnroll", NLS.INF.M024);
						}
					});
				};
				
				/**
				 * @desc 팝업이 닫이면서 조회 실행
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 2. 1
				 */
				function doPopCallList() {
					var voCallBackSaveAfter = function(pbSuccessAfter) {
						if(pbSuccessAfter) {
							moPage.parentSendMsg("lblTitleRptCsrEnroll",NLS.INF.M025);
						}
					};
					ExtSubPage.getParent().callScript("doSaveAfter", voCallBackSaveAfter);
				};
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsYearList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsCsrEnroll");
			dataSet_2.parseData({
				"info": "CSR_ENROLL@STUD_ID,REG_STAT_RCD,ENROLL_DIV_RCD,SP_DIV_RCD,SCH_YEAR_RCD,SMT_RCD,SA_CD,SP_CD,PROC_DT",
				"columns": [
					{"name": "STUD_ID"},
					{"name": "REG_STAT_RCD"},
					{"name": "REG_STAT_NM"},
					{"name": "ENROLL_DIV_RCD"},
					{"name": "ENROLL_DIV_NM"},
					{"name": "SP_DIV_RCD"},
					{"name": "SP_DIV_NM"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SCH_YEAR_NM"},
					{"name": "SMT_RCD"},
					{"name": "SMT_NM"},
					{"name": "SA_CD"},
					{"name": "SA_NM"},
					{"name": "SP_CD"},
					{"name": "SP_NM"},
					{"name": "ST_DT"},
					{"name": "PROC_DT"},
					{"name": "END_DT"},
					{"name": "OG_CD"},
					{"name": "OG_NM"},
					{"name": "ENROLL_RSN_RCD"},
					{"name": "ENROLL_RSN_NM"},
					{"name": "ENROLL_CANCEL_RSN_RCD"},
					{"name": "ENROLL_CANCEL_RSN_NM"},
					{"name": "CUR_APLY_YEAR_RCD"},
					{"name": "CUR_APLY_YEAR_NM"},
					{"name": "REF_KEY"},
					{"name": "UREF_KEY"},
					{"name": "SHREG_ALT_KEY"},
					{"name": "PRI"},
					{"name": "CANCEL_DT"},
					{"name": "ENROLL_DT"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strStudId",
						"dataType": "string"
					},
					{
						"name": "strCancelYn",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmResStatus");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "statNm",
						"dataType": "string"
					},
					{
						"name": "statRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/csr/StdCsrMstRegi/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/csr/StdCsrMstRegi/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subSave");
			submission_3.action = "/csr/StdCsrMstRegi/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataSet_2);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subStatus");
			submission_4.action = "/csr/StdCsrMstRegi/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_1);
			submission_4.addResponseData(dataMap_2, false);
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpSearchRegi");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.visible = false;
				button_1.value = "조회";
				button_1.style.setClasses(["btn-search"]);
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "0px",
					"left": "110px",
					"width": "15px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "5px",
				"left": "465px",
				"width": "115px",
				"height": "25px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaSbpHeader");
			if(typeof onEmaSbpHeaderAppReady == "function") {
				embeddedApp_1.addEventListener("app-ready", onEmaSbpHeaderAppReady);
			}
			cpr.core.App.load("app/imp/impSbpHeader", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "450px",
				"left": "50px",
				"width": "96px",
				"height": "25px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_1 = linker.userDefinedControl_1 = new udc.com.comTitle();
				userDefinedControl_1.bind("title").toLanguage("");
				container.addChild(userDefinedControl_1, {
					"top": "5px",
					"left": "5px",
					"width": "265px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnNew");
				button_2.value = "";
				button_2.style.setClasses(["btn-new"]);
				button_2.bind("value").toLanguage("UI-SCR-NEWREG");
				if(typeof onBtnNewClick == "function") {
					button_2.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "765px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnNewChange");
				button_3.value = "";
				button_3.style.setClasses(["btn-new"]);
				button_3.bind("value").toLanguage("UI-SCR-REGCHG");
				if(typeof onBtnNewChangeClick == "function") {
					button_3.addEventListener("click", onBtnNewChangeClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "830px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnNewCancel");
				button_4.value = "";
				button_4.style.setClasses(["btn-new"]);
				button_4.bind("value").toLanguage("UI-SCR-REGCANCL");
				if(typeof onBtnNewCancelClick == "function") {
					button_4.addEventListener("click", onBtnNewCancelClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "895px",
					"width": "60px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button("btnSave");
				button_5.value = "";
				button_5.style.setClasses(["btn-save"]);
				button_5.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_5.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_5, {
					"top": "5px",
					"left": "960px",
					"width": "60px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCsrEnroll");
				grid_1.init({
					"dataSet": app.lookup("dsCsrEnroll"),
					"columns": [
						{"width": "25px"},
						{"width": "40px"},
						{"width": "85px"},
						{"width": "68px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "289px"},
						{"width": "145px"},
						{"width": "80px"},
						{"width": "80px"},
						{"width": "135px"},
						{"width": "80px"},
						{"width": "80px"},
						{"width": "96px"},
						{"width": "125px"},
						{"width": "110px"},
						{"width": "60px"},
						{"width": "110px"},
						{
							"width": "85px",
							"visible": false
						},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "90px",
							"visible": false
						},
						{
							"width": "90px",
							"visible": false
						},
						{
							"width": "60px",
							"visible": false
						},
						{
							"width": "90px",
							"visible": false
						},
						{
							"width": "95px",
							"visible": false
						},
						{
							"width": "95px",
							"visible": false
						},
						{
							"width": "80px",
							"visible": false
						},
						{
							"width": "75px",
							"visible": false
						},
						{
							"width": "75px",
							"visible": false
						},
						{
							"width": "90px",
							"visible": false
						},
						{
							"width": "90px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SCH_YEAR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SCHREGRSN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-ENROLLDT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SA");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SP");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-ST_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-END_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-OG");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-REGSTATU");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-CANCEL_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SCHRGNRSN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SUBPROCYRS");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SCREGDIV");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PRI");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SPCORSDIV");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-ENROLL_DIV_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-SP_DIV_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 20},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-SCH_YEAR_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 21},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-SMT_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 22},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-SA_CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 23},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-SP_CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 24},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-PROC_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 25},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-OG_CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 26},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-ENROLL_RSN_RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 27},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-CANCLWHY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 28},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-REF_KEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 29},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-UREF_KEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 30},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SHREG_ALT_KEY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 31},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-SCR-STUID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 32},
								"configurator": function(cell){
									cell.style.setClasses(["require"]);
									cell.bind("text").toLanguage("UI-DB-REG_STAT_RCD");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.control = (function(){
										var output_1 = new cpr.controls.Output();
										output_1.style.css({
											"text-align" : "center"
										});
										return output_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "SCH_YEAR_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "SMT_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "ENROLL_RSN_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "ENROLL_DT";
									cell.control = (function(){
										var output_2 = new cpr.controls.Output("gdOptRegStatNm1");
										output_2.dataType = "date";
										output_2.format = "YYYY-MM-DD";
										output_2.style.css({
											"text-align" : "center"
										});
										output_2.bind("value").toDataColumn("ENROLL_DT");
										return output_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "SA_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "SP_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "ST_DT";
									cell.control = (function(){
										var output_3 = new cpr.controls.Output("gdOptStDt");
										output_3.dataType = "date";
										output_3.format = "YYYY-MM-DD";
										output_3.style.css({
											"text-align" : "center"
										});
										output_3.bind("value").toDataColumn("ST_DT");
										return output_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "END_DT";
									cell.control = (function(){
										var output_4 = new cpr.controls.Output("gdOptEndDt");
										output_4.dataType = "date";
										output_4.format = "YYYY-MM-DD";
										output_4.style.css({
											"text-align" : "center"
										});
										output_4.bind("value").toDataColumn("END_DT");
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "OG_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "REG_STAT_NM";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "CANCEL_DT";
									cell.control = (function(){
										var output_5 = new cpr.controls.Output("gdOptCancelDt");
										output_5.dataType = "date";
										output_5.format = "YYYY-MM-DD";
										output_5.style.css({
											"text-align" : "center"
										});
										output_5.bind("value").toDataColumn("CANCEL_DT");
										return output_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "ENROLL_CANCEL_RSN_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "CUR_APLY_YEAR_RCD";
									cell.control = (function(){
										var comboBox_1 = new cpr.controls.ComboBox("gdCbbCurAplyYearRcd");
										(function(comboBox_1){
											comboBox_1.setItemSet(app.lookup("dsYearList"), {
												"label": "CD_NM",
												"value": "CD"
											});
										})(comboBox_1);
										comboBox_1.bind("value").toDataColumn("CUR_APLY_YEAR_RCD");
										return comboBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.columnName = "ENROLL_DIV_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.columnName = "PRI";
									cell.style.css({
										"text-align" : "right"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.columnName = "SP_DIV_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.columnName = "ENROLL_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.columnName = "SP_DIV_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 20},
								"configurator": function(cell){
									cell.columnName = "SCH_YEAR_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 21},
								"configurator": function(cell){
									cell.columnName = "SMT_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 22},
								"configurator": function(cell){
									cell.columnName = "SA_CD";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("gdIpbSaCd");
										inputBox_1.maxLength = 10;
										inputBox_1.userAttr({"require": "Y"});
										inputBox_1.bind("value").toDataColumn("SA_CD");
										return inputBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 23},
								"configurator": function(cell){
									cell.columnName = "SP_CD";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("gdIpbSpCd");
										inputBox_2.maxLength = 10;
										inputBox_2.userAttr({"require": "Y"});
										inputBox_2.bind("value").toDataColumn("SP_CD");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 24},
								"configurator": function(cell){
									cell.columnName = "PROC_DT";
									cell.control = (function(){
										var dateInput_1 = new cpr.controls.DateInput("gdDipProcDt");
										dateInput_1.userAttr({"require": "Y"});
										dateInput_1.bind("value").toDataColumn("PROC_DT");
										return dateInput_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 25},
								"configurator": function(cell){
									cell.columnName = "OG_CD";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("gdIpbOgCd");
										inputBox_3.maxLength = 10;
										inputBox_3.bind("value").toDataColumn("OG_CD");
										return inputBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 26},
								"configurator": function(cell){
									cell.columnName = "ENROLL_RSN_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 27},
								"configurator": function(cell){
									cell.columnName = "ENROLL_CANCEL_RSN_RCD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 28},
								"configurator": function(cell){
									cell.columnName = "REF_KEY";
									cell.control = (function(){
										var inputBox_4 = new cpr.controls.InputBox("gdIpbRefKey");
										inputBox_4.maxLength = 50;
										inputBox_4.userAttr({"require": "Y"});
										inputBox_4.bind("value").toDataColumn("REF_KEY");
										return inputBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 29},
								"configurator": function(cell){
									cell.columnName = "UREF_KEY";
									cell.control = (function(){
										var inputBox_5 = new cpr.controls.InputBox("gdIpbUrefKey");
										inputBox_5.maxLength = 50;
										inputBox_5.bind("value").toDataColumn("UREF_KEY");
										return inputBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 30},
								"configurator": function(cell){
									cell.columnName = "SHREG_ALT_KEY";
									cell.control = (function(){
										var inputBox_6 = new cpr.controls.InputBox("gdIpbShregAltKey");
										inputBox_6.maxLength = 50;
										inputBox_6.bind("value").toDataColumn("SHREG_ALT_KEY");
										return inputBox_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 31},
								"configurator": function(cell){
									cell.columnName = "STUD_ID";
									cell.control = (function(){
										var inputBox_7 = new cpr.controls.InputBox("gdIpbStudId");
										inputBox_7.maxLength = 20;
										inputBox_7.userAttr({"require": "Y"});
										inputBox_7.bind("value").toDataColumn("STUD_ID");
										return inputBox_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 32},
								"configurator": function(cell){
									cell.columnName = "REG_STAT_RCD";
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1015px",
					"height": "428px"
				});
				var checkBox_1 = new cpr.controls.CheckBox("ckbCancel");
				checkBox_1.value = "";
				checkBox_1.trueValue = "Y";
				checkBox_1.falseValue = "";
				checkBox_1.text = "취소내역포함";
				checkBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strCancelYn");
				if(typeof onCkbCancelValueChange == "function") {
					checkBox_1.addEventListener("value-change", onCkbCancelValueChange);
				}
				container.addChild(checkBox_1, {
					"top": "5px",
					"left": "650px",
					"width": "105px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "0px",
				"left": "0px",
				"width": "1025px",
				"height": "463px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_1.ctrl = linker.grid_1;
		}
	});
	app.title = "stdCsrSMstRegi";
	cpr.core.Platform.INSTANCE.register(app);
})();
