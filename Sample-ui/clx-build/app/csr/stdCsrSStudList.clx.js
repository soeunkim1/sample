/*
 * App URI: app/csr/stdCsrSStudList
 * Source Location: app/csr/stdCsrSStudList.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/csr/stdCsrSStudList", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			///<xtmlink path="./stdCsrSStudList.xtm"/>
			
			var stdCsrSStudList = function() {
			
				var moPage = new Page();
				//임포트용 데이터 통신 오브젝트
				var moPObject = new PObject();
			
			
				/******************************************************************************************************
				 *  객체검색팝업 관련 설정사항
				 *  ▶ 설정가능 유형
				 *      1. 인스턴스
				 *      2. 리피트 디테일 셀 ID
				 *      3. 컨트롤 ID
				 *  ▶ 각 변수별 설명
				 *      iXXX : 팝업에 전달될  input 파라미터
				 *      oXXX : 팝업에서 선택한 값을 받을 데이터
				 *  	1. controlId 		: 최초 이벤트의 버튼이나 그리드 id             (필수)
				 *  	2. iCd 				: 검색조건 부서코드                                 (선택) 
				 *  	3. iNm 				: 검색조건 부서명									(선택)	
				 *  	4. iObjDivRcd 	: 검색될 객체구분코드 종류						(필수)
				 *								  (CC009OG : "행정부서", CC009SA : "학사부서", CC009SP : "이수과정", CC009CU : "교과그룹", CC009OT : "외부부서")
				 *  	5. iStartObject 	: 검색시작부서 										(선택)
				 *								  ("CC009OG20000,CC009OG70000",) 
				 *		6. iOtDivRcd 		: 외부부서구분코드 									(선택)
				 *								  (외부부서[CC009OT]일때 사용) ("CB008UNIV, CB008HSCL")
				 *		7. iOtIsTreeView	: 트리보이기 유무 									(선택)
				 *								  default : N (외부부서[CC009OT]일때 사용) "Y" 
				 *  	8. iLanDivRcd 	: 언어키													(선택)
				 *  	9. iKeyDate 		: 기준일													(필수)
				 *  	10. oObjDivRcd 	: 객체구분코드 
				 *  	11. oCd 			: 부서코드
				 *  	12. oCdNm 		: 부서명
				 *  	13. oBegDt 		: 시작일
				 *  	14. oEndDt 		: 종료일
				 *  	15. oLanDivRcd 	: 언어키
				 *  	16. func 			: 팝업에서 선택한 값을 받은 후 추가 로직이 필요한 경우 함수
				 *									  
				 *******************************************************************************************************/	
				moPObject.moIdsForStdCmnPObjSch = [
					{   //조회조건 행정부서 학사부서
						controlId			:	"btnPopSearch",
						iCd					:	"",
						iNm					:	"ipbSaNm",
						iObjDivRcd			:	["CC009SA", "CC009OG"],
						iStartObject    	:   "",
						iOtDivRcd			:	"",
						iOtIsTreeView	:	"Y",
						iLanDivRcd		:	"",
						iKeyDate			:	"19000101",
						iKeyEndDate		:	"99991231",
						oObjDivRcd		:	"/root/reqList/strObjDivRcd",
						oCd					:	"/root/reqList/strSaCd",
						oCdNm				:	"ipbSaNm",
						oBegDt				:	"",
						oEndDt				:	"/root/reqList/strSaEndDt",
						oLanDivRcd		:	"",
						func 					:  null
					}
				];
				
				/*******************필수정의사항 start**********************/ 
				/**
				 * 교직원검색팝업 관련 설정사항
				 * 각 변수별 설명
				 *  iXXX : 팝업으로 input 전달될 파라미터
				 *  oXXX : 팝업에서 선택한 값을 받을 컬럼 아이디
				 *  [IN]
				 *   1. controlId					: (필수) 최초 이벤트의 버튼id
				 *   2. istrStaffGrpAuth			: (선택) 교직원 그룹에 대한 인사자료권한 적용여부(적용시 : true)
				 *   3. istrWkdtyAuth			: (선택) 보직에 해당되는 사람 조회여부(조회시 : true), 현재사용하지 않음(2013.04.11)
				 *   4. iKeyDate					: (선택) 기준일자(NULL일 경우 현재일자)
				 *   4. iStaffNo					: (선택) 교직원번호
				 *   5. iStaffGrpRcd				: (선택) 교직원 그룹[CF001]
				 *   6. iStaffGrpRcdLock		: (선택) 교직원그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
				 *   7. iStaffSubGrpRcd		: (선택) 교직원 하위그룹[CF003]
				 *   8. iStaffSubGrpRcdLock	: (선택) 교직원 하위그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
				 *   9. iStatusRcd				: (선택) 상태[CF005](재직, 휴직, 퇴직 등을 말함)
				 *  10. iRepNm					: (선택) 성명
				 *  11. iObjDivRcd				: (선택) 객체구분코드[CC009]
				 *  12. iObjCd						: (선택) 부서코드
				 *  13. iObjNm					: (선택) 부서명
				 *  14. istrObjCdInList			: (선택) 복수 행정부서 지정(부서에 대한 IN조건 "'A','B','C'" 형식으로 셋팅)
				 *  15. iWkgrdRcd				: (선택) 직급[CF007]
				 *  [OUT]
				 *  16. oObjNo					: 오브젝트번호
				 *  17. oStaffNo					: 교직원번호
				 *  18. oRepNm					: 성명
				 *  19. oBirthday					: 생년월일
				 *  20. oStatNm					: 상태명
				 *  21. oStatRcd					: 상태코드
				 *  22. oOgNm					: 부서명
				 *  23. oOgCd						: 부서코드
				 *  24. oPosNm					: 포지션명
				 *  25. oPosCd					: 포지션코드
				 *  26. oWkgrdNm				: 직급명
				 *  27. oWkgrdRcd				: 직급코드
				 *  28. oStaffGrpRcd			: 교직원그룹코드
				 *  29. oStaffSubGrpRcd		: 교직원하위그룹코드
				 *  30. oHoRcd					: 호봉코드
				 *  31. oSsn						: 주민등록번호
				 *  32. oWkdtyRcd				: 직책코드
				 *  33. oWkdtyNm				: 직책명
				 *  34. func						: 팝업에서 선택한 값을 받은 후 추가 로직이 필요한 경우 함수 작성
				 */ 
				 moPObject.moIdsForStdCmnPPrsnSearch = [
					 { 
						 controlId					: "btnPopProfSearch",				//(필수) 교직원검색 버튼ID
						 istrStaffGrpAuth			: "",										//(선택) 셋팅 교직원 그룹에 대한 인사자료권한 적용여부(적용시 : true)
						 istrWkdtyAuth			: "true",									//(선택) 셋팅 보직에 해당되는 사람 조회여부(조회시 : true), 현재사용하지 않음(2013.04.11)
						 iKeyDate					: "/root/reqList/strKeyDate",	//(선택) 셋팅 기준일자(NULL일 경우 현재일자)
						 iStaffNo					: "ipbProfNm",						//(선택) 셋팅 교직원번호
						 iStaffGrpRcd				: "",										//(선택) 셋팅 교직원그룹
						 iStaffGrpRcdLock		: "", 										//(선택) 셋팅 교직원그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
						 iStaffSubGrpRcd		: "",										//(선택) 셋팅 교직원 하위그룹[CF003]
						 iStaffSubGrpRcdLock	: "",										//(선택) 셋팅 교직원 하위그룹 잠금적용여부(적용시 : true), 교직원 팝업에서 조건변경해도 활성안됨.
						 iStatusRcd				: "",										//(선택) 셋팅 상태[CF005](재직, 휴직, 퇴직 등을 말함)
						 iRepNm					: "",										//(선택) 셋팅 성명
						 iObjDivRcd				: "",										//(선택) 셋팅 객체구분코드[CC009]
						 iObjCd						: "",										//(선택) 셋팅 부서코드
						 iObjNm					: "",										//(선택) 셋팅 부서명
						 istrObjCdInList			: "",										//(선택) 셋팅 복수 행정부서 지정(부서에 대한 IN조건 "'A','B','C'" 형식으로 셋팅)
						 iWkgrdRcd				: "",										//(선택) 셋팅 직급[CF007]
						  
						 oObjNo					: "ipbProfId",							//리턴 오브젝트번호
						 oStaffNo					: "",										//리턴 교직원번호
						 oRepNm					: "ipbProfNm",						//리턴 성명
						 oBirthday					: "",										//리턴 생년월일[CF001]
						 oStatNm					: "",										//리턴 상태명
						 oStatRcd					: "",										//리턴 상태코드
						 oOgNm					: "",										//리턴 부서명
						 oOgCd						: "",										//리턴 부서코드
						 oPosNm					: "",										//리턴 직위명
						 oPosCd					: "",										//리턴 직위코드
						 oWkgrdNm				: "",										//리턴 직급명
						 oWkgrdRcd				: "",										//리턴 직급
						 oStaffGrpRcd				: "",										//리턴 교직원그룹 
						 oStaffSubGrpRcd		: "",										//리턴 교직원 하위그룹 
						 oHoRcd					: "",										//리턴 호봉코드
						 oSsn						: "",										//리턴 주민번호
						 oWkdtyRcd				: "",										//리턴 직책코드 
						 oWkdtyNm				: "",										//리턴 직책명 
						 func                         : null
					 }
				];
				
				
				/**
				 * @desc 헤더 임포트 온로드
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
			     */
				moPage.onLoadImportDone_ImpTitle = function() {
					doHeaderOnLoad();
				};
			
				/**
				 * @desc 화면 온로드
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onModelConstructDone_stdCsrSStudList = function() {
					//리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init("rptCsrShreg");
					// 2. 검색조건 초기 설정
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", ["grpData"]);
					
					//서브미션 실행 (실패시 cover page)
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							util.DataMap.setValue(app, "dmReqList", "strKeyDate", util.DataMap.getValue(app, "dmResOnLoad", "strKeyDate"));
							
							if(moPageInfo.authRngRcd == "CC00102"){
								//strCommand: listTopObjInfo 
								util.Submit.send(app, "subImpStdCmnObjSchTopObjInfo", function(pbSuccess){
									ExtInstance.setValue("/root/reqList/strTopSaCd", ExtInstance.getValue("instance('insStdCmnPObjSch')/root/resListObjInfo/strObjCd"));
								});
							}
							
							util.Control.reset(app, ["ipbSaNm", "ipbSaCd"]);
							
							util.DataMap.setValue(app, "dmReqList", "strObjDivRcd", "");	
							util.Control.redraw(app, ["dipKeyDate", "cbbDgrCrsRcd", "cbbRegFeeCatRcd", "cbbDayNight", "cbbStudDivRcd", "cbbClass", "cbbNation", "cbbGender", "cbbStatus"]);
						}
					});
				}
			
				/**
				 * @desc 학생목록 조회
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				function doList(poCallBackFunc) {
					
					var vsHeaderValues = ContextUtil.setRptColFilterExcelInfo("rptCsrShreg");
					var vsRepeatNm = util.Grid.getTitle(app, "grdCsrShregCsrShreg");
					util.DataMap.setValue(app, "dmReqList", "strHeaderList", vsHeaderValues);
					util.DataMap.setValue(app, "dmReqList", "strExcelFileNm", vsRepeatNm);
					
					// submission call 
					//strCommand: list 
					util.Submit.send(app, "subList",  function(pbSuccess) {
						if(pbSuccess){
			
							var vsFileDir = util.DataMap.getValue(app, "dmExcelFileInfo", "strFileDir");
							//파일명
							var vsFileNm = util.DataMap.getValue(app, "dmExcelFileInfo", "strFileNm");
							//변환파일명(실제 서버에 저장된 파일명)
							var vsFileChgNm = util.DataMap.getValue(app, "dmExcelFileInfo", "strFileChgNm");
							var vsTmpFilePath = util.DataMap.getValue(app, "dmExcelFileInfo", "strTmpFilePath");
			
							var vsLmtNum = util.DataMap.getValue(app, "dmResList", "strLimitCnt");
							
							if(!(ValueUtil.isNull(vsFileNm) || vsFileNm == "")){
								var voFileParam = {
										"strFileSubPath" : "",
										"strFileNm" : vsFileChgNm,
										"strOriFileNm" : vsFileNm,
										"strTmpFilePath" :vsTmpFilePath,
										"strCommand" : "fileDownLoad"
								}
								util.Msg.alert("NLS-INF-M070", [vsLmtNum]);
								
								//다운로드 받을 파일 위치, 다운로드받을 파일이름, 프로그래스동작여부(일단 ""), actionUrl
								FileUtil.downloadFile( "/std.cmn.StdCmnFileTransUtil.ex",voFileParam);
								util.DataMap.setValue(app, "dmExcelFileInfo", "strFileDir","");
								util.DataMap.setValue(app, "dmExcelFileInfo", "strFileNm","");
								util.DataMap.setValue(app, "dmExcelFileInfo", "strFileChgNm","");
								util.DataMap.setValue(app, "dmExcelFileInfo", "strTmpFilePath","");
								return;
							}else{
								util.DataMap.setValue(app, "dmExcelFileInfo", "strFileDir","");
								util.DataMap.setValue(app, "dmExcelFileInfo", "strFileNm","");
								util.DataMap.setValue(app, "dmExcelFileInfo", "strFileChgNm","");
								util.DataMap.setValue(app, "dmExcelFileInfo", "strTmpFilePath","");
							}
								
							//rebuild
							util.Control.redraw(app, ["rptCsrShreg"]);
						}else{
								return false;
						}
						
						if(util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				}
				
				/**
				 * @desc 객체 검색
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onValueChanged_IpbSaCd = function(sender) {
					doOnChangeStdCmnPObjSch(sender);
				}
				
				/**
				 * @desc 객체검색 팝업 호출
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onClick_BtnPopSearch = function(sender) {
					// 기준일자 체크
					var vsKeyDate = util.Control.getValue(app, "dipKeyDate");
					var vsTitle = ExtControl.getTextValue("lblKeyDate");
					if (ValueUtil.isNull(vsKeyDate)) {
						//기준일자를 입력하여 주십시오.
						util.Msg.alert("NLS-CSR-M121",[vsTitle]);
						return;
					}
					doOnClickStdCmnPObjSch(sender);
				}
				
				/**
				 * @desc 소속 검색
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onValueChanged_IpbSaNm = function(sender) {
					// 기준일자 체크
					var vsKeyDate = util.Control.getValue(app, "dipKeyDate");
					var vsTitle = ExtControl.getTextValue("lblKeyDate");
					if (ValueUtil.isNull(vsKeyDate)) {
						//기준일자를 입력하여 주십시오.
						util.Msg.alert("NLS-CSR-M121",[vsTitle]);
						return;
					}
					
					doOnChangeStdCmnPObjSch(sender);
				}
				
				/**
				 * @desc 교직원 검색 팝업 호출
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onClick_BtnPopProfSearch = function(sender) {
					// 기준일자 체크
					var vsKeyDate = util.Control.getValue(app, "dipKeyDate");
					var vsTitle = ExtControl.getTextValue("lblKeyDate");
					if (ValueUtil.isNull(vsKeyDate)) {
						//기준일자를 입력하여 주십시오.
						util.Msg.alert("NLS-CSR-M121",[vsTitle]);
						return;
					}
					doOnClickStdCmnPPrsnSearch(sender);
				};
				
				/**
				 * @desc 교직원 검색
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onValueChanged_IpbProfNm = function(sender) {
					// 기준일자 체크
					var vsKeyDate = util.Control.getValue(app, "dipKeyDate");
					var vsTitle = ExtControl.getTextValue("lblKeyDate");
					if (ValueUtil.isNull(vsKeyDate)) {
						//기준일자를 입력하여 주십시오.
						util.Msg.alert("NLS-CSR-M121",[vsTitle]);
						return;
					}
					doOnChangeStdCmnPPrsnSearch(sender);
				};
				
				/**
				 * @desc 학생목록 조회 버튼 클릭
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onClick_BtnSearch = function() {
					// 2016.8.10   2개 이상의 조회조건을 입력체크
					if(!doSearchChk()){
						return false;
					}
					
					// 조회조건 필수 체크
					if(!util.validate(app, ["dipKeyDate"])){
						return false;
					}
			
					doList(function(pbSuccess) {
						// 조회 : "조회되었습니다." header 메세지 표시
						if(pbSuccess) {
							util.Msg.notify(app, "NLS.INF.M024");
						}
					});
				};
				
				/**
				 * @desc 수업연한 조회조건에서 엔터시 조회
				 * @param strKeyType
				                 strKeyStatus
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onKeyDown_IpbAss = function(strKeyType, strKeyStatus) {
					if(e.keyCode == cpr.events.KeyCode.ENTER){
						util.Header.clickSearch(app);
					}
				};
				
				/**
				 * @desc 학년 조회조건에서 엔터시 조회
				 * @param strKeyType
				                 strKeyStatus
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onKeyDown_IpbRrocYear = function(strKeyType, strKeyStatus) {
					if(e.keyCode == cpr.events.KeyCode.ENTER){
						util.Header.clickSearch(app);
					}
				};
				
				/**
				 * @desc 학번 조회조건에서 엔터시 조회
				 * @param strKeyType
				                 strKeyStatus
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onKeyDown_IpbStudNo = function(strKeyType, strKeyStatus) {
					if(e.keyCode == cpr.events.KeyCode.ENTER){
						util.Header.clickSearch(app);
					}
				};
				
				/**
				 * @desc 이름 조회조건에서 엔터시 조회
				 * @param strKeyType
				                 strKeyStatus
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onKeyDown_IpbReqNm = function(strKeyType, strKeyStatus) {
					if(e.keyCode == cpr.events.KeyCode.ENTER){
						util.Header.clickSearch(app);
					}
				};
			
				/**
				 * @desc 기준일자 변경시 객체검색과 교직원검색 초기화
				 * @param 
				 * @return void
				 * @author Choi In Seong 2016. 3. 14
				 */
				moPage.onValueChanged_DipKeyDate = function() {
					util.Control.reset(app, ["ipbSaNm", "ipbSaCd", "ipbProfNm", "ipbProfId"]);
					util.DataMap.setValue(app, "dmReqList", "strObjDivRcd", "");	
				};
				
				/**
				 * @desc 조회조건 체크
				 * @param
				 * @return void
				 * @author Choi In Seong 2016. 08. 10.
				 */
				function doSearchChk() {
					var vsSaNm = util.Control.getValue(app, "ipbSaNm");
					var vsSaCd = util.Control.getValue(app, "ipbSaCd");
					var vsBirthDay = util.Control.getValue(app, "dipBirthDay");
					var vsStatus = util.Control.getValue(app, "cbbStatus");
					var vsStudNo = util.Control.getValue(app, "ipbStudNo");
					var vsRepNm = util.Control.getValue(app, "ipbReqNm");
					
					var iSchCnt = 0;
					var vsTopSaCd = util.DataMap.getValue(app, "dmReqList", "strTopSaCd");
			//		if(vsTopSaCd == vsSaCd){
			//			ComMsg.alert(NLS.CSR.M123); //다른 소속을 선택하여 주시기 바랍니다.
			//			return false;
			//		}
					
					if(!ValueUtil.isNull(vsSaNm)){
						iSchCnt = iSchCnt +1;
					}
					
					if(!ValueUtil.isNull(vsStatus)){
						iSchCnt = iSchCnt +1;
					}
					
					if(!ValueUtil.isNull(vsBirthDay)){
						iSchCnt = iSchCnt +1;
					}
					
					if(!ValueUtil.isNull(vsStudNo)){
						// 학번은 최소 2자리이상
						if(vsStudNo.length < 2){
							ComMsg.warn("M101", [NLS.NSCR.STUDID, ""+"2"]);
							util.Control.setFocus(app, "ipbStudNo");
							return false;
						}
						iSchCnt = iSchCnt +1;
					}
					
					if(!ValueUtil.isNull(vsRepNm)){
						iSchCnt = iSchCnt +1;
					}
			
					if (iSchCnt < 1) {
						util.Msg.alert("NLS-CSR-M122"); // 학적상태/특정소속/생년월일/학번/이름 중 하나를 입력하여 주십시오.
						return false;
					}
					
					return true;
				}
			
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsRegFeeCatRcdList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsDayNightList");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsStatusList");
			dataSet_3.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsStudDivRcdList");
			dataSet_4.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsClassList");
			dataSet_5.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsGenderRcdList");
			dataSet_6.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsNatRcdList");
			dataSet_7.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsDgrCrsRcdList");
			dataSet_8.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			
			var dataSet_9 = new cpr.data.DataSet("dsCsrShreg");
			dataSet_9.parseData({
				"columns": [
					{"name": "REP_NM"},
					{"name": "SA_NM"},
					{"name": "DAY_NIGHT_NM"},
					{"name": "STATUS_NM"},
					{"name": "PROC_RSLT"},
					{"name": "CLASS_NM"},
					{"name": "GENDER_NM"},
					{"name": "BIRTHDAY"},
					{"name": "PROF_NM"},
					{"name": "ASS"},
					{"name": "DGR_CRS_NM"},
					{"name": "NAT_NM"},
					{"name": "REG_FEE_CAT_NM"},
					{"name": "STUD_NO"},
					{"name": "STUD_DIV_NM"},
					{"name": "ST_DT"}
				],
				"rows": []
			});
			app.register(dataSet_9);
			var dataMap_1 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_1.parseData({
				"columns" : [{
					"name": "strKeyDate",
					"dataType": "string"
				}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmReqList");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strKeyDate",
						"dataType": "string"
					},
					{
						"name": "strSaNm",
						"dataType": "string"
					},
					{
						"name": "strRegFeeCatRcd",
						"dataType": "string"
					},
					{
						"name": "strAss",
						"dataType": "string"
					},
					{
						"name": "strStudDivRcd",
						"dataType": "string"
					},
					{
						"name": "strStatusRcd",
						"dataType": "string"
					},
					{
						"name": "strProcYear",
						"dataType": "string"
					},
					{
						"name": "strProf",
						"dataType": "string"
					},
					{
						"name": "strClassRcd",
						"dataType": "string"
					},
					{
						"name": "strNatRcd",
						"dataType": "string"
					},
					{
						"name": "strBirthDay",
						"dataType": "string"
					},
					{
						"name": "strGenderRcd",
						"dataType": "string"
					},
					{
						"name": "strStudNo",
						"dataType": "string"
					},
					{
						"name": "strRepNm",
						"dataType": "string"
					},
					{
						"name": "strObjDivRcd",
						"dataType": "string"
					},
					{
						"name": "strSaCd",
						"dataType": "string"
					},
					{
						"name": "strProfId",
						"dataType": "string"
					},
					{
						"name": "strDayNightRcd",
						"dataType": "string"
					},
					{
						"name": "strDgrCrsRcd",
						"dataType": "string"
					},
					{
						"name": "strSaEndDt",
						"dataType": "string"
					},
					{
						"name": "strTopSaNm",
						"dataType": "string"
					},
					{
						"name": "strTopSaCd",
						"dataType": "string"
					},
					{
						"name": "strHeaderList",
						"dataType": "string"
					},
					{
						"name": "strExcelFileNm",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmResList");
			dataMap_3.parseData({
				"columns" : [{
					"name": "strLimitCnt",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmExcelFileInfo");
			dataMap_4.parseData({
				"columns" : [
					{
						"name": "strFileDir",
						"dataType": "string"
					},
					{
						"name": "strFileNm",
						"dataType": "string"
					},
					{
						"name": "strFileChgNm",
						"dataType": "string"
					},
					{
						"name": "strTmpFilePath",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_4);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/csr/StdCsrStudList/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataSet_5, false);
			submission_1.addResponseData(dataSet_6, false);
			submission_1.addResponseData(dataSet_7, false);
			submission_1.addResponseData(dataSet_8, false);
			submission_1.addResponseData(dataMap_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/csr/StdCsrStudList/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_2);
			submission_2.addResponseData(dataSet_9, false);
			submission_2.addResponseData(dataMap_4, false);
			submission_2.addResponseData(dataMap_3, false);
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1160px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optKeyDate");
				output_1.value = "";
				output_1.style.setClasses(["require"]);
				output_1.bind("value").toLanguage("UI-SCR-STDDT");
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "80px",
					"height": "25px"
				});
				var dateInput_1 = new cpr.controls.DateInput("dipKeyDate");
				dateInput_1.userAttr({"require": "Y"});
				dateInput_1.bind("fieldLabel").toExpression("#optKeyDate.value");
				dateInput_1.bind("value").toDataMap(app.lookup("dmReqList"), "strKeyDate");
				if(typeof onDipKeyDateValueChange == "function") {
					dateInput_1.addEventListener("value-change", onDipKeyDateValueChange);
				}
				container.addChild(dateInput_1, {
					"top": "5px",
					"left": "90px",
					"width": "90px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optSaNm");
				output_2.value = "";
				output_2.bind("value").toLanguage("UI-GLS-ASGN");
				container.addChild(output_2, {
					"top": "5px",
					"left": "190px",
					"width": "80px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optDgrCrsRcd");
				output_3.value = "";
				output_3.bind("value").toLanguage("UI-SCR-DGPROC");
				container.addChild(output_3, {
					"top": "5px",
					"left": "450px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbDgrCrsRcd");
				comboBox_1.bind("fieldLabel").toExpression("#optDgrCrsRcd.value");
				comboBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strDgrCrsRcd");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("전체", ""));
					comboBox_1.setItemSet(app.lookup("dsDgrCrsRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"top": "5px",
					"left": "535px",
					"width": "110px",
					"height": "25px"
				});
				var output_4 = new cpr.controls.Output("optRegFeeCatRcd");
				output_4.value = "";
				output_4.bind("value").toLanguage("UI-SCR-TUITICATG");
				container.addChild(output_4, {
					"top": "5px",
					"left": "655px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_2 = new cpr.controls.ComboBox("cbbRegFeeCatRcd");
				comboBox_2.bind("fieldLabel").toExpression("#optRegFeeCatRcd.value");
				comboBox_2.bind("value").toDataMap(app.lookup("dmReqList"), "strRegFeeCatRcd");
				(function(comboBox_2){
					comboBox_2.addItem(new cpr.controls.Item("전체", ""));
					comboBox_2.setItemSet(app.lookup("dsRegFeeCatRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_2);
				container.addChild(comboBox_2, {
					"top": "5px",
					"left": "740px",
					"width": "115px",
					"height": "25px"
				});
				var output_5 = new cpr.controls.Output("optDayNight");
				output_5.value = "";
				output_5.bind("value").toLanguage("UI-DB-DAN-DIV-RCD");
				container.addChild(output_5, {
					"top": "5px",
					"left": "865px",
					"width": "55px",
					"height": "25px"
				});
				var comboBox_3 = new cpr.controls.ComboBox("cbbDayNight");
				comboBox_3.bind("fieldLabel").toExpression("#optDayNight.value");
				comboBox_3.bind("value").toDataMap(app.lookup("dmReqList"), "strDayNightRcd");
				(function(comboBox_3){
					comboBox_3.addItem(new cpr.controls.Item("전체", ""));
					comboBox_3.setItemSet(app.lookup("dsDayNightList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_3);
				container.addChild(comboBox_3, {
					"top": "5px",
					"left": "925px",
					"width": "60px",
					"height": "25px"
				});
				var output_6 = new cpr.controls.Output("optAss");
				output_6.value = "";
				output_6.bind("value").toLanguage("UI-SCR-STUDYYEAR");
				container.addChild(output_6, {
					"top": "5px",
					"left": "995px",
					"width": "80px",
					"height": "25px"
				});
				var numberEditor_1 = new cpr.controls.NumberEditor("ipbAss");
				numberEditor_1.bind("fieldLabel").toExpression("#optAss.value");
				numberEditor_1.bind("value").toDataMap(app.lookup("dmReqList"), "strAss");
				if(typeof onIpbAssKeydown == "function") {
					numberEditor_1.addEventListener("keydown", onIpbAssKeydown);
				}
				container.addChild(numberEditor_1, {
					"top": "5px",
					"left": "1080px",
					"width": "60px",
					"height": "25px"
				});
				var output_7 = new cpr.controls.Output("optStatus");
				output_7.value = "";
				output_7.bind("value").toLanguage("UI-SCR-SCHREGST");
				container.addChild(output_7, {
					"top": "30px",
					"left": "5px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_4 = new cpr.controls.ComboBox("cbbStatus");
				comboBox_4.bind("fieldLabel").toExpression("#optStatus.value");
				comboBox_4.bind("value").toDataMap(app.lookup("dmReqList"), "strStatusRcd");
				(function(comboBox_4){
					comboBox_4.addItem(new cpr.controls.Item("전체", ""));
					comboBox_4.setItemSet(app.lookup("dsStatusList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_4);
				container.addChild(comboBox_4, {
					"top": "30px",
					"left": "90px",
					"width": "90px",
					"height": "25px"
				});
				var output_8 = new cpr.controls.Output("optStudDivRcd");
				output_8.value = "";
				output_8.bind("value").toLanguage("UI-SCR-STDDIS");
				container.addChild(output_8, {
					"top": "30px",
					"left": "190px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_5 = new cpr.controls.ComboBox("cbbStudDivRcd");
				comboBox_5.bind("fieldLabel").toExpression("#optStudDivRcd.value");
				comboBox_5.bind("value").toDataMap(app.lookup("dmReqList"), "strStudDivRcd");
				(function(comboBox_5){
					comboBox_5.addItem(new cpr.controls.Item("전체", ""));
					comboBox_5.setItemSet(app.lookup("dsStudDivRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_5);
				container.addChild(comboBox_5, {
					"top": "30px",
					"left": "275px",
					"width": "100px",
					"height": "25px"
				});
				var output_9 = new cpr.controls.Output("optRrocYear");
				output_9.value = "";
				output_9.bind("value").toLanguage("UI-GLS-SHYR");
				container.addChild(output_9, {
					"top": "30px",
					"left": "385px",
					"width": "65px",
					"height": "25px"
				});
				var numberEditor_2 = new cpr.controls.NumberEditor("ipbRrocYear");
				numberEditor_2.bind("fieldLabel").toExpression("#optRrocYear.value");
				numberEditor_2.bind("value").toDataMap(app.lookup("dmReqList"), "strProcYear");
				if(typeof onIpbRrocYearKeydown == "function") {
					numberEditor_2.addEventListener("keydown", onIpbRrocYearKeydown);
				}
				container.addChild(numberEditor_2, {
					"top": "30px",
					"left": "455px",
					"width": "85px",
					"height": "25px"
				});
				var output_10 = new cpr.controls.Output("optProf");
				output_10.value = "";
				output_10.bind("value").toLanguage("UI-DB-GUD_PROF");
				container.addChild(output_10, {
					"top": "30px",
					"left": "550px",
					"width": "80px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbProfNm");
				inputBox_1.bind("fieldLabel").toExpression("#optProf.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqList"), "strProf");
				if(typeof onIpbProfNmValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbProfNmValueChange);
				}
				container.addChild(inputBox_1, {
					"top": "30px",
					"left": "635px",
					"width": "115px",
					"height": "25px"
				});
				var output_11 = new cpr.controls.Output("optClass");
				output_11.value = "";
				output_11.bind("value").toLanguage("UI-GLS-CLASSZ");
				container.addChild(output_11, {
					"top": "30px",
					"left": "780px",
					"width": "55px",
					"height": "25px"
				});
				var comboBox_6 = new cpr.controls.ComboBox("cbbClass");
				comboBox_6.bind("fieldLabel").toExpression("#optClass.value");
				comboBox_6.bind("value").toDataMap(app.lookup("dmReqList"), "strClassRcd");
				(function(comboBox_6){
					comboBox_6.addItem(new cpr.controls.Item("전체", ""));
					comboBox_6.setItemSet(app.lookup("dsClassList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_6);
				container.addChild(comboBox_6, {
					"top": "30px",
					"left": "840px",
					"width": "65px",
					"height": "25px"
				});
				var output_12 = new cpr.controls.Output("optNation");
				output_12.value = "";
				output_12.bind("value").toLanguage("UI-GLS-NAT");
				container.addChild(output_12, {
					"top": "30px",
					"left": "915px",
					"width": "55px",
					"height": "25px"
				});
				var comboBox_7 = new cpr.controls.ComboBox("cbbNation");
				comboBox_7.bind("fieldLabel").toExpression("#optNation.value");
				comboBox_7.bind("value").toDataMap(app.lookup("dmReqList"), "strNatRcd");
				(function(comboBox_7){
					comboBox_7.addItem(new cpr.controls.Item("전체", ""));
					comboBox_7.setItemSet(app.lookup("dsNatRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_7);
				container.addChild(comboBox_7, {
					"top": "30px",
					"left": "975px",
					"width": "165px",
					"height": "25px"
				});
				var output_13 = new cpr.controls.Output("optBirthDay");
				output_13.value = "";
				output_13.bind("value").toLanguage("UI-GLS-BIRTHDAY");
				container.addChild(output_13, {
					"top": "55px",
					"left": "5px",
					"width": "80px",
					"height": "25px"
				});
				var dateInput_2 = new cpr.controls.DateInput("dipBirthDay");
				dateInput_2.bind("fieldLabel").toExpression("#optBirthDay.value");
				dateInput_2.bind("value").toDataMap(app.lookup("dmReqList"), "strBirthDay");
				container.addChild(dateInput_2, {
					"top": "55px",
					"left": "90px",
					"width": "90px",
					"height": "25px"
				});
				var output_14 = new cpr.controls.Output("optGender");
				output_14.value = "";
				output_14.bind("value").toLanguage("UI-GLS-GENDER");
				container.addChild(output_14, {
					"top": "55px",
					"left": "190px",
					"width": "80px",
					"height": "25px"
				});
				var comboBox_8 = new cpr.controls.ComboBox("cbbGender");
				comboBox_8.bind("fieldLabel").toExpression("#optGender.value");
				comboBox_8.bind("value").toDataMap(app.lookup("dmReqList"), "strGenderRcd");
				(function(comboBox_8){
					comboBox_8.addItem(new cpr.controls.Item("전체", ""));
					comboBox_8.setItemSet(app.lookup("dsGenderRcdList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_8);
				container.addChild(comboBox_8, {
					"top": "55px",
					"left": "275px",
					"width": "100px",
					"height": "25px"
				});
				var output_15 = new cpr.controls.Output("optStudNo");
				output_15.value = "";
				output_15.bind("value").toLanguage("UI-GLS-STUD_ID");
				container.addChild(output_15, {
					"top": "55px",
					"left": "385px",
					"width": "65px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbStudNo");
				inputBox_2.bind("fieldLabel").toExpression("#optStudNo.value");
				inputBox_2.bind("value").toDataMap(app.lookup("dmReqList"), "strStudNo");
				if(typeof onIpbStudNoKeydown == "function") {
					inputBox_2.addEventListener("keydown", onIpbStudNoKeydown);
				}
				container.addChild(inputBox_2, {
					"top": "55px",
					"left": "455px",
					"width": "85px",
					"height": "25px"
				});
				var output_16 = new cpr.controls.Output("optReqNm");
				output_16.value = "";
				output_16.bind("value").toLanguage("UI-DB-PER_NM");
				container.addChild(output_16, {
					"top": "55px",
					"left": "550px",
					"width": "80px",
					"height": "25px"
				});
				var inputBox_3 = new cpr.controls.InputBox("ipbReqNm");
				inputBox_3.bind("fieldLabel").toExpression("#optReqNm.value");
				inputBox_3.bind("value").toDataMap(app.lookup("dmReqList"), "strRepNm");
				if(typeof onIpbReqNmKeydown == "function") {
					inputBox_3.addEventListener("keydown", onIpbReqNmKeydown);
				}
				container.addChild(inputBox_3, {
					"top": "55px",
					"left": "635px",
					"width": "115px",
					"height": "25px"
				});
				var inputBox_4 = new cpr.controls.InputBox("ipbSaNm");
				inputBox_4.bind("fieldLabel").toExpression("#optSaNm.value");
				inputBox_4.bind("value").toDataMap(app.lookup("dmReqList"), "strSaNm");
				if(typeof onIpbSaNmValueChange == "function") {
					inputBox_4.addEventListener("value-change", onIpbSaNmValueChange);
				}
				container.addChild(inputBox_4, {
					"top": "5px",
					"left": "275px",
					"width": "145px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnPopSearch");
				button_2.value = "";
				button_2.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnPopSearchClick == "function") {
					button_2.addEventListener("click", onBtnPopSearchClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "421px",
					"width": "20px",
					"height": "25px"
				});
				var inputBox_5 = new cpr.controls.InputBox("ipbSaCd");
				inputBox_5.visible = false;
				inputBox_5.bind("value").toDataMap(app.lookup("dmReqList"), "strSaCd");
				if(typeof onIpbSaCdValueChange == "function") {
					inputBox_5.addEventListener("value-change", onIpbSaCdValueChange);
				}
				container.addChild(inputBox_5, {
					"top": "5px",
					"left": "440px",
					"width": "10px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnPopProfSearch");
				button_3.value = "";
				button_3.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnPopProfSearchClick == "function") {
					button_3.addEventListener("click", onBtnPopProfSearchClick);
				}
				container.addChild(button_3, {
					"top": "30px",
					"left": "751px",
					"width": "20px",
					"height": "25px"
				});
				var inputBox_6 = new cpr.controls.InputBox("ipbProfId");
				inputBox_6.visible = false;
				inputBox_6.bind("value").toDataMap(app.lookup("dmReqList"), "strProfId");
				container.addChild(inputBox_6, {
					"top": "30px",
					"left": "770px",
					"width": "10px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "30px",
				"left": "5px",
				"width": "1225px",
				"height": "82px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-STUDLST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "265px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdCsrShreg");
				grid_1.init({
					"dataSet": app.lookup("dsCsrShreg"),
					"columns": [
						{"width": "40px"},
						{"width": "65px"},
						{"width": "75px"},
						{"width": "190px"},
						{"width": "50px"},
						{"width": "65px"},
						{"width": "70px"},
						{"width": "45px"},
						{"width": "40px"},
						{"width": "50px"},
						{"width": "70px"},
						{"width": "70px"},
						{"width": "45px"},
						{"width": "90px"},
						{"width": "70px"},
						{"width": "85px"},
						{"width": "90px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-STUD_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PER_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-ASGN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-DAN-DIV-RCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SCHREGST");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-ALT_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SHYR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-CLASSZ");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-GENDER");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-BIRTHDAY");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-GUD_PROF");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-STUDYYEAR");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.text = "학생구분";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-DGPROC");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-NAT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-TUITICATG");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "STUD_NO";
									cell.control = (function(){
										var inputBox_7 = new cpr.controls.InputBox("gdIpbStudNo");
										inputBox_7.readOnly = true;
										inputBox_7.style.css({
											"text-align" : "center"
										});
										inputBox_7.bind("value").toDataColumn("STUD_NO");
										return inputBox_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "REP_NM";
									cell.control = (function(){
										var inputBox_8 = new cpr.controls.InputBox("gdIpbRepNm");
										inputBox_8.readOnly = true;
										inputBox_8.style.css({
											"text-align" : "center"
										});
										inputBox_8.bind("value").toDataColumn("REP_NM");
										return inputBox_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "SA_NM";
									cell.control = (function(){
										var inputBox_9 = new cpr.controls.InputBox("gdIpbSaNm");
										inputBox_9.readOnly = true;
										inputBox_9.bind("value").toDataColumn("SA_NM");
										return inputBox_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "DAY_NIGHT_NM";
									cell.control = (function(){
										var inputBox_10 = new cpr.controls.InputBox("gdIpbDayNight");
										inputBox_10.readOnly = true;
										inputBox_10.style.css({
											"text-align" : "center"
										});
										inputBox_10.bind("value").toDataColumn("DAY_NIGHT_NM");
										return inputBox_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "STATUS_NM";
									cell.control = (function(){
										var inputBox_11 = new cpr.controls.InputBox("gdIpbStatusNm");
										inputBox_11.readOnly = true;
										inputBox_11.style.css({
											"text-align" : "center"
										});
										inputBox_11.bind("value").toDataColumn("STATUS_NM");
										return inputBox_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "ST_DT";
									cell.control = (function(){
										var dateInput_3 = new cpr.controls.DateInput("gdIpbStDt");
										dateInput_3.readOnly = true;
										dateInput_3.format = "YYYY-MM-DD";
										dateInput_3.style.css({
											"text-align" : "center"
										});
										dateInput_3.bind("value").toDataColumn("ST_DT");
										return dateInput_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "PROC_RSLT";
									cell.control = (function(){
										var inputBox_12 = new cpr.controls.InputBox("gdIpbProcRslt");
										inputBox_12.readOnly = true;
										inputBox_12.style.css({
											"text-align" : "center"
										});
										inputBox_12.bind("value").toDataColumn("PROC_RSLT");
										return inputBox_12;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "CLASS_NM";
									cell.control = (function(){
										var inputBox_13 = new cpr.controls.InputBox("gdIpbClassNm");
										inputBox_13.readOnly = true;
										inputBox_13.style.css({
											"text-align" : "center"
										});
										inputBox_13.bind("value").toDataColumn("CLASS_NM");
										return inputBox_13;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "GENDER_NM";
									cell.control = (function(){
										var inputBox_14 = new cpr.controls.InputBox("gdIpbGenderNm");
										inputBox_14.readOnly = true;
										inputBox_14.style.css({
											"text-align" : "center"
										});
										inputBox_14.bind("value").toDataColumn("GENDER_NM");
										return inputBox_14;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "BIRTHDAY";
									cell.control = (function(){
										var dateInput_4 = new cpr.controls.DateInput("gdIpbBirthDay");
										dateInput_4.readOnly = true;
										dateInput_4.format = "YYYY-MM-DD";
										dateInput_4.style.css({
											"text-align" : "center"
										});
										dateInput_4.bind("value").toDataColumn("BIRTHDAY");
										return dateInput_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "PROF_NM";
									cell.control = (function(){
										var inputBox_15 = new cpr.controls.InputBox("gdIpbProfNm");
										inputBox_15.readOnly = true;
										inputBox_15.style.css({
											"text-align" : "center"
										});
										inputBox_15.bind("value").toDataColumn("PROF_NM");
										return inputBox_15;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "ASS";
									cell.control = (function(){
										var inputBox_16 = new cpr.controls.InputBox("gdIpbAss");
										inputBox_16.readOnly = true;
										inputBox_16.style.css({
											"text-align" : "center"
										});
										inputBox_16.bind("value").toDataColumn("ASS");
										return inputBox_16;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "STUD_DIV_NM";
									cell.control = (function(){
										var inputBox_17 = new cpr.controls.InputBox("gdIpbStudDivNm");
										inputBox_17.readOnly = true;
										inputBox_17.style.css({
											"text-align" : "center"
										});
										inputBox_17.bind("value").toDataColumn("STUD_DIV_NM");
										return inputBox_17;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "DGR_CRS_NM";
									cell.control = (function(){
										var inputBox_18 = new cpr.controls.InputBox("gdIpbDgrCrsNm");
										inputBox_18.readOnly = true;
										inputBox_18.style.css({
											"text-align" : "center"
										});
										inputBox_18.bind("value").toDataColumn("DGR_CRS_NM");
										return inputBox_18;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.columnName = "NAT_NM";
									cell.control = (function(){
										var inputBox_19 = new cpr.controls.InputBox("gdIpbNatNm");
										inputBox_19.readOnly = true;
										inputBox_19.bind("value").toDataColumn("NAT_NM");
										return inputBox_19;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.columnName = "REG_FEE_CAT_NM";
									cell.control = (function(){
										var inputBox_20 = new cpr.controls.InputBox("gdIpbRegFeeCatNm");
										inputBox_20.readOnly = true;
										inputBox_20.style.css({
											"text-align" : "center"
										});
										inputBox_20.bind("value").toDataColumn("REG_FEE_CAT_NM");
										return inputBox_20;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1215px",
					"height": "523px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "117px",
				"left": "5px",
				"width": "1225px",
				"height": "558px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaStdCmnPobjSch");
			cpr.core.App.load("app/cmn/impStdCmnPObjSch", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "681px",
				"left": "100px",
				"width": "95px",
				"height": "25px"
			});
			
			var embeddedApp_2 = new cpr.controls.EmbeddedApp("emaort1");
			cpr.core.App.load("app/cmn/impStdCmnPPrsnSearch", function(app) {
				if(app){
					embeddedApp_2.app = app;
				}
			});
			container.addChild(embeddedApp_2, {
				"top": "677px",
				"left": "194px",
				"width": "100px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "stdCsrSStudList";
	cpr.core.Platform.INSTANCE.register(app);
})();
