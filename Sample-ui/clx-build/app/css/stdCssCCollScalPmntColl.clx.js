/*
 * App URI: app/css/stdCssCCollScalPmntColl
 * Source Location: app/css/stdCssCCollScalPmntColl.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/css/stdCssCCollScalPmntColl", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCssCCollScalPmntColl.xtm"/>
			
			/**
			 * 일괄장학생지급관리
			 * @class stdCssCCollScalPmntColl
			 * @author Aeyoung Lee 2016. 3. 15
			 */
			var stdCssCCollScalPmntColl = function() {
				var moPage = new Page();
				var moPObject 	= new PObject();
				
				/**
				 * 팝업 관련 설정사항
				 */
				moPObject.moScalPmntCrtParam = {
					schYearRcd : "",
					smtRcd : "",
					deptCd : "",
					deptNm : "",
					deptObjDivCd : "",
					scalFeeCls1 : "",
					scalFeeCls2 : "",
					scalFeeCls3 : "",
					scalFeeCls4 : "",
					scalFeeCls5 : "",
					scalFeeCd : "",
					scalFeeNm : "",
					pmntDivRcd : "",
					pmntItvRcd : "",
					studId : "",
					studNo : "" 
				};
				
				/**
				 * @desc import 헤더 초기화
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc import 조회조건 초기화
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				moPage.onLoadImportDone_ImpCssScalCollSch = function() {
					onLoadCollImp();
				};
				
				/**
				 * @desc OnLoad 이벤트
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				function doOnLoad() {
					// 리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptScalStudPmnt"]);
					// 검색조건 초기 설정
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", ["grpData"]);
					
					ExtRepeat.addOriginCol("rptScalStudPmnt", ["STUD_ACCT_NO"]);
					
					// 서브미션 호출
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							util.Control.setFocus(app, "ipbDeptNmImp");
						}
					}, true);
				};
				
				/**
				 * @desc 조회 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				moPage.onClick_BtnSearch = function() {
					 // 작업영역 리피트 변경 내역 체크
					if(util.Grid.isModified(app, "", "CRM")){
						return false;
					}
					
					// 조회조건 유효성 체크
					if(!util.validate(app, ["grpSearch"])){
						return false;
					}
					
					// 조회
					doList(function(pbSuccess) {
						if (pbSuccess){
							// "조회되었습니다."
							util.Msg.notify(app, "NLS.INF.M024");					
						}
					});
				};
				
				/**
				 * @desc 장학생 지급 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				function doList(poCallBackFunc) {
					
					//strCommand: listScalStudPmnt 
					util.Submit.send(app, "subList", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdScalStudPmnt");
						} 
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				};
				
				/**
				 * @desc 장학생 지급 체크된 리피트 인덱스 배열 리턴
				 * @return Array 리피트에 체크된 인덱스 배열
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				function doGetSelRowIdx() {
					
					var vsPanelCheckIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdScalStudPmnt");
					var voPanelChk;
					
					if(String(vsPanelCheckIdx).indexOf(",") != -1){
						voPanelChk = vsPanelCheckIdx.split(",");
					}else{
						voPanelChk = new Array();
						voPanelChk[0] = vsPanelCheckIdx;
					}	
					
					return voPanelChk;
				};
				
				/**
				 * @desc [btnNew]신규 onClick 이벤트 
				 * - (일괄장학생지급화면)팝업 호출
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				moPage.onClick_BtnNew = function() {
					var voPopParam = moPObject.moScalPmntCrtParam;
					
					voPopParam.schYearRcd = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/date/YEAR");
					voPopParam.smtRcd = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/date/SMT");
					voPopParam.deptCd = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strDeptCd");
					voPopParam.deptNm = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strDeptNm");
					voPopParam.deptObjDivCd = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strDeptObjDivRcd");
					voPopParam.scalFeeCls1 = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strScalFeeCls1");
					voPopParam.scalFeeCls2 = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strScalFeeCls2");
					voPopParam.scalFeeCls3 = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strScalFeeCls3");
					voPopParam.scalFeeCls4 = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strScalFeeCls4");
					voPopParam.scalFeeCls5 = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strScalFeeCls5");
					voPopParam.scalFeeCd = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strScalFeeCd");
					voPopParam.scalFeeNm = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strScalFeeNm");
					voPopParam.studId = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strStudId");
					voPopParam.studNo = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strStudNo");
					voPopParam.pmntDivRcd = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strPmntDivRcd");
					voPopParam.pmntItvRcd = ExtInstance.getValue("instance('insCssScalCollSch')/root/reqKey/strPmntItvRcd");
					
					// 팝업호출
					ExtPopUp.openLayeredPopup("/xtm/css/stdCssCCollScalPmntCrt.xtm", 1180, 580);
				};
					
				/**
				 * @desc [btnDel]삭제 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				moPage.onClick_BtnDel = function() {
					var vnChekNodeLength = ExtInstance.getNodeListLength("/root/resList/rptScalStudPmnt/row[child::DEL_CKB='Y']");
					if (vnChekNodeLength <= 0 ) {
						// "@(을)를 선택해주세요" 메시지 출력
						util.Msg.alert("NLS-INF-M045", [util.Grid.getTitle(app, "grdScalStudPmntScalStudPmnt")]);
						return false;
					}
					
					// 지급자료를 삭제하시겠습니까?
					if(!util.Msg.confirm("NLS-CSS-M053") ) return;
					
					util.Grid.setRowStateAll(app, "grdScalStudPmnt", cpr.data.tabledata.RowState.UNCHANGED);
					var voPanelChk = doGetSelRowIdx();	
					
					var vsProcStatRcd = util.Control.getValue(app, "cbbProcStatRcdChange");
					var vsProcDate =  util.Control.getValue(app, "dipProcStatRcdDt").substring(0, 8);
					for(var i = 0; i < voPanelChk.length; i++) {
						var vnRow = voPanelChk[i];
						var vsProcPlanDt = util.Grid.getCellValue(app, "grdScalStudPmnt", "PROC_PLAN_DT", vnRow);
						var vsPlanDt = util.Grid.getCellValue(app, "grdScalStudPmnt", "PROC_DT", vnRow);
						
						if(!ValueUtil.isNull(vsProcPlanDt)){
							// @1번째 데이터는 이미 지급처리 또는 지급확정된 자료이므로 @2가(이) 불가능합니다. 
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M035", [vnRow, NLS.NSCR.DEL]);	
							return;
						}
						
						if(!ValueUtil.isNull(vsPlanDt)){
							// @1번째 데이터는 이미 지급처리 또는 지급확정된 자료이므로 @2가(이) 불가능합니다. 
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M035", [vnRow, NLS.NSCR.DEL]);	
							return;
						}	
						
						util.Grid.setRowState(app, "grdScalStudPmnt", cpr.data.tabledata.RowState.DELETED, vnRow);
					}  
					
					// 삭제된 지급자료의 장학금액을 다시 sum하여 update
					//strCommand: delScalStudPmnt 
					util.Submit.send(app, "subDelScalStud", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdScalStudPmnt");
						} 
						
						doList(function(pbListSuccess) {
							// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
							if (pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
						});
					});
				};
				
				/**
				 * @desc [btnProc]지급처리 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				moPage.onClick_BtnProc = function() {
					var vnChekNodeLength = ExtInstance.getNodeListLength("/root/resList/rptScalStudPmnt/row[child::DEL_CKB='Y']");
					if (vnChekNodeLength <= 0 ) {
						// "@(을)를 선택해주세요" 메시지 출력
						util.Msg.alert("NLS-INF-M045", [util.Grid.getTitle(app, "grdScalStudPmntScalStudPmnt")]);
						return false;
					}
					
					util.Grid.setRowStateAll(app, "grdScalStudPmnt", cpr.data.tabledata.RowState.UNCHANGED);
					var voPanelChk = doGetSelRowIdx();
					
					var vsProcStatRcd = util.Control.getValue(app, "cbbProcStatRcdChange");
					var vsProcDate =  util.Control.getValue(app, "dipProcStatRcdDt").substring(0, 8);
					for(var i = 0; i < voPanelChk.length; i++) {
						var vnRow = voPanelChk[i];
						var vsProcPlanDt = util.Grid.getCellValue(app, "grdScalStudPmnt", "PROC_PLAN_DT", vnRow);
						var vsPlanDt = util.Grid.getCellValue(app, "grdScalStudPmnt", "PROC_DT", vnRow);
						var vnAmt = Number(util.Grid.getCellValue(app, "grdScalStudPmnt", "AMT", vnRow));
						
						if(!ValueUtil.isNull(vsProcPlanDt)){
							// @1번째 데이터는 이미 지급처리 또는 지급확정된 자료이므로 @2가(이) 불가능합니다. 
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M035", [vnRow, NLS.NSCR.PAYPRC]);	
							return;
						}
						
						if(!ValueUtil.isNull(vsPlanDt)){
							// @1번째 데이터는 이미 지급처리 또는 지급확정된 자료이므로 @2가(이) 불가능합니다. 
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M035", [vnRow, NLS.NSCR.PAYPRC]);	
							return;
						}	
						
						if(vnAmt <= 0){
							// @1번째 데이타는 금액이 없으면 @2가 불가능합니다
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M082", [vnRow, NLS.NSCR.PAYPRC]);
							return;
						}	
						
						util.Grid.setRowState(app, "grdScalStudPmnt", cpr.data.tabledata.RowState.UPDATED, vnRow);
					}  
					
					// 지급처리 컨트롤창 open
					doOpenInputDtDialog(NLS.NSCR.PROCPLANDT, NLS.BTN.B001, "impDialogScalPmntProc");
				};
				
				/**
				 * @desc [btnCancel]지급취소 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				moPage.onClick_BtnCancel = function() {
					var vnChekNodeLength = ExtInstance.getNodeListLength("/root/resList/rptScalStudPmnt/row[child::DEL_CKB='Y']");
					if (vnChekNodeLength <= 0 ) {
						// "@(을)를 선택해주세요" 메시지 출력
						util.Msg.alert("NLS-INF-M045", [util.Grid.getTitle(app, "grdScalStudPmntScalStudPmnt")]);
						return false;
					}
					
					// @1 자료를 취소하시겠습니까?
					if(!util.Msg.confirm("NLS-CSS-M054",[NLS.NSCR.PAYPRCDID]) ) return;
					
					util.Grid.setRowStateAll(app, "grdScalStudPmnt", cpr.data.tabledata.RowState.UNCHANGED);
					var voPanelChk = doGetSelRowIdx();
					// 체크용 for
					for(var i = 0; i < voPanelChk.length; i++) {
						var vnRow = voPanelChk[i];
						var vsProcPlanDt = util.Grid.getCellValue(app, "grdScalStudPmnt", "PROC_PLAN_DT", vnRow);
						var vsPlanDt = util.Grid.getCellValue(app, "grdScalStudPmnt", "PROC_DT", vnRow);
						var vsDivPayNo = util.Grid.getCellValue(app, "grdScalStudPmnt", "DIV_PAY_NO", vnRow);
						
						if(ValueUtil.isNull(vsProcPlanDt)){
							// @1번째 데이터는 지급처리된 자료가 아닙니다. 
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M037", [vnRow]);	
							return;
						}
						
						if(!ValueUtil.isNull(vsPlanDt)){
							// @1번째 데이터는 지급확정된 자료이므로 지급처리가 불가능합니다.  
							// -> @번째 데이터는 지급확정된 자료는 지급취소가 불가능합니다. 로 문구 변경
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M038", [vnRow]);	
							return;
						}	
						
						if(!ValueUtil.isNull(vsDivPayNo)){
							// @1번째 데이터는 등록금분납대상자이므로 처리가 불가능합니다. 등록담당자에게 문의하시기 바랍니다.
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M039", [vnRow]);	
							return;
						}	
					}  
					
					// 셋팅용 for
					for(var i = 0; i < voPanelChk.length; i++) {
						var vnRow = voPanelChk[i];
						util.Grid.setCellValue(app, "grdScalStudPmnt", "PROC_PLAN_DT", "", vnRow);
					}  
					
					// 지급취소 서브미션
					//strCommand: planCancel 
					util.Submit.send(app, "subPmntCanc", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdScalStudPmnt");
						} 
						
						doList(function(pbListSuccess) {
							// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
							if (pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
						});
					});
				};
				
				/**
				 * @desc [btnConfirm]지급확정 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				moPage.onClick_BtnConfirm = function() {
					var vnChekNodeLength = ExtInstance.getNodeListLength("/root/resList/rptScalStudPmnt/row[child::DEL_CKB='Y']");
					if (vnChekNodeLength <= 0 ) {
						// "@(을)를 선택해주세요" 메시지 출력
						util.Msg.alert("NLS-INF-M045", [util.Grid.getTitle(app, "grdScalStudPmntScalStudPmnt")]);
						return false;
					}
					
					util.Grid.setRowStateAll(app, "grdScalStudPmnt", cpr.data.tabledata.RowState.UNCHANGED);
					var voPanelChk = doGetSelRowIdx();	
					for(var i = 0; i < voPanelChk.length; i++) {
						var vnRow = voPanelChk[i];
						var vsProcPlanDt = util.Grid.getCellValue(app, "grdScalStudPmnt", "PROC_PLAN_DT", vnRow);
						var vsPlanDt = util.Grid.getCellValue(app, "grdScalStudPmnt", "PROC_DT", vnRow);
						
						if(ValueUtil.isNull(vsProcPlanDt)){
							// @1번째 데이터는 지급처리된 자료가 아닙니다.
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M041", [vnRow]);	
							return;
						}
						
						if(!ValueUtil.isNull(vsPlanDt)){
							// @1번째 데이터는 이미 지급확정된 자료입니다.
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M040", [vnRow]);	
							return;
						}	
					}  
					
					// 지급확정 컨트롤창 open
					doOpenInputDtDialog(NLS.NSCR.PROCDT, NLS.BTN.B002, "impDialogScalPmntProc");
				};
				
				/**
				 * @desc [btnCfmCancel]지급확정취소 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				moPage.onClick_BtnCfmCancel = function() {
					var vnChekNodeLength = ExtInstance.getNodeListLength("/root/resList/rptScalStudPmnt/row[child::DEL_CKB='Y']");
					if (vnChekNodeLength <= 0 ) {
						// "@(을)를 선택해주세요" 메시지 출력
						util.Msg.alert("NLS-INF-M045", [util.Grid.getTitle(app, "grdScalStudPmntScalStudPmnt")]);
						return false;
					}
					
					// @1 자료를 취소하시겠습니까?
					if(!util.Msg.confirm("NLS-CSS-M054",[NLS.NSCR.PAYCONFRMDID]) ) return;
					
					util.Grid.setRowStateAll(app, "grdScalStudPmnt", cpr.data.tabledata.RowState.UNCHANGED);
					var voPanelChk = doGetSelRowIdx();	
					// 체크용 for
					for(var i = 0; i < voPanelChk.length; i++) {
						var vnRow = voPanelChk[i];
						var vsPlanDt = util.Grid.getCellValue(app, "grdScalStudPmnt", "PROC_DT", vnRow);
						var vsDivPayNo = util.Grid.getCellValue(app, "grdScalStudPmnt", "DIV_PAY_NO", vnRow);
						
						if(ValueUtil.isNull(vsPlanDt)){
							// @1번째 데이터는 지급확정된 자료가 아닙니다.
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M042", [vnRow]);	
							return;
						}	
						
						if(!ValueUtil.isNull(vsDivPayNo)){
							// @1번째 데이터는 등록금납부된 자료이므로 취소 불가능합니다. 등록담당자에게 문의하시기 바랍니다.
							util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
							util.Msg.alert("NLS-CSS-M043", [vnRow]);	
							return;
						}	
					}  
					
					// 셋팅용 for
					for(var i = 0; i < voPanelChk.length; i++) {
						var vnRow = voPanelChk[i];	
						util.Grid.setCellValue(app, "grdScalStudPmnt", "PROC_DT", "", vnRow);
					} 
					
					// 지급확정취소 서브미션
					//strCommand: cfmCancel 
					util.Submit.send(app, "subPmntCanc", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdScalStudPmnt");
						} 
						
						doList(function(pbListSuccess) {
							// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
							if (pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
						});
					});
				};
				
				/**
				 * @desc [doSetIptDt]다이얼로그에서 받은 일자를 받아서 지급처리, 지급확정 처리함
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 3. 15
				 */
				function doSetIptDt(psLblDiv) {
					// 지급처리
					if(psLblDiv == NLS.NSCR.PROCPLANDT){
						
						// 지급처리 전 체크서브미션 호출
						ExtInstance.reset("", "/root/resList/checkStudPmnt", true);
						//strCommand: planProcCheck 
						util.Submit.send(app, "subPlanProcCheck", function(pbSuccess) {
							if(pbSuccess){
								var vsStudId     = util.DataMap.getValue(app, "dmCheckStudPmnt", "STUD_ID");
								var vsSerialNo	 = util.DataMap.getValue(app, "dmCheckStudPmnt", "SERIAL_NO");
								var vsFindRowKey = vsStudId + vsSerialNo;
								
								//받은 row가 있다면 메세지처리.. 
								if(!ValueUtil.isNull(vsStudId)){
									
									var voPanelChk = doGetSelRowIdx();
									for(var i = 0; i < voPanelChk.length; i++) {
										var vnRow = voPanelChk[i];
										
										var vsRptFindRowKey = util.Grid.getCellValue(app, "grdScalStudPmnt", "FIND_ROW_KEY", vnRow);
										
										if(vsFindRowKey == vsRptFindRowKey){
											// @1번째 데이터는 지급횟수를 초과하여 처리할 수 없습니다.
											util.Grid.selectRow(app, "grdScalStudPmnt", vnRow);
											util.Msg.alert("NLS-CSS-M050", [vnRow]);
											return false;
										}	
									}
								}
								
								// 일자 변경
								doStatChange(psLblDiv);
							}
						});
					
					// 지급확정
					}else if(psLblDiv == NLS.NSCR.PROCDT){
						
						// 일자 변경
						doStatChange(psLblDiv);
					}	
				};	
				
				
				/**
				 * @desc 처리상태 일괄변경
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee at 2016. 2. 12
				 */
				function doStatChange(psDiv){
					var vsProcDt = util.DataMap.getValue(app, "dmReqKey", "strInputDate");
					
					var voPanelChk = doGetSelRowIdx();
					for(var i = 0; i < voPanelChk.length; i++) {
						var vnRow = voPanelChk[i];
						
						var vsSetDateColId = "";
						switch(psDiv){
							// 지급처리
							case NLS.NSCR.PROCPLANDT :
								util.Grid.setCellValue(app, "grdScalStudPmnt", "PROC_PLAN_DT", vsProcDt, vnRow);
								break;
							// 지급확정
							case NLS.NSCR.PROCDT :
								util.Grid.setCellValue(app, "grdScalStudPmnt", "PROC_DT", vsProcDt, vnRow);
								break;
						}
						
						ExtRepeat.updateRow("rptScalStudPmnt", null, vnRow);
					}  
					
					var vsCmdId = "";
					if(psDiv == NLS.NSCR.PROCPLANDT){
						vsCmdId = "planProc";
					}else if(psDiv == NLS.NSCR.PROCDT){
						vsCmdId = "cfmProc";
					}		
					
					// 변경 서브미션
					//strCommand: vsCmdId 
					util.Submit.send(app, "subPmntProc", function(pbSuccess) {
						doList(function(pbListSuccess) {
							// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
							if (pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
						});
					});
					
				};
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsListBankDiv");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsScalStudPmnt");
			dataSet_2.parseData({
				"info": "CSS_SCAL_STUD_PMNT@STUD_ID,SCH_YEAR_RCD,SMT_RCD,SERIAL_NO,PROC_TYPE_RCD,PMNT_SERIAL_NO",
				"columns": [
					{"name": "STUD_NO"},
					{"name": "STUD_ID"},
					{"name": "REP_NM"},
					{"name": "SCAL_FEE_CD"},
					{"name": "SCAL_FEE_NM"},
					{"name": "SCAL_AMT"},
					{"name": "PMNT_DIV_RCD"},
					{"name": "PMNT_ITV_RCD"},
					{"name": "PMNT_SERIAL_NO"},
					{"name": "FNRE_DIV_RCD"},
					{"name": "FNRE_DIV_NM"},
					{"name": "ITEM_CD"},
					{"name": "ITEM_NM"},
					{"name": "UNIT_CALC_VAL"},
					{"name": "AMT"},
					{"name": "PROC_PLAN_DT"},
					{"name": "PROC_DT"},
					{"name": "STUD_BANK_CD"},
					{"name": "STUD_BANK_NM"},
					{"name": "STUD_ACCT_NO"},
					{"name": "PROC_TYPE_RCD"},
					{"name": "OWNER_NM"},
					{"name": "REMARK"},
					{"name": "DIV_PAY_NO"},
					{"name": "PAY_GRP_KEY"},
					{"name": "SMT_RCD"},
					{"name": "SHR_OWNER_NM"},
					{"name": "BANK_CD"},
					{"name": "ACCT_NO"},
					{"name": "BANK_NM"},
					{"name": "OBJ_DIV_RCD"},
					{"name": "SCH_YEAR_RCD"},
					{"name": "SERIAL_NO"},
					{"name": "SA_NM"},
					{"name": "PMNT_DIV_NM"},
					{"name": "PMNT_ITV_NM"},
					{"name": "FIND_ROW_KEY"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strProcPlanStDt",
						"dataType": "string"
					},
					{
						"name": "strProcPlanEndDt",
						"dataType": "string"
					},
					{
						"name": "strProcStDt",
						"dataType": "string"
					},
					{
						"name": "strProcEndDt",
						"dataType": "string"
					},
					{
						"name": "strInputDate",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmCurrentDate");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "BEF_DT",
						"dataType": "string"
					},
					{
						"name": "CUT_DT",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmCheckStudPmnt");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "PMNT_DIV_RCD",
						"dataType": "string"
					},
					{
						"name": "PMNT_ITV_RCD",
						"dataType": "string"
					},
					{
						"name": "PMNT_SERIAL_NO",
						"dataType": "string"
					},
					{
						"name": "SA_CD",
						"dataType": "string"
					},
					{
						"name": "STUD_BANK_CD",
						"dataType": "string"
					},
					{
						"name": "SCAL_AMT",
						"dataType": "string"
					},
					{
						"name": "AMT",
						"dataType": "string"
					},
					{
						"name": "REMARK",
						"dataType": "string"
					},
					{
						"name": "PROC_TYPE_RCD",
						"dataType": "string"
					},
					{
						"name": "STUD_BANK_NM",
						"dataType": "string"
					},
					{
						"name": "PROC_PLAN_DT",
						"dataType": "string"
					},
					{
						"name": "ITEM_CD",
						"dataType": "string"
					},
					{
						"name": "DIV_PAY_NO",
						"dataType": "string"
					},
					{
						"name": "PAY_GRP_KEY",
						"dataType": "string"
					},
					{
						"name": "SCAL_FEE_NM",
						"dataType": "string"
					},
					{
						"name": "STUD_ID",
						"dataType": "string"
					},
					{
						"name": "SMT_RCD",
						"dataType": "string"
					},
					{
						"name": "SA_NM",
						"dataType": "string"
					},
					{
						"name": "ITEM_NM",
						"dataType": "string"
					},
					{
						"name": "SHR_OWNER_NM",
						"dataType": "string"
					},
					{
						"name": "UNIT_CALC_VAL",
						"dataType": "string"
					},
					{
						"name": "ACCT_NO",
						"dataType": "string"
					},
					{
						"name": "OWNER_NM",
						"dataType": "string"
					},
					{
						"name": "BANK_CD",
						"dataType": "string"
					},
					{
						"name": "SCH_YEAR_RCD",
						"dataType": "string"
					},
					{
						"name": "OBJ_DIV_RCD",
						"dataType": "string"
					},
					{
						"name": "FNRE_DIV_RCD",
						"dataType": "string"
					},
					{
						"name": "STUD_NO",
						"dataType": "string"
					},
					{
						"name": "BANK_NM",
						"dataType": "string"
					},
					{
						"name": "PROC_DT",
						"dataType": "string"
					},
					{
						"name": "FNRE_DIV_NM",
						"dataType": "string"
					},
					{
						"name": "SERIAL_NO",
						"dataType": "string"
					},
					{
						"name": "SCAL_FEE_CD",
						"dataType": "string"
					},
					{
						"name": "REP_NM",
						"dataType": "string"
					},
					{
						"name": "STUD_ACCT_NO",
						"dataType": "string"
					},
					{
						"name": "PROC_RSLT",
						"dataType": "string"
					},
					{
						"name": "PROC_RSLT_YEAR",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/css/StdCssCollScalPmntColl/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataMap_2, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList");
			submission_2.action = "/css/StdCssCollScalPmntColl/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subPlanProcCheck");
			submission_3.action = "/css/StdCssCollScalPmntColl/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_1);
			submission_3.addRequestData(dataSet_2);
			submission_3.addResponseData(dataMap_3, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subPmntProc");
			submission_4.action = "/css/StdCssCollScalPmntColl/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_1);
			submission_4.addRequestData(dataSet_2);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subPmntCanc");
			submission_5.action = "/css/StdCssCollScalPmntColl/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataMap_1);
			submission_5.addRequestData(dataSet_2);
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("subDelScalStud");
			submission_6.action = "/css/StdCssCollScalPmntColl/";
			submission_6.mediaType = "application/x-www-form-urlencoded";
			submission_6.addRequestData(dataMap_1);
			submission_6.addRequestData(dataSet_2);
			app.register(submission_6);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1158px",
					"width": "60px",
					"height": "25px"
				});
				var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaCssScalCollSchgrpSearch");
				if(typeof onEmaCssScalCollSchgrpSearchAppReady == "function") {
					embeddedApp_1.addEventListener("app-ready", onEmaCssScalCollSchgrpSearchAppReady);
				}
				cpr.core.App.load("app/css/impStdCssScalCollSch", function(app) {
					if(app){
						embeddedApp_1.app = app;
					}
				});
				container.addChild(embeddedApp_1, {
					"top": "5px",
					"left": "5px",
					"width": "1146px",
					"height": "75px"
				});
				var output_1 = new cpr.controls.Output("optProcPlanDt1");
				output_1.value = "";
				output_1.bind("value").toLanguage("NLS-SCR-PROCPLANSTDT");
				container.addChild(output_1, {
					"top": "34px",
					"left": "1158px",
					"width": "20px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optProcPlanDt2");
				output_2.value = "";
				output_2.bind("value").toLanguage("NLS-SCR-PROCPLANENDDT");
				container.addChild(output_2, {
					"top": "34px",
					"left": "1177px",
					"width": "20px",
					"height": "25px"
				});
				var dateInput_1 = new cpr.controls.DateInput("dipProcEndDt");
				dateInput_1.style.css({
					"text-align" : "center"
				});
				dateInput_1.bind("fieldLabel").toExpression("#optProcDt2.value");
				dateInput_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strProcEndDt");
				container.addChild(dateInput_1, {
					"top": "54px",
					"left": "1025px",
					"width": "122px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output("optText2");
				output_3.value = "~";
				container.addChild(output_3, {
					"top": "54px",
					"left": "1010px",
					"width": "15px",
					"height": "25px"
				});
				var dateInput_2 = new cpr.controls.DateInput("dipProcStDt");
				dateInput_2.style.css({
					"text-align" : "center"
				});
				dateInput_2.bind("fieldLabel").toExpression("#optProcDt1.value");
				dateInput_2.bind("value").toDataMap(app.lookup("dmReqKey"), "strProcStDt");
				container.addChild(dateInput_2, {
					"top": "54px",
					"left": "890px",
					"width": "120px",
					"height": "25px"
				});
				var output_4 = new cpr.controls.Output("optProcDt");
				output_4.value = "";
				output_4.bind("value").toLanguage("UI-DB-PROC_DT");
				container.addChild(output_4, {
					"top": "54px",
					"left": "805px",
					"width": "80px",
					"height": "25px"
				});
				var dateInput_3 = new cpr.controls.DateInput("dipProcPlanEndDt");
				dateInput_3.style.css({
					"text-align" : "center"
				});
				dateInput_3.bind("fieldLabel").toExpression("#optProcPlanDt2.value");
				dateInput_3.bind("value").toDataMap(app.lookup("dmReqKey"), "strProcPlanEndDt");
				container.addChild(dateInput_3, {
					"top": "55px",
					"left": "675px",
					"width": "120px",
					"height": "25px"
				});
				var output_5 = new cpr.controls.Output("optText1");
				output_5.value = "~";
				container.addChild(output_5, {
					"top": "55px",
					"left": "660px",
					"width": "15px",
					"height": "25px"
				});
				var dateInput_4 = new cpr.controls.DateInput("dipProcPlanStDt");
				dateInput_4.style.css({
					"text-align" : "center"
				});
				dateInput_4.bind("fieldLabel").toExpression("#optProcPlanDt1.value");
				dateInput_4.bind("value").toDataMap(app.lookup("dmReqKey"), "strProcPlanStDt");
				container.addChild(dateInput_4, {
					"top": "55px",
					"left": "540px",
					"width": "120px",
					"height": "25px"
				});
				var output_6 = new cpr.controls.Output("optProcPlanDt");
				output_6.value = "";
				output_6.bind("value").toLanguage("UI-DB-PROC_PLAN_DT");
				container.addChild(output_6, {
					"top": "55px",
					"left": "455px",
					"width": "81px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "82px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-SCRSTUDTPAY");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "252px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdScalStudPmnt");
				grid_1.init({
					"dataSet": app.lookup("dsScalStudPmnt"),
					"columns": [
						{"width": "25px"},
						{"width": "25px"},
						{"width": "40px"},
						{"width": "73px"},
						{"width": "88px"},
						{"width": "135px"},
						{"width": "104px"},
						{"width": "90px"},
						{"width": "75px"},
						{"width": "75px"},
						{"width": "75px"},
						{"width": "80px"},
						{"width": "80px"},
						{"width": "91px"},
						{"width": "85px"},
						{"width": "85px"},
						{"width": "100px"},
						{"width": "117px"},
						{"width": "99px"},
						{"width": "146px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-STUD_ID");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-NAME");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-ASGN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SCAL_FEE_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SCAL_AMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-PMNTDIV");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-PAYITV");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-FIRSRDIVRCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-ITEM_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-UNITCALVALUE");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-AMT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-PLANDT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-PROC_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-BANK");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-ACCT_NO");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-OWNER");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-REMARK");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.control = (function(){
										var output_7 = new cpr.controls.Output();
										output_7.style.css({
											"text-align" : "center"
										});
										return output_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "STUD_NO";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "REP_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "SA_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "SCAL_FEE_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "SCAL_AMT";
									cell.control = (function(){
										var output_8 = new cpr.controls.Output("gdOptScalAmt");
										output_8.dataType = "number";
										output_8.format = "s#,###";
										output_8.style.css({
											"text-align" : "right"
										});
										output_8.bind("value").toDataColumn("SCAL_AMT");
										return output_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "PMNT_DIV_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "PMNT_ITV_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "FNRE_DIV_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "ITEM_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "UNIT_CALC_VAL";
									cell.control = (function(){
										var output_9 = new cpr.controls.Output("gdOptUnitCalcVal");
										output_9.dataType = "number";
										output_9.format = "s#,###";
										output_9.style.css({
											"text-align" : "right"
										});
										output_9.bind("value").toDataColumn("UNIT_CALC_VAL");
										return output_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "AMT";
									cell.control = (function(){
										var output_10 = new cpr.controls.Output("gdOptAmt");
										output_10.dataType = "number";
										output_10.format = "s#,###";
										output_10.style.css({
											"text-align" : "right"
										});
										output_10.bind("value").toDataColumn("AMT");
										return output_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "PROC_PLAN_DT";
									cell.control = (function(){
										var output_11 = new cpr.controls.Output("gdOptProcPlanDt");
										output_11.dataType = "date";
										output_11.format = "YYYY-MM-DD";
										output_11.style.css({
											"text-align" : "center"
										});
										output_11.bind("value").toDataColumn("PROC_PLAN_DT");
										return output_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.columnName = "PROC_DT";
									cell.control = (function(){
										var output_12 = new cpr.controls.Output("gdOptProcDt");
										output_12.dataType = "date";
										output_12.format = "YYYY-MM-DD";
										output_12.style.css({
											"text-align" : "center"
										});
										output_12.bind("value").toDataColumn("PROC_DT");
										return output_12;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.columnName = "STUD_BANK_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.columnName = "STUD_ACCT_NO";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.columnName = "OWNER_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.columnName = "REMARK";
								}
							}
						]
					},
					"footer": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.expr = "\"합계\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.expr = "getSum(\"SCAL_AMT\")";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.expr = "getSum(\"AMT\")";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.expr = "\"\"";
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1213px",
					"height": "517px"
				});
				var button_2 = new cpr.controls.Button("btnNew");
				button_2.enabled = false;
				button_2.value = "";
				button_2.style.setClasses(["btn-new"]);
				button_2.bind("value").toLanguage("UI-SCR-PAYMTNEW");
				if(typeof onBtnNewClick == "function") {
					button_2.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "801px",
					"width": "60px",
					"height": "25px"
				});
				var button_3 = new cpr.controls.Button("btnDel");
				button_3.enabled = false;
				button_3.value = "";
				button_3.style.setClasses(["btn-commit"]);
				button_3.bind("value").toLanguage("UI-SCR-PAYMTDEL");
				if(typeof onBtnDelClick == "function") {
					button_3.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_3, {
					"top": "5px",
					"left": "867px",
					"width": "60px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button("btnSaveProc");
				button_4.value = "";
				button_4.bind("value").toLanguage("UI-SCR-PAYMTPRCS");
				if(typeof onBtnSaveProcClick == "function") {
					button_4.addEventListener("click", onBtnSaveProcClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "932px",
					"width": "60px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button("btnSaveCfmCancel");
				button_5.value = "";
				button_5.style.setClasses(["btn-save"]);
				button_5.bind("value").toLanguage("UI-SCR-PAYCONFMCANCL");
				if(typeof onBtnSaveCfmCancelClick == "function") {
					button_5.addEventListener("click", onBtnSaveCfmCancelClick);
				}
				container.addChild(button_5, {
					"top": "5px",
					"left": "1130px",
					"width": "86px",
					"height": "25px"
				});
				var button_6 = new cpr.controls.Button("btnSaveCancel");
				button_6.value = "";
				button_6.style.setClasses(["btn-save"]);
				button_6.bind("value").toLanguage("UI-SCR-PAYMTCANCL");
				if(typeof onBtnSaveCancelClick == "function") {
					button_6.addEventListener("click", onBtnSaveCancelClick);
				}
				container.addChild(button_6, {
					"top": "5px",
					"left": "997px",
					"width": "60px",
					"height": "25px"
				});
				var button_7 = new cpr.controls.Button("btnSaveConfirm");
				button_7.value = "";
				button_7.bind("value").toLanguage("UI-SCR-PAYCONFRM");
				if(typeof onBtnSaveConfirmClick == "function") {
					button_7.addEventListener("click", onBtnSaveConfirmClick);
				}
				container.addChild(button_7, {
					"top": "5px",
					"left": "1064px",
					"width": "60px",
					"height": "25px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "122px",
				"left": "3px",
				"width": "1225px",
				"height": "552px"
			});
			
			var output_13 = new cpr.controls.Output("optProcDt1");
			output_13.value = "";
			output_13.bind("value").toLanguage("NLS-SCR-PROCSTDT");
			container.addChild(output_13, {
				"top": "89px",
				"left": "1163px",
				"width": "20px",
				"height": "25px"
			});
			
			var output_14 = new cpr.controls.Output("optProcDt2");
			output_14.value = "";
			output_14.bind("value").toLanguage("NLS-SCR-PROCENDDT");
			container.addChild(output_14, {
				"top": "89px",
				"left": "1182px",
				"width": "25px",
				"height": "25px"
			});
			
			var embeddedApp_2 = new cpr.controls.EmbeddedApp("emaDialogScalPmntProc");
			cpr.core.App.load("app/css/impDialogScalPmntProc", function(app) {
				if(app){
					embeddedApp_2.app = app;
				}
			});
			container.addChild(embeddedApp_2, {
				"top": "35px",
				"left": "1240px",
				"width": "225px",
				"height": "64px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "일괄장학생지급관리";
	cpr.core.Platform.INSTANCE.register(app);
})();
