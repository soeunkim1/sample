/*
 * App URI: app/css/stdCssCFndtn
 * Source Location: app/css/stdCssCFndtn.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/css/stdCssCFndtn", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			﻿//아래 주석의 <xtmlink> 는 인텔리센스 기능을 위한 링크입니다. 지우지 마십시오.
			/// <xtmlink path="./stdCssCFndtn.xtm"/>
			
			/**
			 * 재단관리
			 * @class stdCssCFndtn
			 * @author Aeyoung Lee 2016. 2. 17
			 */
			var stdCssCFndtn = function() {
				var moPage = new Page();
				var moPObject 	= new PObject();
					
				// 탭 정의
				var TAB = {
					MANAGE	: "tabManage",
					HIS    	: "tabHistory",
					LAN   	: "tabLan",
					ADDR   	: "tabAddr"
				};
					
				// 탭버튼 정의
				var TAB_BTN = {
					tabManage	: "tabBtnManage",
					tabHistory	: "tabBtnHistory",
					tabLan    	: "tabBtnLan",
					tabAddr    	: "tabBtnAddr"
				};
				
				/**
				 * 우편번호검색팝업 관련 설정사항
				 *  [IN]
				 *  1. controlId : (필수) 최초 이벤트의 버튼id
				 *  [OUT]
				 *  2. oZipCode : 우편번호
				 *  3. oZipSeq  : 우편일련번호
				 *  4. oBdMno   : 건물번호
				 *  5. oAddr	: 주소
				 *  6. func		: 팝업에서 선택한 값을 받은 후 추가 로직이 필요한 경우 함수 작성
				 * @member impStdCmnPZipSearch
				 * @type Array
				 * @author Choi In Seong at 16. 1. 26
				 */ 
				moPObject.moIdsForStdCmnPZipSearch = [
					 { 
						 controlId : "btnPopZipcode",	//(필수)우편번호검색
						 oZipCode  : "ipbFrfZipcodeAddr",	//리턴 우편번호
						 oZipSeq   : "ipbFrfZipseqAddr",	//리턴 우편일련번호
						 oAddr	   : "ipbFrfAddr1Addr",		//리턴 주소
						 oAddrDtl  : "ipbFrfAddr2Addr",		//리턴 주소
						 func	   : null
					 }
				 ];
				
				var msSystemLanDivRcd = "";
				var msCurrentDt = "";
				var msKeyDt = "";
				
				/**
				 * @desc import 헤더 초기화
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onLoadImportDone_ImpTitle = function() {
					// import 헤더 초기화
					doHeaderOnLoad();
				};
				
				/**
				 * @desc OnLoad 이벤트
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doOnLoad() {
					// 리피트 초기 설정
			//TO-BE: <ExtRepeat.init> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.init(["rptFndtn", "frfFndtn", "rptFndtnHistory", "rptFndtnLan", "rptFndtnAddr", "frfFndtnAddr"]);
					// 검색조건 초기 설정
			//TO-BE: <ExtGroup.initSearchBox> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtGroup.initSearchBox("grpSearch", ["grpData", "grpDataDtl"]);
					
					// 데이터관리  tab으로 이동
					ExtTab.setTabBtn("tabMain", TAB_BTN.tabManage);
					util.Tab.setSelectedTabItem(app, "tabMain", TAB.MANAGE);
					
					// 기준일자 조회하는 내부 팝업 호출을 위한 단위시스템코드 설정
					setUnitSystem("CSS");
					
					// 서브미션 호출
					//strCommand: onLoad 
					util.Submit.send(app, "subOnLoad", function(pbSuccess){
						if(pbSuccess){
							
							msSystemLanDivRcd = util.DataMap.getValue(app, "dmResOnLoad", "strSystemLan");
							msCurrentDt = util.DataMap.getValue(app, "dmResOnLoad", "strCutDt");
							msKeyDt = util.DataMap.getValue(app, "dmResOnLoad", "strKeyDt");
							
							util.Control.setValue(app, "dipKeyDt", msKeyDt);	
							util.Control.setFocus(app, "ipbFndtnNm");
						}
					}, true);
				};
				
				/**
				 * @desc 기준일자(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnYearSmt = function() {
					//기준일자 임포트(달력컨트롤ID,임포트ID)
					doOnclickSchYearSmt("dipKeyDt","impSchYearSmt");
				};
				
				/**
				 * @desc 기준일자 Enter KeyUp 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onKeyUp_DipKeyDt = function(strKeyType, strKeyStatus) {
					// 엔터키 입력시 조회
					if(e.keyCode == cpr.events.KeyCode.ENTER){
						util.Header.clickSearch(app);
					}
				};
				
				/**
				 * @desc 재단명 Enter KeyDown 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onKeyDown_IpbFndtnNm= function(strKeyType, strKeyStatus) {
					// 엔터키 입력시 조회
					if(e.keyCode == cpr.events.KeyCode.ENTER){
						util.Header.clickSearch(app);
					}
				}
				
				/**
				 * @desc 조회 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnSearch = function() {
					 // 작업영역 리피트 변경 내역 체크
					if(util.Grid.isModified(app, "", "CRM")){
						return false;
					}
					
					// 조회조건 필수 체크
					if(!util.validate(app, ["dipKeyDt"])){
						return false;
					}
					
					// 데이터관리  tab으로 이동
					ExtTab.setTabBtn("tabMain", TAB_BTN.tabManage);
					util.Tab.setSelectedTabItem(app, "tabMain", TAB.MANAGE);
					
					// pkValue 초기화
					ExtRepeat.setPkValues("rptFndtn", "");
					
					// 조회
					doList(function(pbSuccess) {
						if (pbSuccess){
							
							if(util.Grid.getRowCount(app, "grdFndtn") == 0){
								// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
								doCompareFrfEnable();
								
								// "조회된 내역이 없습니다."
								util.Msg.notify(app, "NLS.WRN.M005");
							}else{
								// "조회되었습니다."
								util.Msg.notify(app, "NLS.INF.M024");	
							}	
						}
					});
				};
				
				/**
				 * @desc 재단목록 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doList(poCallBackFunc) {
					//strCommand: listFndtn 
					util.Submit.send(app, "subFndList", function(pbSuccess){
						if(pbSuccess){
							
							util.Control.redraw(app, "grdFndtn");
							
			//				// 폐기처리로 인해 데이터가 없어질경우 [데이터관리] 텝으로 이동하기 위함.
			//				var strTmpCd = ExtInstance.getValue("/root/reqSelRow/strTmpScalFndtnCd");
			//				var vnLength = ExtInstance.getNodeListLength("/root/resList/rptFndtn/row[child::SCAL_FNDTN_CD = '"+ strTmpCd +"']");
			//				if(ValueUtil.isNull(strTmpCd) || vnLength == 0){
			//					if(ExtRepeat.rowCount("rptFndtn") == 0){
			//						// 데이터관리  tab으로 이동
			//						ExtTab.setTabBtn("tabMain", TAB_BTN.tabManage);
			//						ExtTab.toggle("tabMain", TAB.MANAGE);
			//						// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
			//						this.doCompareFrfEnable();
			//					}
			//					ExtModel.dispatch("tabBtnManage","DOMActivate");
			//				}
							
						} 
						
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				};
				
				/**
				 * @desc [rptFndtn]재단목록 onRowSelect 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onRowSelect_RptFndtn = function() {
					
					util.DataMap.setValue(app, "dmReqKey", "strScalFndtnCd", util.Grid.getCellValue(app, "grdFndtn", "SCAL_FNDTN_CD"));// 장학재단코드
					util.DataMap.setValue(app, "dmReqKey", "strRefKey"	  , util.Grid.getCellValue(app, "grdFndtn", "REF_KEY")); 	 // 참조키
					util.DataMap.setValue(app, "dmReqKey", "strLanDivRcd"  , util.Grid.getCellValue(app, "grdFndtn", "LAN_DIV_RCD"));  // 언어구분
					util.DataMap.setValue(app, "dmReqKey", "strScalFndtnNm", util.Grid.getCellValue(app, "grdFndtn", "SCAL_FNDTN_NM"));// 장학재단명
					
					var vsSelTabId = util.Tab.getSelectedId(app, "tabMain");
					doTabChange(vsSelTabId);
				};
				
				/**
				 * @desc  마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
				 *			    1. index가 지정되지 않았을 경우
				 *			    2. 현재 index의 로우가 삭제 상태일 경우 
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doCompareFrfEnable() {
					var vnIdx = util.Grid.getIndex(app, "grdFndtn");
					var vsStaus = util.Grid.getRowState(app, "grdFndtn", vnIdx);
					
					// 마스터 로우 없을경우 프리폼 리셋
					if(!vnIdx) util.Control.reset(app, "frfFndtn");
					
					if( (!vnIdx) || vsStaus == "delete") {
						util.Control.setEnable(app, false, ["frfFndtn"]);	
					}else{
						
						util.Control.setEnable(app, true, ["frfFndtn"]);
						
						// 신규일때만 활성화처리 그 외(복사 등) 비활성화
						var vsFlagGbn = util.Grid.getCellValue(app, "grdFndtn", "FLAG_GBN", vnIdx);
						if( vsStaus == "insert" && vsFlagGbn != "C"){
							util.Control.setEnable(app, true, "ipbFrfFndtnCdBase");
						}else{
							util.Control.setEnable(app, false, "ipbFrfFndtnCdBase");
						}	
					}	
					
				};
				
				/**
				 * @desc [tabBtnManage]데이터관리 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_TabBtnManage = function() {
					doTabChange(TAB.MANAGE);
				};
				
				/**
				 * @desc [tabBtnHistory]이력관리 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_TabBtnHistory = function() {
					doTabChange(TAB.HIS);
				};
				
				/**
				 * @desc [tabBtnLan]언어 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_TabBtnLan = function() {
					doTabChange(TAB.LAN);
				};
				
				/**
				 * @desc [tabBtnLan]주소정보 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_TabBtnAddr = function() {
					doTabChange(TAB.ADDR);
				}
				
				/**
				 * @desc 탭 변경시
				 * @param  {String} psCaseId 탭페이지명
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doTabChange(psCaseId) {
					
					// 재단목록 선택된 ROW 검사
					var vnSelectRowIdx = util.Grid.getIndex(app, "grdFndtn");
					
					if (!vnSelectRowIdx) {
						// 데이터관리 프리폼 초기화
						util.Control.reset(app, "frfFndtn");
						// 데이터관리  tab으로 이동
						ExtTab.setTabBtn("tabMain", TAB_BTN.tabManage);
						util.Tab.setSelectedTabItem(app, "tabMain", TAB.MANAGE);
						
						return;
					}
					
					util.Control.setEnable(app, true, ["grpData"]);
					
					// 선택된 TAB
					var vsSelTabId = util.Tab.getSelectedId(app, "tabMain");
					
					// 1. 현재 선택된 탭의 상태 체크
					if(psCaseId != vsSelTabId){
						
						switch (vsSelTabId) {
							// 1-1. 데이터관리
							case TAB.MANAGE : {
								// 데이터관리 변경내역 있는 경우
								if(util.Grid.isModified(app, ["grdFndtn"], "CRM") ){
									// tab 이동 하지 않음
									ExtTab.setTabBtn("tabMain", TAB_BTN[vsSelTabId]);
									return false;
								}else{
									// 재단 목록 변경이 일어난 후 다른탭으로 이동시 프리폼 리셋 처리
									if(util.Grid.isModified(app, ["grdFndtn"])){
										util.Grid.revertAllData(app, "grdFndtn");
										util.Control.reset(app, "frfFndtn");
									}
								}	
								break;
							}
							
							// 1-2. 이력관리  버튼 선택
							case TAB.HIS : {
								// 이력관리 리피트 변경내역 있는 경우
								if(util.Grid.isModified(app, ["grdFndtnHistory"], "CRM")){
									// tab 이동 하지 않음
									ExtTab.setTabBtn("tabMain", TAB_BTN[vsSelTabId]);
									return false;
								}else{
									if(util.Grid.isModified(app, ["grdFndtnHistory"]) ){
										// 이력 목록 리셋
										util.Grid.revertAllData(app, "grdFndtnHistory");
									}
								}
								break;
							}
							
							// 1-3. 언어 버튼 선택
							case TAB.LAN : {
								// 언어 리피트 변경내역 있는 경우
								if(util.Grid.isModified(app, ["grdFndtnLan"], "CRM")){
									// tab 이동 하지 않음
									ExtTab.setTabBtn("tabMain", TAB_BTN[vsSelTabId]);
									return false;
								}else{
									// 언어 목록 변경이 일어난 후 다른탭으로 이동시 프리폼 리셋 처리
									if(util.Grid.isModified(app, ["grdFndtnLan"])){
										util.Grid.revertAllData(app, "grdFndtnLan");
										util.Control.reset(app, "frfFndtnLan");
									}
								}
								break;
							}
							
							// 1-4. 주소정보 버튼 선택
							case TAB.ADDR : {
								// 언어 리피트 변경내역 있는 경우
								if(util.Grid.isModified(app, ["grdFndtnAddr"], "CRM")){
									// tab 이동 하지 않음
									ExtTab.setTabBtn("tabMain", TAB_BTN[vsSelTabId]);
									return false;
								}else{
									// 언어 목록 변경이 일어난 후 다른탭으로 이동시 프리폼 리셋 처리
									if(util.Grid.isModified(app, ["grdFndtnAddr"])){
										util.Grid.revertAllData(app, "grdFndtnAddr");
										util.Control.reset(app, "frfFndtnAddr");
									}
								}
								break;
							}
						}
					}
				
					// 2. 탭변경
					util.Tab.setSelectedTabItem(app, "tabMain", psCaseId);
					
					// 3. 탭변경 후 처리 로직
					switch (psCaseId) {
						// 3-1. 데이터관리 조회
						case TAB.MANAGE : {
							doListDtl();
							break;
						}
						// 3-2. 이력관리 조회
						case TAB.HIS : {
							doListHistory();
							break;
						}
						// 3-3. 언어 조회
						case TAB.LAN : {
							doListLan();
							break;
						}
						// 3-4. 주소 조회
						case TAB.ADDR : {
							doListAddr();
							break;
						}
					}
				};
				
				/**
				 * @desc 재단(프리폼) 조회
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doListDtl() {
					// 리피트 특정 row 데이터를 프리폼 copy
			//TO-BE: <ExtRepeat.copyRowForm> 그리드-프리폼인 경우에는 selection바인딩으로 처리하기 때문에 불필요함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.copyRowForm("rptFndtn","frfFndtn");
					
					// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
					doCompareFrfEnable();
				};
				
				/**
				 * @desc 히스토리(이력)목록 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doListHistory(poCallBackFunc) {
					
					util.Control.setValue(app, "dipKeyDtHistory", util.DataMap.getValue(app, "dmReqKey", "strKeyDt"));
					
					// 이력관리 조회 서브이션 
					//strCommand: listFndHist 
					util.Submit.send(app, "subFndListHistory", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdFndtnHistory");
						}
						
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				};
				
				/**
				 * @desc 언어목록 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doListLan(poCallBackFunc) {
					
					// 언어목록 조회 서브이션 
					//strCommand: listFndLan 
					util.Submit.send(app, "subFndListLan", function(pbSuccess){
						if(pbSuccess){
							
							util.Control.redraw(app, "grdFndtnLan");
							
							if(util.Grid.getIndex(app, "grdFndtnLan") <= 0){
								util.Control.reset(app, "frfFndtnLan");
								util.Control.setEnable(app, false, ["frfFndtnLan"]);		
							}else{
								util.Control.setEnable(app, true, ["frfFndtnLan"]);		
							}	
						}
						
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				};
				
				/**
				 * @desc 주소목록 조회
				 * @param poCallBackFunc 콜백정의
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doListAddr(poCallBackFunc) {
					
					// 주소기준일자 셋팅
					util.Control.setValue(app, "dipKeyDtAddr", util.DataMap.getValue(app, "dmReqKey", "strKeyDt"));
					
					util.Control.redraw(app, ["ipbFndtnCdAddr","ipbFndtnNmAddr","dipKeyDtAddr"]);
					
					// 언어목록 조회 서브이션 
					//strCommand: listFndAddr 
					util.Submit.send(app, "subFndListAddr", function(pbSuccess){
						if(pbSuccess){
							util.Control.redraw(app, "grdFndtnAddr");
							
							if(util.Grid.getIndex(app, "grdFndtnAddr") <= 0){
								util.Control.reset(app, "frfFndtnAddr");
								util.Control.setEnable(app, false, ["frfFndtnAddr"]);		
							}else{
								util.Control.setEnable(app, true, ["frfFndtnAddr"]);		
							}	
						}
						
						// 조회 후 콜백함수 수행
						if (util.isFunc(poCallBackFunc)) poCallBackFunc(pbSuccess);
					});
				};
				
				/**
				 * @desc [frfFndtn]재단 onUpdate 이벤트
				 * @param 
				 * @return  
				 * @author Aeyoung Lee at 2016. 1. 26
				 */
				moPage.onUpdate_FrfFndtn = function() {
					// 프리폼 업데이트내용 그리드 반영
			//TO-BE: <ExtFreeForm.updateToRpt> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtFreeForm.updateToRpt("rptFndtn", "frfFndtn");
				};
				
				/**
				 * @desc [ipbFrfFndtnCdBase] 재단코드 변경 이벤트
						- 재단코드가 이미 사용중인 건인지 체크
				 * @param 
				 * @return  
				 * @author Aeyoung Lee at 2016. 1. 26
				 */
				moPage.onValueChanged_IpbFrfFndtnCdBase = function() {
					
					var vsStatus = util.Grid.getRowState(app, "grdFndtn");
					
					if(vsStatus == "insert"){
						
						util.DataMap.setValue(app, "dmReqCheck", "strScalFndtnCd", util.Control.getValue(app, "ipbFrfFndtnCdBase"));	// 장학재단코드
						util.DataMap.setValue(app, "dmReqCheck", "strStDt"		, "");			// 시작일자
						util.DataMap.setValue(app, "dmReqCheck", "strEndDt"		, "");			// 종료일자
						
						//strCommand: checkFndtnCd 
						util.Submit.send(app, "subCheckScalFndtnCd", function(pbSuccess){
							if(pbSuccess){
								var vsCnt = util.DataMap.getValue(app, "dmResList", "resultCount");
								if(Number(vsCnt) > 0){
									util.Msg.alert("NLS-CSS-M068");
									util.Grid.setCellValue(app, "grdFndtn", "SCAL_FNDTN_CD", "", util.Grid.getIndex(app, "grdFndtn"));
									util.Control.setValue(app, "ipbFrfFndtnCdBase", "");
								}
								
							}
						});
					}	
				};
				
				/**
				 * @desc [btnCopy]복사 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnCopy = function() {
					// 데이터관리 변경내역 있는 경우
					if(util.Grid.isModified(app, ["grdFndtn"])){
						var vsMsgParam = util.Grid.getTitle(app, "grdFndtnFndtn");
						//@의 시점 복사 작업은 [작업저장]후 진행하시기 바랍니다.
						util.Msg.alert("NLS-CSS-M089", [vsMsgParam]);
						return false;
					}	
					
					// 기준일자 필수 체크
					if(!util.validate(app, ["dipKeyDt"])){
						return false;
					}
					
					// 마스터 리피트 row 선택여부 체크
					var vnOrgRowIdx = util.Grid.getIndex(app, "grdFndtn");
					if(vnOrgRowIdx == "0"){
						var vsMsgParam = util.Grid.getTitle(app, "grdFndtnFndtn");
						// "@(을)를 선택해주세요" 메시지 출력
						util.Msg.alert("NLS-INF-M045", [vsMsgParam]);
						return;
					}
					
					var vsStDt = util.Grid.getCellValue(app, "grdFndtn", "ST_DT", vnOrgRowIdx).substring(0, 8);
					var vsEndDt = util.Grid.getCellValue(app, "grdFndtn", "END_DT", vnOrgRowIdx).substring(0, 8);
					var vsKeyDate = util.DataMap.getValue(app, "dmReqKey", "strKeyDt").substring(0, 8);
					
					if(vsEndDt != "99991231"){
						// 종료일이 9999-12-31인 데이터만 @1할 수 있습니다. 
						util.Msg.alert("NLS-CSS-M001", [NLS.NSCR.COPY]);
						return;
					}	
					
					if(vsStDt >= vsKeyDate){
						// 기준일자는 유효기간의 시작일보다 이후여야 합니다. 
						util.Msg.alert("NLS-CSS-M003");
						return;
					}	
					
					// 폐기여부 확인--??
					if(Number(vsEndDt) <= Number(vsKeyDate)){
						var vsMsgParam = ExtControl.getTextValue("lblTitleFrfFndtn");
						// "폐기된 @은(는) 복사할 수 없습니다. 이력관리 탭에서 복구해주시기 바랍니다." 메시지 출력.
						util.Msg.alert("NLS-WRN-M208", [vsMsgParam]);
						return;
					}
					
					// 신규로우 추가
					var vnNextRow = util.Grid.insertRow(app, "grdFndtn", null, vnOrgRowIdx);		
					ExtRepeat.copyToRowData("rptFndtn", vnOrgRowIdx, "rptFndtn", vnNextRow);
					
					// 기본값 세팅
					util.Grid.setCellValue(app, "grdFndtn", "UPT_STATUS", "N", vnNextRow);
					util.Grid.setCellValue(app, "grdFndtn", "LAN_DIV_RCD", msSystemLocale	  , vnNextRow);
					util.Grid.setCellValue(app, "grdFndtn", "ST_DT"	  	, vsKeyDate+"000000", vnNextRow);
					util.Grid.setCellValue(app, "grdFndtn", "END_DT"	 	, "99991231000000"  , vnNextRow);
					util.Grid.setCellValue(app, "grdFndtn", "REF_KEY"	, ""  , vnNextRow);
					util.Grid.setCellValue(app, "grdFndtn", "FLAG_GBN"	, "C" , vnNextRow);
					
			//TO-BE: <ExtRepeat.copyRowForm> 그리드-프리폼인 경우에는 selection바인딩으로 처리하기 때문에 불필요함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.copyRowForm("rptFndtn","frfFndtn", vnNextRow);
					
					// 셋팅하고 로우체인지가 일어나는게 아니므로 호출해야함
					doCompareFrfEnable();	
					
					// 프리폼 항목 포커스
					util.Control.setFocus(app,  "ipbFrfFndtnNmBase");
				};
				
				/**
				 * @desc [btnNew]신규 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnNew = function() {
					// 복사한 이력이 존재하는지 확인
					var vnCopyNodeLength = ExtInstance.getNodeListLength("/root/resList/rptFndtn/row[child::FLAG_GBN='C']");
					if(vnCopyNodeLength > 0){
						//복사중인 데이터가 있습니다. 저장 후 진행하세요.
						util.Msg.alert("NLS-CSS-M088");
						return false;
					}
					
					// 기준일자 필수 체크
					if(!util.validate(app, ["dipKeyDt"])){
						return false;
					}
					
					// 신규로우 추가
					var vnIdx = util.Grid.insertRow(app, "grdFndtn");
					
					// 신규 Defalut값 설정 
					util.Grid.setCellValue(app, "grdFndtn", "ST_DT", util.DataMap.getValue(app, "dmReqKey", "strKeyDt"), vnIdx);
					util.Grid.setCellValue(app, "grdFndtn", "END_DT", "99991231000000", vnIdx);
					util.Grid.setCellValue(app, "grdFndtn", "LAN_DIV_RCD", msSystemLocale, vnIdx);
					util.Grid.setCellValue(app, "grdFndtn", "FLAG_GBN", "N", vnIdx);
					
					// 리피트 특정 row 데이터를 프리폼 copy
			//TO-BE: <ExtRepeat.copyRowForm> 그리드-프리폼인 경우에는 selection바인딩으로 처리하기 때문에 불필요함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.copyRowForm("rptFndtn","frfFndtn");
					
					// 셋팅하고 로우체인지가 일어나는게 아니므로 호출해야함
					doCompareFrfEnable();	
					
					// 프리폼 항목 포커스
					util.Control.setFocus(app,  "ipbFrfFndtnCdBase");
				};
				
				/**
				 * @desc [btnDel]삭제 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnDel = function() {
					// 마스터 리피트 row 선택여부 체크
					var vnOrgRowIdx = util.Grid.getIndex(app, "grdFndtn");
					if(vnOrgRowIdx == "0"){
						var vsMsgParam = util.Grid.getTitle(app, "grdFndtnFndtn");
						// "@(을)를 선택해주세요" 메시지 출력
						util.Msg.alert("NLS-INF-M045", [vsMsgParam]);
						return;
					}
					
					var vsRptStatus = util.Grid.getRowState(app, "grdFndtn", vnOrgRowIdx);
					if(vsRptStatus == "insert"){
						// 삭제
						util.Grid.deleteRow(app, "grdFndtn");
						// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
						doCompareFrfEnable();	
						return;
						
					}else {
						
						// 복사한 이력이 존재하는지 확인
						var vnCopyNodeLength = ExtInstance.getNodeListLength("/root/resList/rptFndtn/row[child::FLAG_GBN='C']");
						if(vnCopyNodeLength > 0){
							//복사중인 데이터가 있습니다. 저장 후 진행하세요.
							util.Msg.alert("NLS-CSS-M088");
							return false;
						}
						
						// 신규건이면 작업취소
						var vsScalFndtnCd = util.Grid.getCellValue(app, "grdFndtn", "SCAL_FNDTN_CD", vnOrgRowIdx);
						var vsStDt = util.Grid.getCellValue(app, "grdFndtn", "ST_DT", vnOrgRowIdx).substring(0, 8);
						var vsEndDt = util.Grid.getCellValue(app, "grdFndtn", "END_DT", vnOrgRowIdx).substring(0, 8);
						var vsKeyDate = util.DataMap.getValue(app, "dmReqKey", "strKeyDt").substring(0, 8);
						
						if(vsEndDt != "99991231"){
							// 종료일이 9999-12-31인 데이터만 @1할 수 있습니다. 
							util.Msg.alert("NLS-CSS-M001", [NLS.NSCR.DEL]);
							return;
						}	
						
						// 장학재단코드 사용 중인지 체크
						util.DataMap.setValue(app, "dmReqCheck", "strScalFndtnCd", vsScalFndtnCd);	// 장학재단코드
						util.DataMap.setValue(app, "dmReqCheck", "strStDt"		, vsStDt);			// 시작일자
						util.DataMap.setValue(app, "dmReqCheck", "strEndDt"		, vsEndDt);			// 종료일자
							
						//strCommand: checkScalFndtnCd 
						util.Submit.send(app, "subCheckScalFndtnCd", function(pbSuccess){
							if(pbSuccess){
								var vnResCnt = Number(util.DataMap.getValue(app, "dmResList", "resultCount"));
								if(vnResCnt != 0){
									// 사용중인 장학금재단 코드입니다.
									util.Msg.alert("NLS-CSS-M013" ,[NLS.NSCR.REGFEEFNDTN]);
									return ;
								}
								// 삭제
								util.Grid.deleteRow(app, "grdFndtn");
								// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
								doCompareFrfEnable();						
							}
						});
					}	
				};
				
				/**
				 * @desc [btnRestore]작업취소 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnRestore = function() {
					// 작업취소
					util.Grid.restoreRow(app, "grdFndtn");
					// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
					doCompareFrfEnable();
					// 취소내용 프리폼 반영
			//TO-BE: <ExtRepeat.copyRowForm> 그리드-프리폼인 경우에는 selection바인딩으로 처리하기 때문에 불필요함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.copyRowForm("rptFndtn", "frfFndtn");
				};
				
				/**
				 * @desc [btnSave]작업저장 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnSave = function() {
					// 작업저장
					doSave();
				};
				
				/**
				 * @desc 재단목록 저장
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doSave() {
					
					// 리피트 변경사항 체크
					if(!util.Grid.isModified(app, ["grdFndtn"], "MSG")){
						return false;
					}
					
					// 리피트 Validation Check
					if(!util.validate(app, "grdFndtn")) return false;
					
					//strCommand: saveFndtn 
					util.Submit.send(app, "subSave", function(pbSuccess){
						if(pbSuccess){
							
							//조회건수가 0건이면 프리폼이 내역이 반영되지 않기 떄문
							util.Control.reset(app, "frfFndtn");
							
							doList(function(pbListSuccess) {
								// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
								if (pbListSuccess) util.Msg.notify(app, "NLS.INF.M025");
							});
						}else {
							// "저장중 오류가 발생하였습니다." 메시지 표시
							util.Msg.notify(app, "NLS.WRN.M119");
							util.Tab.setSelectedTabItem(app, "tabMain", TAB.MANAGE);
						}
					});
				};
				
				/**
				 * @desc 폐기/복구일자(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnYearSmtHis = function() {
					//기준일자 임포트(달력컨트롤ID,임포트ID)
					doOnclickSchYearSmt("dipKeyDtHistory","impSchYearSmt");
				};
				
				/**
				 * @desc 마스터 그리드의 pk_colvalues 값 세팅
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee at 2016. 2. 12
				 */
				moPage.setCssFndtnPkColRowValue = function(vpRptDetail){
					var vsPkColValues = ExtRepeat.getPKColRowValues(vpRptDetail);					
					if(!ValueUtil.isNull(vsPkColValues)){
						ExtRepeat.setPkValues("rptFndtn", vsPkColValues);
					}
				};
				
				/**
				 * @desc 기준일 이전날짜 추출
				 * @param 기준일
				 * @return  기준일 이전일
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.getBefDate = function(psKeyDate) {
					
					var y  = psKeyDate.substring(0, 4);
					var m = psKeyDate.substring(4, 6);
					var d  = psKeyDate.substring(6, 8);
					var befDt = new Date(y, m - 1, d - 1);
					var befDtYear = befDt.getFullYear().toString();	
					var befDtMonth = eval(befDt.getMonth() + 1).toString();
					var befDtDate = befDt.getDate().toString();
					
					if (befDtMonth.length == 1) befDtMonth = "0" + befDtMonth;
					if (befDtDate.length == 1) befDtDate = "0" + befDtDate;
					
					var vsBefDate = befDtYear + befDtMonth + befDtDate + "000000";
					
					return vsBefDate;
				};
				
				/**
				 * @desc [btnDisUse]폐기 onClick 이벤트
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnDisUse = function() {
					// 재단 폐기
					doDisUseHistory();
				};
				
				/**
				 * @desc 재단 폐기
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doDisUseHistory() {
					var vnCnt = Number(util.Grid.getRowCount(app, "grdFndtnHistory"));
					if(vnCnt == 0) return;
					
					// 폐기/복구일자 유효성 체크
					if(!util.validate(app, "dipKeyDtHistory")) return false;
					
					// 조회조건 기준일자 : 마스터 포커스용
					var vsSchKeyDt = util.DataMap.getValue(app, "dmReqKey", "strKeyDt").substring(0, 8);
					var vsKeyDtHist = util.Control.getValue(app, "dipKeyDtHistory").substring(0, 8);
					
					var vnMaxRowIdx = null;
					var vsMaxEndDt 	= null;
					var vsMaxStDt 	= null;
					for (var i = 1; i <= vnCnt; i++) {
						var vsEndDt = util.Grid.getCellValue(app, "grdFndtnHistory", "END_DT", i).substring(0, 8);
						var vsStDt  = util.Grid.getCellValue(app, "grdFndtnHistory", "ST_DT", i).substring(0, 8);
						if (vsEndDt == "99991231") {
							vsMaxEndDt 	= vsEndDt;
							vsMaxStDt   = vsStDt;
							vnMaxRowIdx = i;
							break;
						}
					}
					
					// 종료일자가 99991231이 아닐때, 폐기 불가
					if (vnMaxRowIdx == null) {
						// "폐기 가능한 데이터가 없습니다." 메시지 표시
						util.Msg.alert("NLS-INF-M029");
						return;
					}
					
					var vsBefDate = this.getBefDate(vsKeyDtHist).substring(0, 8);	// 폐기일자 -1
					
					if (vsMaxStDt > vsBefDate) {
						// 해당 기준일자로 폐기가능한 테이터가 없습니다.
						util.Msg.alert("NLS-CSS-M007", [NLS.NSCR.DISUSE]);
						return;
					}
					
					util.DataMap.setValue(app, "dmReqKey", "strStDt", vsKeyDtHist);
					util.DataMap.setValue(app, "dmReqKey", "strEndDt", vsMaxEndDt);
					
					// 폐기 가능여부 체크
					//strCommand: checkScalFndtnCd 
					util.Submit.send(app, "subCheckScalFndtnCd", function(pbSuccess){
						if(pbSuccess){
							
							//폐기 가능할때 
							var vnResCnt = Number(util.DataMap.getValue(app, "dmResList", "resultCount"));
							if(vnResCnt != 0){
								// 사용중인 장학금재단 코드입니다.
								util.Msg.alert("NLS-CSS-M013" ,[NLS.NSCR.REGFEEFNDTN]);
								return ;
							}
								
							// 전날자로 타겟로우의 종료일자 업데이트
							var vsMsgDate = vsKeyDtHist.substring(0, 4) + NLS.NSCR.YEAR + vsKeyDtHist.substring(4, 6) + NLS.NSCR.MONTH + vsKeyDtHist.substring(6, 8) + NLS.NSCR.DAY;
							
							// "@부로 폐기합니다. \n진행하시겠습니까?" 메시지
							if(util.Msg.confirm("NLS-CRM-M047", [vsMsgDate])   ){
								util.Grid.setCellValue(app, "grdFndtnHistory", "END_DT", vsBefDate + "000000", vnMaxRowIdx);
								util.Grid.selectRow(app, "grdFndtnHistory", vnMaxRowIdx, true);
								
								/*
									그리드에 pk_colvalues를 넣는다.
									조회 후 찾아주기 위함.
								*/
								if(vsSchKeyDt+"000000" >= vsMaxStDt+"000000"){
									this.setCssFndtnPkColRowValue("rptFndtnHistory");
								}else{
									this.setCssFndtnPkColRowValue("rptFndtn");
								}
								
								doSaveHis();
							}
						}
					});
				};
				
				/**
				 * @desc [btnDisUseCanc]폐기취소 onClick 이벤트
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnDisUseCanc = function() {
					// 교과목 폐기취소
					doUseCancHistory();
				};
				
				/**
				 * @desc 재단 폐기취소
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doUseCancHistory() {
					var vnCnt = util.Grid.getRowCount(app, "grdFndtnHistory");
					if(vnCnt == 0) return;	
					
					// 조회조건 기준일자 : 마스터 포커스용
					var vsSchKeyDt = util.DataMap.getValue(app, "dmReqKey", "strKeyDt").substring(0, 8);
					
					var vnMaxRowIdx = null;
					var vsMaxEndDt 	= null;
					var vsMaxStDt   = null;
					for (var i = 1; i <= vnCnt; i++) {
						var vsStDt  = util.Grid.getCellValue(app, "grdFndtnHistory", "ST_DT", i).substring(0, 8);
						var vsEndDt = util.Grid.getCellValue(app, "grdFndtnHistory", "END_DT", i).substring(0, 8);
						if ((vsMaxEndDt == null) || (vsMaxEndDt != null && vsMaxEndDt < vsEndDt)) {
							vsMaxStDt  = vsStDt;
							vsMaxEndDt = vsEndDt;
							vnMaxRowIdx = i;
						}
					}
			
					if (vsMaxEndDt == "99991231" ) {
						// 폐기처리된 데이터가 없습니다
						util.Msg.alert("NLS-CSS-M009");
						return;
					}
					
					// "마지막 데이터의 종료일이 9999년 12월 31일로 변경됩니다. \n진행하시겠습니까?" 메시지
					if(util.Msg.confirm("NLS-CRM-M048") ){
						util.Grid.setCellValue(app, "grdFndtnHistory", "END_DT", "99991231000000", vnMaxRowIdx);
						util.Grid.selectRow(app, "grdFndtnHistory", vnMaxRowIdx);
						
						/*
							그리드에 pk_colvalues를 넣는다.
							조회 후 찾아주기 위함.
						*/
						if(vsSchKeyDt+"000000" >= vsMaxStDt+"000000"){
							this.setCssFndtnPkColRowValue("rptFndtnHistory");
						}else{
							this.setCssFndtnPkColRowValue("rptFndtn");
						}
						
						// 이력사항 변경사항 저장
						doSaveHis();
					}
				};
				
				/**
				 * @desc [btnRecover]복구 onClick 이벤트
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnRecover = function() {
					// 재단 복구
					doRecoverHistory();
				};
				
				/**
				 * @desc 재단 복구 : 가장 최근의 레코드를 카피하여 insert한다. (단, 기준일자가 최종일자보다 커야 한다.)
				 * @param 
				 * @return  void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doRecoverHistory() {
					var vnCnt = util.Grid.getRowCount(app, "grdFndtnHistory");
					if(vnCnt == 0) return;
					
					// 폐기/복구일자 유효성 체크
					if(!util.validate(app, "dipKeyDtHistory")) return false;
					
					var vsSchKeyDt = util.DataMap.getValue(app, "dmReqKey", "strKeyDt").substring(0, 8);	// 조회조건 기준일자 : 마스터 포커스용
					var vsKeyDtHistory = util.Control.getValue(app, "dipKeyDtHistory").substring(0, 8);	// 폐기/복구일자
					
					var vsMaxStDt   = null;
					var vsMaxEndDt  = null;
					var vnMaxRowIdx = null;
					for (var i = 1; i <= vnCnt; i++) {
						var vsStDt = util.Grid.getCellValue(app, "grdFndtnHistory", "ST_DT", i).substring(0, 8);
						var vsEndDt = util.Grid.getCellValue(app, "grdFndtnHistory", "END_DT", i).substring(0, 8);
						if ((vsMaxEndDt == null) || (vsMaxEndDt != null && vsMaxEndDt < vsEndDt)) {
							vsMaxStDt = vsStDt;
							vsMaxEndDt = vsEndDt;
							vnMaxRowIdx = i;
						}
					}
					
					if(vsMaxEndDt == "99991231"){
						util.Msg.alert("NLS-CSS-M075");
						return;
					}	
					
					if (vsMaxEndDt >= vsKeyDtHistory) {
						util.Msg.alert("NLS-CSS-M007", [NLS.NSCR.RECOVERY]);
						return;
					}
					
					 var vsMsgDate = vsKeyDtHistory.substring(0, 4) + NLS.NSCR.YEAR + vsKeyDtHistory.substring(4, 6) + NLS.NSCR.MONTH + vsKeyDtHistory.substring(6, 8) + NLS.NSCR.DAY;
					 
					//  "시작일 @ 종료일 9999년12월31일로 데이터가 복구됩니다. \n진행하시겠습니까?"
					 if (util.Msg.confirm("NLS-CRM-M049", [vsMsgDate])   ) {
						/*
							그리드에 pk_colvalues를 넣는다.
							조회 후 찾아주기 위함.
						*/
						if(vsSchKeyDt+"000000" >= vsMaxStDt+"000000"){
							this.setCssFndtnPkColRowValue("rptFndtnHistory");
						}else{
							this.setCssFndtnPkColRowValue("rptFndtn");
						}
						
						// 찾은로우 다음로우에 inserRow를 진행해야함 인덱스가 중복되는 경우가 있기때문
						var vnNextRow = util.Grid.insertRow(app, "grdFndtnHistory", null, vnMaxRowIdx);
						ExtRepeat.copyToRowData("rptFndtnHistory", vnMaxRowIdx, "rptFndtnHistory", vnNextRow);
						
						util.Grid.setCellValue(app, "grdFndtnHistory", "ST_DT"	  , vsKeyDtHistory + "000000", vnNextRow);
						util.Grid.setCellValue(app, "grdFndtnHistory", "END_DT"	  , "99991231000000"		 , vnNextRow);
						util.Grid.setCellValue(app, "grdFndtnHistory", "REF_KEY"	  , ""						 , vnNextRow);
						util.Grid.setCellValue(app, "grdFndtnHistory", "UPT_STATUS", "N"						 , vnNextRow);
						
						// 이력사항 변경사항 저장
						doSaveHis();
					 }
				};
				
				/**
				 * @desc 이력관리목록 변경사항 저장
				 * @param 
				 * @return  
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				function doSaveHis() {
					// 리피트 변경사항 체크
					if(!util.Grid.isModified(app, ["grdFndtnHistory"], "MSG")){
						return false;
					}
					
					//strCommand: saveFndtn 
					util.Submit.send(app, "subSaveHistory", function(pbSuccess){
						if(pbSuccess) {
			//				// 디테일 저장시 마스터의 포커스를 찾아가기위한 인스턴스 설정
			//				var vsSbCd =  ExtInstance.getValue("/root/reqSelRow/strSbCd");
			//				ExtInstance.setValue("/root/reqSelRow/strTmpSbCd", vsSbCd);
							util.Control.redraw(app, "grdFndtnHistory");
							
							//재단목록조회
							doList(function(pbSuccess) {
								if (pbSuccess){
									// 조회 : "갱신된 데이터가 조회되었습니다." header 메세지 표시
									util.Msg.notify(app, "NLS.INF.M025");
									
			//						// 탭이동용 인스턴스 초기화
			//						ExtInstance.setValue("/root/reqSelRow/strTmpSbCd", "");
								}
							});
						}else {
							// "저장중 오류가 발생하였습니다." 메시지 표시
							util.Msg.notify(app, "NLS.WRN.M119");
							util.Tab.setSelectedTabItem(app, "tabMain", TAB.HIS);
						}
					});
				};
			
				/**
				 * @desc [rptFndtnLan]언어목록 onRowSelect 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onRowSelect_RptFndtnLan = function() {
					// 리피트 특정 row 데이터를 프리폼 copy
			//TO-BE: <ExtRepeat.copyRowForm> 그리드-프리폼인 경우에는 selection바인딩으로 처리하기 때문에 불필요함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.copyRowForm("rptFndtnLan", "frfFndtnLan");
					// 프리폼 비활성화 제어
					doCompareFrfEnableLan();
				};
				
				/**
				 * @desc [frfFndtnLan]언어목록 onUpdate 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onUpdate_FrfFndtnLan = function() {
					// 프리폼 업데이트내용 그리드 반영
			//TO-BE: <ExtFreeForm.updateToRpt> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtFreeForm.updateToRpt("rptFndtnLan", "frfFndtnLan");
				};
				
				/**
				 * @desc  마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어(언어목록)
				 *			    1. index가 지정되지 않았을 경우
				 *			    2. 현재 index의 로우가 삭제 상태일 경우 
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				function doCompareFrfEnableLan() {
				
					if( (!util.Grid.getIndex(app, "grdFndtnLan")) || util.Grid.getRowState(app, "grdFndtnLan") == cpr.data.tabledata.RowState.DELETED){
						util.Control.setEnable(app, false, ["frfFndtnLan"]);	
					} else {
						
						// 기본언어인 경우 프리폼항목 Enable false
						var vaDefLanPkEnableCtl = ["cbbFrfLanDivRcdLan"];
						var vaDefLanEnableCtl = ["ipbFrfFndtnNmLan", "ipbFrfShortNmLan", "ipbFrfPrtNmLan", "ipbFrfRepNmLan", "ipbFrfChagDeptNmLan", "ipbFrfChargerNmLan", "ipbFrfInturNmLan", "txtFrfIntuBkgrLan"];
						
						var vsStandLan = util.DataMap.getValue(app, "dmReqKey", "strLanDivRcd");
						var vsLan = util.Grid.getCellValue(app, "grdFndtnLan", "LAN_DIV_RCD");
						
						if(vsStandLan == vsLan && util.Grid.getRowState(app, "grdFndtnLan") != cpr.data.tabledata.RowState.INSERTED){
							util.Control.setEnable(app, false, vaDefLanPkEnableCtl);	
							util.Control.setEnable(app, false, vaDefLanEnableCtl);	
						}else if(util.Grid.getRowState(app, "grdFndtnLan") == ""){
							util.Control.setEnable(app, false, vaDefLanPkEnableCtl);	
							util.Control.setEnable(app, true, vaDefLanEnableCtl);	
						}else{
							util.Control.setEnable(app, true, vaDefLanPkEnableCtl);	
							util.Control.setEnable(app, true, vaDefLanEnableCtl);		
						}	
					}
					
					// 언어목록 변경사항 에따른 재단목록 Enable 처리
					if(util.Grid.isModified(app, "grdFndtnLan")){
						util.Control.setEnable(app, false, ["grpData"]);
					}else {
						util.Control.setEnable(app, true, ["grpData"]);
					}
				};
				
				/**
				 * @desc [btnNewLan]신규(언어) onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onClick_BtnNewLan = function() {
					// 신규로우 추가
					var vnIdx = util.Grid.insertRow(app, "grdFndtnLan");
					
					// 신규 Defalut값 설정 		
					util.Grid.setCellValue(app, "grdFndtnLan", "SCAL_FNDTN_CD", util.DataMap.getValue(app, "dmReqKey", "strScalFndtnCd"));	// 재단코드
					util.Grid.setCellValue(app, "grdFndtnLan", "REF_KEY"	     , util.DataMap.getValue(app, "dmReqKey", "strRefKey"));			// 참조키
					
			//TO-BE: <ExtRepeat.copyRowForm> 그리드-프리폼인 경우에는 selection바인딩으로 처리하기 때문에 불필요함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.copyRowForm("rptFndtnLan", "frfFndtnLan", vnIdx);
					
					// 프리폼 항목 포커스
					util.Control.setFocus(app,  "cbbFrfLanDivRcdLan");
				};
				
				/**
				 * @desc [btnDelLan]삭제(언어) onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onClick_BtnDelLan = function() {
					
					// 기본언어구분
					var vsStnLanDivRcd = ValueUtil.fixNull(util.DataMap.getValue(app, "dmReqKey", "strLanDivRcd"));
					var vsLanDivRcd =  util.FreeForm.getValue(app, "frfFndtnLan", "LAN_DIV_RCD")
					
					var vsUptStatus = util.Grid.getRowState(app, "grdFndtnLan", "UPT_STATUS");
					if (vsStnLanDivRcd == vsLanDivRcd && vsUptStatus != "insert"){
						// 기본언어레코드는 삭제할 수 없습니다. 메시지 표시
						util.Msg.alert("NLS-WRN-M010");
						return;
					}
					
					// 삭제
					util.Grid.deleteRow(app, "grdFndtnLan");
					// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
					doCompareFrfEnableLan();
				};
				
				/**
				 * @desc [btnRestoreLan]작업취소(언어) onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onClick_BtnRestoreLan = function() {
					// 작업취소
					util.Grid.restoreRow(app, "grdFndtnLan");
					// 취소내용 프리폼 반영
			//TO-BE: <ExtRepeat.copyRowForm> 그리드-프리폼인 경우에는 selection바인딩으로 처리하기 때문에 불필요함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.copyRowForm("rptFndtnLan", "frfFndtnLan");
					// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
					doCompareFrfEnableLan();
				};
				
				/**
				 * @desc [btnSaveLan]작업저장(언어) onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onClick_BtnSaveLan = function() {
					// 언어목록 변경사항 저장
					doSaveLan();
				};
				
				/**
				 * @desc 언어목록 변경사항 저장
				 * @param 
				 * @return  
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				function doSaveLan() {
					// 리피트 변경사항 체크
					if(!util.Grid.isModified(app, ["grdFndtnLan"], "MSG")){
						return false;
					}
					
					// 리피트 Validation Check
					if(!util.validate(app, "grdFndtnLan")) return false;
					
					//strCommand: saveScalFndtnLan 
					util.Submit.send(app, "subSaveLan", function(pbSuccess){
						if(pbSuccess) {
							// 언어목록 조회
							doListLan(function(pbSuccessList) {
								if(pbSuccessList){
									// "갱신된 데이터가 조회되었습니다." header 메세지 표시
									util.Msg.notify(app, "NLS.INF.M025");
								}
							});
						}else {
							// "저장중 오류가 발생하였습니다." 메시지 표시
							util.Msg.notify(app, "NLS.WRN.M119");
						}
					});
				};
				
				/**
				 * @desc [rptFndtnAddr]주소목록 onRowSelect 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onRowSelect_RptFndtnAddr = function() {
					// 리피트 특정 row 데이터를 프리폼 copy
			//TO-BE: <ExtRepeat.copyRowForm> 그리드-프리폼인 경우에는 selection바인딩으로 처리하기 때문에 불필요함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.copyRowForm("rptFndtnAddr", "frfFndtnAddr");
					// 프리폼 비활성화 제어
					doCompareFrfEnableAddr();
				}
				
				/**
				 * @desc 기준일자-주소(돋보기버튼) onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 17
				 */
				moPage.onClick_BtnYearSmtAddr = function() {
					//기준일자 임포트(달력컨트롤ID,임포트ID)
					doOnclickSchYearSmt("dipKeyDtAddr","impSchYearSmt");
				}
				
				/**
				 * @desc [frfFndtnAddr]주소목록 onUpdate 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onUpdate_FrfFndtnAddr = function() {
					// 프리폼 업데이트내용 그리드 반영
			//TO-BE: <ExtFreeForm.updateToRpt> 전환작업시 불필요하여 주석처리함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtFreeForm.updateToRpt("rptFndtnAddr", "frfFndtnAddr");
				}
				
				/**
				 * @desc  마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어(주소목록)
				 *			    1. index가 지정되지 않았을 경우
				 *			    2. 현재 index의 로우가 삭제 상태일 경우 
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				function doCompareFrfEnableAddr() {
					
					if( (!util.Grid.getIndex(app, "grdFndtnAddr")) || util.Grid.getRowState(app, "grdFndtnAddr") == cpr.data.tabledata.RowState.DELETED){
						util.Control.setEnable(app, false, ["frfFndtnAddr"]);	
					} else {
						util.Control.setEnable(app, true, ["frfFndtnAddr"]);	
					}
					
					// 주소목록 변경사항 에따른 재단목록 Enable 처리
					if(util.Grid.isModified(app, "grdFndtnAddr")){
						util.Control.setEnable(app, false, ["grpData"]);
					}else {
						util.Control.setEnable(app, true, ["grpData"]);
					}
				};
				
				/**
				 * @desc [btnPopZipcode]우편번호검색버튼 onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onClick_BtnPopZipcode = function(sender) {
					doOnClickStdCmnPZipSearch(sender);
				};
				
				/**
				 * @desc [btnNewAddr]신규(주소) onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onClick_BtnNewAddr = function() {
					// 기준일자 필수 체크
					if(!util.validate(app, ["dipKeyDtAddr"])){
						return false;
					}
					
					var vsKeyDtAddr = util.Control.getValue(app, "dipKeyDtAddr").substring(0, 8);
					var vsMaxStDt   = null;
					var vsMaxEndDt  = null;
					var vnMaxRowIdx = null;
					var vsTmpStDt   = null;
					for (var i = 1; i <= util.Grid.getRowCount(app, "grdFndtnAddr"); i++) {
						
						var vsStatus = util.Grid.getRowState(app, "grdFndtnAddr", i);
						if(vsStatus == "delete") continue;
						
						var vsStDt = util.Grid.getCellValue(app, "grdFndtnAddr", "ST_DT", i).substring(0, 8);
						var vsEndDt = util.Grid.getCellValue(app, "grdFndtnAddr", "END_DT", i).substring(0, 8);
						if ((vsMaxEndDt == null) || (vsMaxEndDt != null && vsMaxEndDt < vsEndDt)) {
							vsMaxStDt = vsStDt;
							vsMaxEndDt = vsEndDt;
							vnMaxRowIdx = i;
						}
						
						if (vsKeyDtAddr < vsStDt) {
							vsTmpStDt = Math.max(vsTmpStDt, vsStDt);
						}
					}
					
					if(vsMaxStDt >= vsKeyDtAddr){
						// 해당 기준일자로 신규가능한 테이터가 없습니다.
						util.Msg.alert("NLS-CSS-M007", ["신규"]);
						return;
					}	
					
					if(vnMaxRowIdx != null){
						util.Grid.setCellValue(app, "grdFndtnAddr", "END_DT", this.getBefDate(vsKeyDtAddr), vnMaxRowIdx);
						util.Grid.selectRow(app, "grdFndtnAddr", vnMaxRowIdx);
					}	
					
					// 최초입력인 경우 19000101, 그외 기준값
					var vsAddrNodeLength = ExtInstance.getNodeListLength("/root/resList/rptFndtnAddr/row[child::UPT_STATUS !='D']");
					var vsNewStDt = vsAddrNodeLength == 0 ? "19000101000000" : vsKeyDtAddr+"000000";
					
					// 중간시점 삽입하는 경우 종료일자를 전데이터의 시작일자 -1
					var vsNewEndDt = vsTmpStDt == null ? "99991231000000" : this.getBefDate(vsTmpStDt);
					
					var vnIdx = util.Grid.insertRow(app, "grdFndtnAddr", vnMaxRowIdx);
					
					// 신규 Defalut값 설정 		
					util.Grid.setCellValue(app, "grdFndtnAddr", "ADDR_PRP_DIV_RCD", "CB011BASE"		, vnIdx);	
					util.Grid.setCellValue(app, "grdFndtnAddr", "USE_TAB_NM"	 	 , "CSS_FNDTN"		, vnIdx);	
					util.Grid.setCellValue(app, "grdFndtnAddr", "KEY_TAB_NM"		 , util.DataMap.getValue(app, "dmReqKey", "strScalFndtnCd"), vnIdx);
					util.Grid.setCellValue(app, "grdFndtnAddr", "ST_DT"			 , vsNewStDt		, vnIdx);	
					util.Grid.setCellValue(app, "grdFndtnAddr", "END_DT"			 , vsNewEndDt		, vnIdx);	
					util.Grid.setCellValue(app, "grdFndtnAddr", "REP_ADDR_YN"	 , "Y"				, vnIdx);
					
			//TO-BE: <ExtRepeat.copyRowForm> 그리드-프리폼인 경우에는 selection바인딩으로 처리하기 때문에 불필요함(삭제 필요)(2020-12-21 : SULMOIHO)
			//		ExtRepeat.copyRowForm("rptFndtnAddr", "frfFndtnAddr", vnIdx);
					
					// 프리폼 항목 포커스
					util.Control.setFocus(app,  "ipbFrfZipcodeAddr");
				};
				
				/**
				 * @desc [btnDelLan]삭제(주소) onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onClick_BtnDelAddr= function() {
					// 마스터 리피트 row 선택여부 체크
					var vnOrgRowIdx = util.Grid.getIndex(app, "grdFndtnAddr");
					if(vnOrgRowIdx == "0"){
						var vsMsgParam = util.Grid.getTitle(app, "grdFndtnAddrFndtnAddr");
						// "@(을)를 선택해주세요" 메시지 출력
						util.Msg.alert("NLS-INF-M045", [vsMsgParam]);
						return;
					}
					
					var vsDelEndDt = util.FreeForm.getValue(app, "frfFndtnAddr", "END_DT").substring(0, 8);
					
					if(vsDelEndDt != "99991231"){
						// 종료일이 9999-12-31인 데이터만 @1할 수 있습니다. 
						util.Msg.alert("NLS-CSS-M001", [NLS.NSCR.DEL]);
						return;
					}
					
					// 삭제
					util.Grid.deleteRow(app, "grdFndtnAddr");
					
					// 9999-12-31 이전자료의 인덱스값을 가지고 옴
					var vsMaxEndDt  = null;
					var vnMaxRowIdx = null;
					for (var i = 1; i <= util.Grid.getRowCount(app, "grdFndtnAddr"); i++) {
						
						var vsStatus = util.Grid.getRowState(app, "grdFndtnAddr", i);
						if(vsStatus == "delete") continue;
						
						var vsEndDt = util.Grid.getCellValue(app, "grdFndtnAddr", "END_DT", i).substring(0, 8);
						if ((vsMaxEndDt == null) || (vsMaxEndDt != null && vsMaxEndDt < vsEndDt)) {
							vsMaxEndDt = vsEndDt;
							vnMaxRowIdx = i;
						}
					}
					
					if(vnMaxRowIdx != null){			
						// 99991231 이전 데이터를 99991231로 변경
						util.Grid.setCellValue(app, "grdFndtnAddr", "END_DT", "99991231000000", vnMaxRowIdx);
						ExtRepeat.updateRow("rptFndtnAddr", "UPT_STATUS", vnMaxRowIdx);
					}
					// 마스터 리피트 상태에 따른 디테일 프리폼 비활성화 제어
					doCompareFrfEnableAddr();
				};
				
				/**
				 * @desc [btnSaveLan]작업저장(주소) onClick 이벤트
				 * @param 
				 * @return void
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				moPage.onClick_BtnSaveAddr = function() {
					// 주소목록 변경사항 저장
					doSaveAddr();
				};
				
				/**
				 * @desc 주소목록 변경사항 저장
				 * @param 
				 * @return  
				 * @author Aeyoung Lee 2016. 2. 18
				 */
				function doSaveAddr() {
					// 리피트 변경사항 체크
					if(!util.Grid.isModified(app, ["grdFndtnAddr"], "MSG")){
						return false;
					}
					
					// 리피트 Validation Check
					if(!util.validate(app, "grdFndtnAddr")) return false;
					
					//strCommand: saveAddr 
					util.Submit.send(app, "subSaveAddr", function(pbSuccess){
						if(pbSuccess) {
							// 주소목록 조회
							doListAddr(function(pbSuccessList) {
								if(pbSuccessList){
									// "갱신된 데이터가 조회되었습니다." header 메세지 표시
									util.Msg.notify(app, "NLS.INF.M025");
								}
							});
						}else {
							// "저장중 오류가 발생하였습니다." 메시지 표시
							util.Msg.notify(app, "NLS.WRN.M119");
						}
					});
				};
				
				return moPage;
			};;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsListLanDivRcd");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsFndtn");
			dataSet_2.parseData({
				"info": "CSS_FNDTN@SCAL_FNDTN_CD,ST_DT,END_DT",
				"columns": [
					{"name": "SCAL_FNDTN_CD"},
					{"name": "ST_DT"},
					{"name": "END_DT"},
					{"name": "REF_KEY"},
					{"name": "LAN_DIV_RCD"},
					{"name": "SCAL_FNDTN_NM"},
					{"name": "SHORT_NM"},
					{"name": "PRT_SCAL_FNDTN_NM"},
					{"name": "REP_NM"},
					{"name": "BIZM_NO"},
					{"name": "CHAG_DEPT_NM"},
					{"name": "CHARGER_NM"},
					{"name": "INTUR_NM"},
					{"name": "INTU_DT"},
					{"name": "INTU_BKGR"},
					{"name": "REMARK"},
					{"name": "FLAG_GBN"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsFrfFndtn");
			dataSet_3.parseData({
				"columns": [
					{"name": "SCAL_FNDTN_CD"},
					{"name": "ST_DT"},
					{"name": "END_DT"},
					{"name": "REF_KEY"},
					{"name": "LAN_DIV_RCD"},
					{"name": "SCAL_FNDTN_NM"},
					{"name": "SHORT_NM"},
					{"name": "PRT_SCAL_FNDTN_NM"},
					{"name": "REP_NM"},
					{"name": "BIZM_NO"},
					{"name": "CHAG_DEPT_NM"},
					{"name": "CHARGER_NM"},
					{"name": "INTUR_NM"},
					{"name": "INTU_DT"},
					{"name": "INTU_BKGR"},
					{"name": "REMARK"},
					{"name": "FLAG_GBN"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsFndtnHistory");
			dataSet_4.parseData({
				"info": "CSS_FNDTN@SCAL_FNDTN_CD,ST_DT,END_DT",
				"columns": [
					{"name": "SCAL_FNDTN_CD"},
					{"name": "SCAL_FNDTN_NM"},
					{"name": "ST_DT"},
					{"name": "END_DT"},
					{"name": "SHORT_NM"},
					{"name": "PRT_SCAL_FNDTN_NM"},
					{"name": "REP_NM"},
					{"name": "CHAG_DEPT_NM"},
					{"name": "CHARGER_NM"},
					{"name": "INTUR_NM"},
					{"name": "INTU_DT"},
					{"name": "BIZM_NO"},
					{"name": "INTU_BKGR"},
					{"name": "REMARK"},
					{"name": "LAN_DIV_RCD"},
					{"name": "REF_KEY"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsFndtnLan");
			dataSet_5.parseData({
				"info": "CSS_FNDTN_LAN@REF_KEY,LAN_DIV_RCD,SCAL_FNDTN_CD",
				"columns": [
					{"name": "SCAL_FNDTN_CD"},
					{"name": "SCAL_FNDTN_NM"},
					{"name": "LAN_DIV_RCD"},
					{"name": "SHORT_NM"},
					{"name": "PRT_SCAL_FNDTN_NM"},
					{"name": "CHAG_DEPT_NM"},
					{"name": "INTUR_NM"},
					{"name": "INTU_BKGR"},
					{"name": "REF_KEY"},
					{"name": "CHARGER_NM"},
					{"name": "REP_NM"}
				],
				"rows": []
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsFrfFndtnLan");
			dataSet_6.parseData({
				"columns": [
					{"name": "LAN_DIV_RCD"},
					{"name": "SCAL_FNDTN_CD"},
					{"name": "SCAL_FNDTN_NM"},
					{"name": "SHORT_NM"},
					{"name": "PRT_SCAL_FNDTN_NM"},
					{"name": "REP_NM"},
					{"name": "CHAG_DEPT_NM"},
					{"name": "CHARGER_NM"},
					{"name": "INTUR_NM"},
					{"name": "INTU_BKGR"},
					{"name": "REF_KEY"}
				],
				"rows": []
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsFndtnAddr");
			dataSet_7.parseData({
				"info": "CMN_ADDR@ADDR_PRP_DIV_RCD,USE_TAB_NM,KEY_TAB_NM,ST_DT,END_DT",
				"columns": [
					{"name": "HOMEPAGE1"},
					{"name": "KEY_TAB_NM"},
					{"name": "MESSENGER2"},
					{"name": "FAX_EXT_NO"},
					{"name": "MESSENGER1"},
					{"name": "HOMEPAGE2"},
					{"name": "REMARK"},
					{"name": "REP_ADDR_YN"},
					{"name": "ZIPSEQ"},
					{"name": "CLP_NO"},
					{"name": "ADDR2"},
					{"name": "ADDR1"},
					{"name": "AEN"},
					{"name": "RGN"},
					{"name": "EMAIL"},
					{"name": "REP_CTTP_RCD"},
					{"name": "ST_DT"},
					{"name": "END_DT"},
					{"name": "USE_TAB_NM"},
					{"name": "ADDR_PRP_DIV_RCD"},
					{"name": "DRT_TEL_NO"},
					{"name": "CITY_NM"},
					{"name": "POB_ZIPCODE"},
					{"name": "REP_TEL_NO"},
					{"name": "ZIPCODE"},
					{"name": "FAX_NO"},
					{"name": "PAGER_NO"},
					{"name": "NAT_RCD"},
					{"name": "POB"}
				],
				"rows": []
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsFrfFndtnAddr");
			dataSet_8.parseData({
				"columns": [
					{"name": "HOMEPAGE1"},
					{"name": "KEY_TAB_NM"},
					{"name": "MESSENGER2"},
					{"name": "FAX_EXT_NO"},
					{"name": "MESSENGER1"},
					{"name": "HOMEPAGE2"},
					{"name": "REMARK"},
					{"name": "REP_ADDR_YN"},
					{"name": "ZIPSEQ"},
					{"name": "CLP_NO"},
					{"name": "ADDR2"},
					{"name": "ADDR1"},
					{"name": "AEN"},
					{"name": "RGN"},
					{"name": "EMAIL"},
					{"name": "REP_CTTP_RCD"},
					{"name": "ST_DT"},
					{"name": "END_DT"},
					{"name": "USE_TAB_NM"},
					{"name": "ADDR_PRP_DIV_RCD"},
					{"name": "DRT_TEL_NO"},
					{"name": "CITY_NM"},
					{"name": "POB_ZIPCODE"},
					{"name": "REP_TEL_NO"},
					{"name": "ZIPCODE"},
					{"name": "FAX_NO"},
					{"name": "PAGER_NO"},
					{"name": "NAT_RCD"},
					{"name": "POB"}
				],
				"rows": []
			});
			app.register(dataSet_8);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "strKeyDt",
						"dataType": "string"
					},
					{
						"name": "strFndtnNm",
						"dataType": "string"
					},
					{
						"name": "strEndYn",
						"dataType": "string"
					},
					{
						"name": "strKeyDtHistory",
						"dataType": "string"
					},
					{
						"name": "strKeyDtAddr",
						"dataType": "string"
					},
					{
						"name": "strScalFndtnCd",
						"dataType": "string"
					},
					{
						"name": "strScalFndtnNm",
						"dataType": "string"
					},
					{
						"name": "strStDt",
						"dataType": "string"
					},
					{
						"name": "strEndDt",
						"dataType": "string"
					},
					{
						"name": "strRefKey",
						"dataType": "string"
					},
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmResOnLoad");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "strSystemLan",
						"dataType": "string"
					},
					{
						"name": "strCutDt",
						"dataType": "string"
					},
					{
						"name": "strKeyDt",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmResList");
			dataMap_3.parseData({
				"columns" : [{
					"name": "resultCount",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmReqCheck");
			dataMap_4.parseData({
				"columns" : [
					{
						"name": "strScalFndtnCd",
						"dataType": "string"
					},
					{
						"name": "strStDt",
						"dataType": "string"
					},
					{
						"name": "strEndDt",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_4);
			
			var dataMap_5 = new cpr.data.DataMap("dmReqSelRow");
			dataMap_5.parseData({
				"columns" : [
					{
						"name": "strScalFndtnCd",
						"dataType": "string"
					},
					{
						"name": "strRefKey",
						"dataType": "string"
					},
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					},
					{
						"name": "strTmpScalFndtnCd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_5);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/css/StdCssFndtn/";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataMap_2, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subFndList");
			submission_2.action = "/css/StdCssFndtn/";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subFndListHistory");
			submission_3.action = "/css/StdCssFndtn/";
			submission_3.mediaType = "application/x-www-form-urlencoded";
			submission_3.addRequestData(dataMap_1);
			submission_3.addResponseData(dataSet_4, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subFndListLan");
			submission_4.action = "/css/StdCssFndtn/";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.addRequestData(dataMap_1);
			submission_4.addResponseData(dataSet_5, false);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subFndListAddr");
			submission_5.action = "/css/StdCssFndtn/";
			submission_5.mediaType = "application/x-www-form-urlencoded";
			submission_5.addRequestData(dataMap_1);
			submission_5.addResponseData(dataSet_7, false);
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("subSave");
			submission_6.action = "/css/StdCssFndtn/";
			submission_6.mediaType = "application/x-www-form-urlencoded";
			submission_6.addRequestData(dataSet_2);
			submission_6.addRequestData(dataMap_1);
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("subSaveHistory");
			submission_7.action = "/css/StdCssFndtn/";
			submission_7.mediaType = "application/x-www-form-urlencoded";
			submission_7.addRequestData(dataSet_4);
			submission_7.addRequestData(dataMap_1);
			app.register(submission_7);
			
			var submission_8 = new cpr.protocols.Submission("subSaveLan");
			submission_8.action = "/css/StdCssFndtn/";
			submission_8.mediaType = "application/x-www-form-urlencoded";
			submission_8.addRequestData(dataSet_5);
			app.register(submission_8);
			
			var submission_9 = new cpr.protocols.Submission("subSaveAddr");
			submission_9.action = "/css/StdCssFndtn/";
			submission_9.mediaType = "application/x-www-form-urlencoded";
			submission_9.addRequestData(dataSet_7);
			app.register(submission_9);
			
			var submission_10 = new cpr.protocols.Submission("subCheckScalFndtnCd");
			submission_10.action = "/css/StdCssFndtn/";
			submission_10.mediaType = "application/x-www-form-urlencoded";
			submission_10.addRequestData(dataMap_4);
			submission_10.addResponseData(dataMap_3, false);
			app.register(submission_10);
			
			app.supportMedia("all and (min-width: 1235px)", "default");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1234px)", "notebook");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader1");
			container.addChild(userDefinedControl_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "25px"
			});
			
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				button_1.bind("value").toLanguage("UI-SCR-SCH");
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"left": "1158px",
					"width": "60px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output("optKeyDt");
				output_1.value = "";
				output_1.style.setClasses(["require"]);
				output_1.bind("value").toLanguage("UI-SCR-STDDT");
				container.addChild(output_1, {
					"top": "5px",
					"left": "5px",
					"width": "90px",
					"height": "25px"
				});
				var dateInput_1 = new cpr.controls.DateInput("dipKeyDt");
				dateInput_1.format = "YYYY-MM-DD";
				dateInput_1.userAttr({"require": "Y"});
				dateInput_1.style.css({
					"text-align" : "center"
				});
				dateInput_1.bind("fieldLabel").toExpression("#optKeyDt.value");
				dateInput_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strKeyDt");
				if(typeof onDipKeyDtKeyup == "function") {
					dateInput_1.addEventListener("keyup", onDipKeyDtKeyup);
				}
				container.addChild(dateInput_1, {
					"top": "5px",
					"left": "100px",
					"width": "131px",
					"height": "25px"
				});
				var checkBox_1 = new cpr.controls.CheckBox("ckbEndYn");
				checkBox_1.value = "";
				checkBox_1.trueValue = "Y";
				checkBox_1.falseValue = "";
				checkBox_1.text = "폐기재단포함";
				checkBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strEndYn");
				container.addChild(checkBox_1, {
					"top": "5px",
					"left": "260px",
					"width": "120px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btnYearSmt");
				button_2.value = "";
				button_2.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnYearSmtClick == "function") {
					button_2.addEventListener("click", onBtnYearSmtClick);
				}
				container.addChild(button_2, {
					"top": "5px",
					"left": "230px",
					"width": "20px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbFndtnNm");
				inputBox_1.maxLength = 200;
				inputBox_1.bind("fieldLabel").toExpression("#optFndtnNm.value");
				inputBox_1.bind("value").toDataMap(app.lookup("dmReqKey"), "strFndtnNm");
				if(typeof onIpbFndtnNmKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbFndtnNmKeydown);
				}
				container.addChild(inputBox_1, {
					"top": "5px",
					"left": "485px",
					"width": "290px",
					"height": "25px"
				});
				var output_2 = new cpr.controls.Output("optFndtnNm");
				output_2.value = "";
				output_2.bind("value").toLanguage("UI-SCR-FNDTNNAME");
				container.addChild(output_2, {
					"top": "5px",
					"left": "390px",
					"width": "90px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "35px",
				"left": "5px",
				"width": "1225px",
				"height": "32px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle();
				userDefinedControl_2.bind("title").toLanguage("UI-SCR-SUBLIST");
				container.addChild(userDefinedControl_2, {
					"top": "5px",
					"left": "5px",
					"width": "215px",
					"height": "25px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("grdFndtn");
				grid_1.init({
					"dataSet": app.lookup("dsFndtn"),
					"columns": [
						{"width": "25px"},
						{"width": "40px"},
						{"width": "73px"},
						{"width": "161px"},
						{"width": "95px"},
						{"width": "95px"},
						{"width": "129px"},
						{"width": "141px"},
						{"width": "117px"},
						{"width": "122px"},
						{"width": "95px"},
						{"width": "117px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "F";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-FNDTNCD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SB_CD_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-ST_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-END_DT");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-SCR-SPVSDEPTNM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-REG_FEE_XCP_YN");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-GLS-SHORT_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SPVS_COL_CD_NM");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SPVS_COL_CD");
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.bind("text").toLanguage("UI-DB-SB_SMRY");
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "25px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.control = (function(){
										var output_3 = new cpr.controls.Output();
										output_3.style.css({
											"text-align" : "center"
										});
										return output_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "SCAL_FNDTN_CD";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "SCAL_FNDTN_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "ST_DT";
									cell.control = (function(){
										var output_4 = new cpr.controls.Output("gdOptStDt");
										output_4.dataType = "date";
										output_4.format = "YYYY-MM-DD";
										output_4.bind("value").toDataColumn("ST_DT");
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "END_DT";
									cell.control = (function(){
										var output_5 = new cpr.controls.Output("gdOptEndDt");
										output_5.dataType = "date";
										output_5.format = "YYYY-MM-DD";
										output_5.style.css({
											"text-align" : "center"
										});
										output_5.bind("value").toDataColumn("END_DT");
										return output_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "REP_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "CHAG_DEPT_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "CHARGER_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "INTUR_NM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "INTU_DT";
									cell.control = (function(){
										var output_6 = new cpr.controls.Output("gdOptIntuDt");
										output_6.dataType = "date";
										output_6.format = "YYYY-MM-DD";
										output_6.style.css({
											"text-align" : "center"
										});
										output_6.bind("value").toDataColumn("INTU_DT");
										return output_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "BIZM_NO";
								}
							}
						]
					}
				});
				if(typeof onGrdFndtnSelectionChange == "function") {
					grid_1.addEventListener("selection-change", onGrdFndtnSelectionChange);
				}
				container.addChild(grid_1, {
					"top": "30px",
					"left": "5px",
					"width": "1213px",
					"height": "233px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "72px",
				"left": "3px",
				"width": "1225px",
				"height": "268px"
			});
			
			var group_3 = new cpr.controls.Container("grpDataDtl");
			// Layout
			var xYLayout_4 = new cpr.controls.layouts.XYLayout();
			group_3.setLayout(xYLayout_4);
			(function(container){
				var tabFolder_1 = new cpr.controls.TabFolder("tabMain");
				
				var tabItem_1 = (function(tabFolder){
					var tabItem_1 = new cpr.controls.TabItem();
					tabItem_1.text = "tab1";
					tabItem_1.name = "tabManage";
					var group_4 = new cpr.controls.Container("grpManage");
					// Layout
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.topMargin = "0px";
					formLayout_1.rightMargin = "0px";
					formLayout_1.bottomMargin = "0px";
					formLayout_1.leftMargin = "0px";
					formLayout_1.horizontalSpacing = "0px";
					formLayout_1.verticalSpacing = "0px";
					formLayout_1.setColumns(["1fr"]);
					formLayout_1.setRows(["1fr"]);
					group_4.setLayout(formLayout_1);
					(function(container){
						var group_5 = linker.group_5 = new cpr.controls.Container("frfFndtn");
						group_5.style.setClasses(["form-box"]);
						// Layout
						var xYLayout_5 = new cpr.controls.layouts.XYLayout();
						group_5.setLayout(xYLayout_5);
						(function(container){
							var inputBox_2 = new cpr.controls.InputBox("ipbFrfFndtnNmBase");
							inputBox_2.maxLength = 200;
							inputBox_2.userAttr({"require": "Y"});
							inputBox_2.bind("fieldLabel").toExpression("#optFrfFndtnNmBase.value");
							inputBox_2.bind("value").toDataColumn("SCAL_FNDTN_NM");
							container.addChild(inputBox_2, {
								"top": "55px",
								"left": "120px",
								"width": "300px",
								"height": "25px"
							});
							var dateInput_2 = new cpr.controls.DateInput("dipFrfStDtBase");
							dateInput_2.readOnly = true;
							dateInput_2.maxDate = new Date(9999, 11, 31);
							dateInput_2.format = "YYYY-MM-DD";
							dateInput_2.style.css({
								"text-align" : "center"
							});
							dateInput_2.bind("fieldLabel").toExpression("#optFrfStDtBase.value");
							dateInput_2.bind("value").toDataColumn("ST_DT");
							container.addChild(dateInput_2, {
								"top": "5px",
								"left": "120px",
								"width": "110px",
								"height": "25px"
							});
							var output_7 = new cpr.controls.Output("optFrfStDtBase");
							output_7.value = "";
							output_7.style.setClasses(["require"]);
							output_7.bind("value").toLanguage("UI-DB-ST_DT");
							container.addChild(output_7, {
								"top": "5px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var output_8 = new cpr.controls.Output("optFrfEndDtBase");
							output_8.value = "";
							output_8.style.setClasses(["require"]);
							output_8.bind("value").toLanguage("UI-DB-END_DT");
							container.addChild(output_8, {
								"top": "5px",
								"left": "240px",
								"width": "110px",
								"height": "25px"
							});
							var dateInput_3 = new cpr.controls.DateInput("dipFrfEndDtBase");
							dateInput_3.readOnly = true;
							dateInput_3.maxDate = new Date(9999, 11, 31);
							dateInput_3.format = "YYYY-MM-DD";
							dateInput_3.style.css({
								"text-align" : "center"
							});
							dateInput_3.bind("fieldLabel").toExpression("#optFrfEndDt.value");
							dateInput_3.bind("value").toDataColumn("END_DT");
							container.addChild(dateInput_3, {
								"top": "5px",
								"left": "355px",
								"width": "110px",
								"height": "25px"
							});
							var output_9 = new cpr.controls.Output("optFrfFndtnNmBase");
							output_9.value = "";
							output_9.style.setClasses(["require"]);
							output_9.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_9, {
								"top": "55px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var inputBox_3 = new cpr.controls.InputBox("ipbFrfFndtnCdBase");
							inputBox_3.maxLength = 10;
							inputBox_3.bind("fieldLabel").toExpression("#optFrfFndtnCdBase.value");
							inputBox_3.bind("value").toDataColumn("SCAL_FNDTN_CD");
							if(typeof onIpbFrfFndtnCdBaseValueChange == "function") {
								inputBox_3.addEventListener("value-change", onIpbFrfFndtnCdBaseValueChange);
							}
							container.addChild(inputBox_3, {
								"top": "30px",
								"left": "120px",
								"width": "110px",
								"height": "25px"
							});
							var output_10 = new cpr.controls.Output("optFrfFndtnCdBase");
							output_10.value = "";
							output_10.style.setClasses(["require"]);
							output_10.bind("value").toLanguage("UI-DB-SB_CD");
							container.addChild(output_10, {
								"top": "30px",
								"left": "5px",
								"width": "111px",
								"height": "25px"
							});
							var output_11 = new cpr.controls.Output("optFrfIntuBkBase");
							output_11.value = "";
							output_11.bind("value").toLanguage("UI-DB-SB_SMRY");
							container.addChild(output_11, {
								"top": "105px",
								"left": "430px",
								"width": "110px",
								"height": "45px"
							});
							var textArea_1 = new cpr.controls.TextArea("txtFrfIntuBkBase");
							textArea_1.maxLength = 500;
							textArea_1.bind("fieldLabel").toExpression("#optFrfIntuBkBase.value");
							textArea_1.bind("value").toDataColumn("INTU_BKGR");
							container.addChild(textArea_1, {
								"top": "105px",
								"left": "545px",
								"width": "635px",
								"height": "45px"
							});
							var inputBox_4 = new cpr.controls.InputBox("ipbFrfShortNmBase");
							inputBox_4.maxLength = 100;
							inputBox_4.bind("fieldLabel").toExpression("#optFrfShortNmBase.value");
							inputBox_4.bind("value").toDataColumn("SHORT_NM");
							container.addChild(inputBox_4, {
								"top": "80px",
								"left": "120px",
								"width": "300px",
								"height": "25px"
							});
							var output_12 = new cpr.controls.Output("optFrfShortNmBase");
							output_12.value = "";
							output_12.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_12, {
								"top": "80px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var output_13 = new cpr.controls.Output("optFrfPrtNmBase");
							output_13.value = "";
							output_13.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_13, {
								"top": "105px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var inputBox_5 = new cpr.controls.InputBox("ipbFrfPrtNmBase");
							inputBox_5.maxLength = 200;
							inputBox_5.bind("fieldLabel").toExpression("#optFrfPrtNmBase.value");
							inputBox_5.bind("value").toDataColumn("PRT_SCAL_FNDTN_NM");
							container.addChild(inputBox_5, {
								"top": "105px",
								"left": "120px",
								"width": "300px",
								"height": "25px"
							});
							var output_14 = new cpr.controls.Output("optFrfRepNmBase");
							output_14.value = "";
							output_14.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_14, {
								"top": "130px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var inputBox_6 = new cpr.controls.InputBox("ipbFrfRepNmBase");
							inputBox_6.maxLength = 100;
							inputBox_6.bind("fieldLabel").toExpression("#optFrfRepNmBase.value");
							inputBox_6.bind("value").toDataColumn("REP_NM");
							container.addChild(inputBox_6, {
								"top": "130px",
								"left": "120px",
								"width": "300px",
								"height": "25px"
							});
							var output_15 = new cpr.controls.Output("optFrfChagDNmBase");
							output_15.value = "";
							output_15.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_15, {
								"top": "155px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var inputBox_7 = new cpr.controls.InputBox("ipbFrfChagDNmBase");
							inputBox_7.maxLength = 100;
							inputBox_7.bind("fieldLabel").toExpression("#optFrfChagDNmBase.value");
							inputBox_7.bind("value").toDataColumn("CHAG_DEPT_NM");
							container.addChild(inputBox_7, {
								"top": "155px",
								"left": "120px",
								"width": "300px",
								"height": "25px"
							});
							var output_16 = new cpr.controls.Output("optFrfBizmNoBase");
							output_16.value = "";
							output_16.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_16, {
								"top": "30px",
								"left": "430px",
								"width": "110px",
								"height": "25px"
							});
							var inputBox_8 = new cpr.controls.InputBox("ipbFrfBizmNoBase");
							inputBox_8.maxLength = 50;
							inputBox_8.bind("fieldLabel").toExpression("#optFrfBizmNoBase.value");
							inputBox_8.bind("value").toDataColumn("BIZM_NO");
							container.addChild(inputBox_8, {
								"top": "30px",
								"left": "545px",
								"width": "300px",
								"height": "25px"
							});
							var output_17 = new cpr.controls.Output("optFrfChargerNmBase");
							output_17.value = "";
							output_17.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_17, {
								"top": "55px",
								"left": "430px",
								"width": "110px",
								"height": "25px"
							});
							var inputBox_9 = new cpr.controls.InputBox("ipbFrfChargerNmBase");
							inputBox_9.maxLength = 100;
							inputBox_9.bind("fieldLabel").toExpression("#optFrfChargerNmBase.value");
							inputBox_9.bind("value").toDataColumn("CHARGER_NM");
							container.addChild(inputBox_9, {
								"top": "55px",
								"left": "545px",
								"width": "300px",
								"height": "25px"
							});
							var inputBox_10 = new cpr.controls.InputBox("ipbFrfInturNmBase");
							inputBox_10.maxLength = 100;
							inputBox_10.bind("fieldLabel").toExpression("#optFrfInturNmBase.value");
							inputBox_10.bind("value").toDataColumn("INTUR_NM");
							container.addChild(inputBox_10, {
								"top": "80px",
								"left": "545px",
								"width": "300px",
								"height": "25px"
							});
							var output_18 = new cpr.controls.Output("optFrfInturNmBase");
							output_18.value = "";
							output_18.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_18, {
								"top": "80px",
								"left": "430px",
								"width": "110px",
								"height": "25px"
							});
							var output_19 = new cpr.controls.Output("optFrfRemarkBase");
							output_19.value = "";
							output_19.bind("value").toLanguage("UI-DB-SB_SMRY");
							container.addChild(output_19, {
								"top": "155px",
								"left": "430px",
								"width": "110px",
								"height": "45px"
							});
							var textArea_2 = new cpr.controls.TextArea("txtFrfRemarkBase");
							textArea_2.maxLength = 1000;
							textArea_2.bind("fieldLabel").toExpression("#optFrfRemarkBase.value");
							textArea_2.bind("value").toDataColumn("REMARK");
							container.addChild(textArea_2, {
								"top": "155px",
								"left": "545px",
								"width": "635px",
								"height": "45px"
							});
							var output_20 = new cpr.controls.Output("optFrfIntuDtBase");
							output_20.value = "";
							output_20.bind("value").toLanguage("UI-DB-ST_DT");
							container.addChild(output_20, {
								"top": "180px",
								"left": "5px",
								"width": "110px",
								"height": "25px"
							});
							var dateInput_4 = new cpr.controls.DateInput("dipFrfIntuDtBase");
							dateInput_4.maxDate = new Date(9999, 11, 31);
							dateInput_4.format = "YYYY-MM-DD";
							dateInput_4.style.css({
								"text-align" : "center"
							});
							dateInput_4.bind("fieldLabel").toExpression("#optFrfIntuDtBase.value");
							dateInput_4.bind("value").toDataColumn("INTU_DT");
							container.addChild(dateInput_4, {
								"top": "180px",
								"left": "120px",
								"width": "110px",
								"height": "25px"
							});
						})(group_5);
						container.addChild(group_5, {
							"top": "30px",
							"left": "5px",
							"width": "1201px",
							"height": "225px"
						});
						var button_3 = new cpr.controls.Button("btnNew");
						button_3.value = "";
						button_3.style.setClasses(["btn-new"]);
						button_3.bind("value").toLanguage("UI-SCR-NEW");
						if(typeof onBtnNewClick == "function") {
							button_3.addEventListener("click", onBtnNewClick);
						}
						container.addChild(button_3, {
							"top": "5px",
							"left": "951px",
							"width": "60px",
							"height": "25px"
						});
						var button_4 = new cpr.controls.Button("btnCopy");
						button_4.value = "";
						button_4.bind("value").toLanguage("UI-SCR-COPY");
						if(typeof onBtnCopyClick == "function") {
							button_4.addEventListener("click", onBtnCopyClick);
						}
						container.addChild(button_4, {
							"top": "5px",
							"left": "886px",
							"width": "60px",
							"height": "25px"
						});
						var button_5 = new cpr.controls.Button("btnDel");
						button_5.value = "";
						button_5.style.setClasses(["btn-delete"]);
						button_5.bind("value").toLanguage("UI-SCR-DELETE");
						if(typeof onBtnDelClick == "function") {
							button_5.addEventListener("click", onBtnDelClick);
						}
						container.addChild(button_5, {
							"top": "5px",
							"left": "1017px",
							"width": "60px",
							"height": "25px"
						});
						var button_6 = new cpr.controls.Button("btnSave");
						button_6.value = "";
						button_6.style.setClasses(["btn-save"]);
						button_6.bind("value").toLanguage("UI-SCR-WRKSAVE");
						if(typeof onBtnSaveClick == "function") {
							button_6.addEventListener("click", onBtnSaveClick);
						}
						container.addChild(button_6, {
							"top": "5px",
							"left": "1146px",
							"width": "60px",
							"height": "25px"
						});
						var userDefinedControl_3 = new udc.com.comFormTitle();
						userDefinedControl_3.bind("title").toLanguage("UI-SCR-HISTORYLST");
						container.addChild(userDefinedControl_3, {
							"top": "5px",
							"left": "5px",
							"width": "140px",
							"height": "25px"
						});
						var button_7 = new cpr.controls.Button("btnRestore");
						button_7.value = "";
						button_7.style.setClasses(["btn-restore"]);
						button_7.bind("value").toLanguage("UI-SCR-WRKCANCL");
						if(typeof onBtnRestoreClick == "function") {
							button_7.addEventListener("click", onBtnRestoreClick);
						}
						container.addChild(button_7, {
							"top": "5px",
							"left": "1082px",
							"width": "60px",
							"height": "25px"
						});
					})(group_4);
					tabItem_1.content = group_4;
					tabItem_1.bind("text").toLanguage("UI-SCR-DATAMANG");
					return tabItem_1;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_1);
				
				var tabItem_2 = (function(tabFolder){
					var tabItem_2 = new cpr.controls.TabItem();
					tabItem_2.text = "tab1";
					tabItem_2.name = "tabHistory";
					var group_6 = new cpr.controls.Container("grpHistory");
					// Layout
					var formLayout_2 = new cpr.controls.layouts.FormLayout();
					formLayout_2.topMargin = "0px";
					formLayout_2.rightMargin = "0px";
					formLayout_2.bottomMargin = "0px";
					formLayout_2.leftMargin = "0px";
					formLayout_2.horizontalSpacing = "0px";
					formLayout_2.verticalSpacing = "0px";
					formLayout_2.setColumns(["1fr"]);
					formLayout_2.setRows(["1fr"]);
					group_6.setLayout(formLayout_2);
					(function(container){
						var button_8 = new cpr.controls.Button("btnSaveRecover");
						button_8.value = "";
						button_8.bind("value").toLanguage("UI-SCR-RECOVERY");
						if(typeof onBtnSaveRecoverClick == "function") {
							button_8.addEventListener("click", onBtnSaveRecoverClick);
						}
						container.addChild(button_8, {
							"top": "5px",
							"left": "1146px",
							"width": "60px",
							"height": "25px"
						});
						var button_9 = new cpr.controls.Button("btnSaveDisUseCanc");
						button_9.value = "";
						button_9.bind("value").toLanguage("UI-SCR-DISUSECANCL");
						if(typeof onBtnSaveDisUseCancClick == "function") {
							button_9.addEventListener("click", onBtnSaveDisUseCancClick);
						}
						container.addChild(button_9, {
							"top": "5px",
							"left": "1081px",
							"width": "60px",
							"height": "25px"
						});
						var button_10 = new cpr.controls.Button("btnSaveDisUse");
						button_10.value = "";
						button_10.bind("value").toLanguage("UI-SCR-DISUSE");
						if(typeof onBtnSaveDisUseClick == "function") {
							button_10.addEventListener("click", onBtnSaveDisUseClick);
						}
						container.addChild(button_10, {
							"top": "5px",
							"left": "1016px",
							"width": "60px",
							"height": "25px"
						});
						var userDefinedControl_4 = linker.userDefinedControl_4 = new udc.com.comTitle();
						userDefinedControl_4.bind("title").toLanguage("UI-SCR-HISTORYLST");
						container.addChild(userDefinedControl_4, {
							"top": "5px",
							"left": "5px",
							"width": "255px",
							"height": "25px"
						});
						var output_21 = new cpr.controls.Output("optKeyDtHistory");
						output_21.value = "";
						output_21.style.setClasses(["require"]);
						output_21.bind("value").toLanguage("UI-SCR-DISUSERECOVDT");
						container.addChild(output_21, {
							"top": "5px",
							"left": "751px",
							"width": "110px",
							"height": "25px"
						});
						var dateInput_5 = new cpr.controls.DateInput("dipKeyDtHistory");
						dateInput_5.format = "YYYY-MM-DD";
						dateInput_5.userAttr({"require": "Y"});
						dateInput_5.style.css({
							"text-align" : "center"
						});
						dateInput_5.bind("fieldLabel").toExpression("#optKeyDtHistory.value");
						dateInput_5.bind("value").toDataMap(app.lookup("dmReqKey"), "strKeyDtHistory");
						container.addChild(dateInput_5, {
							"top": "5px",
							"left": "866px",
							"width": "120px",
							"height": "25px"
						});
						var button_11 = new cpr.controls.Button("btnYearSmtHis");
						button_11.value = "";
						button_11.style.setClasses(["btn-pop-search"]);
						if(typeof onBtnYearSmtHisClick == "function") {
							button_11.addEventListener("click", onBtnYearSmtHisClick);
						}
						container.addChild(button_11, {
							"top": "5px",
							"left": "986px",
							"width": "20px",
							"height": "25px"
						});
						var grid_2 = linker.grid_2 = new cpr.controls.Grid("grdFndtnHistory");
						grid_2.init({
							"dataSet": app.lookup("dsFndtnHistory"),
							"columns": [
								{"width": "25px"},
								{"width": "40px"},
								{"width": "90px"},
								{"width": "150px"},
								{"width": "90px"},
								{"width": "90px"},
								{"width": "107px"},
								{"width": "117px"},
								{"width": "97px"},
								{"width": "102px"},
								{"width": "91px"},
								{"width": "100px"},
								{"width": "91px"},
								{"width": "120px"},
								{"width": "187px"},
								{"width": "199px"}
							],
							"header": {
								"rows": [{"height": "27px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.text = "F";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.text = "No";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-SB_CD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-SB_NM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-ST_DT");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-END_DT");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-SPVSDEPTNM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-PNT");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-GLS-THEO");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-GLS-PRAC");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-REG_FEE_XCP_YN");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-GLS-SHORT_NM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-SPVS_COL_CD_NM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 13},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-PNTINSTCHYN");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 14},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-DB-OBJ_DIV_RCD");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 15},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-LANKEY");
										}
									}
								]
							},
							"detail": {
								"rows": [{"height": "25px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.control = (function(){
												var output_22 = new cpr.controls.Output();
												output_22.style.css({
													"text-align" : "center"
												});
												return output_22;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.columnType = "rowindex";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.columnName = "SCAL_FNDTN_CD";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.columnName = "SCAL_FNDTN_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.columnName = "ST_DT";
											cell.control = (function(){
												var output_23 = new cpr.controls.Output("gdOptStDtHis");
												output_23.dataType = "date";
												output_23.format = "YYYY-MM-DD";
												output_23.style.css({
													"text-align" : "center"
												});
												output_23.bind("value").toDataColumn("ST_DT");
												return output_23;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.columnName = "END_DT";
											cell.control = (function(){
												var output_24 = new cpr.controls.Output("rbOptEndDtHis");
												output_24.dataType = "date";
												output_24.format = "YYYY-MM-DD";
												output_24.style.css({
													"text-align" : "center"
												});
												output_24.bind("value").toDataColumn("END_DT");
												return output_24;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.columnName = "SHORT_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.columnName = "PRT_SCAL_FNDTN_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.columnName = "REP_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.columnName = "CHAG_DEPT_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.columnName = "CHARGER_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.columnName = "INTUR_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.columnName = "INTU_DT";
											cell.control = (function(){
												var output_25 = new cpr.controls.Output("gdOptIntuDtHis");
												output_25.dataType = "date";
												output_25.format = "YYYY-MM-DD";
												output_25.style.css({
													"text-align" : "center"
												});
												output_25.bind("value").toDataColumn("INTU_DT");
												return output_25;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 13},
										"configurator": function(cell){
											cell.columnName = "BIZM_NO";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 14},
										"configurator": function(cell){
											cell.columnName = "INTU_BKGR";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 15},
										"configurator": function(cell){
											cell.columnName = "REMARK";
										}
									}
								]
							}
						});
						container.addChild(grid_2, {
							"top": "30px",
							"left": "5px",
							"width": "1201px",
							"height": "225px"
						});
					})(group_6);
					tabItem_2.content = group_6;
					tabItem_2.bind("text").toLanguage("UI-SCR-HSTMNG");
					return tabItem_2;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_2);
				
				var tabItem_3 = (function(tabFolder){
					var tabItem_3 = new cpr.controls.TabItem();
					tabItem_3.text = "tab1";
					tabItem_3.name = "tabLan";
					var group_7 = new cpr.controls.Container("grpLan");
					// Layout
					var formLayout_3 = new cpr.controls.layouts.FormLayout();
					formLayout_3.topMargin = "0px";
					formLayout_3.rightMargin = "0px";
					formLayout_3.bottomMargin = "0px";
					formLayout_3.leftMargin = "0px";
					formLayout_3.horizontalSpacing = "0px";
					formLayout_3.verticalSpacing = "0px";
					formLayout_3.setColumns(["1fr"]);
					formLayout_3.setRows(["1fr"]);
					group_7.setLayout(formLayout_3);
					(function(container){
						var button_12 = new cpr.controls.Button("btnSaveLan");
						button_12.value = "";
						button_12.style.setClasses(["btn-save"]);
						button_12.bind("value").toLanguage("UI-SCR-WRKSAVE");
						if(typeof onBtnSaveLanClick == "function") {
							button_12.addEventListener("click", onBtnSaveLanClick);
						}
						container.addChild(button_12, {
							"top": "5px",
							"left": "1146px",
							"width": "60px",
							"height": "25px"
						});
						var userDefinedControl_5 = linker.userDefinedControl_5 = new udc.com.comTitle();
						userDefinedControl_5.bind("title").toLanguage("UI-SCR-LANLST");
						container.addChild(userDefinedControl_5, {
							"top": "5px",
							"left": "5px",
							"width": "215px",
							"height": "25px"
						});
						var button_13 = new cpr.controls.Button("btnDelLan");
						button_13.value = "";
						button_13.style.setClasses(["btn-delete"]);
						button_13.bind("value").toLanguage("UI-SCR-DELETE");
						if(typeof onBtnDelLanClick == "function") {
							button_13.addEventListener("click", onBtnDelLanClick);
						}
						container.addChild(button_13, {
							"top": "5px",
							"left": "1016px",
							"width": "60px",
							"height": "25px"
						});
						var group_8 = linker.group_8 = new cpr.controls.Container("frfFndtnLan");
						group_8.style.setClasses(["form-box"]);
						// Layout
						var xYLayout_6 = new cpr.controls.layouts.XYLayout();
						group_8.setLayout(xYLayout_6);
						(function(container){
							var output_26 = new cpr.controls.Output("optFrfLanDivRcdLan");
							output_26.value = "";
							output_26.style.setClasses(["require"]);
							output_26.bind("value").toLanguage("UI-SCR-LANDIS");
							container.addChild(output_26, {
								"top": "5px",
								"left": "5px",
								"width": "100px",
								"height": "25px"
							});
							var output_27 = new cpr.controls.Output("optFrfIntuBkgrLan");
							output_27.value = "";
							output_27.bind("value").toLanguage("UI-DB-SB_SMRY");
							container.addChild(output_27, {
								"top": "180px",
								"left": "5px",
								"width": "100px",
								"height": "35px"
							});
							var inputBox_11 = new cpr.controls.InputBox("ipbFrfFndtnCdLan");
							inputBox_11.enabled = false;
							inputBox_11.maxLength = 10;
							inputBox_11.userAttr({"require": "Y"});
							inputBox_11.bind("fieldLabel").toExpression("#optFrfFndtnCdLan.value");
							inputBox_11.bind("value").toDataColumn("SCAL_FNDTN_CD");
							container.addChild(inputBox_11, {
								"top": "30px",
								"left": "110px",
								"width": "230px",
								"height": "25px"
							});
							var output_28 = new cpr.controls.Output("optFrfFndtnCdLan");
							output_28.value = "";
							output_28.style.setClasses(["require"]);
							output_28.bind("value").toLanguage("UI-DB-SB_CD");
							container.addChild(output_28, {
								"top": "30px",
								"left": "5px",
								"width": "100px",
								"height": "25px"
							});
							var textArea_3 = new cpr.controls.TextArea("txtFrfIntuBkgrLan");
							textArea_3.maxLength = 1000;
							textArea_3.bind("fieldLabel").toExpression("#optFrfIntuBkgrLan.value");
							textArea_3.bind("value").toDataColumn("INTU_BKGR");
							container.addChild(textArea_3, {
								"top": "180px",
								"left": "110px",
								"width": "496px",
								"height": "35px"
							});
							var output_29 = new cpr.controls.Output("optFrfFndtnNmLan");
							output_29.value = "";
							output_29.style.setClasses(["require"]);
							output_29.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_29, {
								"top": "55px",
								"left": "5px",
								"width": "100px",
								"height": "25px"
							});
							var inputBox_12 = new cpr.controls.InputBox("ipbFrfFndtnNmLan");
							inputBox_12.maxLength = 200;
							inputBox_12.userAttr({"require": "Y"});
							inputBox_12.bind("fieldLabel").toExpression("#optFrfFndtnNmLan.value");
							inputBox_12.bind("value").toDataColumn("SCAL_FNDTN_NM");
							container.addChild(inputBox_12, {
								"top": "55px",
								"left": "110px",
								"width": "496px",
								"height": "25px"
							});
							var comboBox_1 = new cpr.controls.ComboBox("cbbFrfLanDivRcdLan");
							comboBox_1.userAttr({"require": "Y"});
							comboBox_1.bind("fieldLabel").toExpression("#optFrfLanDivRcdLan.value");
							comboBox_1.bind("value").toDataColumn("LAN_DIV_RCD");
							(function(comboBox_1){
								comboBox_1.setItemSet(app.lookup("dsListLanDivRcd"), {
									"label": "CD_NM",
									"value": "CD"
								});
							})(comboBox_1);
							container.addChild(comboBox_1, {
								"top": "5px",
								"left": "110px",
								"width": "235px",
								"height": "25px"
							});
							var output_30 = new cpr.controls.Output("optFrfShortNmLan");
							output_30.value = "";
							output_30.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_30, {
								"top": "80px",
								"left": "5px",
								"width": "100px",
								"height": "25px"
							});
							var inputBox_13 = new cpr.controls.InputBox("ipbFrfShortNmLan");
							inputBox_13.maxLength = 200;
							inputBox_13.bind("fieldLabel").toExpression("#optFrfShortNmLan.value");
							inputBox_13.bind("value").toDataColumn("SHORT_NM");
							container.addChild(inputBox_13, {
								"top": "80px",
								"left": "110px",
								"width": "495px",
								"height": "25px"
							});
							var output_31 = new cpr.controls.Output("optFrfPrtNmLan");
							output_31.value = "";
							output_31.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_31, {
								"top": "105px",
								"left": "5px",
								"width": "100px",
								"height": "25px"
							});
							var inputBox_14 = new cpr.controls.InputBox("ipbFrfPrtNmLan");
							inputBox_14.maxLength = 200;
							inputBox_14.bind("fieldLabel").toExpression("#optFrfPrtNmLan.value");
							inputBox_14.bind("value").toDataColumn("PRT_SCAL_FNDTN_NM");
							container.addChild(inputBox_14, {
								"top": "105px",
								"left": "110px",
								"width": "495px",
								"height": "25px"
							});
							var inputBox_15 = new cpr.controls.InputBox("ipbFrfRepNmLan");
							inputBox_15.maxLength = 200;
							inputBox_15.bind("fieldLabel").toExpression("#optFrfRepNmLan.value");
							inputBox_15.bind("value").toDataColumn("REP_NM");
							container.addChild(inputBox_15, {
								"top": "130px",
								"left": "110px",
								"width": "190px",
								"height": "25px"
							});
							var output_32 = new cpr.controls.Output("optFrfRepNmLan");
							output_32.value = "";
							output_32.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_32, {
								"top": "130px",
								"left": "5px",
								"width": "100px",
								"height": "25px"
							});
							var inputBox_16 = new cpr.controls.InputBox("ipbFrfChagDeptNmLan");
							inputBox_16.maxLength = 200;
							inputBox_16.bind("fieldLabel").toExpression("#optFrfChagDeptNmLan.value");
							inputBox_16.bind("value").toDataColumn("CHAG_DEPT_NM");
							container.addChild(inputBox_16, {
								"top": "130px",
								"left": "416px",
								"width": "190px",
								"height": "25px"
							});
							var output_33 = new cpr.controls.Output("optFrfChagDeptNmLan");
							output_33.value = "";
							output_33.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_33, {
								"top": "130px",
								"left": "311px",
								"width": "100px",
								"height": "25px"
							});
							var output_34 = new cpr.controls.Output("optFrfChargerNmLan");
							output_34.value = "";
							output_34.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_34, {
								"top": "155px",
								"left": "5px",
								"width": "100px",
								"height": "25px"
							});
							var inputBox_17 = new cpr.controls.InputBox("ipbFrfChargerNmLan");
							inputBox_17.maxLength = 200;
							inputBox_17.bind("fieldLabel").toExpression("#optFrfChargerNmLan.value");
							inputBox_17.bind("value").toDataColumn("CHARGER_NM");
							container.addChild(inputBox_17, {
								"top": "155px",
								"left": "110px",
								"width": "190px",
								"height": "25px"
							});
							var output_35 = new cpr.controls.Output("optFrfInturNmLan");
							output_35.value = "";
							output_35.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_35, {
								"top": "155px",
								"left": "311px",
								"width": "100px",
								"height": "25px"
							});
							var inputBox_18 = new cpr.controls.InputBox("ipbFrfInturNmLan");
							inputBox_18.maxLength = 200;
							inputBox_18.bind("fieldLabel").toExpression("#optFrfInturNmLan.value");
							inputBox_18.bind("value").toDataColumn("INTUR_NM");
							container.addChild(inputBox_18, {
								"top": "155px",
								"left": "416px",
								"width": "190px",
								"height": "25px"
							});
						})(group_8);
						container.addChild(group_8, {
							"top": "30px",
							"left": "592px",
							"width": "614px",
							"height": "225px"
						});
						var button_14 = new cpr.controls.Button("btnNewLan");
						button_14.value = "";
						button_14.style.setClasses(["btn-new"]);
						button_14.bind("value").toLanguage("UI-SCR-NEW");
						if(typeof onBtnNewLanClick == "function") {
							button_14.addEventListener("click", onBtnNewLanClick);
						}
						container.addChild(button_14, {
							"top": "5px",
							"left": "951px",
							"width": "60px",
							"height": "25px"
						});
						var button_15 = new cpr.controls.Button("btnRestoreLan");
						button_15.value = "";
						button_15.style.setClasses(["btn-restore"]);
						button_15.bind("value").toLanguage("UI-SCR-WRKCANCL");
						if(typeof onBtnRestoreLanClick == "function") {
							button_15.addEventListener("click", onBtnRestoreLanClick);
						}
						container.addChild(button_15, {
							"top": "5px",
							"left": "1081px",
							"width": "60px",
							"height": "25px"
						});
						var grid_3 = linker.grid_3 = new cpr.controls.Grid("grdFndtnLan");
						grid_3.init({
							"dataSet": app.lookup("dsFndtnLan"),
							"columns": [
								{"width": "25px"},
								{"width": "40px"},
								{"width": "78px"},
								{"width": "80px"},
								{"width": "123px"},
								{"width": "103px"},
								{"width": "122px"}
							],
							"header": {
								"rows": [{"height": "27px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.text = "F";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.text = "No";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-DEPTNM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-LANDIS");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-DEPALS");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-DEPALS");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-DEPALS");
										}
									}
								]
							},
							"detail": {
								"rows": [{"height": "25px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.control = (function(){
												var output_36 = new cpr.controls.Output();
												output_36.style.css({
													"text-align" : "center"
												});
												return output_36;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.columnType = "rowindex";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.columnName = "SCAL_FNDTN_CD";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.columnName = "LAN_DIV_RCD";
											cell.control = (function(){
												var comboBox_2 = new cpr.controls.ComboBox("gdCbbLangKeyLang");
												comboBox_2.enabled = false;
												comboBox_2.hideButton = true;
												(function(comboBox_2){
													comboBox_2.setItemSet(app.lookup("dsListLanDivRcd"), {
														"label": "CD_NM",
														"value": "CD"
													});
												})(comboBox_2);
												comboBox_2.bind("value").toDataColumn("LAN_DIV_RCD");
												return comboBox_2;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.columnName = "SCAL_FNDTN_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.columnName = "SHORT_NM";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.columnName = "PRT_SCAL_FNDTN_NM";
										}
									}
								]
							}
						});
						if(typeof onGrdFndtnLanSelectionChange == "function") {
							grid_3.addEventListener("selection-change", onGrdFndtnLanSelectionChange);
						}
						container.addChild(grid_3, {
							"top": "30px",
							"left": "5px",
							"width": "579px",
							"height": "225px"
						});
					})(group_7);
					tabItem_3.content = group_7;
					tabItem_3.bind("text").toLanguage("UI-GLS-LAN");
					return tabItem_3;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_3);
				
				var tabItem_4 = (function(tabFolder){
					var tabItem_4 = new cpr.controls.TabItem();
					tabItem_4.text = "tab1";
					tabItem_4.name = "tabAddr";
					var group_9 = new cpr.controls.Container("grpAddr");
					// Layout
					var formLayout_4 = new cpr.controls.layouts.FormLayout();
					formLayout_4.topMargin = "0px";
					formLayout_4.rightMargin = "0px";
					formLayout_4.bottomMargin = "0px";
					formLayout_4.leftMargin = "0px";
					formLayout_4.horizontalSpacing = "0px";
					formLayout_4.verticalSpacing = "0px";
					formLayout_4.setColumns(["1fr"]);
					formLayout_4.setRows(["1fr"]);
					group_9.setLayout(formLayout_4);
					(function(container){
						var group_10 = new cpr.controls.Container("frfFndtnAddr");
						group_10.style.setClasses(["form-box"]);
						// Layout
						var xYLayout_7 = new cpr.controls.layouts.XYLayout();
						group_10.setLayout(xYLayout_7);
						(function(container){
							var inputBox_19 = new cpr.controls.InputBox("ipbFrfZipcodeAddr");
							inputBox_19.enabled = false;
							inputBox_19.readOnly = true;
							inputBox_19.maxLength = 6;
							inputBox_19.style.css({
								"text-align" : "center"
							});
							inputBox_19.bind("fieldLabel").toExpression("#optFrfZipcodeAddr.value");
							inputBox_19.bind("value").toDataMap(app.lookup("dmRow"), "ZIPCODE");
							container.addChild(inputBox_19, {
								"top": "30px",
								"left": "100px",
								"width": "110px",
								"height": "25px"
							});
							var output_37 = new cpr.controls.Output("optFrfZipcodeAddr");
							output_37.value = "";
							output_37.bind("value").toLanguage("UI-DB-SB_CD");
							container.addChild(output_37, {
								"top": "30px",
								"left": "5px",
								"width": "90px",
								"height": "25px"
							});
							var output_38 = new cpr.controls.Output("optFrfAddr1Addr");
							output_38.value = "";
							output_38.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_38, {
								"top": "55px",
								"left": "5px",
								"width": "90px",
								"height": "25px"
							});
							var inputBox_20 = new cpr.controls.InputBox("ipbFrfAddr1Addr");
							inputBox_20.enabled = false;
							inputBox_20.readOnly = true;
							inputBox_20.maxLength = 500;
							inputBox_20.bind("fieldLabel").toExpression("#optFrfAddr1Addr.value");
							inputBox_20.bind("value").toDataMap(app.lookup("dmRow"), "ADDR1");
							container.addChild(inputBox_20, {
								"top": "55px",
								"left": "100px",
								"width": "255px",
								"height": "25px"
							});
							var inputBox_21 = new cpr.controls.InputBox("ipbFrfAddr2Addr");
							inputBox_21.maxLength = 500;
							inputBox_21.bind("fieldLabel").toExpression("#optFrfAddr2Addr.value");
							inputBox_21.bind("value").toDataMap(app.lookup("dmRow"), "ADDR2");
							container.addChild(inputBox_21, {
								"top": "55px",
								"left": "360px",
								"width": "245px",
								"height": "25px"
							});
							var output_39 = new cpr.controls.Output("optFrfDrtTelNoAddr");
							output_39.value = "";
							output_39.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_39, {
								"top": "80px",
								"left": "5px",
								"width": "90px",
								"height": "25px"
							});
							var inputBox_22 = new cpr.controls.InputBox("ipbFrfDrtTelNoAddr");
							inputBox_22.maxLength = 30;
							inputBox_22.bind("fieldLabel").toExpression("#optFrfDrtTelNoAddr.value");
							inputBox_22.bind("value").toDataMap(app.lookup("dmRow"), "DRT_TEL_NO");
							container.addChild(inputBox_22, {
								"top": "80px",
								"left": "100px",
								"width": "110px",
								"height": "25px"
							});
							var inputBox_23 = new cpr.controls.InputBox("ipbFrfClpNoAddr");
							inputBox_23.maxLength = 30;
							inputBox_23.bind("fieldLabel").toExpression("#optFrfClpNoAddr.value");
							inputBox_23.bind("value").toDataMap(app.lookup("dmRow"), "CLP_NO");
							container.addChild(inputBox_23, {
								"top": "105px",
								"left": "100px",
								"width": "110px",
								"height": "25px"
							});
							var output_40 = new cpr.controls.Output("optFrfClpNoAddr");
							output_40.value = "";
							output_40.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_40, {
								"top": "105px",
								"left": "5px",
								"width": "90px",
								"height": "25px"
							});
							var inputBox_24 = new cpr.controls.InputBox("ipbFrfFaxAddr");
							inputBox_24.maxLength = 30;
							inputBox_24.bind("fieldLabel").toExpression("#optFrfFaxAddr.value");
							inputBox_24.bind("value").toDataMap(app.lookup("dmRow"), "FAX_NO");
							container.addChild(inputBox_24, {
								"top": "105px",
								"left": "315px",
								"width": "110px",
								"height": "25px"
							});
							var output_41 = new cpr.controls.Output("optFrfFaxAddr");
							output_41.value = "";
							output_41.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_41, {
								"top": "105px",
								"left": "220px",
								"width": "90px",
								"height": "25px"
							});
							var output_42 = new cpr.controls.Output("optFrfEmailAddr");
							output_42.value = "";
							output_42.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_42, {
								"top": "130px",
								"left": "5px",
								"width": "90px",
								"height": "25px"
							});
							var inputBox_25 = new cpr.controls.InputBox("ipbFrfEmailAddr");
							inputBox_25.maxLength = 50;
							inputBox_25.bind("fieldLabel").toExpression("#optFrfEmailAddr.value");
							inputBox_25.bind("value").toDataMap(app.lookup("dmRow"), "EMAIL");
							container.addChild(inputBox_25, {
								"top": "130px",
								"left": "100px",
								"width": "195px",
								"height": "25px"
							});
							var output_43 = new cpr.controls.Output("optFrfHompageAddr");
							output_43.value = "";
							output_43.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_43, {
								"top": "130px",
								"left": "305px",
								"width": "90px",
								"height": "25px"
							});
							var inputBox_26 = new cpr.controls.InputBox("ipbFrfHompageAddr");
							inputBox_26.maxLength = 50;
							inputBox_26.bind("fieldLabel").toExpression("#optFrfHompageAddr.value");
							inputBox_26.bind("value").toDataMap(app.lookup("dmRow"), "HOMEPAGE1");
							container.addChild(inputBox_26, {
								"top": "130px",
								"left": "400px",
								"width": "205px",
								"height": "25px"
							});
							var output_44 = new cpr.controls.Output("optFrfStDtAddr");
							output_44.value = "";
							output_44.style.setClasses(["require"]);
							output_44.bind("value").toLanguage("UI-DB-ST_DT");
							container.addChild(output_44, {
								"top": "5px",
								"left": "5px",
								"width": "90px",
								"height": "25px"
							});
							var dateInput_6 = new cpr.controls.DateInput("dipFrfStDtAddr");
							dateInput_6.readOnly = true;
							dateInput_6.maxDate = new Date(9999, 11, 31);
							dateInput_6.style.css({
								"text-align" : "center"
							});
							dateInput_6.bind("fieldLabel").toExpression("#optFrfStDtAddr.value");
							dateInput_6.bind("value").toDataMap(app.lookup("dmRow"), "ST_DT");
							container.addChild(dateInput_6, {
								"top": "5px",
								"left": "100px",
								"width": "110px",
								"height": "25px"
							});
							var output_45 = new cpr.controls.Output("optFrfEndDtAddr");
							output_45.value = "";
							output_45.style.setClasses(["require"]);
							output_45.bind("value").toLanguage("UI-DB-END_DT");
							container.addChild(output_45, {
								"top": "5px",
								"left": "220px",
								"width": "90px",
								"height": "25px"
							});
							var dateInput_7 = new cpr.controls.DateInput("dipFrfEndDtAddr");
							dateInput_7.readOnly = true;
							dateInput_7.maxDate = new Date(9999, 11, 31);
							dateInput_7.style.css({
								"text-align" : "center"
							});
							dateInput_7.bind("fieldLabel").toExpression("#optFrfEndDtAddr.value");
							dateInput_7.bind("value").toDataMap(app.lookup("dmRow"), "END_DT");
							container.addChild(dateInput_7, {
								"top": "5px",
								"left": "315px",
								"width": "110px",
								"height": "25px"
							});
							var output_46 = new cpr.controls.Output("optFrfRepTelNoAddr");
							output_46.value = "";
							output_46.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_46, {
								"top": "79px",
								"left": "220px",
								"width": "90px",
								"height": "25px"
							});
							var inputBox_27 = new cpr.controls.InputBox("ipbFrfRepTelNoAddr");
							inputBox_27.maxLength = 30;
							inputBox_27.bind("fieldLabel").toExpression("#optFrfRepTelNoAddr.value");
							inputBox_27.bind("value").toDataMap(app.lookup("dmRow"), "REP_TEL_NO");
							container.addChild(inputBox_27, {
								"top": "79px",
								"left": "315px",
								"width": "110px",
								"height": "25px"
							});
							var inputBox_28 = new cpr.controls.InputBox("ipbFrfAenAddr");
							inputBox_28.maxLength = 10;
							inputBox_28.bind("fieldLabel").toExpression("#optFrfAenAddr.value");
							inputBox_28.bind("value").toDataMap(app.lookup("dmRow"), "AEN");
							container.addChild(inputBox_28, {
								"top": "79px",
								"left": "530px",
								"width": "75px",
								"height": "25px"
							});
							var output_47 = new cpr.controls.Output("optFrfAenAddr");
							output_47.value = "";
							output_47.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_47, {
								"top": "79px",
								"left": "435px",
								"width": "90px",
								"height": "25px"
							});
							var textArea_4 = new cpr.controls.TextArea("txtFrfRemarkAddr");
							textArea_4.maxLength = 1000;
							textArea_4.bind("fieldLabel").toExpression("#optFrfRemarkAddr.value");
							textArea_4.bind("value").toDataMap(app.lookup("dmRow"), "REMARK");
							container.addChild(textArea_4, {
								"top": "155px",
								"left": "100px",
								"width": "505px",
								"height": "61px"
							});
							var output_48 = new cpr.controls.Output("optFrfRemarkAddr");
							output_48.value = "";
							output_48.bind("value").toLanguage("UI-DB-SB_SMRY");
							container.addChild(output_48, {
								"top": "155px",
								"left": "5px",
								"width": "90px",
								"height": "61px"
							});
							var output_49 = new cpr.controls.Output("optFrfMessengerAddr");
							output_49.value = "";
							output_49.bind("value").toLanguage("UI-DB-SB_NM");
							container.addChild(output_49, {
								"top": "104px",
								"left": "435px",
								"width": "90px",
								"height": "25px"
							});
							var inputBox_29 = new cpr.controls.InputBox("ipbFrfMessengerAddr");
							inputBox_29.maxLength = 30;
							inputBox_29.bind("fieldLabel").toExpression("#optFrfMessengerAddr.value");
							inputBox_29.bind("value").toDataMap(app.lookup("dmRow"), "MESSENGER1");
							container.addChild(inputBox_29, {
								"top": "104px",
								"left": "530px",
								"width": "75px",
								"height": "25px"
							});
							var button_16 = new cpr.controls.Button("btnPopZipcode");
							button_16.value = "";
							button_16.style.setClasses(["btn-pop-search"]);
							if(typeof onBtnPopZipcodeClick == "function") {
								button_16.addEventListener("click", onBtnPopZipcodeClick);
							}
							container.addChild(button_16, {
								"top": "30px",
								"left": "210px",
								"width": "20px",
								"height": "25px"
							});
							var inputBox_30 = new cpr.controls.InputBox("ipbFrfZipseqAddr");
							inputBox_30.visible = false;
							inputBox_30.enabled = false;
							inputBox_30.readOnly = true;
							inputBox_30.maxLength = 3;
							inputBox_30.bind("fieldLabel").toExpression("#optFrfZipcodeAddr.value");
							inputBox_30.bind("value").toDataMap(app.lookup("dmRow"), "ZIPSEQ");
							container.addChild(inputBox_30, {
								"top": "30px",
								"left": "240px",
								"width": "20px",
								"height": "25px"
							});
						})(group_10);
						container.addChild(group_10, {
							"top": "30px",
							"left": "585px",
							"width": "618px",
							"height": "225px"
						});
						var grid_4 = linker.grid_4 = new cpr.controls.Grid("grdFndtnAddr");
						grid_4.init({
							"dataSet": app.lookup("dsFndtnAddr"),
							"columns": [
								{"width": "25px"},
								{"width": "40px"},
								{"width": "87px"},
								{"width": "87px"},
								{"width": "82px"},
								{"width": "129px"},
								{"width": "111px"}
							],
							"header": {
								"rows": [{"height": "27px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.text = "F";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.text = "No";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-DEPTNM");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-LANDIS");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-DEPALS");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-DEPALS");
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.bind("text").toLanguage("UI-SCR-DEPALS");
										}
									}
								]
							},
							"detail": {
								"rows": [{"height": "25px"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.control = (function(){
												var output_50 = new cpr.controls.Output();
												output_50.style.css({
													"text-align" : "center"
												});
												return output_50;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.columnType = "rowindex";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.columnName = "ST_DT";
											cell.control = (function(){
												var output_51 = new cpr.controls.Output("gdOptStDtAddr");
												output_51.dataType = "date";
												output_51.format = "YYYY-MM-DD";
												output_51.style.css({
													"text-align" : "center"
												});
												output_51.bind("value").toDataColumn("ST_DT");
												return output_51;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.columnName = "END_DT";
											cell.control = (function(){
												var output_52 = new cpr.controls.Output("gdOptEndDtAddr");
												output_52.dataType = "date";
												output_52.format = "YYYY-MM-DD";
												output_52.style.css({
													"text-align" : "center"
												});
												output_52.bind("value").toDataColumn("END_DT");
												return output_52;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.columnName = "ZIPCODE";
											cell.style.css({
												"text-align" : "center"
											});
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.columnName = "ADDR1";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.columnName = "ADDR2";
										}
									}
								]
							}
						});
						if(typeof onGrdFndtnAddrSelectionChange == "function") {
							grid_4.addEventListener("selection-change", onGrdFndtnAddrSelectionChange);
						}
						container.addChild(grid_4, {
							"top": "55px",
							"left": "5px",
							"width": "570px",
							"height": "200px"
						});
						var userDefinedControl_6 = linker.userDefinedControl_6 = new udc.com.comTitle();
						userDefinedControl_6.bind("title").toLanguage("UI-SCR-LANLST");
						container.addChild(userDefinedControl_6, {
							"top": "30px",
							"left": "5px",
							"width": "215px",
							"height": "25px"
						});
						var button_17 = new cpr.controls.Button("btnNewAddr");
						button_17.value = "";
						button_17.style.setClasses(["btn-new"]);
						button_17.bind("value").toLanguage("UI-SCR-NEW");
						if(typeof onBtnNewAddrClick == "function") {
							button_17.addEventListener("click", onBtnNewAddrClick);
						}
						container.addChild(button_17, {
							"top": "5px",
							"left": "1011px",
							"width": "60px",
							"height": "25px"
						});
						var button_18 = new cpr.controls.Button("btnDelAddr");
						button_18.value = "";
						button_18.style.setClasses(["btn-delete"]);
						button_18.bind("value").toLanguage("UI-SCR-DELETE");
						if(typeof onBtnDelAddrClick == "function") {
							button_18.addEventListener("click", onBtnDelAddrClick);
						}
						container.addChild(button_18, {
							"top": "5px",
							"left": "1076px",
							"width": "60px",
							"height": "25px"
						});
						var button_19 = new cpr.controls.Button("btnSaveAddr");
						button_19.value = "";
						button_19.style.setClasses(["btn-save"]);
						button_19.bind("value").toLanguage("UI-SCR-WRKSAVE");
						if(typeof onBtnSaveAddrClick == "function") {
							button_19.addEventListener("click", onBtnSaveAddrClick);
						}
						container.addChild(button_19, {
							"top": "5px",
							"left": "1143px",
							"width": "60px",
							"height": "25px"
						});
						var output_53 = new cpr.controls.Output("optKeyDtAddr");
						output_53.value = "";
						output_53.style.setClasses(["require"]);
						output_53.bind("value").toLanguage("UI-SCR-DISUSERECOVDT");
						container.addChild(output_53, {
							"top": "5px",
							"left": "465px",
							"width": "110px",
							"height": "25px"
						});
						var dateInput_8 = new cpr.controls.DateInput("dipKeyDtAddr");
						dateInput_8.format = "YYYY-MM-DD";
						dateInput_8.userAttr({"require": "Y"});
						dateInput_8.style.css({
							"text-align" : "center"
						});
						dateInput_8.bind("fieldLabel").toExpression("#optKeyDtAddr.value");
						dateInput_8.bind("value").toDataMap(app.lookup("dmReqKey"), "strKeyDtAddr");
						container.addChild(dateInput_8, {
							"top": "5px",
							"left": "580px",
							"width": "120px",
							"height": "25px"
						});
						var button_20 = new cpr.controls.Button("btnYearSmtAddr");
						button_20.value = "";
						button_20.style.setClasses(["btn-pop-search"]);
						if(typeof onBtnYearSmtAddrClick == "function") {
							button_20.addEventListener("click", onBtnYearSmtAddrClick);
						}
						container.addChild(button_20, {
							"top": "5px",
							"left": "700px",
							"width": "20px",
							"height": "25px"
						});
						var output_54 = new cpr.controls.Output("optFndtnCdAddr");
						output_54.value = "";
						output_54.bind("value").toLanguage("UI-SCR-DISUSERECOVDT");
						container.addChild(output_54, {
							"top": "5px",
							"left": "5px",
							"width": "110px",
							"height": "25px"
						});
						var output_55 = new cpr.controls.Output("optFndtnNmAddr");
						output_55.value = "";
						output_55.bind("value").toLanguage("UI-SCR-DISUSERECOVDT");
						container.addChild(output_55, {
							"top": "5px",
							"left": "220px",
							"width": "110px",
							"height": "25px"
						});
						var inputBox_31 = new cpr.controls.InputBox("ipbFndtnCdAddr");
						inputBox_31.readOnly = true;
						inputBox_31.bind("fieldLabel").toExpression("#optFndtnCdAddr.value");
						inputBox_31.bind("value").toDataMap(app.lookup("dmReqKey"), "strScalFndtnCd");
						container.addChild(inputBox_31, {
							"top": "5px",
							"left": "120px",
							"width": "90px",
							"height": "25px"
						});
						var inputBox_32 = new cpr.controls.InputBox("ipbFndtnNmAddr");
						inputBox_32.readOnly = true;
						inputBox_32.bind("fieldLabel").toExpression("#optFndtnNmAddr.value");
						inputBox_32.bind("value").toDataMap(app.lookup("dmReqKey"), "strScalFndtnNm");
						container.addChild(inputBox_32, {
							"top": "5px",
							"left": "335px",
							"width": "120px",
							"height": "25px"
						});
					})(group_9);
					tabItem_4.content = group_9;
					tabItem_4.bind("text").toLanguage("UI-GLS-LAN");
					return tabItem_4;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_4);
				tabFolder_1.setSelectedTabItem(tabItem_1);
				container.addChild(tabFolder_1, {
					"top": "58px",
					"left": "5px",
					"width": "1213px",
					"height": "260px"
				});
				var button_21 = new cpr.controls.Button("tabBtnLan");
				button_21.value = "";
				button_21.bind("value").toLanguage("UI-GLS-LAN");
				if(typeof onTabBtnLanClick == "function") {
					button_21.addEventListener("click", onTabBtnLanClick);
				}
				container.addChild(button_21, {
					"top": "30px",
					"left": "207px",
					"width": "100px",
					"height": "28px"
				});
				var button_22 = new cpr.controls.Button("tabBtnHistory");
				button_22.value = "";
				button_22.bind("value").toLanguage("UI-SCR-HSTMNG");
				if(typeof onTabBtnHistoryClick == "function") {
					button_22.addEventListener("click", onTabBtnHistoryClick);
				}
				container.addChild(button_22, {
					"top": "30px",
					"left": "106px",
					"width": "100px",
					"height": "28px"
				});
				var button_23 = new cpr.controls.Button("tabBtnManage");
				button_23.value = "";
				button_23.bind("value").toLanguage("UI-SCR-DATAMANG");
				if(typeof onTabBtnManageClick == "function") {
					button_23.addEventListener("click", onTabBtnManageClick);
				}
				container.addChild(button_23, {
					"top": "30px",
					"left": "5px",
					"width": "100px",
					"height": "28px"
				});
				var userDefinedControl_7 = new udc.com.comFormTitle();
				userDefinedControl_7.bind("title").toLanguage("UI-SCR-SUBDETAIL");
				container.addChild(userDefinedControl_7, {
					"top": "5px",
					"left": "5px",
					"width": "140px",
					"height": "25px"
				});
				var button_24 = new cpr.controls.Button("tabBtnAddr");
				button_24.value = "";
				button_24.bind("value").toLanguage("UI-GLS-LAN");
				if(typeof onTabBtnAddrClick == "function") {
					button_24.addEventListener("click", onTabBtnAddrClick);
				}
				container.addChild(button_24, {
					"top": "30px",
					"left": "448px",
					"width": "100px",
					"height": "28px"
				});
			})(group_3);
			container.addChild(group_3, {
				"top": "344px",
				"left": "5px",
				"width": "1225px",
				"height": "325px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("emaSchYearSmt");
			cpr.core.App.load("app/imp/impDialogSchYearSmt", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "35px",
				"left": "1250px",
				"width": "325px",
				"height": "75px"
			});
			
			var embeddedApp_2 = new cpr.controls.EmbeddedApp("emaStdCmnPZipSearch");
			cpr.core.App.load("app/cmn/impStdCmnPZipSearch", function(app) {
				if(app){
					embeddedApp_2.app = app;
				}
			});
			container.addChild(embeddedApp_2, {
				"top": "668px",
				"left": "15px",
				"width": "78px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
			linker.group_5.setBindContext(new cpr.bind.GridSelectionContext(linker.grid_1));
			linker.userDefinedControl_4.ctrl = linker.grid_2;
			linker.userDefinedControl_5.ctrl = linker.grid_3;
			linker.group_8.setBindContext(new cpr.bind.GridSelectionContext(linker.grid_3));
			linker.userDefinedControl_6.ctrl = linker.grid_4;
		}
	});
	app.title = "장학재단관리";
	cpr.core.Platform.INSTANCE.register(app);
})();
