/// start - udc.cmn.cmnFileUtil
/*
 * UDC Qualified Name: udc.cmn.cmnFileUtil
 * App URI: udc/cmn/cmnFileUtil
 * Source Location: udc/cmn/cmnFileUtil.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/cmnFileUtil", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var utilHost;
			var util = new ComUtil(app);
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				utilHost = new ComUtil(app.getHostAppInstance());
			}
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnUdcFileUpClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				
				var btnUdcFileUp = e.control;
				var _app = app;
				var initValue = {
						iFileSerialNo : app.getAppProperty("iFileSerialNo"),
						iIsDownloadOnly : app.getAppProperty("iIsDownloadOnly"),
						iFileExtFilter : app.getAppProperty("iFileExtFilter"),
						iLimitFileSize : app.getAppProperty("iLimitFileSize"),
						iMaxFileCnt : app.getAppProperty("iMaxFileCnt")
					};
				
				utilHost.Dialog.open("app/cmn/cmnPFileUtil", 710, 350, function(/* cpr.events.CUIEvent */e){
					var dialog = e.control;
					var returnValue = dialog.returnValue;
					
					if(returnValue != null){
						_app.setAppProperty("oFileSerailNo", returnValue.FILE_SERIAL_NO);
						_app.setAppProperty("oFileCnt", returnValue.FILE_CNT);
						var event = new cpr.events.CUIEvent("upLoadCallBack");
						event.fileInfo = returnValue;
						app.dispatchEvent(event);
					}
					
					
				}, initValue, {headerClose: false});
				
			};;
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("iFileSerialNo", null);
			app.declareBindableAppProperty("iIsDownloadOnly", false);
			app.declareBindableAppProperty("iFileExtFilter", null);
			app.declareBindableAppProperty("iLimitFileSize", null);
			app.declareBindableAppProperty("iMaxFileCnt", 10);
			app.declareBindableAppProperty("oFileSerailNo", null);
			app.declareBindableAppProperty("oFileCnt", null);
			var dataMap_1 = new cpr.data.DataMap("dmTmpFilePath");
			dataMap_1.parseData({
				"columns" : [{"name": "strTmpFileNms"}]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subTmpFileUpLoad");
			submission_1.mediaType = "multipart/form-data";
			submission_1.addResponseData(dataMap_1, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpUdcFileUp");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button("btnUdcFileUp");
				button_1.value = "Button";
				button_1.style.setClasses(["btn-file-up"]);
				button_1.bind("value").toLanguage("UI-SCR-FILEATTACH");
				button_1.bind("tooltip").toLanguage("UI-SCR-FILEATTACH-TOOLTIP");
				if(typeof onBtnUdcFileUpClick == "function") {
					button_1.addEventListener("click", onBtnUdcFileUpClick);
				}
				container.addChild(button_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for cmnFileUtil
	cpr.utils.Util.ensurePackage("udc.cmn").cmnFileUtil = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.cmnFileUtil", internalApp, id);
	};
	
	udc.cmn.cmnFileUtil.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.cmnFileUtil.prototype, "type", {
		get : function(){
			return "udc.cmn.cmnFileUtil";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.cmnFileUtil.prototype, "iFileSerialNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iFileSerialNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iFileSerialNo", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnFileUtil.prototype, "iIsDownloadOnly", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iIsDownloadOnly");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iIsDownloadOnly", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnFileUtil.prototype, "iFileExtFilter", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iFileExtFilter");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iFileExtFilter", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnFileUtil.prototype, "iLimitFileSize", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iLimitFileSize");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iLimitFileSize", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnFileUtil.prototype, "iMaxFileCnt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iMaxFileCnt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iMaxFileCnt", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnFileUtil.prototype, "oFileSerailNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oFileSerailNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oFileSerailNo", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnFileUtil.prototype, "oFileCnt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oFileCnt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oFileCnt", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.cmnFileUtil
/// start - udc.cmn.cmnMenuSch
/*
 * UDC Qualified Name: udc.cmn.cmnMenuSch
 * App URI: udc/cmn/cmnMenuSch
 * Source Location: udc/cmn/cmnMenuSch.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/cmnMenuSch", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			var util = new ComUtil(app);
			var hostUtil;
			
			var skipOnChange = false;
			var openedByChange = false;
			
			function clearCallback(){
				// value redraw()
				var vcMenuId = app.lookup("ipbUdcMenuId");
				var vcMenuNm = app.lookup("ipbUdcMenuNm");
				
				skipOnChange = true;
				vcMenuId.value = "";
				vcMenuNm.value = "";
				skipOnChange = false;
				
				app.setAppProperty("oSystemRcd", "");
				app.setAppProperty("oMenuId", "");
				app.setAppProperty("oMenuNm", "");
				
				vcMenuId.focus();
			}
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpbUdcMenuIdValueChange(/* cpr.events.CValueChangeEvent */e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbUdcMenuId = e.control;
				return doOnChangeStdCmnPMenuSch();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchUdcMenuClick(/* cpr.events.CMouseEvent */e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearchUdcMenu = e.control;
				
				if(app.getAppProperty("iIsParentGrpSearch")){
					if(hostUtil.Group.isGrpChgBtnSch(btnSearchUdcMenu)) return false;
				}
				
				doOnClickStdCmnPMenuSch();
			}
			
			
			/**
			 * doOnChangeStdCmnPMenuSch(값 변경시 조회)  
			 * @param  sender
			 * @return  void
			 */
			function doOnChangeStdCmnPMenuSch(){
				// 오브젝트 검색 팝업이 붙은 컬럼이라면 값 변경시에 팝업이 필요하다.
				
				if(skipOnChange == true||openedByChange == true){
					// 팝업의 콜백으로 값이 세팅되어서 change 이벤트 발생한 경우
					// 이미 팝업을 처리하였기 때문에 다시 띄우지 않는다.
					return false;
				}
				
				
				var vsMenuId = util.Control.getValue("ipbUdcMenuId");
				// 이벤트가 발생한 내용 입력해준다.
				// 입력내용 삭제시 팝업없이 관련내용 삭제 -> 삭제인데도, 아래의 체크처리가 이루워짐에 따라 불필요한 메시지 호출됨으로 막아준다.
				if(ValueUtil.fixNull(vsMenuId) == ""){
					clearCallback();
					return false;
				}
				
				util.DataMap.setValue("dmReqKey", "strSystemRcd", app.getAppProperty("iSystemRcd"));
				util.DataMap.setValue("dmReqKey", "strMenuId", app.getAppProperty("iMenuId"));
				util.DataMap.setValue("dmReqKey", "strMenuNm", app.getAppProperty("iMenuNm"));
				util.DataMap.setValue("dmReqKey", "strPgmDtlTypeRcd", app.getAppProperty("iPgmDtlTypeRcd"));
				
				util.Submit.send("subPrecheckStdCmnPMenuSch", function(pbSuccess){
					if(pbSuccess){
						var vnCount = util.DataMap.getValue("dmCmnPMenuSchCount", "count");
						
						if(vnCount == 1){
							// 검색결과가 1건이면 팝업없이 바로 값세팅
							app.setAppProperty("oSystemRcd", util.DataMap.getValue("dmCmnPMenuSch", "UNIT_SYSTEM_RCD"));
							app.setAppProperty("oMenuId", util.DataMap.getValue("dmCmnPMenuSch", "MENU_ID"));
							app.setAppProperty("oMenuNm", util.DataMap.getValue("dmCmnPMenuSch", "MENU_NM"));
							
							skipOnChange = true;
							app.lookup("ipbUdcMenuId").value = app.getAppProperty("oMenuId");
							app.lookup("ipbUdcMenuNm").value = app.getAppProperty("oMenuNm");
							skipOnChange = false;
							
			//				util.Control.redraw(["ipbUdcMenuId", "ipbUdcMenuNm"]);
			
							var event = new cpr.events.CUIEvent("searchCallBack");
							app.dispatchEvent(event);
							
							
						}else{
							// 검색결과가 여러건이면 팝업.
							return doOnClickStdCmnPMenuSch();
						}
					}
				});
				
				return true;
			}
			
			/**
			 * doOnClickStdCmnPMenuSch(돋보기 버튼을 클릭시 사용자 검색 팝업 호출)  
			 * @param  sender
			 * @return void
			 */
			function doOnClickStdCmnPMenuSch(){
			//	if(hostUtil.Group.isGrpChgBtnSch()){
			//		return false
			//	};
				
				if(openedByChange) {
					// 검색어를 입력하고 팝업버튼을 누른경우
					// 이미 change 이벤트에 의해 팝업이 떠있기 때문에 다시 띄우지 않는다.
					return false;
				}
				
				var initValue = {
					strSystemRcd:		app.getAppProperty("iSystemRcd"), 
					strMenuId:			app.getAppProperty("iMenuId"), 
					strMenuNm:			app.getAppProperty("iMenuNm"), 
					strPgmDtlTypeRcd:	app.getAppProperty("iPgmDtlTypeRcd")
				}
				
				openedByChange = true;
				var _app = app;
				hostUtil.Dialog.open("app/cmn/cmnPMenuSch", 700, 405, function(/**@type cpr.events.CUIEvent */e){
					var dialog = e.control;
					var returnValue = dialog.returnValue;
					if(returnValue!=null){
						app.setAppProperty("oMenuDivRcd", util.DataMap.getValue("dmCmnPMenuSch", "UNIT_SYSTEM_RCD"));
						app.setAppProperty("oMenuId", util.DataMap.getValue("dmCmnPMenuSch", "MENU_ID"));
						app.setAppProperty("oMenuNm", util.DataMap.getValue("dmCmnPMenuSch", "MENU_NM"));
						
						skipOnChange = true;
						_app.lookup("ipbUdcMenuId").value = returnValue.MENU_ID;
						_app.lookup("ipbUdcMenuNm").value = returnValue.MENU_NM;
						skipOnChange = false;
						
						var event = new cpr.events.CUIEvent("searchCallBack");
						_app.dispatchEvent(event);
					}else{
						if(ValueUtil.isNull(util.Control.getValue("ipbUdcMenuNm")) == true){				
							skipOnChange = true;//valueChange 이벤트 방지.
							_app.lookup("ipbUdcMenuId").value = "";
							_app.lookup("ipbUdcMenuNm").value = "";
							skipOnChange = false;
						}
					}
			//		util.Control.redraw(["ipbUdcMenuId", "ipbUdcMenuNm"]);
					
					openedByChange = false;
				}, initValue);
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */e){
				var vsProperty = e.property;
				if(vsProperty == "iMenuId" || vsProperty == "oMenuId"){
					app.lookup("ipbUdcMenuId").redraw();
				}
				
				if(vsProperty == "required"){
					var vsRequired = app.getAppProperty("required");
					if(vsRequired == "Y"){
						var vcIpbUdcMenuId = app.lookup("ipbUdcMenuId");
						vcIpbUdcMenuId.userAttr({
							"required":"Y"
						});
						vcIpbUdcMenuId.fieldLabel = app.getAppProperty("fieldLabel");
					}
				}
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */e){
				hostUtil = new ComUtil(app.getHostAppInstance());
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbUdcMenuIdKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbUdcMenuId = e.control;
				if (e.keyCode == cpr.events.KeyCode.ENTER) {
					 e.stopPropagation();
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("iIsParentGrpSearch", false);
			app.declareBindableAppProperty("iSystemRcd", null);
			app.declareBindableAppProperty("iMenuId", null);
			app.declareBindableAppProperty("iMenuNm", null);
			app.declareBindableAppProperty("iPgmDtlTypeRcd", null);
			app.declareBindableAppProperty("oSystemRcd", null);
			app.declareBindableAppProperty("oMenuId", null);
			app.declareBindableAppProperty("oMenuNm", null);
			var dataMap_1 = new cpr.data.DataMap("dmCmnPMenuSch");
			dataMap_1.parseData({
				"columns" : [
					{"name": "UNIT_SYSTEM_RCD"},
					{"name": "MENU_ID"},
					{"name": "MENU_NM"}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmCmnPMenuSchCount");
			dataMap_2.parseData({
				"columns" : [{"name": "count"}]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmReqKey");
			dataMap_3.parseData({
				"columns" : [
					{"name": "strSystemRcd"},
					{"name": "strMenuId"},
					{"name": "strMenuNm"},
					{"name": "strPgmDtlTypeRcd"}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subPrecheckStdCmnPMenuSch");
			submission_1.action = "cmn/CmnMenuSch/preCheck.do";
			submission_1.addRequestData(dataMap_3);
			submission_1.addResponseData(dataMap_1, false);
			submission_1.addResponseData(dataMap_2, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpUdcPMenu");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0";
			formLayout_1.setColumns(["5fr", "5fr", "20px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var inputBox_1 = new cpr.controls.InputBox("ipbUdcMenuId");
				inputBox_1.bind("value").toAppProperty("iMenuId");
				if(typeof onIpbUdcMenuIdValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbUdcMenuIdValueChange);
				}
				if(typeof onIpbUdcMenuIdKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbUdcMenuIdKeydown);
				}
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_1 = new cpr.controls.Button("btnUdcMenu");
				button_1.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnSearchUdcMenuClick == "function") {
					button_1.addEventListener("click", onBtnSearchUdcMenuClick);
				}
				container.addChild(button_1, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbUdcMenuNm");
				inputBox_2.readOnly = true;
				inputBox_2.bind("value").toAppProperty("iMenuNm");
				container.addChild(inputBox_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for cmnMenuSch
	cpr.utils.Util.ensurePackage("udc.cmn").cmnMenuSch = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.cmnMenuSch", internalApp, id);
	};
	
	udc.cmn.cmnMenuSch.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.cmnMenuSch.prototype, "type", {
		get : function(){
			return "udc.cmn.cmnMenuSch";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.cmnMenuSch.prototype, "iIsParentGrpSearch", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iIsParentGrpSearch");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iIsParentGrpSearch", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnMenuSch.prototype, "iSystemRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iSystemRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iSystemRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnMenuSch.prototype, "iMenuId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iMenuId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iMenuId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnMenuSch.prototype, "iMenuNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iMenuNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iMenuNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnMenuSch.prototype, "iPgmDtlTypeRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iPgmDtlTypeRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iPgmDtlTypeRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnMenuSch.prototype, "oSystemRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oSystemRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oSystemRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnMenuSch.prototype, "oMenuId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oMenuId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oMenuId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnMenuSch.prototype, "oMenuNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oMenuNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oMenuNm", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.cmnMenuSch
/// start - udc.cmn.cmnNat
/*
 * UDC Qualified Name: udc.cmn.cmnNat
 * App URI: udc/cmn/cmnNat
 * Source Location: udc/cmn/cmnNat.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/cmnNat", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var util = new ComUtil(app);
			var hostUtil;
			
			var skipOnChange = false;
			var openedByChange = false;
			
			function clearCallback(){
				// value redraw()
				var vcNatNm = app.lookup("ipbUdcNatNm");
				var vcNatCd = app.lookup("ipbUdcNatCd");
				
				skipOnChange = true;
				vcNatNm.value = "";
				vcNatCd.value = "";
				skipOnChange = false;
				
				app.setAppProperty("oSystemRcd", "");
				app.setAppProperty("oNatCd", "");
				app.setAppProperty("oNatNm", "");
				
				vcNatNm.focus();
			}
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpbUdcNatIdValueChange(/* cpr.events.CValueChangeEvent */e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbUdcNatId = e.control;
				return doOnChangeStdCmnPNat();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchUdcNatClick(/* cpr.events.CMouseEvent */e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearchUdcNat = e.control;
				
				if(app.getAppProperty("iIsParentGrpSearch")){
					if(utilHost.Group.isGrpChgBtnSch(btnSearchUdcObj)) return false;
				}
				doOnClickStdCmnPNat();
			}
			
			
			/**
			 * doOnChangeStdCmnPNat(값 변경시 조회)  
			 * @param  sender
			 * @return  void
			 */
			function doOnChangeStdCmnPNat(){
				// 오브젝트 검색 팝업이 붙은 컬럼이라면 값 변경시에 팝업이 필요하다.
				
				if(skipOnChange == true||openedByChange == true){
					// 팝업의 콜백으로 값이 세팅되어서 change 이벤트 발생한 경우
					// 이미 팝업을 처리하였기 때문에 다시 띄우지 않는다.
					return false;
				}
				
				
				var vsNatId = util.Control.getValue("ipbUdcNatNm");
				// 이벤트가 발생한 내용 입력해준다.
				// 입력내용 삭제시 팝업없이 관련내용 삭제 -> 삭제인데도, 아래의 체크처리가 이루워짐에 따라 불필요한 메시지 호출됨으로 막아준다.
				if(ValueUtil.fixNull(vsNatId) == ""){
					clearCallback();
					return false;
				}
				
				util.DataMap.setValue("dmReqKey", "strNatNm", app.getAppProperty("iNatNm"));
				util.DataMap.setValue("dmReqKey", "strLanDivRcd", app.getAppProperty("iLanDivRcd"));
				
				util.Submit.send("subPrecheckStdCmnPNat", function(pbSuccess){
					if(pbSuccess){
						var vnCount = util.DataMap.getValue("dmCmnPNatCount", "count");
						
						if(vnCount == 1){
							// 검색결과가 1건이면 팝업없이 바로 값세팅
							app.setAppProperty("oNatCd", util.DataMap.getValue("dmCmnPNat", "NAT_CD"));
							app.setAppProperty("oNatNm", util.DataMap.getValue("dmCmnPNat", "NAT_NM"));
							
							skipOnChange = true;
							app.lookup("ipbUdcNatCd").value = app.getAppProperty("oNatCd");
							app.lookup("ipbUdcNatNm").value = app.getAppProperty("oNatNm");
							skipOnChange = false;
							
							util.Control.redraw(["ipbUdcNatCd", "ipbUdcNatNm"]);
			
							var event = new cpr.events.CUIEvent("searchCallBack");
							app.dispatchEvent(event);
							
							
						}else{
							// 검색결과가 여러건이면 팝업.
							return doOnClickStdCmnPNat();
						}
					}
				});
			}
			
			/**
			 * doOnClickStdCmnPNat(돋보기 버튼을 클릭시 사용자 검색 팝업 호출)  
			 * @param  sender
			 * @return void
			 */
			function doOnClickStdCmnPNat(){
				if(hostUtil.Group.isGrpChgBtnSch()){
					return false
				};
				
				if(openedByChange) {
					// 검색어를 입력하고 팝업버튼을 누른경우
					// 이미 change 이벤트에 의해 팝업이 떠있기 때문에 다시 띄우지 않는다.
					return false;
				}
				
				var initValue = {
					strLanDivRcd: app.getAppProperty("iLanDivRcd"), 
					strNatNm: app.getAppProperty("iNatNm"), 
				}
				
				openedByChange = true;
				var _app = app;
				hostUtil.Dialog.open("app/cmn/cmnPNat", 650, 440, function(/**@type cpr.events.CUIEvent */e){
					var dialog = e.control;
					var returnValue = dialog.returnValue;
					if(returnValue!=null){
						app.setAppProperty("oNatCd", util.DataMap.getValue("dmCmnPNat", "NAT_CD"));
						app.setAppProperty("oNatNm", util.DataMap.getValue("dmCmnPNat", "NAT_NM"));
						
						skipOnChange = true;
						app.lookup("ipbUdcNatCd").value = app.getAppProperty("oNatCd");
						app.lookup("ipbUdcNatNm").value = app.getAppProperty("oNatNm");
						skipOnChange = false;
						
						var event = new cpr.events.CUIEvent("searchCallBack");
						_app.dispatchEvent(event);
					}else{
						if(ValueUtil.isNull(util.Control.getValue("ipbUdcNatNm")) == true){
							skipOnChange = true;//valueChange 이벤트 방지.
							_app.lookup("ipbUdcNatCd").value = "";
							_app.lookup("ipbUdcNatNm").value = "";
							skipOnChange = false;
						}
					}
					
					openedByChange = false;
					
				}, initValue);
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */e){
				var vsProperty = e.property;
				if(vsProperty == "iNatNm" || vsProperty == "iNatNm"){
					app.lookup("ipbUdcNatNm").redraw();
				}
				
				if(vsProperty == "required"){
					var vsRequired = app.getAppProperty("required");
					if(vsRequired == "Y"){
						var vcIpbUdcNatNm = app.lookup("ipbUdcNatNm");
						vcIpbUdcNatNm.userAttr({
							"required":"Y"
						});
						vcIpbUdcNatNm.fieldLabel = app.getAppProperty("fieldLabel");
					}
				}
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */e){
				hostUtil = new ComUtil(app.getHostAppInstance());
			
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbUdcNatNmKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbUdcNatNm = e.control;
				if (e.keyCode == cpr.events.KeyCode.ENTER) {
					 e.stopPropagation();
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("iIsParentGrpSearch", null);
			app.declareBindableAppProperty("iLanDivRcd", null);
			app.declareBindableAppProperty("iNatNm", null);
			app.declareBindableAppProperty("oNatCd", null);
			app.declareBindableAppProperty("oNatNm", null);
			var dataMap_1 = new cpr.data.DataMap("dmCmnPNat");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "PRT_ORD",
						"dataType": "string"
					},
					{
						"name": "STD_YN",
						"dataType": "string"
					},
					{
						"name": "LAN_DIV_RCD",
						"dataType": "string"
					},
					{
						"name": "UCD",
						"dataType": "string"
					},
					{
						"name": "CD_NM",
						"dataType": "string"
					},
					{
						"name": "OG_CD",
						"dataType": "string"
					},
					{
						"name": "CD_LEN",
						"dataType": "string"
					},
					{
						"name": "CD_PRP10",
						"dataType": "string"
					},
					{
						"name": "CD_PRP1",
						"dataType": "string"
					},
					{
						"name": "ULAN_DIV_RCD",
						"dataType": "string"
					},
					{
						"name": "CD_PRP2",
						"dataType": "string"
					},
					{
						"name": "CD_PRP3",
						"dataType": "string"
					},
					{
						"name": "CD_PRP4",
						"dataType": "string"
					},
					{
						"name": "CD_PRP5",
						"dataType": "string"
					},
					{
						"name": "CD_PRP6",
						"dataType": "string"
					},
					{
						"name": "CD_PRP7",
						"dataType": "string"
					},
					{
						"name": "CD_PRP8",
						"dataType": "string"
					},
					{
						"name": "CD_DESC",
						"dataType": "string"
					},
					{
						"name": "CD_PRP9",
						"dataType": "string"
					},
					{
						"name": "UNIT_SYSTEM_RCD",
						"dataType": "string"
					},
					{
						"name": "EFFT_END_DT",
						"dataType": "string"
					},
					{
						"name": "CD_SHORT_NM",
						"dataType": "string"
					},
					{
						"name": "CD_CLS",
						"dataType": "string"
					},
					{
						"name": "CD",
						"dataType": "string"
					},
					{
						"name": "EFFT_ST_DT",
						"dataType": "string"
					},
					{
						"name": "NAT_CD",
						"dataType": "string"
					},
					{
						"name": "NAT_NM",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmCmnPNatCount");
			dataMap_2.parseData({
				"columns" : [{"name": "count"}]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmReqKey");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "strNatNm",
						"dataType": "string"
					},
					{
						"name": "strLanDivRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subPrecheckStdCmnPNat");
			submission_1.action = "cmn/CmnNat/preCheck.do";
			submission_1.addRequestData(dataMap_3);
			submission_1.addResponseData(dataMap_1, false);
			submission_1.addResponseData(dataMap_2, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpUdcPMenu");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0";
			formLayout_1.setColumns(["7fr", "3fr", "20px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var inputBox_1 = new cpr.controls.InputBox("ipbUdcNatNm");
				inputBox_1.bind("value").toAppProperty("iNatNm");
				if(typeof onIpbUdcNatIdValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbUdcNatIdValueChange);
				}
				if(typeof onIpbUdcNatNmKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbUdcNatNmKeydown);
				}
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_1 = new cpr.controls.Button("btnSearchUdcMenu");
				button_1.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnSearchUdcNatClick == "function") {
					button_1.addEventListener("click", onBtnSearchUdcNatClick);
				}
				container.addChild(button_1, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbUdcNatCd");
				inputBox_2.readOnly = true;
				inputBox_2.bind("value").toAppProperty("iLanDivRcd");
				container.addChild(inputBox_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for cmnNat
	cpr.utils.Util.ensurePackage("udc.cmn").cmnNat = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.cmnNat", internalApp, id);
	};
	
	udc.cmn.cmnNat.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.cmnNat.prototype, "type", {
		get : function(){
			return "udc.cmn.cmnNat";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.cmnNat.prototype, "iIsParentGrpSearch", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iIsParentGrpSearch");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iIsParentGrpSearch", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnNat.prototype, "iLanDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iLanDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iLanDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnNat.prototype, "iNatNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iNatNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iNatNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnNat.prototype, "oNatCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oNatCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oNatCd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnNat.prototype, "oNatNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oNatNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oNatNm", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.cmnNat
/// start - udc.cmn.cmnObjSch
/*
 * UDC Qualified Name: udc.cmn.cmnObjSch
 * App URI: udc/cmn/cmnObjSch
 * Source Location: udc/cmn/cmnObjSch.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/cmnObjSch", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var utilHost;
			var util = new ComUtil(app);
			
			exports.setStdCmnPObjSchObjInfo = function(){
				
				
			}
			
			exports.focus = function(){
				app.lookup("ipbUdcObjNm").focus();
			}
			
			exports.getApp = function(){
				return app;
			}
			
			
			var skipOnChange = false;
			
			var openedByChange = false;
			
			/**
			 * @desc   clearCallback  
			 * @return void
			 */
			function clearCallback() {
				
				app.setAppProperty("oObjDivRcd", "");
				app.setAppProperty("oCd", "");
				app.setAppProperty("oCdNm", "");
				app.setAppProperty("oBegDt", "");
				app.setAppProperty("oEndDt", "");
				app.setAppProperty("oLanDivRcd", "");
				app.lookup("ipbUdcObjCd").value = "";
				
			}
			
			
			/*
			 * 인풋 박스에서 before-value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장되기 전에 발생하는 이벤트. 다음 이벤트로 value-change가 발생합니다.
			 */
			function onIpbUdcObjNmBeforeValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
			//	var ipbUdcObjNm = e.control;
			//	if(skipOnChange){
			//		e.preventDefault();
			//		skipOnChange = false;
			//	}
			}
			
			
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpbUdcObjNmValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				
				var ipbUdcObjNm = e.control;
			//	debugger;
				if(skipOnChange || openedByChange) return;
				
				var vsNewObjNm = e.newValue;
				
				clearCallback();
				
				if(vsNewObjNm == ""){
					//clearCallback();
					var event = new cpr.events.CUIEvent("searchCallBack");
					app.dispatchEvent(event);
					return false;
				}
				
				var voMenuInfo = utilHost.getMenuInfo();
				util.DataMap.setValue("dmReqKey", "authRngRcd", voMenuInfo.get("AUTH_RNG_RCD"));
				util.DataMap.setValue("dmReqKey", "strObjDivRcd", app.getAppProperty("iObjDivRcd"));
				util.DataMap.setValue("dmReqKey", "strStartObject", app.getAppProperty("iStartObject"));
				util.DataMap.setValue("dmReqKey", "strOtDivRcd", app.getAppProperty("iOtDivRcd"));
				util.DataMap.setValue("dmReqKey", "strOtIsTreeView", app.getAppProperty("iOtIsTreeView"));
				util.DataMap.setValue("dmReqKey", "strBetweenEndDtYn", app.getAppProperty("iBetweenEndDtYn"));
				util.DataMap.setValue("dmReqKey", "strLanDivRcd", app.getAppProperty("iLanDivRcd"));
				util.DataMap.setValue("dmReqKey", "strKeyDate", app.getAppProperty("iKeyDate"));
				util.DataMap.setValue("dmReqKey", "strKeyEndDate", app.getAppProperty("iKeyEndDate"));
				util.DataMap.setValue("dmReqKey", "strObjNm", e.newValue);
				//util.DataMap.setValue("dmReqKey", "strObjCd", app.getAppProperty("iCd"));
				
				skipOnChange = true;
				util.Submit.send("subPrecheckCmnPObjSch", function(pbSuccess){
					if(pbSuccess){
						
						var vnCount = util.DataMap.getValue("dmCmnPObjSchCount", "count");
						
						if(vnCount == 1){
							app.setAppProperty("oObjDivRcd", util.DataMap.getValue("dmCmnPObjSch","OBJ_DIV_RCD"));
							app.setAppProperty("oCd", util.DataMap.getValue("dmCmnPObjSch","CD"));
							app.setAppProperty("oCdNm", util.DataMap.getValue("dmCmnPObjSch","CD_NM"));
							app.setAppProperty("oBegDt", util.DataMap.getValue("dmCmnPObjSch","ST_DT"));
							app.setAppProperty("oEndDt", util.DataMap.getValue("dmCmnPObjSch","END_DT"));
							app.setAppProperty("oLanDivRcd", util.DataMap.getValue("dmCmnPObjSch","LAN_DIV_RCD"));
							skipOnChange = true; //valueChange 이벤트 방지.
							app.lookup("ipbUdcObjNm").value = util.DataMap.getValue("dmCmnPObjSch","CD_NM");
							app.lookup("ipbUdcObjCd").value = util.DataMap.getValue("dmCmnPObjSch","CD");
							skipOnChange = false; 
							
							var event = new cpr.events.CUIEvent("searchCallBack");
							app.dispatchEvent(event);
							
						}else{
							//clearCallback();
							openCmnPObjSch(vsNewObjNm, e);
						}
						
						
					}
				});
				
			}
			
			
			function openCmnPObjSch(psNewObjNm){
				
				if(openedByChange) return;
				var _app = app;
				
				var vsObjNm = ""; 
				if(psNewObjNm){
					vsObjNm = psNewObjNm;
				}else{
					vsObjNm = app.getAppProperty("iCdNm");
				}
				var initValue = {
						objDivRcd : app.getAppProperty("iObjDivRcd"),
						lanDivRcd : app.getAppProperty("iLanDivRcd"),
						otDivRcd : app.getAppProperty("iOtDivRcd"),
						otIsTreeView : app.getAppProperty("iOtIsTreeView"),
						// 검색어 기본값 지정
						strObjCd : '',
						strObjNm : vsObjNm,
						strKeyDate : app.getAppProperty("iKeyDate"),
						strKeyEndDate : app.getAppProperty("iKeyEndDate"),
						strStartObject: app.getAppProperty("iStartObject"),
						strBetweenEndDtYn : app.getAppProperty("iBetweenEndDtYn")
					};
				//팝업 방지..
				openedByChange = true;
				utilHost.Dialog.open("app/cmn/cmnPObjSch", 700, 490, function(/* cpr.events.CUIEvent */e){
					var dialog = e.control;
					var returnValue = dialog.returnValue;
					if(returnValue != null){
						_app.setAppProperty("oObjDivRcd", returnValue.OBJ_DIV_RCD);
						_app.setAppProperty("oCd", returnValue.CD);
						_app.setAppProperty("oCdNm", returnValue.CD_NM);
						_app.setAppProperty("oBegDt", returnValue.ST_DT);
						_app.setAppProperty("oEndDt", returnValue.END_DT);
						_app.setAppProperty("oLanDivRcd", returnValue.LAN_DIV_RCD);
						skipOnChange = true; //valueChange 이벤트 방지.
						_app.lookup("ipbUdcObjNm").value = returnValue.CD_NM;
						_app.lookup("ipbUdcObjCd").value = returnValue.CD;
						skipOnChange = false; 
						var event = new cpr.events.CUIEvent("searchCallBack");
						_app.dispatchEvent(event);
					}else{
						skipOnChange = true; //valueChange 이벤트 방지.
						if(ValueUtil.isNull(_app.lookup("ipbUdcObjCd").value)){
							_app.setAppProperty("oCdNm", "");
							_app.setAppProperty("oCd", "");
							_app.lookup("ipbUdcObjNm").value = "";	
						}
						skipOnChange = false; 
			//			clearCallback();
					}
					openedByChange = false;
				}, initValue);
				
				
			}
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				var vsProperty = e.property;
				
				if(e.property == "iCdNm" || e.property == "oCdNm"){
					app.lookup("ipbUdcObjNm").redraw();
				}
				
				if(e.property == "iCd" || e.property == "oCd"){
					app.lookup("ipbUdcObjCd").redraw();
				}
				
				if(e.property == "required"){
					
					var vsRequired = app.getAppProperty("required");
					
					if(vsRequired == "Y"){
						var vcIpbUdcObjCd = app.lookup("ipbUdcObjCd");
						var voUserAttr = vcIpbUdcObjCd.userattr();
						voUserAttr["required"] = "Y";
						
						vcIpbUdcObjCd.fieldLabel = app.getAppProperty("fieldLable");
					}
				}
				
			//	var dmReqKey = app.lookup("dmReqKey");
			//	if(vsProperty){
			//		vsProperty = vsProperty.substring(1, vsProperty.length);
			//		vsProperty = "str" + vsProperty;
			//		if(dmReqKey.isExistColumn(vsProperty)){
			//			dmReqKey.setValue(vsProperty, e.newValue);
			//		}
			//		
			//	}
				
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				utilHost = new ComUtil(app.getHostAppInstance());
				/*
				var hostApp = app.getHostAppInstance();
				var vcHostTitle = hostApp.lookup(app.getHost().id);
				if(vcHostTitle.userattr("required") == "Y"){
					app.lookup("ipbUdcObjNm").style.css("class","required");
					app.lookup("ipbUdcObjNm").redraw();
				}*/
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchUdcObjClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearchUdcObj = e.control;
				
				if(app.getAppProperty("iIsParentGrpSearch")){
					if(utilHost.Group.isGrpChgBtnSch(btnSearchUdcObj)) return false;
				}
				openCmnPObjSch();
			}
			
			
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbUdcObjNmKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbUdcObjNm = e.control;
				 if (e.keyCode == 13) {
					 e.stopPropagation();
				 }
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("iIsParentGrpSearch", false);
			app.declareBindableAppProperty("iCdNm", null);
			app.declareBindableAppProperty("iCd", null);
			app.declareBindableAppProperty("iObjDivRcd", null);
			app.declareBindableAppProperty("iStartObject", null);
			app.declareBindableAppProperty("iOtDivRcd", null);
			app.declareBindableAppProperty("iOtIsTreeView", "N");
			app.declareBindableAppProperty("iBetweenEndDtYn", null);
			app.declareBindableAppProperty("iLanDivRcd", null);
			app.declareBindableAppProperty("iKeyDate", null);
			app.declareBindableAppProperty("iKeyEndDate", null);
			app.declareBindableAppProperty("oObjDivRcd", null);
			app.declareBindableAppProperty("oCd", null);
			app.declareBindableAppProperty("oCdNm", null);
			app.declareBindableAppProperty("oBegDt", null);
			app.declareBindableAppProperty("oEndDt", null);
			app.declareBindableAppProperty("oLanDivRcd", null);
			app.declareBindableAppProperty("value", null);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [
					{"name": "strObjNm"},
					{"name": "strOprtRoleId"},
					{"name": "strObjDivRcd"},
					{"name": "strObjCd"},
					{"name": "authRngRcd"},
					{"name": "strKeyDate"},
					{"name": "strLanDivRcd"},
					{"name": "strKeyEndDate"},
					{
						"name": "strOtIsTreeView",
						"defaultValue": "N"
					},
					{"name": "strStartObject"},
					{"name": "strOtDivRcd"},
					{"name": "strBetweenEndDtYn"}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmCmnPObjSchCount");
			dataMap_2.parseData({
				"columns" : [{
					"name": "count",
					"dataType": "number"
				}]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmObjInfo");
			dataMap_3.parseData({
				"columns" : [
					{"name": "strObjDivRcd"},
					{"name": "strObjNm"},
					{"name": "strObjCd"}
				]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmCmnPObjSch");
			dataMap_4.parseData({
				"columns" : [
					{"name": "END_DT"},
					{"name": "OBJ_DIV_RCD"},
					{"name": "LAN_DIV_RCD"},
					{"name": "CD"},
					{"name": "REF_KEY"},
					{"name": "CD_NM"},
					{"name": "ST_DT"}
				]
			});
			app.register(dataMap_4);
			var submission_1 = new cpr.protocols.Submission("subPrecheckCmnPObjSch");
			submission_1.action = "cmn/CmnObjSch/precheck.do";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataMap_2, false);
			submission_1.addResponseData(dataMap_4, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subTopObjInfo");
			submission_2.action = "cmn/CmnObjSch/listTopObjInfo.do";
			submission_2.addResponseData(dataMap_3, false);
			app.register(submission_2);
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpUdcPObj");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0";
			formLayout_1.setColumns(["70fr", "30fr", "20px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button("btnUdcObj");
				button_1.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnSearchUdcObjClick == "function") {
					button_1.addEventListener("click", onBtnSearchUdcObjClick);
				}
				container.addChild(button_1, {
					"colIndex": 2,
					"rowIndex": 0,
					"horizontalAlign": "fill",
					"verticalAlign": "fill",
					"width": 20,
					"height": 25
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbUdcObjNm");
				inputBox_1.userAttr({"required": ""});
				inputBox_1.bind("value").toAppProperty("iCdNm");
				if(typeof onIpbUdcObjNmValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbUdcObjNmValueChange);
				}
				if(typeof onIpbUdcObjNmBeforeValueChange == "function") {
					inputBox_1.addEventListener("before-value-change", onIpbUdcObjNmBeforeValueChange);
				}
				if(typeof onIpbUdcObjNmKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbUdcObjNmKeydown);
				}
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbUdcObjCd");
				inputBox_2.readOnly = true;
				inputBox_2.bind("value").toAppProperty("iCd");
				container.addChild(inputBox_2, {
					"colIndex": 1,
					"rowIndex": 0,
					"horizontalAlign": "fill",
					"width": 55
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for cmnObjSch
	cpr.utils.Util.ensurePackage("udc.cmn").cmnObjSch = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.cmnObjSch", internalApp, id);
	};
	
	udc.cmn.cmnObjSch.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "type", {
		get : function(){
			return "udc.cmn.cmnObjSch";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "iIsParentGrpSearch", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iIsParentGrpSearch");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iIsParentGrpSearch", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "iCdNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iCdNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iCdNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "iCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iCd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "iObjDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iObjDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iObjDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "iStartObject", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStartObject");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStartObject", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "iOtDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iOtDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iOtDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "iOtIsTreeView", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iOtIsTreeView");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iOtIsTreeView", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "iBetweenEndDtYn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iBetweenEndDtYn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iBetweenEndDtYn", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "iLanDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iLanDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iLanDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "iKeyDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iKeyDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iKeyDate", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "iKeyEndDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iKeyEndDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iKeyEndDate", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "oObjDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oObjDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oObjDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "oCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oCd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "oCdNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oCdNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oCdNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "oBegDt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oBegDt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oBegDt", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "oEndDt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oEndDt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oEndDt", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "oLanDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oLanDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oLanDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnObjSch.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.cmnObjSch
/// start - udc.cmn.cmnOuterSch
/*
 * UDC Qualified Name: udc.cmn.cmnOuterSch
 * App URI: udc/cmn/cmnOuterSch
 * Source Location: udc/cmn/cmnOuterSch.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/cmnOuterSch", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			var util = new ComUtil(app);
			var hostUtil;
			
			var skipOnChange = false;
			var openedByChange = false;
			
			function clearCallback(){
				skipOnChange = true;
				app.lookup("ipbUdcOuterId").value = ""
				app.lookup("ipbUdcOuterNm").value = ""	
				skipOnChange = false;
				
				app.setAppProperty("oOtsId", "");
				app.setAppProperty("oSsn", "");
				app.setAppProperty("oKorNm", "");
				app.setAppProperty("oEngNm", "");
				app.setAppProperty("oChaNm", "");
				app.setAppProperty("oGenderRcd", "");
				app.setAppProperty("oBirthDay", "");
				app.setAppProperty("oLnrSlrDivRcd", "");
				app.setAppProperty("oEmail", "");
				app.setAppProperty("oClpNo", "");
				app.setAppProperty("oZipCode", "");
				app.setAppProperty("oZipSeq", "");
				app.setAppProperty("oAddr1", "");
				app.setAppProperty("oAddr2", "");
				app.setAppProperty("oHomeTelNo", "");
				app.setAppProperty("oNatRcd", "");
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */e){
				var vsProperty = e.property;
				if(vsProperty == "iUserId" || vsProperty == "oOtsId"){
					app.lookup("ipbUdcOuterNm").redraw();
				}
				
				if(vsProperty == "required"){
					var vsRequired = app.getAppProperty("required");
					if(vsRequired == "Y"){
						var vcIpbUdcMenuId = app.lookup("ipbUdcOuterNm");
						vcIpbUdcMenuId.userAttr({
							"required":"Y"
						});
						vcIpbUdcMenuId.fieldLabel = app.getAppProperty("fieldLabel");
					}
				}
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */e){
				hostUtil = new ComUtil(app.getHostAppInstance());
			}
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpbUdcOuterIdValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbUdcOuterId = e.control;
				if(skipOnChange == true || openedByChange == true){
					return false;
				}
				
				var vsUserId = ipbUdcOuterId.value;
				// 입력내용 삭제시 팝업없이 관련내용 삭제 -> 삭제인데도, 아래의 체크처리가 이루워짐에 따라 불필요한 메시지 호출됨으로 막아준다.
				if(vsUserId == ""){
					clearCallback();
					return false;
				}
				
				// 사용자ID가 한글인 경우는 사용자명으로 검색되도록 그외의 경우 사용자ID로 검색되도록 처리한다.
				var vsStrUserId = "";
				var vsStrUserNm = "";
				if(ValueUtil.isNull(vsUserId) == false){
					if(ValueUtil.checkType("KOR", vsUserId) == true){
						vsStrUserId = "";
						vsStrUserNm = vsUserId;
					}else {
						vsStrUserId = vsUserId;
						vsStrUserNm = "";
					}
				}else {
					vsStrUserId = "";
					vsStrUserNm = vsUserId;
				}
				
				util.DataMap.setValue("dmReqKey", "strUserId", app.getAppProperty("iUserId"));
				util.DataMap.setValue("dmReqKey", "strUserNm", app.getAppProperty("iUserNm"));
				
				util.Submit.send("subPrecheckStdCmnPOuterUserSch", function(pbSuccess){
					if(pbSuccess){
						var vnCount = util.DataMap.getValue("dmCmnPOuterUserSchCount", "count");
						
						if(vnCount == 1){
							// 검색결과가 1건이면 팝업없이 바로 값세팅
							app.setAppProperty("oOtsId", util.DataMap.getValue("dmCmnPOuterUserSch", "OTS_ID"));
							app.setAppProperty("oSsn", util.DataMap.getValue("dmCmnPOuterUserSch", "SSN"));
							app.setAppProperty("oKorNm", util.DataMap.getValue("dmCmnPOuterUserSch", "KOR_NM"));
							app.setAppProperty("oEngNm", util.DataMap.getValue("dmCmnPOuterUserSch", "ENG_NM"));
							app.setAppProperty("oChaNm", util.DataMap.getValue("dmCmnPOuterUserSch", "CHA_NM"));
							app.setAppProperty("oGenderRcd", util.DataMap.getValue("dmCmnPOuterUserSch", "GENDER_RCD"));
							app.setAppProperty("oBirthDay", util.DataMap.getValue("dmCmnPOuterUserSch", "BIRTHDAY"));
							app.setAppProperty("oLnrSlrDivRcd", util.DataMap.getValue("dmCmnPOuterUserSch", "LNR_SLR_DIV_RCD"));
							app.setAppProperty("oEmail", util.DataMap.getValue("dmCmnPOuterUserSch", "EMAIL"));
							app.setAppProperty("oClpNo", util.DataMap.getValue("dmCmnPOuterUserSch", "CLP_NO"));
							app.setAppProperty("oZipCode", util.DataMap.getValue("dmCmnPOuterUserSch", "ZIPCODE"));
							app.setAppProperty("oZipSeq", util.DataMap.getValue("dmCmnPOuterUserSch", "ZIPSEQ"));
							app.setAppProperty("oAddr1", util.DataMap.getValue("dmCmnPOuterUserSch", "ADDR1"));
							app.setAppProperty("oAddr2", util.DataMap.getValue("dmCmnPOuterUserSch", "ADDR2"));
							app.setAppProperty("oHomeTelNo", util.DataMap.getValue("dmCmnPOuterUserSch", "HOME_TEL_NO"));
							app.setAppProperty("oNatRcd", util.DataMap.getValue("dmCmnPOuterUserSch", "NAT_RCD"));
							
							skipOnChange = true;
							app.lookup("ipbUdcOuterId").value = app.getAppProperty("oOtsId");
							app.lookup("ipbUdcOuterNm").value = app.getAppProperty("iUserId");
							skipOnChange = false;
							
							var event = new cpr.events.CUIEvent("searchCallBack");
							app.dispatchEvent(event);
							
						}else{
							// 검색결과가 여러건이면 팝업.
							app.lookup("btnUdcOuter").click();
						}
					}
				});
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchUdcOuterClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearchUdcOuter = e.control;
				if(app.getAppProperty("iIsParentGrpSearch")){
					if(hostUtil.Group.isGrpChgBtnSch()) return false;
				}
				
				if(openedByChange == true) {
					// 검색어를 입력하고 팝업버튼을 누른경우
					// 이미 change 이벤트에 의해 팝업이 떠있기 때문에 다시 띄우지 않는다.
					return false;
				}
				
				// 사용자ID가 한글인 경우는 사용자명으로 검색되도록 그외의 경우 사용자ID로 검색되도록 처리한다.
				var vsUserId = app.lookup("ipbUdcOuterId").value;
				var vsStrUserId = "";
				var vsStrUserNm = "";
				if(ValueUtil.isNull(vsUserId) == false){
					if(ValueUtil.checkType("KOR", vsUserId) == true){
						vsStrUserId = "";
						vsStrUserNm = vsUserId;
					}else {
						vsStrUserId = vsUserId;
						vsStrUserNm = "";
					}
				}else {
					vsStrUserId = "";
					vsStrUserNm = vsUserId;
				}
				
			//	clearCallback();
				
				var initValue = {
					strUserId:		vsStrUserId, 
					strUserNm:		vsStrUserNm, 
				}
				
				openedByChange = true;
				var _app = app;
				hostUtil.Dialog.open("app/cmn/cmnPOuterUserSch", 700, 400, function(/**@type cpr.events.CUIEvent */e){
					/**@type cpr.controls.Dialog*/
					var dialog = e.control;
					var returnValue = dialog.returnValue;
					if(returnValue!=null){
						_app.setAppProperty("oOtsId", returnValue.OTS_ID);
						_app.setAppProperty("oSsn", returnValue.SSN);
						_app.setAppProperty("oKorNm", returnValue.KOR_NM);
						_app.setAppProperty("oEngNm", returnValue.ENG_NM);
						_app.setAppProperty("oChaNm", returnValue.CHA_NM);
						_app.setAppProperty("oGenderRcd", returnValue.GENDER_RCD);
						_app.setAppProperty("oBirthDay", returnValue.BIRTHDAY);
						_app.setAppProperty("oLnrSlrDivRcd", returnValue.LNR_SLR_DIV_RCD);
						_app.setAppProperty("oEmail", returnValue.EMAIL);
						_app.setAppProperty("oClpNo", returnValue.CLP_NO);
						_app.setAppProperty("oZipCode", returnValue.ZIPCODE);
						_app.setAppProperty("oZipSeq", returnValue.ZIPSEQ);
						_app.setAppProperty("oAddr1", returnValue.ADDR1);
						_app.setAppProperty("oAddr2", returnValue.ADDR2);
						_app.setAppProperty("oHomeTelNo", returnValue.HOME_TEL_NO);
						_app.setAppProperty("oNatRcd", returnValue.NAT_RCD);
						
						skipOnChange = true;
						_app.lookup("ipbUdcOuterId").value = returnValue.OTS_ID;
						_app.lookup("ipbUdcOuterNm").value = _app.getAppProperty("oKorNm");
						skipOnChange = false;
						
						var event = new cpr.events.CUIEvent("searchCallBack");
						_app.dispatchEvent(event);
					}else{
						if(ValueUtil.isNull(util.Control.getValue("ipbUdcOuterId")) == true){
							skipOnChange = true;//valueChange 이벤트 방지.
							_app.lookup("ipbUdcOuterId").value = "";
							_app.lookup("ipbUdcOuterNm").value = "";
							skipOnChange = false;
						}
					}
					
					util.Control.redraw(["ipbUdcOuterId", "ipbUdcOuterNm"]);
					openedByChange = false;
					
				}, initValue);
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbUdcOuterIdKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbUdcOuterId = e.control;
				if (e.keyCode == cpr.events.KeyCode.ENTER) {
					 e.stopPropagation();
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("iIsParentGrpSearch", false);
			app.declareBindableAppProperty("iUserId", null);
			app.declareBindableAppProperty("iUserNm", null);
			app.declareBindableAppProperty("oOtsId", null);
			app.declareBindableAppProperty("oSsn", null);
			app.declareBindableAppProperty("oKorNm", null);
			app.declareBindableAppProperty("oEngNm", null);
			app.declareBindableAppProperty("oChaNm", null);
			app.declareBindableAppProperty("oGenderRcd", "");
			app.declareBindableAppProperty("oBirthDay", null);
			app.declareBindableAppProperty("oLnrSlrDivRcd", null);
			app.declareBindableAppProperty("oEmail", null);
			app.declareBindableAppProperty("oClpNo", null);
			app.declareBindableAppProperty("oZipCode", null);
			app.declareBindableAppProperty("oZipSeq", null);
			app.declareBindableAppProperty("oAddr1", null);
			app.declareBindableAppProperty("oAddr2", null);
			app.declareBindableAppProperty("oHomeTelNo", null);
			app.declareBindableAppProperty("oNatRcd", null);
			var dataMap_1 = new cpr.data.DataMap("dmCmnPOuterUserSch");
			dataMap_1.parseData({
				"columns" : [
					{"name": "OTS_ID"},
					{"name": "SSN"},
					{"name": "KOR_NM"},
					{"name": "ENG_NM"},
					{"name": "CHA_NM"},
					{"name": "GENDER_RCD"},
					{"name": "BIRTHDAY"},
					{"name": "LNR_SLR_DIV_RCD"},
					{"name": "EMAIL"},
					{"name": "CLP_NO"},
					{"name": "ADDR1"},
					{"name": "ZIPCODE"},
					{"name": "ZIPSEQ"},
					{"name": "ADDR2"},
					{"name": "HOME_TEL_NO"},
					{"name": "NAT_RCD"},
					{"name": "DEL_CKB"}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmCmnPOuterUserSchCount");
			dataMap_2.parseData({
				"columns" : [{"name": "count"}]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmReqKey");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "strUserId",
						"dataType": "string"
					},
					{
						"name": "strUserNm",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subPrecheckStdCmnPOuterUserSch");
			submission_1.action = "cmn/CmnOuterUserSch/preCheck.do";
			submission_1.addRequestData(dataMap_3);
			submission_1.addResponseData(dataMap_1, false);
			submission_1.addResponseData(dataMap_2, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpUdcPOuter");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0";
			formLayout_1.setColumns(["7fr", "3fr", "20px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var inputBox_1 = new cpr.controls.InputBox("ipbUdcOuterId");
				inputBox_1.bind("value").toAppProperty("iUserId");
				if(typeof onIpbUdcOuterIdValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbUdcOuterIdValueChange);
				}
				if(typeof onIpbUdcOuterIdKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbUdcOuterIdKeydown);
				}
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_1 = new cpr.controls.Button("btnUdcOuter");
				button_1.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnSearchUdcOuterClick == "function") {
					button_1.addEventListener("click", onBtnSearchUdcOuterClick);
				}
				container.addChild(button_1, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbUdcOuterNm");
				inputBox_2.readOnly = true;
				inputBox_2.bind("value").toAppProperty("iUserNm");
				container.addChild(inputBox_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for cmnOuterSch
	cpr.utils.Util.ensurePackage("udc.cmn").cmnOuterSch = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.cmnOuterSch", internalApp, id);
	};
	
	udc.cmn.cmnOuterSch.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "type", {
		get : function(){
			return "udc.cmn.cmnOuterSch";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "iIsParentGrpSearch", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iIsParentGrpSearch");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iIsParentGrpSearch", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "iUserId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iUserId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iUserId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "iUserNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iUserNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iUserNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oOtsId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oOtsId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oOtsId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oSsn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oSsn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oSsn", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oKorNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oKorNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oKorNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oEngNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oEngNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oEngNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oChaNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oChaNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oChaNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oGenderRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oGenderRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oGenderRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oBirthDay", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oBirthDay");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oBirthDay", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oLnrSlrDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oLnrSlrDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oLnrSlrDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oEmail", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oEmail");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oEmail", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oClpNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oClpNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oClpNo", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oZipCode", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oZipCode");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oZipCode", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oZipSeq", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oZipSeq");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oZipSeq", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oAddr1", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oAddr1");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oAddr1", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oAddr2", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oAddr2");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oAddr2", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oHomeTelNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oHomeTelNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oHomeTelNo", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnOuterSch.prototype, "oNatRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oNatRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oNatRcd", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.cmnOuterSch
/// start - udc.cmn.cmnPrsnSearch
/*
 * UDC Qualified Name: udc.cmn.cmnPrsnSearch
 * App URI: udc/cmn/cmnPrsnSearch
 * Source Location: udc/cmn/cmnPrsnSearch.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/cmnPrsnSearch", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			var util = new ComUtil(app);
			var hostUtil;
			
			var skipOnChange = false;
			var openedByChange = false;
			
			function clearCallback(){
				skipOnChange = true;
				app.lookup("ipbUdcProfNo").value = "";
				app.lookup("ipbUdcProfNm").value = "";
				skipOnChange = false;
				
				app.setAppProperty("oAfpAppDt", "");
				app.setAppProperty("oBirthday", "");
				app.setAppProperty("oHoRcd", "");
				app.setAppProperty("oIoForeignDivRcd", "");
				app.setAppProperty("oObjNo", "");
				app.setAppProperty("oOgCd", "");
				app.setAppProperty("oOgNm", "");
				app.setAppProperty("oPosCd", "");
				app.setAppProperty("oPosNm", "");
				app.setAppProperty("oProfDivRcd", "");
				app.setAppProperty("oPvactCiiDt", "");
				app.setAppProperty("oRepNm", "");
				app.setAppProperty("oSsn", "");
				app.setAppProperty("oStaffGrpRcd", "");
				app.setAppProperty("oStaffNo", "");
				app.setAppProperty("oStaffSubGrpRcd", "");
				app.setAppProperty("oStatNm", "");
				app.setAppProperty("oStatRcd", "");
				app.setAppProperty("oWkdtyNm", "");
				app.setAppProperty("oWkdtyRcd", "");
				app.setAppProperty("oWkgrdNm", "");
				app.setAppProperty("oWkgrdRcd", "");
			
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */e){
				var vsProperty = e.property;
				
				if(vsProperty == "iRepNm" || vsProperty == "oRepNm"){
					app.lookup("ipbUdcProfNm").redraw();
				}
				
				if(vsProperty == "iStaffNo" || vsProperty == "oStaffNo"){
					app.lookup("ipbUdcProfNo").redraw();
				}
				
				if(vsProperty == "required"){
					var vsRequired = app.getAppProperty("required");
					if(vsRequired == "Y"){
						var vcIpbUdcProfNm = app.lookup("ipbUdcProfNm");
						vcIpbUdcProfNm.userAttr({
							"required":"Y"
						});
						vcIpbUdcProfNm.fieldLabel = app.getAppProperty("fieldLabel");
					}
				}
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */e){
				hostUtil = new ComUtil(app.getHostAppInstance());
			}
			
			/**
			 * 입력된 교직원 이름 또는 No에 대한 글자 수 체크.  
			 * @return {Object} userId, userNm.
			 */
			function checkProfValue(){
				// 사용자ID와 사용자명을 체크한다.
				var vsProfNm = util.Control.getValue("ipbUdcProfNm");
				var strStaffNo = "";
				var strRepNm = "";
				
				
				if(ValueUtil.isNull(vsProfNm) == true){
					return false;
				}
				
				if(ValueUtil.fixNumber(vsProfNm)){
					if(vsProfNm.length < 2){
						//"교직원ID는 @1자 이상으로 입력해야 합니다. "
						util.Msg.warn("M031", ["교직원ID","2"]);
						clearCallback();
						return false;
					}
					strStaffNo = vsProfNm;
					strRepNm = "";
					
				}else {
					if(vsProfNm.length < 2){
						//"교직원명은 @1자 이상으로 입력해야 합니다. "
						util.Msg.warn("M031", ["교직원명","2", "2"]);
						clearCallback();
						return false;
					}
					strStaffNo = "";
					strRepNm = strStaffNo;
				}
				
				return {staffNo: strStaffNo, repNm: strRepNm};
			}
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpbUdcProfNmValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbUdcProfNm = e.control;
				if(skipOnChange == true||openedByChange == true){
					// 팝업의 콜백으로 값이 세팅되어서 change 이벤트 발생한 경우
					// 이미 팝업을 처리하였기 때문에 다시 띄우지 않는다.
					return false;
				}
				
				if(checkUserValue() == null){
					clearCallback();
					return false;
				}
				
				var voMenuInfo = util.getMenuInfo();
				
				util.DataMap.setValue("dmReq", "authRngRcd", voMenuInfo.AUTH_RNG_RCD);
				util.DataMap.setValue("dmReq", "strStaffGrpAuth", app.getAppProperty("iStaffGrpAuth"));
				util.DataMap.setValue("dmReq", "strWkdtyAuth", app.getAppProperty("iWkdtyAuth"));
				util.DataMap.setValue("dmReq", "strStaffGrpRcd", app.getAppProperty("iStaffGrpRcd"));
				util.DataMap.setValue("dmReq", "strStaffSubGrpRcd", app.getAppProperty("iStaffSubGrpRcd"));
				util.DataMap.setValue("dmReq", "strStatRcd", app.getAppProperty("iStatusRcd"));
				util.DataMap.setValue("dmReq", "strStaffNo", app.getAppProperty("iStaffNo"));
				util.DataMap.setValue("dmReq", "strRepNm", app.getAppProperty("iRepNm"));
				util.DataMap.setValue("dmReq", "strKeyDate", app.getAppProperty("iKeyDate"));
				util.DataMap.setValue("dmReq", "strObjDivRcd", app.getAppProperty("iObjDivRcd"));
				util.DataMap.setValue("dmReq", "strObjCd", app.getAppProperty("iObjCd"));
				util.DataMap.setValue("dmReq", "strWkgrdRcd", app.getAppProperty("iWkgrdRcd"));
				util.DataMap.setValue("dmReq", "strOprtRoleId", voMenuInfo.OPRT_ROLE_ID);
				util.DataMap.setValue("dmReq", "strPresIncludCls", app.getAppProperty("iPresIncludCls"));
				
				util.Submit.send("subPrecheckStdCmnRPrsnSearch", function(pbSuccess){
					if(pbSuccess){
						var vnCount = util.DataMap.getValue("dmRes", "count");
						
						if(vnCount == 1){
							// 검색결과가 1건이면 팝업없이 바로 값세팅
							app.setAppProperty("oAfpAppDt", util.DataMap.getValue("dmResult", "AFP_APP_DT"));
							app.setAppProperty("oBirthday", util.DataMap.getValue("dmResult", "BIRTHDAY"));
							app.setAppProperty("oHoRcd", util.DataMap.getValue("dmResult", "HO_RCD"));
							app.setAppProperty("oIoForeignDivRcd", util.DataMap.getValue("dmResult", "IO_FOREIGN_DIV_RCD"));
							app.setAppProperty("oObjNo", util.DataMap.getValue("dmResult", "OBJ_NO"));
							app.setAppProperty("oOgCd", util.DataMap.getValue("dmResult", "OG_CD"));
							app.setAppProperty("oOgNm", util.DataMap.getValue("dmResult", "OG_NM"));
							app.setAppProperty("oPosCd", util.DataMap.getValue("dmResult", "POS_CD"));
							app.setAppProperty("oPosNm", util.DataMap.getValue("dmResult", "POS_NM"));
							app.setAppProperty("oProfDivRcd", util.DataMap.getValue("dmResult", ""));
							app.setAppProperty("oPvactCiiDt", util.DataMap.getValue("dmResult", ""));
							app.setAppProperty("oRepNm", util.DataMap.getValue("dmResult", "REP_NM"));
							app.setAppProperty("oSsn", util.DataMap.getValue("dmResult", "SSN"));
							app.setAppProperty("oStaffGrpRcd", util.DataMap.getValue("dmResult", "STAFF_GRP_RCD"));
							app.setAppProperty("oStaffNo", util.DataMap.getValue("dmResult", "STAFF_NO"));
							app.setAppProperty("oStaffSubGrpRcd", util.DataMap.getValue("dmResult", "STAFF_SUB_GRP_RCD"));
							app.setAppProperty("oStatNm", util.DataMap.getValue("dmResult", "STAT_NM"));
							app.setAppProperty("oStatRcd", util.DataMap.getValue("dmResult", "STAT_RCD"));
							app.setAppProperty("oWkdtyNm", util.DataMap.getValue("dmResult", "WKDTY_NM"));
							app.setAppProperty("oWkdtyRcd", util.DataMap.getValue("dmResult", "WKDTY_RCD"));
							app.setAppProperty("oWkgrdNm", util.DataMap.getValue("dmResult", "WKGRD_NM"));
							app.setAppProperty("oWkgrdRcd", util.DataMap.getValue("dmResult", "WKGRD_RCD"));
							
							skipOnChange = true;
							app.lookup("ipbUdcProfNm").value = app.getAppProperty("oRepNm");
							app.lookup("ipbUdcProfNo").value = app.getAppProperty("oStaffNo");
							skipOnChange = false;
							
							var event = new cpr.events.CUIEvent("searchCallBack");
							app.dispatchEvent(event);
							
						}else{
							// 검색결과가 여러건이면 팝업.
							app.lookup("btnUdcProf").click();
						}
					}
				});
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchUdcProfClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearchUdcProf = e.control;
				if(app.getAppProperty("iIsParentGrpSearch")){
					if(hostUtil.Group.isGrpChgBtnSch()) return false;
				}
				
				if(openedByChange) {
					// 검색어를 입력하고 팝업버튼을 누른경우
					// 이미 change 이벤트에 의해 팝업이 떠있기 때문에 다시 띄우지 않는다.
					return false;
				}
				
				var voProf = null;
				var vsProfNm = app.lookup("ipbUdcProfNm").value;
				if(vsProfNm != ""){
					voProf = checkProfValue();
					if(voProf == null){
						e.stopPropagation();
						return false;
					}
				}
				
			//	clearCallback();
				
				var initValue = {
					strStaffGrpAuth 		: app.getAppProperty("istrStaffGrpAuth"),
					strWkdtyAuth 			: app.getAppProperty("istrWkdtyAuth"),
					strStaffGrpRcd 			: app.getAppProperty("iStaffGrpRcd"),
					strStaffGrpRcdLock 		: app.getAppProperty("iStaffGrpRcdLock"),
					strStaffSubGrpRcd 		: app.getAppProperty("iStaffSubGrpRcd"),
					strStaffSubGrpRcdLock 	: app.getAppProperty("iStaffSubGrpRcdLock"),
					strStatusRcd 			: app.getAppProperty("iStatusRcd"),
					
					strStaffNo 				: "",
					strRepNm 				: app.getAppProperty("iRepNm"),
					strKeyDate 				: app.getAppProperty("iKeyDate"),
					strObjDivRcd 			: app.getAppProperty("iObjDivRcd"),
					strObjCd 				: app.getAppProperty("iObjCd"),
					strObjNm 				: app.getAppProperty("iObjNm"),
					strObjCdInList 			: app.getAppProperty("istrObjCdInList"),
					strWkgrdRcd 			: app.getAppProperty("iWkgrdRcd"),
					strOgDisableCls 		: app.getAppProperty("iOgDisableCls"),
					strPresIncludCls 		: app.getAppProperty("iPresIncludCls")
				};
				
				openedByChange = true;
				var _app = app;
				hostUtil.Dialog.open("app/cmn/cmnPPrsnSearch", 720, 400, function(/**@type cpr.events.CUIEvent */e){
					var dialog = e.control;
					var returnValue = dialog.returnValue;
					if(returnValue!=null){
						_app.setAppProperty("oAfpAppDt", returnValue.AFP_APP_DT);
						_app.setAppProperty("oBirthday", returnValue.BIRTHDAY);
						_app.setAppProperty("oHoRcd", returnValue.HO_RCD);
						_app.setAppProperty("oIoForeignDivRcd", returnValue.IO_FOREIGN_DIV_RCD);
						_app.setAppProperty("oObjNo", returnValue.OBJ_NO);
						_app.setAppProperty("oOgCd", returnValue.OG_CD);
						_app.setAppProperty("oOgNm", returnValue.OG_NM);
						_app.setAppProperty("oPosCd", returnValue.POS_CD);
						_app.setAppProperty("oPosNm", returnValue.POS_NM);
						_app.setAppProperty("oProfDivRcd", "");
						_app.setAppProperty("oPvactCiiDt", "");
						_app.setAppProperty("oRepNm", returnValue.REP_NM);
						_app.setAppProperty("oSsn", returnValue.SSN);
						_app.setAppProperty("oStaffGrpRcd", returnValue.STAFF_GRP_RCD);
						_app.setAppProperty("oStaffNo", returnValue.STAFF_NO);
						_app.setAppProperty("oStaffSubGrpRcd", returnValue.STAFF_SUB_GRP_RCD);
						_app.setAppProperty("oStatNm", returnValue.STAT_NM);
						_app.setAppProperty("oStatRcd", returnValue.STAT_RCD);
						_app.setAppProperty("oWkdtyNm", returnValue.WKDTY_NM);
						_app.setAppProperty("oWkdtyRcd", returnValue.WKDTY_RCD);
						_app.setAppProperty("oWkgrdNm", returnValue.WKGRD_NM);
						_app.setAppProperty("oWkgrdRcd", returnValue.WKGRD_RCD);
									
						skipOnChange = true;
						_app.lookup("ipbUdcProfNm").value = returnValue.REP_NM;
						_app.lookup("ipbUdcProfNo").value = returnValue.STAFF_NO;
						skipOnChange = false;
						
						var event = new cpr.events.CUIEvent("searchCallBack");
						_app.dispatchEvent(event);
					}else{
						if(ValueUtil.isNull(util.Control.getValue("ipbUdcProfNm")) == true){
							skipOnChange = true;//valueChange 이벤트 방지.
							_app.lookup("ipbUdcProfNm").value = "";
							_app.lookup("ipbUdcProfNo").value = "";
							skipOnChange = false;
						}
					}
					
					util.Control.redraw(["ipbUdcProfNm", "ipbUdcProfNo"]);
					openedByChange = false;
					
				}, initValue);
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbUdcProfNmKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbUdcProfNm = e.control;
				if (e.keyCode == cpr.events.KeyCode.ENTER) {
					 e.stopPropagation();
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("iIsParentGrpSearch", false);
			app.declareBindableAppProperty("istrStaffGrpAuth", null);
			app.declareBindableAppProperty("istrWkdtyAuth", null);
			app.declareBindableAppProperty("iKeyDate", null);
			app.declareBindableAppProperty("iStaffNo", null);
			app.declareBindableAppProperty("iStaffGrpRcd", null);
			app.declareBindableAppProperty("iStaffGrpRcdLock", null);
			app.declareBindableAppProperty("iStaffSubGrpRcd", null);
			app.declareBindableAppProperty("iStaffSubGrpRcdLock", null);
			app.declareBindableAppProperty("iStatusRcd", null);
			app.declareBindableAppProperty("iRepNm", null);
			app.declareBindableAppProperty("iObjDivRcd", null);
			app.declareBindableAppProperty("iObjCd", null);
			app.declareBindableAppProperty("iObjNm", null);
			app.declareBindableAppProperty("istrObjCdInList", null);
			app.declareBindableAppProperty("iWkgrdRcd", null);
			app.declareBindableAppProperty("iOgDisableCls", null);
			app.declareBindableAppProperty("iPresIncludCls", null);
			app.declareBindableAppProperty("oObjNo", null);
			app.declareBindableAppProperty("oStaffNo", null);
			app.declareBindableAppProperty("oRepNm", null);
			app.declareBindableAppProperty("oBirthday", null);
			app.declareBindableAppProperty("oStatNm", null);
			app.declareBindableAppProperty("oStatRcd", null);
			app.declareBindableAppProperty("oOgNm", null);
			app.declareBindableAppProperty("oOgCd", null);
			app.declareBindableAppProperty("oPosNm", null);
			app.declareBindableAppProperty("oPosCd", null);
			app.declareBindableAppProperty("oWkgrdNm", null);
			app.declareBindableAppProperty("oWkgrdRcd", null);
			app.declareBindableAppProperty("oStaffGrpRcd", null);
			app.declareBindableAppProperty("oStaffSubGrpRcd", null);
			app.declareBindableAppProperty("oHoRcd", null);
			app.declareBindableAppProperty("oSsn", null);
			app.declareBindableAppProperty("oWkdtyRcd", null);
			app.declareBindableAppProperty("oWkdtyNm", null);
			app.declareBindableAppProperty("oAfpAppDt", null);
			app.declareBindableAppProperty("oPvactCiiDt", null);
			app.declareBindableAppProperty("oProfDivRcd", null);
			app.declareBindableAppProperty("oIoForeignDivRcd", null);
			var dataMap_1 = new cpr.data.DataMap("dmResult");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "STAT_RCD",
						"dataType": "string"
					},
					{
						"name": "BIRTHDAY",
						"dataType": "string"
					},
					{
						"name": "WKGRD_NM",
						"dataType": "string"
					},
					{
						"name": "STAT_NM",
						"dataType": "string"
					},
					{
						"name": "WKDTY_NM",
						"dataType": "string"
					},
					{
						"name": "SSN",
						"dataType": "string"
					},
					{
						"name": "OG_NM",
						"dataType": "string"
					},
					{
						"name": "STAFF_SUB_GRP_RCD",
						"dataType": "string"
					},
					{
						"name": "POS_NM",
						"dataType": "string"
					},
					{
						"name": "WKGRD_RCD",
						"dataType": "string"
					},
					{
						"name": "OBJ_NO",
						"dataType": "string"
					},
					{
						"name": "POS_CD",
						"dataType": "string"
					},
					{
						"name": "STAFF_GRP_RCD",
						"dataType": "string"
					},
					{
						"name": "WKDTY_RCD",
						"dataType": "string"
					},
					{
						"name": "OG_CD",
						"dataType": "string"
					},
					{
						"name": "REP_NM",
						"dataType": "string"
					},
					{
						"name": "STAFF_NO",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmRes");
			dataMap_2.parseData({
				"columns" : [{
					"name": "count",
					"dataType": "string"
				}]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmReq");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "strStaffNo",
						"dataType": "string"
					},
					{
						"name": "strStatRcd",
						"dataType": "string"
					},
					{
						"name": "strStaffGrpRcd",
						"dataType": "string"
					},
					{
						"name": "strObjCd",
						"dataType": "string"
					},
					{
						"name": "strStaffSubGrpRcd",
						"dataType": "string"
					},
					{
						"name": "strWkdtyAuth",
						"dataType": "string"
					},
					{
						"name": "strOprtRoleId",
						"dataType": "string"
					},
					{
						"name": "strObjDivRcd",
						"dataType": "string"
					},
					{
						"name": "authRngRcd",
						"dataType": "string"
					},
					{
						"name": "strKeyDate",
						"dataType": "string"
					},
					{
						"name": "strRepNm",
						"dataType": "string"
					},
					{
						"name": "strStaffGrpAuth",
						"dataType": "string"
					},
					{
						"name": "strWkgrdRcd",
						"dataType": "string"
					},
					{
						"name": "strPresIncludCls",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subPrecheckStdCmnRPrsnSearch");
			submission_1.action = "cmn/CmnPrsnSearch/precheck.do";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addRequestData(dataMap_3);
			submission_1.addResponseData(dataMap_2, false);
			submission_1.addResponseData(dataMap_1, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpUdcPUser");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0";
			formLayout_1.setColumns(["7fr", "3fr", "20px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var inputBox_1 = new cpr.controls.InputBox("ipbUdcProfNm");
				inputBox_1.bind("value").toAppProperty("iRepNm");
				if(typeof onIpbUdcProfNmValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbUdcProfNmValueChange);
				}
				if(typeof onIpbUdcProfNmKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbUdcProfNmKeydown);
				}
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_1 = new cpr.controls.Button("btnUdcProf");
				button_1.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnSearchUdcProfClick == "function") {
					button_1.addEventListener("click", onBtnSearchUdcProfClick);
				}
				container.addChild(button_1, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbUdcProfNo");
				inputBox_2.readOnly = true;
				inputBox_2.bind("value").toAppProperty("iStaffNo");
				container.addChild(inputBox_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for cmnPrsnSearch
	cpr.utils.Util.ensurePackage("udc.cmn").cmnPrsnSearch = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.cmnPrsnSearch", internalApp, id);
	};
	
	udc.cmn.cmnPrsnSearch.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "type", {
		get : function(){
			return "udc.cmn.cmnPrsnSearch";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iIsParentGrpSearch", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iIsParentGrpSearch");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iIsParentGrpSearch", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "istrStaffGrpAuth", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("istrStaffGrpAuth");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("istrStaffGrpAuth", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "istrWkdtyAuth", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("istrWkdtyAuth");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("istrWkdtyAuth", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iKeyDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iKeyDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iKeyDate", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iStaffNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStaffNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStaffNo", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iStaffGrpRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStaffGrpRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStaffGrpRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iStaffGrpRcdLock", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStaffGrpRcdLock");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStaffGrpRcdLock", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iStaffSubGrpRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStaffSubGrpRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStaffSubGrpRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iStaffSubGrpRcdLock", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStaffSubGrpRcdLock");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStaffSubGrpRcdLock", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iStatusRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStatusRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStatusRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iRepNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iRepNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iRepNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iObjDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iObjDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iObjDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iObjCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iObjCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iObjCd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iObjNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iObjNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iObjNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "istrObjCdInList", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("istrObjCdInList");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("istrObjCdInList", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iWkgrdRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iWkgrdRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iWkgrdRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iOgDisableCls", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iOgDisableCls");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iOgDisableCls", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "iPresIncludCls", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iPresIncludCls");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iPresIncludCls", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oObjNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oObjNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oObjNo", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oStaffNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStaffNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStaffNo", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oRepNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oRepNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oRepNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oBirthday", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oBirthday");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oBirthday", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oStatNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStatNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStatNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oStatRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStatRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStatRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oOgNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oOgNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oOgNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oOgCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oOgCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oOgCd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oPosNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oPosNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oPosNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oPosCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oPosCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oPosCd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oWkgrdNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oWkgrdNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oWkgrdNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oWkgrdRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oWkgrdRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oWkgrdRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oStaffGrpRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStaffGrpRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStaffGrpRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oStaffSubGrpRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStaffSubGrpRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStaffSubGrpRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oHoRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oHoRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oHoRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oSsn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oSsn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oSsn", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oWkdtyRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oWkdtyRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oWkdtyRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oWkdtyNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oWkdtyNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oWkdtyNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oAfpAppDt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oAfpAppDt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oAfpAppDt", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oPvactCiiDt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oPvactCiiDt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oPvactCiiDt", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oProfDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oProfDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oProfDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnPrsnSearch.prototype, "oIoForeignDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oIoForeignDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oIoForeignDivRcd", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.cmnPrsnSearch
/// start - udc.cmn.cmnUserSch
/*
 * UDC Qualified Name: udc.cmn.cmnUserSch
 * App URI: udc/cmn/cmnUserSch
 * Source Location: udc/cmn/cmnUserSch.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/cmnUserSch", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			var util = new ComUtil(app);
			var hostUtil;
			
			var skipOnChange = false;
			var openedByChange = false;
			
			function clearCallback(){
				skipOnChange = true;
				app.lookup("ipbUdcUserNm").value = ""
				app.lookup("ipbUdcUserId").value = ""	
				skipOnChange = false;
				
				app.setAppProperty("oUserDivRcd", "");
				app.setAppProperty("oUserId", "");
				app.setAppProperty("oUserNm", "");
				app.setAppProperty("oStatCd", "");
				app.setAppProperty("oStatNm", "");
				app.setAppProperty("oDeptCd", "");
				app.setAppProperty("oDeptNm", "");
				app.setAppProperty("oId", "");
				app.setAppProperty("oSsn", "");
				app.setAppProperty("oPartyId", "");
			}
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpbUdcUserIdValueChange(/* cpr.events.CValueChangeEvent */e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbUdcUserId = e.control;
				if(skipOnChange == true||openedByChange == true){
					// 팝업의 콜백으로 값이 세팅되어서 change 이벤트 발생한 경우
					// 이미 팝업을 처리하였기 때문에 다시 띄우지 않는다.
					return false;
				}
				
				
				var vsUserId = ipbUdcUserId.value;
				// 이벤트가 발생한 내용 입력해준다.
				// 입력내용 삭제시 팝업없이 관련내용 삭제 -> 삭제인데도, 아래의 체크처리가 이루워짐에 따라 불필요한 메시지 호출됨으로 막아준다.
				//	clearCallback();
				
				if(vsUserId == ""){
					clearCallback();
					return false;
				}
				
				if(checkUserValue() == null){
					clearCallback();
					return false;
				}
				
				util.DataMap.setValue("dmReqKey", "authRngRcd", util.getMenuInfo().get("AUTH_RNG_RCD"));
				util.DataMap.setValue("dmReqKey", "strKeyDate", app.getAppProperty("iKeyDate"));
				util.DataMap.setValue("dmReqKey", "strUseYn", app.getAppProperty("iUseYn"));
				util.DataMap.setValue("dmReqKey", "strUserId", app.getAppProperty("iUserId"));
				util.DataMap.setValue("dmReqKey", "strUserNm", app.getAppProperty("iUserNm"));
				util.DataMap.setValue("dmReqKey", "strUserDivRcd", app.getAppProperty("iUserDivRcd"));
				
				util.Submit.send("subPrecheckStdCmnPUserSch", function(pbSuccess){
					if(pbSuccess){
						var vnCount = util.DataMap.getValue("dmCmnPUserSchCount", "count");
						
						if(vnCount == 1){
							// 검색결과가 1건이면 팝업없이 바로 값세팅
							app.setAppProperty("oUserDivRcd", util.DataMap.getValue("dmCmnPUserSch", "USER_DIV_RCD"));
							app.setAppProperty("oUserId", util.DataMap.getValue("dmCmnPUserSch", "USER_ID"));
							app.setAppProperty("oUserNm", util.DataMap.getValue("dmCmnPUserSch", "USER_NM"));
							app.setAppProperty("oStatCd", util.DataMap.getValue("dmCmnPUserSch", "STAT_CD"));
							app.setAppProperty("oStatNm", util.DataMap.getValue("dmCmnPUserSch", "STAT_NM"));
							app.setAppProperty("oDeptCd", util.DataMap.getValue("dmCmnPUserSch", "DEPT_CD"));
							app.setAppProperty("oDeptNm", util.DataMap.getValue("dmCmnPUserSch", "DEPT_NM"));
							app.setAppProperty("oId", util.DataMap.getValue("dmCmnPUserSch", "ID"));
							app.setAppProperty("oSsn", util.DataMap.getValue("dmCmnPUserSch", "SSN"));
							app.setAppProperty("oPartyId", util.DataMap.getValue("dmCmnPUserSch", "PARTY_ID"));
							
							skipOnChange = true;
							app.lookup("ipbUdcUserId").value = app.getAppProperty("oUserId");
							app.lookup("ipbUdcUserNm").value = app.getAppProperty("oUserNm");
							skipOnChange = false;
							
							var event = new cpr.events.CUIEvent("searchCallBack");
							app.dispatchEvent(event);
							
						}else{
							// 검색결과가 여러건이면 팝업.
							app.lookup("btnUdcUser").click();
						}
					}
				});
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchUdcUserClick(/* cpr.events.CMouseEvent */e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearchUdcUser = e.control;
				
				if(app.getAppProperty("iIsParentGrpSearch")){
					if(hostUtil.Group.isGrpChgBtnSch()) return false;
				}
				
				if(openedByChange) {
					// 검색어를 입력하고 팝업버튼을 누른경우
					// 이미 change 이벤트에 의해 팝업이 떠있기 때문에 다시 띄우지 않는다.
					return false;
				}
				
				var voUser = null;
				var vsUserId = app.lookup("ipbUdcUserId").value;
				if(vsUserId && vsUserId != ""){
					voUser = checkUserValue();
					if(voUser == null){		
						return false;
					}
				}
				
			//	clearCallback();
				
				var initValue = {
					strKeyDate:		app.getAppProperty("iKeyDate"), 
					strUseYn:		app.getAppProperty("iUseYn"), 
					strUserId:		voUser == null ? app.getAppProperty("iUserId") : voUser.userId, 
					strUserNm:		voUser == null ? app.getAppProperty("iUserNm") : voUser.userNm, 
					strUserDivRcd:	app.getAppProperty("iUserDivRcd")
				}
				
				openedByChange = true;
				var _app = app;
				hostUtil.Dialog.open("app/cmn/cmnPUserSch", 700, 400, function(/**@type cpr.events.CUIEvent */e){
					var dialog = e.control;
					var returnValue = dialog.returnValue;
					if(returnValue!=null){
						_app.setAppProperty("oUserDivRcd", returnValue.USER_DIV_RCD);
						_app.setAppProperty("oUserId", returnValue.USER_ID);
						_app.setAppProperty("oUserNm", returnValue.USER_NM);
						_app.setAppProperty("oStatCd", returnValue.STAT_CD);
						_app.setAppProperty("oStatNm", returnValue.STAT_NM);
						_app.setAppProperty("oDeptCd", returnValue.DEPT_CD);
						_app.setAppProperty("oDeptNm", returnValue.DEPT_NM);
						_app.setAppProperty("oId", returnValue.ID);
						_app.setAppProperty("oSsn", returnValue.SSN);
						_app.setAppProperty("oPartyId", returnValue.PARTY_ID);
						
						skipOnChange = true;
						_app.lookup("ipbUdcUserId").value = returnValue.USER_ID;
						_app.lookup("ipbUdcUserNm").value = returnValue.USER_NM;
						skipOnChange = false;
						
						var event = new cpr.events.CUIEvent("searchCallBack");
						_app.dispatchEvent(event);
					}else{
						if(ValueUtil.isNull(util.Control.getValue("ipbUdcUserId")) == true){
							skipOnChange = true;//valueChange 이벤트 방지.
							_app.lookup("ipbUdcUserId").value = "";
							_app.lookup("ipbUdcUserNm").value = "";
							skipOnChange = false;
						}
					}
					
			//		util.Control.redraw(["ipbUdcUserId", "ipbUdcUserNm"]);
					openedByChange = false;
					
				}, initValue);
			}
			
			/**
			 * 입력된 사용자 이름 또는 id에 대한 글자 수 체크.  
			 * @return {Object} userId, userNm.
			 */
			function checkUserValue(){
				// 사용자ID와 사용자명을 체크한다.
				var vsUserId = app.lookup("ipbUdcUserId").value;
				var vsStrUserId = "";
				var vsStrUserNm = "";
				
				// 사용자ID가 한글인 경우는 사용자명으로 검색되도록 그외의 경우 사용자ID로 검색되도록 처리한다.
				if(!ValueUtil.isNull(vsUserId)){		
					if(ValueUtil.checkType("KOR",vsUserId)){
						vsStrUserId = "";
						vsStrUserNm = vsUserId;
						
						if(vsStrUserNm.length < 2){
							util.Msg.warn("M213", ["2"]);
							return;
						}
					}else{
						vsStrUserId = vsUserId;
						vsStrUserNm = "";
						if(vsStrUserId != ""){
							if(vsStrUserId.length < 4){
								//"사용자ID는 @1자 이상으로 입력해야 합니다. "
								util.Msg.warn("M212", ["4"]);
								return;
							}
						}
					}						
				}else{
					vsStrUserId = "";
					vsStrUserNm = app.lookup("ipbUdcUserNm").value
					
					if(vsStrUserNm.length < 2){
						util.Msg.warn("M213", ["2"]);
						return null;
					}
				}
				
				return {userId: vsStrUserId, userNm: vsStrUserNm};
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */e){
				var vsProperty = e.property;
				
				if(vsProperty == "iUserId" || vsProperty == "oUserId"){
					app.lookup("ipbUdcUserId").redraw();
				}
				
				if(vsProperty == "iUserNm" || vsProperty == "oUserNm"){
					app.lookup("ipbUdcUserNm").redraw();
				}
				
				if(vsProperty == "required"){
					var vsRequired = app.getAppProperty("required");
					if(vsRequired == "Y"){
						var vcIpbUdcUserId = app.lookup("ipbUdcUserId");
						vcIpbUdcUserId.userAttr({
							"required":"Y"
						});
						vcIpbUdcUserId.fieldLabel = app.getAppProperty("fieldLabel");
					}
				}
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */e){
				hostUtil = new ComUtil(app.getHostAppInstance());
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbUdcUserIdKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbUdcUserId = e.control;
				if (e.keyCode == cpr.events.KeyCode.ENTER) {
					 e.stopPropagation();
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("iIsParentGrpSearch", null);
			app.declareBindableAppProperty("iKeyDate", null);
			app.declareBindableAppProperty("iUseYn", null);
			app.declareBindableAppProperty("iUserId", null);
			app.declareBindableAppProperty("iUserNm", null);
			app.declareBindableAppProperty("iUserDivRcd", null);
			app.declareBindableAppProperty("oUserDivRcd", null);
			app.declareBindableAppProperty("oUserId", null);
			app.declareBindableAppProperty("oUserNm", null);
			app.declareBindableAppProperty("oStatCd", null);
			app.declareBindableAppProperty("oStatNm", null);
			app.declareBindableAppProperty("oDeptCd", null);
			app.declareBindableAppProperty("oDeptNm", null);
			app.declareBindableAppProperty("oId", null);
			app.declareBindableAppProperty("oSsn", null);
			app.declareBindableAppProperty("oPartyId", null);
			app.declareBindableAppProperty("value", null);
			var dataMap_1 = new cpr.data.DataMap("dmCmnPUserSch");
			dataMap_1.parseData({
				"columns" : [
					{"name": "USER_DIV_RCD"},
					{"name": "USER_ID"},
					{"name": "USER_NM"},
					{"name": "STAT_CD"},
					{"name": "STAT_NM"},
					{"name": "DEPT_CD"},
					{"name": "DEPT_NM"},
					{"name": "ID"},
					{"name": "SSN"},
					{"name": "PARTY_ID"}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmCmnPUserSchCount");
			dataMap_2.parseData({
				"columns" : [{"name": "count"}]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmReqKey");
			dataMap_3.parseData({
				"columns" : [
					{"name": "strUserDivRcd"},
					{"name": "strUserId"},
					{"name": "strUserNm"},
					{"name": "strUseYn"},
					{"name": "strKeyDate"},
					{"name": "authRngRcd"}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subPrecheckStdCmnPUserSch");
			submission_1.action = "cmn/CmnUserSch/preCheck.do";
			submission_1.addRequestData(dataMap_3);
			submission_1.addResponseData(dataMap_1, false);
			submission_1.addResponseData(dataMap_2, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpUdcPUser");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0";
			formLayout_1.setColumns(["5fr", "5fr", "20px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var inputBox_1 = new cpr.controls.InputBox("ipbUdcUserId");
				inputBox_1.bind("value").toAppProperty("iUserId");
				if(typeof onIpbUdcUserIdValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbUdcUserIdValueChange);
				}
				if(typeof onIpbUdcUserIdKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbUdcUserIdKeydown);
				}
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_1 = new cpr.controls.Button("btnUdcUser");
				button_1.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnSearchUdcUserClick == "function") {
					button_1.addEventListener("click", onBtnSearchUdcUserClick);
				}
				container.addChild(button_1, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbUdcUserNm");
				inputBox_2.readOnly = true;
				inputBox_2.bind("value").toAppProperty("iUserNm");
				container.addChild(inputBox_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for cmnUserSch
	cpr.utils.Util.ensurePackage("udc.cmn").cmnUserSch = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.cmnUserSch", internalApp, id);
	};
	
	udc.cmn.cmnUserSch.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "type", {
		get : function(){
			return "udc.cmn.cmnUserSch";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "iIsParentGrpSearch", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iIsParentGrpSearch");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iIsParentGrpSearch", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "iKeyDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iKeyDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iKeyDate", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "iUseYn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iUseYn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iUseYn", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "iUserId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iUserId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iUserId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "iUserNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iUserNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iUserNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "iUserDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iUserDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iUserDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "oUserDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oUserDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oUserDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "oUserId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oUserId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oUserId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "oUserNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oUserNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oUserNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "oStatCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStatCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStatCd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "oStatNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStatNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStatNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "oDeptCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oDeptCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oDeptCd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "oDeptNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oDeptNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oDeptNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "oId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "oSsn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oSsn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oSsn", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "oPartyId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oPartyId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oPartyId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.cmnUserSch.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.cmnUserSch
/// start - udc.cmn.extCmnSmsEmailSend
/*
 * UDC Qualified Name: udc.cmn.extCmnSmsEmailSend
 * App URI: udc/cmn/extCmnSmsEmailSend
 * Source Location: udc/cmn/extCmnSmsEmailSend.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/extCmnSmsEmailSend", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var hostUtil;
			var util = new ComUtil(app);
			
			var skipOnChange = false;
			var openedByChange = false;
			
			//moIdsForExtCmnSender = {
			//	grdId				: "grdExtCmnSndMgt",			// (필수) SMS 리피트 id
			//	sendDivChar			: ["ghBtnRepNm","ghBtnStudNo"], // (선택) 발송문구구분_발송내용의 @ 키워드와 매핑됨
			//	sndId				: "CMN01401",					// (선택) 발송id
			//	unitSystemRcd		: "CB001CMN",					// (선택) 단위시스템구분코드		-- 발송Id입력 시 필수
			//	repNm				: "rhBtnRepNm", 				// (필수 )수신자명 리피트 헤더 ID
			//
			//	phoneNo				: "ghBtnSndTelNo	",					// (필수) 휴대폰번호 리피트 헤더 ID
			//	defSenderSms		: "01034090203",				// (선택) 보내는이(SMS)
			//	sendMsgContSms  	: "",							// (선택) SMS발송 내용
			//	sendTitleSms    	: "	발송제목",						// (선택) SMS발송 제목
			//
			//	email				: "ghBtnEmail",					// (필수) 이메일 리피트 헤더 ID
			//	defSenderEmail		: "skyhawk0203@gmail.com", 		// (선택) 보내는이(Email)
			//	defPersonalNmEmail 	: "",							// (선택) 보내는이 명(닉네임)(Email)
			//	sendMsgContEmail	: "발송내용",						// (선택) Email발송 내용
			//	sendTitleEmail		: "발송제목",						// (선택) Email발송 제목
			
			var moExtCmnSender = {
				smsEmailDivCd		: "",	// SMS이메일구분코드[CMN013]
				grdId				: "",	// 그리드 id
				phoneNo 			: "",	// 전화번호(그리드 헤더 id)
				repNm 				: "",	// 수신자명(그리드 헤더 id)
				email 				: "",	// 이메일(그리드 헤더 id)
				defSenderSms		: "",	// 보내는이(sms)
				defSenderEmail		: "",	// 보내는이메일주소(Email)
				defPersonalNmEmail  : "",	// 보내는이 명(닉네임)(Email)
				sendDivCharStr 		: "",	// 발송문구구분값
				sendDivChar			: [],	// 발송문구구분
				sendDivCharSnd    	: [],	// 발송id가 입력되었을경우 구분값
				sendMsgContSms     	: "",	// SMS발송 내용
				sendTitleSms   		: "",	// SMS발송 제목
				sendMsgContEmail	: "",	// Email발송 내용
				sendTitleEmail		: ""	// Email발송 제목
			};
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				hostUtil = new ComUtil(app.getHostAppInstance());
				doExtCmnSmsEmailLoad();
			}//onBodyLoad()
			
			/**
			 * @desc  SMS/Email 임포트 onLoad
			 *				임포트를 사용하는 페이지는 필히 onLoadImportDone 이벤트 구현
			 * @param
			 */
			function doExtCmnSmsEmailLoad() {
				util.Submit.send("subImpSendOnLoad", function(pbSuccess){
					if(pbSuccess){
						util.Control.redraw("cbbImpSendDiv");
						
						//sms
						if(ValueUtil.isNull(app.getAppProperty("phoneNo"))){
							util.SelectCtl.setValue("cbbImpSendDiv", "CMN01302");
							util.Control.setEnable(false, "cbbImpSendDiv");
							moExtCmnSender.smsEmailDivCd = "CMN01302";
						}
						//email
						if(ValueUtil.isNull(app.getAppProperty("email"))){
							util.SelectCtl.setValue("cbbImpSendDiv", "CMN01301");
							util.Control.setEnable(false, "cbbImpSendDiv");
							moExtCmnSender.smsEmailDivCd = "CMN01301";
						}
						// 발송Id
						var vsSendId = app.getAppProperty("sndId");
						// 단위시스템구분코드
						var vsUnitSystemRcd = app.getAppProperty("unitSystemRcd");
						// 발송ID와 단위시스템구분코드가 입력 되었을 경우 발송정보 조회
						if(!ValueUtil.isNull(vsSendId) && !ValueUtil.isNull(vsUnitSystemRcd)){
							util.DataMap.setValue("dmReqKey", "strSndId", vsSendId);
							util.DataMap.setValue("dmReqKey", "strUnitSystemRcd", vsUnitSystemRcd);
							// 발송정보 조회
							doImpGetSendInfo(function(pbSuccess) {
								if (pbSuccess) setInitParamExtCmnSenderBySndId();
							});	
						}else{
							setInitParamExtCmnSender();
						}
					}
				});
			};//doExtCmnSmsEmailLoad()
			
			/**
			 * 발송ID, 단위시스템구분코드에 해당하는 발송정보 GET
			 * @member impExtCmnSmsEmailSend
			 * @author 
			 */
			function doImpGetSendInfo(poCallBackFunc){
				util.Submit.send("subImpSendInfo", function(pbSuccess){
					if(pbSuccess){
						if(util.isFunc(poCallBackFunc)){
							poCallBackFunc(pbSuccess)
						}
					}
				});
			};//doImpGetSendInfo()
			
			/**
			 * 필수값 settting	(발송ID, 단위시스템 입력된경우)
			 * @member impExtCmnSmsEmailSend
			 * @type void
			 * @author 
			 */
			function setInitParamExtCmnSenderBySndId () {
				moExtCmnSender.grdId = app.getAppProperty("grdId");
				moExtCmnSender.phoneNo = app.getAppProperty("phoneNo");
				moExtCmnSender.email = app.getAppProperty("email");
				moExtCmnSender.sendDivChar = [app.getAppProperty("sendDivChar")];
				moExtCmnSender.repNm = app.getAppProperty("repNm");
				
				moExtCmnSender.defSenderSms = util.DataMap.getValue("dmSendInfo", "SND_TEL_NO");
				moExtCmnSender.defSenderEmail = util.DataMap.getValue("dmSendInfo", "EMAIL");
				moExtCmnSender.defPersonalNmEmail = util.DataMap.getValue("dmSendInfo", "NICKNAME");
				moExtCmnSender.sendTitleSms = util.DataMap.getValue("dmSendInfo", "SMS_TITLE");
				moExtCmnSender.sendMsgContSms = util.DataMap.getValue("dmSendInfo", "SMS_CONT");
				moExtCmnSender.sendTitleEmail = util.DataMap.getValue("dmSendInfo", "EMAIL_TITLE");
				moExtCmnSender.sendMsgContEmail = util.DataMap.getValue("dmSendInfo", "EMAIL_CONT");
				var vsSendDivChar = "";
				var voSendDivCharSnd = [];
				/** @type cpr.data.DataSet */
				var vcDsListSndNm = util.Control.lookup("dsListSndNm");
				var vnChildCnt = vcDsListSndNm.getRowCount();
				for(var i = 0; i < vnChildCnt; i++){
					var voChildRow = vcDsListSndNm.getRow(i);
					var vsChildCdNm = voChildRow.getValue("CD_NM");
					vsSendDivChar += voChildRow.getValue("CD_NM") + " , ";
					voSendDivCharSnd.push(voChildRow.getValue("COL"));
				}
				
				if(!ValueUtil.isNull(vsSendDivChar)){
					vsSendDivChar = vsSendDivChar.substring(0, vsSendDivChar.length-2);
					vsSendDivChar = vsSendDivChar.simpleReplace("/", ":" );
				}
				moExtCmnSender.sendDivCharStr = vsSendDivChar;
				moExtCmnSender.sendDivCharSnd = voSendDivCharSnd;
				
				if(app.getAppProperty("useDivCode") != null){
					util.SelectCtl.setInsBind("cbbImpSendDiv", "CD =' "+ app.getAppProperty("useDivCode") +"'", 0);
				}
			};//setInitParamExtCmnSenderBySndId()
			
			
			/**
			 * 필수값 settting	(발송ID, 단위시스템 미입력)
			 * @member impExtCmnSmsEmailSend
			 * @type void
			 */
			function setInitParamExtCmnSender() {
				
				moExtCmnSender.grdId 				= app.getAppProperty("grdId");
				moExtCmnSender.phoneNo 				= app.getAppProperty("phoneNo");
				moExtCmnSender.repNm 				= app.getAppProperty("repNm");
				moExtCmnSender.email 				= app.getAppProperty("email");
				moExtCmnSender.sendDivChar			= [app.getAppProperty("sendDivChar")];
				moExtCmnSender.defPersonalNmEmail 	= app.getAppProperty("defPersonalNmEmail");
				moExtCmnSender.sendTitleSms 		= app.getAppProperty("sendTitleSms");			// SMS발송제목
				moExtCmnSender.sendMsgContSms		= app.getAppProperty("sendMsgContSms");			// SMS발송내용
				moExtCmnSender.sendTitleEmail 		= app.getAppProperty("sendTitleEmail");			// Email발송제목
				moExtCmnSender.sendMsgContEmail 	= app.getAppProperty("sendMsgContEmail");		// Email발송내용
				
				var vnRowIndex;
				if(ValueUtil.isNull(app.getAppProperty("defSenderEmail"))){
					vnRowIndex = util.DataSet.findRow("dsSendDivList", "CD = 'CMN01302'").getIndex();
					moExtCmnSender.defSenderEmail = util.DataSet.getValue("dsSendDivList", vnRowIndex, "CD_PRP1");
				}else{
					moExtCmnSender.defSenderEmail = app.getAppProperty("defSenderEmail");
				}
				
				if(ValueUtil.isNull(app.getAppProperty("defSenderSms"))){
					vnRowIndex = util.DataSet.findRow("dsSendDivList", "CD = 'CMN01301'").getIndex();
					moExtCmnSender.defSenderEmail = util.DataSet.getValue("dsSendDivList", vnRowIndex, "CD_PRP1");
				}else{
					moExtCmnSender.defSenderSms = app.getAppProperty("defSenderSms");
				}
				
				if(app.getAppProperty("useDivCode") != null){
					util.SelectCtl.setInsBind("cbbImpSendDiv", "CD = '" + app.getAppProperty("useDivCode") +"'", pnSelectedIdx);
				}
			};//setInitParamExtCmnSender()
			/*
			 * "발송문작성" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnImpSendDivClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnImpSendDiv = e.control;
				
				
				// 팝업의 콜백으로 값이 세팅되어서 change 이벤트 발생한 경우
				// 이미 팝업을 처리하였기 때문에 다시 띄우지 않는다.
				if(skipOnChange == true||openedByChange == true){
					return ;
				}
				
				if (!util.validate("cbbImpSendDiv")) {
					return false;
				}
				
					// 발송Id
					var vsSendId = app.getAppProperty("sndId");
					// 단위시스템구분코드
					var vsUnitSystemRcd = app.getAppProperty("unitSystemRcd");
					// 발송ID와 단위시스템구분코드가 입력 되었을 경우 발송정보 조회
					if(!ValueUtil.isNull(vsSendId) && !ValueUtil.isNull(vsUnitSystemRcd)){
						util.DataMap.setValue("dmReqKey", "strSndId", vsSendId);
						util.DataMap.setValue("dmReqKey", "strUnitSystemRcd", vsUnitSystemRcd);
						// 발송정보 조회
						doImpGetSendInfo(function(pbSuccess) {
							if(pbSuccess){
								setInitParamExtCmnSenderBySndId();	
							}
						});	
					}else {
						setInitParamExtCmnSender();
					}
			//	}
				if(ValueUtil.isNull(moExtCmnSender.smsEmailDivCd)){
					moExtCmnSender.smsEmailDivCd = util.SelectCtl.getValue("cbbImpSendDiv");
				}
				
				if(moExtCmnSender.smsEmailDivCd == "CMN01302"){
					openedByChange = true;
					hostUtil.Dialog.open("app/cmn/extCmnPEmailSend", 1005, 640, function(/**@type cpr.events.CUIEvent */e){	
						openedByChange = false;
					}, moExtCmnSender);
					return;
				}else{
					openedByChange = true;
					hostUtil.Dialog.open("app/cmn/extCmnPSmsSend", 710, 510, function(/**@type cpr.events.CUIEvent */e){	
						openedByChange = false;
					}, moExtCmnSender);
					return;		
				}
			}//onBtnImpSendDivClick()
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbbImpSendDivSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cbbImpSendDiv = e.control;
				var vsSendDiv = util.SelectCtl.getValue("cbbImpSendDiv");
				moExtCmnSender.smsEmailDivCd = vsSendDiv;
			}//onCbbImpSendDivSelectionChange();
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("grdId", "");
			app.declareBindableAppProperty("sendDivChar", null);
			app.declareBindableAppProperty("sndId", null);
			app.declareBindableAppProperty("unitSystemRcd", null);
			app.declareBindableAppProperty("repNm", null);
			app.declareBindableAppProperty("phoneNo", null);
			app.declareBindableAppProperty("defSenderSms", null);
			app.declareBindableAppProperty("sendMsgContSms", null);
			app.declareBindableAppProperty("sendTitleSms", null);
			app.declareBindableAppProperty("email", null);
			app.declareBindableAppProperty("defSenderEmail", null);
			app.declareBindableAppProperty("defPersonalNmEmail", null);
			app.declareBindableAppProperty("sendMsgContEmail", null);
			app.declareBindableAppProperty("sendTitleEmail", null);
			var dataSet_1 = new cpr.data.DataSet("dsSendDivList");
			dataSet_1.parseData({
				"columns": [
					{"name": "CD"},
					{"name": "CD_NM"},
					{"name": "CD_PRP1"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsListSndNm");
			dataSet_2.parseData({
				"columns": [
					{"name": "CD_NM"},
					{"name": "COL"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmInstance");
			dataMap_1.parseData({
				"columns" : [{
					"name": "root",
					"dataType": "string"
				}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmSendInfo");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "SND_ID",
						"dataType": "string"
					},
					{
						"name": "SND_TEL_NO",
						"dataType": "string"
					},
					{
						"name": "NICKNAME",
						"dataType": "string"
					},
					{
						"name": "EMAIL",
						"dataType": "string"
					},
					{
						"name": "SMS_TITLE",
						"dataType": "string"
					},
					{
						"name": "EMAIL_TITLE",
						"dataType": "string"
					},
					{
						"name": "SMS_CONT",
						"dataType": "string"
					},
					{
						"name": "EMAIL_CONT",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmReqKey");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "strSndId",
						"dataType": "string"
					},
					{
						"name": "strUnitSystemRcd",
						"dataType": "string"
					},
					{
						"name": "strSendDiv",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subImpSendOnLoad");
			submission_1.action = "cmn/ExtCmnSmsEmailSend/impOnLoad.do";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subImpSendInfo");
			submission_2.action = "cmn/ExtCmnSmsEmailSend/getSendInfo.do";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.addRequestData(dataMap_3);
			submission_2.addResponseData(dataMap_2, false);
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
			container.setLayout(responsiveXYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpSmsEmailSend");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "1fr", "1fr"]);
			formLayout_1.setRows(["25px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output("lblImpSendDiv");
				output_1.value = "발송방법";
				output_1.style.setClasses(["opt-common"]);
				output_1.style.css({
					"text-align" : "right"
				});
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1,
					"verticalAlign": "fill"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cbbImpSendDiv");
				(function(comboBox_1){
					comboBox_1.setItemSet(app.lookup("dsSendDivList"), {
						"label": "CD_NM",
						"value": "CD"
					});
				})(comboBox_1);
				if(typeof onCbbImpSendDivSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onCbbImpSendDivSelectionChange);
				}
				container.addChild(comboBox_1, {
					"colIndex": 1,
					"rowIndex": 0,
					"verticalAlign": "fill",
					"height": 23
				});
				var button_1 = new cpr.controls.Button("btnImpSendDiv");
				button_1.value = "발송문작성";
				button_1.style.setClasses(["btn-normal"]);
				if(typeof onBtnImpSendDivClick == "function") {
					button_1.addEventListener("click", onBtnImpSendDivClick);
				}
				container.addChild(button_1, {
					"colIndex": 2,
					"rowIndex": 0,
					"verticalAlign": "fill"
				});
			})(group_1);
			container.addChild(group_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"hidden": false,
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"hidden": false,
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					}
				]
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for extCmnSmsEmailSend
	cpr.utils.Util.ensurePackage("udc.cmn").extCmnSmsEmailSend = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.extCmnSmsEmailSend", internalApp, id);
	};
	
	udc.cmn.extCmnSmsEmailSend.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "type", {
		get : function(){
			return "udc.cmn.extCmnSmsEmailSend";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "grdId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grdId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grdId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "sendDivChar", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("sendDivChar");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("sendDivChar", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "sndId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("sndId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("sndId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "unitSystemRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("unitSystemRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("unitSystemRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "repNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("repNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("repNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "phoneNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("phoneNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("phoneNo", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "defSenderSms", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("defSenderSms");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("defSenderSms", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "sendMsgContSms", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("sendMsgContSms");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("sendMsgContSms", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "sendTitleSms", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("sendTitleSms");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("sendTitleSms", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "email", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("email");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("email", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "defSenderEmail", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("defSenderEmail");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("defSenderEmail", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "defPersonalNmEmail", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("defPersonalNmEmail");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("defPersonalNmEmail", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "sendMsgContEmail", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("sendMsgContEmail");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("sendMsgContEmail", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.extCmnSmsEmailSend.prototype, "sendTitleEmail", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("sendTitleEmail");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("sendTitleEmail", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.extCmnSmsEmailSend
/// start - udc.com.appHeader
/*
 * UDC Qualified Name: udc.com.appHeader
 * App URI: udc/com/appHeader
 * Source Location: udc/com/appHeader.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/appHeader", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			exports.getApp = function() {
				
				return app;
			};
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				app.lookup("otp_title").redraw();
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				var voHostApp = app.getHostAppInstance();
				var util = new ComUtil(voHostApp);
				
				//modal 팝업 여부
				/**@type cpr.controls.Output*/
				var vcOptTitle = app.lookup("otp_title");
				var voMenuInfo = null;
				var vcIpbPgmTitle = app.lookup("ipbPgmTitle");
				
				if(vcOptTitle.value && vcOptTitle.value != ""){
					voMenuInfo = util.getMenuInfo();
					if(voMenuInfo){			
						vcIpbPgmTitle.value = voMenuInfo.get("PGM_ID");
					}
					vcIpbPgmTitle.redraw();
				}else {
					var voTopHostApp = app.getRootAppInstance();
					if(voTopHostApp){
						/**@type cpr.controls.MDIFolder*/
						var vcMdi = voTopHostApp.lookup("main_mdi");
						if(vcMdi){
							var vcItem = vcMdi.getSelectedTabItem();
							voMenuInfo = vcItem.userattr("menuInfo");
							if(voMenuInfo){
								var voData = JSON.parse(voMenuInfo);
								vcOptTitle.value = voData.MENU_PATH;
								vcIpbPgmTitle.value = voData.PGM_ID;
							}else{
								vcOptTitle.value = vcItem.text;
							}
							
							vcOptTitle.redraw();
							vcIpbPgmTitle.redraw();
						}
					}
				}
				
				if(voHostApp){
					//그리드 초기화
					var vsGridIds = ValueUtil.isNull(voHostApp.getAppProperty("gridIds")) 
										? app.getAppProperty("gridIds") : voHostApp.getAppProperty("gridIds");
					
					if(vsGridIds){
						var vaGridIds = vsGridIds.split(",");
						util.Grid.init(vaGridIds);
					}
					
					//조회조건 그룹 
					var vsHostGrpSchId = ValueUtil.isNull(voHostApp.getAppProperty("grpSchIds")) 
											? app.getAppProperty("grpSchIds") : voHostApp.getAppProperty("grpSchIds");
					//데이터 영역 그룹
					var vsHostGrpDataId = ValueUtil.isNull(voHostApp.getAppProperty("grpDataIds")) 
											? app.getAppProperty("grpDataIds") : voHostApp.getAppProperty("grpDataIds");
					
					if(vsHostGrpSchId && vsHostGrpDataId){
						
						util.Group.initSearchBox(vsHostGrpSchId, vsHostGrpDataId.trimAll().split(","));
					}
					
					doImpMenuAuthCtls(null, util);
				}
				
				
				
				
				
			//	if(voHostApp){
			//		
			//		
			//		
			//		
			//		
			//		if(vsHostGrpSchId){
			//			
			//			var vaHostGrpSchId = vsHostGrpSchId.split(",");
			//			
			//			vaHostGrpSchId.some(function(vsGrpId){
			//				
			//				var vcHostGrpSch = voHostApp.lookup(vsGrpId);
			//				var vaHostGrpSchChild = vcHostGrpSch.getChildren();
			//				
			//				vaHostGrpSchChild.some(function(vcGrpSchChild){
			//					
			//					var vsChildId = vcGrpSchChild.id;
			//					if(vsChildId){
			//						if(vsChildId.indexOf("btnSearch") != -1){
			//							vcGrpSchChild.addEventListener("click", function(e){
			//								
			//								//리피트 변경 여부 체크 필요 todo...
			//								if(vsHostGrpDataId){
			//									var vaHostGrpDataId = vsHostGrpDataId.split(",");
			//									
			//									vaHostGrpDataId.some(function(vsGrpId){
			//										var vcHostGrpData = voHostApp.lookup(vsGrpId);
			//										//vcHostDataGrpSch.enabled = false;
			//										var vaHostGrpData = vcHostGrpData.getChildren();
			//										
			//										vaHostGrpData.some(function(vcChild){
			//											vcChild.enabled = true;
			//											vcChild.redraw();
			//										});
			//										
			//									});
			//									
			//								}
			//							});
			//						}
			//					}
			//					
			//				});
			//				
			//				var vcDataMap = vcHostGrpSch.getBindContext().dataMap;
			//				vcDataMap.addEventListener("update", function(/* cpr.events.CDataEvent */e){
			//					
			//					if(vsHostGrpDataId){
			//						var vaHostGrpDataId = vsHostGrpDataId.split(",");
			//						
			//						vaHostGrpDataId.some(function(vsGrpId){
			//							var vcHostGrpData = voHostApp.lookup(vsGrpId);
			//							//vcHostDataGrpSch.enabled = false;
			//							var vaHostGrpData = vcHostGrpData.getChildren();
			//							
			//							vaHostGrpData.some(function(vcChild){
			//								vcChild.enabled = false;
			//								vcChild.redraw();
			//							});
			//							
			//						});
			//						
			//					}
			//					var vcReqData = e.control;
			//					
			//					//vcReqData.setValue(e.columnName, e.beforeValue);
			//				});
			//				
			//			});
			//			
			//			
			//		}
			//		
			//		
			//	}
				
			}
			
			
			function doImpMenuAuthCtls(psMenuAuthDivRcd, poUtil){
				if(psMenuAuthDivRcd == null){
					psMenuAuthDivRcd = poUtil.getMenuInfo().get("MENU_AUTH_DIV_RCD");
				}else{
					//권한 매핑 컨트롤 초기화.
					var vaInitBtnCtl = poUtil.Group.getChildType("button");
					vaInitBtnCtl.forEach(function (vcCtl, index, array) {
						
						if(vcCtl._authDisable){
							vcCtl._authDisable = false;
							vcCtl.enabled = true;
						}
					});	
						
				}
														
				if(psMenuAuthDivRcd != "CC00701"){
				
					var vaBtnCtl = poUtil.Group.getChildType("button");
					vaBtnCtl.forEach(function (vcCtl, index, array) {			
							
							var vsBtnId = vcCtl.id;
							//조회권한
							if(psMenuAuthDivRcd == "CC00702"){
								if( vsBtnId.startsWith("btnInsert") || vsBtnId.startsWith("btnNew") || vsBtnId.startsWith("btnCopy") || vsBtnId.startsWith("btnDel") || vsBtnId.startsWith("btnSave") ){
									vcCtl.enabled = false;
									vcCtl._authDisable = true;
								}
								
							//수정권한
							}else if(psMenuAuthDivRcd == "CC00704"){
								
								if( vsBtnId.startsWith("btnInsert") || vsBtnId.startsWith("btnNew") || vsBtnId.startsWith("btnCopy") || vsBtnId.startsWith("btnDel") ){
									
									vcCtl.enabled = false;
									vcCtl._authDisable = true;
								}
								
							//입력+수정권한
							}else if(psMenuAuthDivRcd == "CC00703"){
								if( vsBtnId.startsWith("btnDel") ){
									vcCtl.enabled = false;
									vcCtl._authDisable = true;
									
								}
								
							}
						});
					}	
				
			}
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				
			}
			
			
			
			/*
			 * 이미지에서 contextmenu 이벤트 발생 시 호출.
			 * 마우스의 오른쪽 버튼이 클릭되거나 컨텍스트 메뉴 키가 눌려지면 호출되는 이벤트.
			 */
			function onImageContextmenu(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Image
				 */
				var image = e.control;
				var voHostApp = app.getHostAppInstance();
				var util = new ComUtil(voHostApp);
				
				if(util.Dialog.isPopup() == true){
					// 팝업 시 같은 host 에서 모든 팝업 호출이 필요
					//TODO 팝업으로 열린 화면일 경우에는 메뉴가 뜨지 않음. 따라서, 개발요청일 경우는 컨텍스트 메뉴 없도록 해야함
					return;
				}
				
				e.preventDefault();
					
				var vcMenu = new cpr.controls.Menu("menu");
			//	vcMenu.style.css({
			//		width: "200px",
			//		height: "100px"
			//	})
				
				//단위 테스트 아이템	
				var vcItemUTest = new cpr.controls.TreeItem("", "1", "root");
				vcItemUTest.bind("label").toLanguage("UI-SCR-UTEST");
				
				//프로그램 변경 요청 아이템
				var vcItemDevReq = new cpr.controls.TreeItem("", "2", "root");
				vcItemDevReq.bind("label").toLanguage("UI-SCR-DEVREQ");
				
				//운영일경우 단위테스트 제외.
			//	if(window.location.host.indexOf("") == -1){
			//		vcMenu.addItem(vcItemUTest);
			//	}
				vcMenu.addItem(vcItemUTest);
				vcMenu.addItem(vcItemDevReq);
			
				vcMenu.addEventListener("selection-change", function(/**@type cpr.events.CSelectionEvent */ e){
					var vaNewSelection = e.newSelection;
					switch(vaNewSelection[0].value){
						case "1":
							util.Dialog.openModaless("app/cmn/cmnPUnitTest", 1090, 675);
						break;
						case "2":
							util.Dialog.openModaless("app/cmn/cmnPRepairBoard", 830, 670);
						break;
					}
					vcMenu.hide();
					vcMenu.dispose();
				});
				
				vcMenu.addEventListenerOnce("blur", function(/**@type cpr.events.CFocusEvent*/ e){
					vcMenu.hide();
					vcMenu.dispose();
				});
				
			//	vcMenu.rootValue = "root";
				
				/**@type cpr.controls.Container */
				var vcRootContainer = app.getRootAppInstance().getContainer();
				vcRootContainer.addChild(vcMenu, {
					positions: [			
						{
							"media": "all and (min-width: 1024px)",
							width: "200px",
							height: "100px",
							position: "absolute",
							left: e.clientX + "px",
							top: e.clientY + "px"
						},
						{
							"media": "all and (min-width: 500px) and (max-width: 1024px)",
							width: "200px",
							height: "100px",
							position: "absolute",
							left: e.clientX + "px",
							top: e.clientY + "px"
						},
						{
							"media": "all and (max-width: 500px)",
							width: "200px",
							height: "100px",
							position: "absolute",
							left: e.clientX + "px",
							top: e.clientY + "px"
						}
					]
				});
					
				vcMenu.focus();
				
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("grpSchIds", "grpSearch");
			app.declareBindableAppProperty("grpDataIds", null);
			app.declareBindableAppProperty("gridIds", null);
			app.declareBindableAppProperty("title", null);
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["grp-title"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpUdcAppHeader");
			// Layout
			var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
			group_1.setLayout(responsiveXYLayout_1);
			(function(container){
				var image_1 = new cpr.controls.Image();
				image_1.src = "theme/images/button/icon_home.png";
				image_1.style.css({
					"font-size" : "0px"
				});
				(function(image_1){
				})(image_1);
				if(typeof onImageContextmenu == "function") {
					image_1.addEventListener("contextmenu", onImageContextmenu);
				}
				container.addChild(image_1, {
					positions: [
						{
							"media": "all",
							"top": "5px",
							"left": "0px",
							"width": "16px",
							"height": "16px"
						}
					]
				});
				var output_1 = new cpr.controls.Output("otp_title");
				output_1.value = "";
				output_1.style.css({
					"font-weight" : "bold",
					"vertical-align" : "middle"
				});
				output_1.bind("value").toAppProperty("title");
				container.addChild(output_1, {
					positions: [
						{
							"media": "all",
							"top": "0px",
							"right": "79px",
							"left": "21px",
							"height": "24px"
						}
					]
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbPgmTitle");
				inputBox_1.readOnly = true;
				inputBox_1.style.css({
					"border-right-style" : "none",
					"background-color" : "transparent",
					"color" : "#ffffff",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"border-top-style" : "none"
				});
				container.addChild(inputBox_1, {
					positions: [
						{
							"media": "all",
							"top": "0px",
							"right": "5px",
							"width": "67px",
							"height": "24px"
						}
					]
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	
	// Type declaration for appHeader
	cpr.utils.Util.ensurePackage("udc.com").appHeader = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.appHeader", internalApp, id);
	};
	
	udc.com.appHeader.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.appHeader.prototype, "type", {
		get : function(){
			return "udc.com.appHeader";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.appHeader.prototype, "grpSchIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grpSchIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grpSchIds", newValue, true);
		}
	});
	Object.defineProperty(udc.com.appHeader.prototype, "grpDataIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grpDataIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grpDataIds", newValue, true);
		}
	});
	Object.defineProperty(udc.com.appHeader.prototype, "gridIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("gridIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("gridIds", newValue, true);
		}
	});
	Object.defineProperty(udc.com.appHeader.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.appHeader
/// start - udc.com.comFormTitle
/*
 * UDC Qualified Name: udc.com.comFormTitle
 * App URI: udc/com/comFormTitle
 * Source Location: udc/com/comFormTitle.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/comFormTitle", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			app.declareBindableAppProperty("title", "제목없음");
			
			app.supportMedia("all and (min-width: 1320px)", "smuis");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["grp-title"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["20px"]);
			formLayout_1.setRowAutoSizing(0, true);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("optTilte");
			output_1.style.setClasses(["data-title"]);
			output_1.bind("value").toAppProperty("title");
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
		}
	});
	
	// Type declaration for comFormTitle
	cpr.utils.Util.ensurePackage("udc.com").comFormTitle = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.comFormTitle", internalApp, id);
	};
	
	udc.com.comFormTitle.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.comFormTitle.prototype, "type", {
		get : function(){
			return "udc.com.comFormTitle";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.comFormTitle.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.comFormTitle
/// start - udc.com.comTitle
/*
 * UDC Qualified Name: udc.com.comTitle
 * App URI: udc/com/comTitle
 * Source Location: udc/com/comTitle.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/comTitle", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			//공통 유틸(Util) 클래스
			var util = createCommonUtil();
			
			function onBodyLoad(/* cpr.events.CEvent */ e){
				/**@type cpr.controls.Grid */
				var vcCtrl = app.getAppProperty("ctrl");
				if(vcCtrl && vcCtrl.type == "grid"){
					if(vcCtrl.dataSet){
						app.setAppProperty("rowCount", vcCtrl.dataSet.getRowCount());
					}else{
						app.setAppProperty("rowCount", "0");
					}
				}
				
				//다운로드 권한이 없으면... 엑셀버튼 숨김
				if(util.Auth.getMenuInfo(app, "DOWNLOAD_YN") !== "Y"){
					app.setAppProperty("showExportExcel", false);
				}
				
				//모바일 화면이면... 엑셀버튼 숨김
			//	var mainApp = util.getMainApp(app);
			//	if(mainApp){
			//		if(mainApp.getContainer().userAttr("adaptive-screen") === "true"){
			//			app.setAppProperty("showExportExcel", false);
			//			
			//			var layout = app.lookup("grp1").getLayout();
			//			layout.setColumnVisible(1, false);
			//			layout.setColumnVisible(2, false);
			//			layout.setColumnVisible(3, false);
			//			layout.setColumnVisible(4, false);
			//		}
			//	}
			}
			
			/*
			 * "엑셀출력" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnExcelExportClick(/* cpr.events.CMouseEvent */ e){
				var vcCtrl = app.getAppProperty("ctrl");
				var exportTitle = !ValueUtil.isNull(app.getAppProperty("exportExcelTitle")) ? app.getAppProperty("exportExcelTitle") : app.lookup("optTilte").value;
				
				
				var _app = vcCtrl.getAppInstance();
				util.Grid.exportData(_app, vcCtrl.id, exportTitle, null, "xlsx", null, !app.getAppProperty("exportHiddenColumns"), app.getAppProperty("exportExcludePart"));
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if(e.property == "rowCount"){
					app.lookup("optRowCount").redraw();
				}else if(e.property == "showExportExcel"){
					if(app.getAppProperty("showExportExcel") === false){
						app.lookup("grp1").getLayout().setColumnVisible(6, false);
					}
				}else if(e.property == "title"){
					app.lookup("optTilte").value = e.newValue;
				}
			}
			
			
			/*
			 * 버튼(btnTools)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnToolsClick(/* cpr.events.CMouseEvent */ e){
				/**@type cpr.controls.Grid */
				var grid = app.getAppProperty("ctrl");
				if(grid == null){
					alert("Can not find Target Grid Control!");
					return false;
				}
				
				var ctxMenu = new cpr.controls.Menu("ctx_menu");
				ctxMenu.addItem(new cpr.controls.TreeItem("찾기", "1", "root"));
				ctxMenu.addItem(new cpr.controls.TreeItem("정렬취소", "2", "root"));
				ctxMenu.addItem(new cpr.controls.TreeItem("필터", "3", "root"));
				ctxMenu.addItem(new cpr.controls.TreeItem("필터취소", "4", "root"));
			//	ctxMenu.addItem(new cpr.controls.TreeItem("컬럼숨김", "5", "root"));
			//	ctxMenu.addItem(new cpr.controls.TreeItem("인쇄", "6", "root"));
				
				ctxMenu.addEventListener("item-click", function(/**@type cpr.events.CItemEvent */ e){
					var itemValue = e.item.value;
					//찾기
					if(itemValue == "1"){
						//팝업 호출 파라메터
						var initValue = {"grid": grid, "headerRowIndex":app.getAppProperty("headerRowIndex")};
						util.Dialog.open(app, "app/cmn/stdCmnPFind", 500, 150, function(e){
						
						}, initValue);
					//정렬취소
					}else if(itemValue == "2"){
						if(grid) grid.header.clearSort();
					//필터 보여주기
					}else if(itemValue == "3"){
						var isHFiltered = false;
						var column, filterStr;
						for(var i=0, len=grid.header.cellCount; i<len; i++){
							column = grid.header.getColumn(i);
							filterStr = column.getFilter();
							if(filterStr != null && filterStr[0] != "__all__"){
								isHFiltered = true;
								break;
							}
						}
						if(!isHFiltered){
							var hTRowIndex = app.getAppProperty("headerRowIndex");
							for(var i=0, len=grid.header.cellCount; i<len; i++){
								column = grid.header.getColumn(i);
								if(hTRowIndex > -1){
									if((column.rowIndex + column.rowSpan) == (hTRowIndex+1) && column.targetColumnName != ""){
										column.filterable = true;
									}
								}else{
									if(column.targetColumnName != ""){
										column.filterable = true;
									}
								}
							}
						}
					//필터 해제 및 필터 숨김
					}else if(itemValue == "4"){
						if(grid){
							grid.header.clearFilter();
							var column;
							for(var i=0, len=grid.header.cellCount; i<len; i++){
								column = grid.header.getColumn(i);
								column.filterable = false;
							}
						}
					//컬럼 숨김/보이기
					}else if(itemValue == "5"){
						//팝업 호출 파라메터
						var initValue = {"grid": grid, "headerRowIndex":app.getAppProperty("headerRowIndex")};
						util.Dialog.open(app, "app/cmn/stdCmnPColumns", 400, 330, function(e){
						
						}, initValue);
					
					//인쇄
					}else if(itemValue == "6"){
						/**@type cpr.controls.Grid */
						var targetEle = document.getElementById("uuid-"+grid.uuid);
						// 3.DOM의 text를 얻습니다.
						var content = targetEle.innerHTML;
						// 오픈되는 윈도우에 프린트하려는 데이터를 공유합니다.
					    sessionStorage.setItem("print-content", content);
					    var windowWidth = (window.innerWidth | document.body.clientWidth)-500;
						var windowHeight = (window.innerHeight | document.body.clientHeight)-300;
						var width = windowWidth > 600 ? windowWidth : 600;
						var height = windowHeight > 400 ? windowHeight : 400;
						
						//print하는 페이지를 엽니다.
						var popWindow = window.open('/jsp/print.html',"print",'left=100,top=100, resizable=yes, height='+height+',width='+width);
					}
					ctxMenu.dispose();
				});
				ctxMenu.addEventListenerOnce("blur", function(/**@type cpr.events.CFocusEvent*/ e){
					e.control.dispose();
				});
					
				/**@type cpr.controls.Container */
				var rootContainer = null;
				var showConstraint = {
					"position" : "absolute",
					"width" : "130px",
					"height" : "60px"
				};
				if(util.Dialog.isPopup(grid.getAppInstance())){
					rootContainer = grid.getAppInstance().getContainer();
					
					if((e.clientY - rootContainer.getActualRect().top + 130) > rootContainer.getActualRect().height )
						showConstraint.top = (e.clientY - rootContainer.getActualRect().top - 130) +"px";
					else
						showConstraint.top = (e.clientY - rootContainer.getActualRect().top) +"px";
					
					showConstraint.left = (e.clientX - (rootContainer.getActualRect().left + 130)) + "px";
				}else{
					rootContainer = grid.getAppInstance().getRootAppInstance().getContainer();
					
					showConstraint.top = e.clientY + "px";
					if(e.clientX < 130){
						showConstraint.left = "0px";
					}else{
						showConstraint.left = (e.clientX - 130) + "px";
					}
				}
				if(rootContainer.getLayout() instanceof cpr.controls.layouts.FormLayout){
					rootContainer.floatControl(ctxMenu, showConstraint);
				}else{
					rootContainer.addChild(ctxMenu, showConstraint);
				}
				ctxMenu.focus();
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("ctrl", null);
			app.declareBindableAppProperty("rowCount", "0");
			app.declareBindableAppProperty("title", "제목없음");
			app.declareBindableAppProperty("showExportExcel", true);
			app.declareBindableAppProperty("exportExcelTitle", null);
			app.declareBindableAppProperty("exportHiddenColumns", false);
			app.declareBindableAppProperty("exportExcludePart", null);
			
			app.supportMedia("all and (min-width: 1320px)", "smuis");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["grp-title"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "5px", "40px", "5px", "20px", "20px"]);
			formLayout_1.setColumnAutoSizing(2, true);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output("optCountText2");
				output_1.value = "]";
				output_1.style.css({
					"color" : "#37474f"
				});
				container.addChild(output_1, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output("optTilte");
				output_2.style.setClasses(["data-title"]);
				output_2.bind("value").toAppProperty("title");
				container.addChild(output_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_3 = new cpr.controls.Output("optCountText");
				output_3.value = "[";
				output_3.style.css({
					"color" : "#37474f"
				});
				container.addChild(output_3, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_4 = new cpr.controls.Output("optRowCount");
				output_4.dataType = "number";
				output_4.format = "s#,##0";
				output_4.style.css({
					"color" : "#37474f",
					"font-size" : "9pt",
					"text-align" : "center"
				});
				output_4.bind("value").toAppProperty("rowCount");
				container.addChild(output_4, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var button_1 = new cpr.controls.Button("btnExcelExport");
				button_1.tooltip = "엑셀 내려받기";
				button_1.value = "";
				button_1.style.css({
					"background-color" : "transparent",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"background-size" : "auto",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-position" : "center center",
					"background-image" : "url('theme/default/images/icon/icon_file_xls.gif')",
					"border-top-style" : "none"
				});
				button_1.bind("visible").toAppProperty("showExportExcel");
				if(typeof onBtnExcelExportClick == "function") {
					button_1.addEventListener("click", onBtnExcelExportClick);
				}
				container.addChild(button_1, {
					"colIndex": 5,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button("btnTools");
				button_2.tooltip = "필터/찾기 등";
				button_2.style.css({
					"background-color" : "transparent",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-position" : "center center",
					"background-image" : "url('theme/default/images/icon/ico-grid-action.png')",
					"border-top-style" : "none"
				});
				if(typeof onBtnToolsClick == "function") {
					button_2.addEventListener("click", onBtnToolsClick);
				}
				container.addChild(button_2, {
					"colIndex": 4,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for comTitle
	cpr.utils.Util.ensurePackage("udc.com").comTitle = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.comTitle", internalApp, id);
	};
	
	udc.com.comTitle.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.comTitle.prototype, "type", {
		get : function(){
			return "udc.com.comTitle";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.comTitle.prototype, "ctrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ctrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ctrl", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "rowCount", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("rowCount");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("rowCount", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "showExportExcel", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("showExportExcel");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("showExportExcel", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "exportExcelTitle", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("exportExcelTitle");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("exportExcelTitle", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "exportHiddenColumns", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("exportHiddenColumns");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("exportHiddenColumns", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "exportExcludePart", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("exportExcludePart");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("exportExcludePart", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.comTitle
/// start - udc.com.fileupload
/*
 * UDC Qualified Name: udc.com.fileupload
 * App URI: udc/com/fileupload
 * Source Location: udc/com/fileupload.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/fileupload", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			var util = new ComUtil(app);
			
			exports.getFiles = function() {
				var fileuploader = app.lookup("fudComFileUpLoad");
				return fileuploader.getFiles();
			};
			
			
			exports.getFileUploader = function() {
				return app.lookup("fudComFileUpLoad");
			};
			
			
			
			/*
			 * 파일 업로드에서 sendbutton-click 이벤트 발생 시 호출.
			 * 파일을 전송하는 button을 클릭 시 발생하는 이벤트.
			 */
			function onFud1SendbuttonClick(/* cpr.events.CEvent */ e){
				/** 
				 * @type cpr.controls.FileUpload
				 */
				var fud1 = e.control;
				var eventObj = new cpr.events.CEvent("filesend");
				app.dispatchEvent(eventObj);
			}
			
			/*
			 * 파일 업로드에서 maxsize-exceed 이벤트 발생 시 호출.
			 * 파일을 추가 시 파일의 크기가 최대 일 경우 발생하는 이벤트. 추가할 파일이 최대 크기보다 큰 경우 발생합니다. 추가된 파일들의 합계가 최대 크기보다 큰 경우 발생합니다.
			 */
			function onFudComFileUpLoadMaxsizeExceed(/* cpr.events.CFileUploadEvent */ e){
				/** 
				 * @type cpr.controls.FileUpload
				 */
				var fudComFileUpLoad = e.control;
				util.Msg.warn("M057", [fudComFileUpLoad.limitFileSize]);
				
			}
			
			/*
			 * 파일 업로드에서 maxcount-exceed 이벤트 발생 시 호출.
			 * 파일을 추가 할 때 파일의 개수가 최대 일 경우 발생하는 이벤트.
			 */
			function onFudComFileUpLoadMaxcountExceed(/* cpr.events.CFileUploadEvent */ e){
				/** 
				 * @type cpr.controls.FileUpload
				 */
				var fudComFileUpLoad = e.control;
				util.Msg.warn("M058", [fudComFileUpLoad.maxFileCount]);
				fudComFileUpLoad.removeAllFiles();
				
			}
			
			/*
			 * 파일 업로드에서 extension-violate 이벤트 발생 시 호출.
			 * 파일 추가 시 파일의 확장자와 기존에 등록된 확장자의 유형이 다를 경우 발생하는 이벤트.
			 */
			function onFudComFileUpLoadExtensionViolate(/* cpr.events.CFileUploadEvent */ e){
				/** 
				 * @type cpr.controls.FileUpload
				 */
				var fudComFileUpLoad = e.control;
				util.Msg.warn("M059", [fudComFileUpLoad.extensions]);
				
			}
			
			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCancleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCancle = e.control;
			
				var eventObj = new cpr.events.CEvent("filecancle");
				app.dispatchEvent(eventObj);
				
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpComFileUpLoad");
			group_1.style.css({
				"border-right-style" : "solid",
				"border-bottom-color" : "#c5c5c5",
				"border-top-width" : "1px",
				"border-right-width" : "1px",
				"border-left-color" : "#c5c5c5",
				"border-right-color" : "#c5c5c5",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"background-color" : "#ffffff",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-top-color" : "#c5c5c5",
				"border-bottom-style" : "solid"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var fileUpload_1 = new cpr.controls.FileUpload("fudComFileUpLoad");
				fileUpload_1.maxFileCount = 1;
				if(typeof onFud1SendbuttonClick == "function") {
					fileUpload_1.addEventListener("sendbutton-click", onFud1SendbuttonClick);
				}
				if(typeof onFudComFileUpLoadMaxsizeExceed == "function") {
					fileUpload_1.addEventListener("maxsize-exceed", onFudComFileUpLoadMaxsizeExceed);
				}
				if(typeof onFudComFileUpLoadMaxcountExceed == "function") {
					fileUpload_1.addEventListener("maxcount-exceed", onFudComFileUpLoadMaxcountExceed);
				}
				if(typeof onFudComFileUpLoadExtensionViolate == "function") {
					fileUpload_1.addEventListener("extension-violate", onFudComFileUpLoadExtensionViolate);
				}
				container.addChild(fileUpload_1, {
					"top": "30px",
					"right": "5px",
					"bottom": "5px",
					"left": "5px"
				});
				var button_1 = new cpr.controls.Button("btnCancle");
				button_1.value = "취소";
				button_1.style.setClasses(["btn-normal"]);
				button_1.bind("value").toLanguage("UI-GLS-CANCEL");
				if(typeof onBtnCancleClick == "function") {
					button_1.addEventListener("click", onBtnCancleClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"right": "5px",
					"width": "60px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "433px",
				"height": "208px",
				"left": "calc(50% - 216px)",
				"top": "calc(50% - 104px)"
			});
		}
	});
	
	// Type declaration for fileupload
	cpr.utils.Util.ensurePackage("udc.com").fileupload = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.fileupload", internalApp, id);
	};
	
	udc.com.fileupload.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.fileupload.prototype, "type", {
		get : function(){
			return "udc.com.fileupload";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.fileupload
/// start - udc.com.grid_IDS_Btn
/*
 * UDC Qualified Name: udc.com.grid_IDS_Btn
 * App URI: udc/com/grid_IDS_Btn
 * Source Location: udc/com/grid_IDS_Btn.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/grid_IDS_Btn", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			var util;
			
			exports.getApp = function() {
				
				return app;
			};
			
			/*
			 * "+" 버튼에서 click 이벤트 발생 시 호출. 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInsertClick(/* cpr.events.CMouseEvent */e) {
				/**
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var vsGridId = app.getAppProperty("gridId");
				var vsDefaultEvent = app.getAppProperty("defaultEvent");
				if (vsGridId != null && vsDefaultEvent.indexOf("insert") != -1) {
					util.Grid.insertRow(vsGridId, app.getAppProperty("insFocusColumn"));
				}
				var event = new cpr.events.CUIEvent("insert");
				var vbStatus = app.dispatchEvent(event);
				
				if(vbStatus){
					var idrCommonEvent = new cpr.events.CUIEvent("idrCommonEvent");
					idrCommonEvent.status = "insert";
					app.dispatchEvent(idrCommonEvent);	
				}
			}
			
			/*
			 * "-" 버튼에서 click 이벤트 발생 시 호출. 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDelClick(/* cpr.events.CMouseEvent */e) {
				/**
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var vsGridId = app.getAppProperty("gridId");
				
				var vsDefaultEvent = app.getAppProperty("defaultEvent");
				if (vsGridId != null && vsDefaultEvent.indexOf("delete") != -1) {
					util.Grid.deleteRow(vsGridId);
				}
				
				var event = new cpr.events.CUIEvent("delete");
				var vbStatus = app.dispatchEvent(event);
				
				if(vbStatus){
					var idrCommonEvent = new cpr.events.CUIEvent("idrCommonEvent");
					idrCommonEvent.status = "delete";
					app.dispatchEvent(idrCommonEvent);	
				}
				
			}
			
			/*
			 * "V" 버튼에서 click 이벤트 발생 시 호출. 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveClick(/* cpr.events.CMouseEvent */e) {
				/**
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var event = new cpr.events.CUIEvent("save");
				app.dispatchEvent(event);
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출. 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */e) {
			//	if (e.property == "udcEnabled") {
			//		
			//		app.lookup("grpIdsBtn").enabled = app.getAppProperty("udcEnabled");
			//	}
				
				if (e.property.indexOf("Enabled") != -1 || e.property.indexOf("enabled") != -1 ) {
					app.lookup("btnInsert").redraw();
					app.lookup("btnDel").redraw();
					app.lookup("btnSave").redraw();
					app.lookup("btnRestore").redraw();
					app.lookup("grpIdsBtn").redraw();
					
				}
			}
			
			
			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRestoreClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnRestore = e.control;
				
				var vsGridId = app.getAppProperty("gridId");
				var vsDefaultEvent = app.getAppProperty("defaultEvent");
				if (vsGridId != null && vsDefaultEvent.indexOf("restore") != -1) {
					util.Grid.revertRowData(vsGridId);
				}
				 
				 var event = new cpr.events.CUIEvent("restore");
				 var vbStatus = app.dispatchEvent(event);
				 
				 if(vbStatus){
					var idrCommonEvent = new cpr.events.CUIEvent("idrCommonEvent");
					idrCommonEvent.status = "restore";
					app.dispatchEvent(idrCommonEvent);	
				}
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				util = new ComUtil(app.getHostAppInstance());
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("gridId", null);
			app.declareAppProperty("insFocusColumn", null);
			app.declareAppProperty("defaultEvent", "");
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["grp-btns"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpIdsBtn");
			group_1.style.setClasses(["grp-btns"]);
			group_1.bind("enabled").toAppProperty("enabled");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "1fr", "1fr", "1fr"]);
			formLayout_1.setRows(["25px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button("btnInsert");
				button_1.value = "신규";
				button_1.style.setClasses(["btn-insert"]);
				button_1.bind("enabled").toAppProperty("insEnabled");
				button_1.bind("value").toLanguage("UI-SCR-NEW");
				if(typeof onBtnInsertClick == "function") {
					button_1.addEventListener("click", onBtnInsertClick);
				}
				container.addChild(button_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button("btnDel");
				button_2.value = "삭제";
				button_2.style.setClasses(["btn-del"]);
				button_2.bind("enabled").toAppProperty("delEnabled");
				button_2.bind("value").toLanguage("UI-SCR-DELETE");
				if(typeof onBtnDelClick == "function") {
					button_2.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_3 = new cpr.controls.Button("btnRestore");
				button_3.value = "취소";
				button_3.style.setClasses(["btn-restore"]);
				button_3.bind("enabled").toAppProperty("restoreEnabled");
				button_3.bind("value").toLanguage("UI-SCR-WRKCANCL");
				if(typeof onBtnRestoreClick == "function") {
					button_3.addEventListener("click", onBtnRestoreClick);
				}
				container.addChild(button_3, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "저장";
				button_4.style.setClasses(["btn-save"]);
				button_4.bind("enabled").toAppProperty("saveEnabled");
				button_4.bind("value").toLanguage("UI-SCR-WRKSAVE");
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"colIndex": 3,
					"rowIndex": 0,
					"width": 100
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"left": "0px",
				"width": "295px",
				"height": "25px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for grid_IDS_Btn
	cpr.utils.Util.ensurePackage("udc.com").grid_IDS_Btn = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.grid_IDS_Btn", internalApp, id);
	};
	
	udc.com.grid_IDS_Btn.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.grid_IDS_Btn.prototype, "type", {
		get : function(){
			return "udc.com.grid_IDS_Btn";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.grid_IDS_Btn.prototype, "gridId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("gridId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("gridId", newValue, true);
		}
	});
	Object.defineProperty(udc.com.grid_IDS_Btn.prototype, "insFocusColumn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("insFocusColumn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("insFocusColumn", newValue, true);
		}
	});
	Object.defineProperty(udc.com.grid_IDS_Btn.prototype, "defaultEvent", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("defaultEvent");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("defaultEvent", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.grid_IDS_Btn
/// start - udc.com.grid_title
/*
 * UDC Qualified Name: udc.com.grid_title
 * App URI: udc/com/grid_title
 * Source Location: udc/com/grid_title.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/grid_title", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			exports.getApp = function() {
				
				return app;
			};
			
			function onBodyLoad(/* cpr.events.CEvent */ e){
			//	app.getHost().style.css(
			//		{
			//			  "background-color" : "transparent"
			//			, "background-image" : "none"
			//		}
			//	);
				app.getHost().style.addClass("grp-title");
				var gridId = app.getAppProperty("gridId");
				var gridTitle = app.getAppProperty("gridTitle");
				var hostApp = app.getHostAppInstance();
				
				if(gridId){
					var vcHostTitle = hostApp.lookup(app.getHost().id);
					var vcGrd = hostApp.lookup(gridId);
					var vcDataSet = vcGrd.dataSet;
					vcHostTitle.bind("rowcount").toExpression("#" + vcDataSet.id + ".getRowCount()");
					if(gridTitle){
						app.lookup("optTilte").value = gridTitle;
					}else{
						app.lookup("optTilte").value = vcGrd.fieldLabel;	
					}
				}else{
					app.lookup("optSumText").visible = false;
					app.lookup("opt_rowcount").visible = false;
					app.lookup("optSumText2").visible = false;
					app.lookup("btnExcelExport").visible = false;
					var vsFormId = app.getAppProperty("formId");
					var vcForm = hostApp.lookup(vsFormId);
					app.lookup("optTilte").value = vcForm.fieldLabel;
				}
				
			}
			
			
			
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if(e.property == "rowcount"){
					app.lookup("opt_rowcount").redraw();
				}
			}
			
			
			
			
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnExcelExportClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnExcelExport = e.control;
				var gridId = app.getAppProperty("gridId");
			//	var comUtil = createComUtil(app.getHostAppInstance());
				var comUtil = new ComUtil(app.getHostAppInstance());
				comUtil.exportExcel(gridId,app.lookup("optTilte").value);
			}
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("gridId", null);
			app.declareBindableAppProperty("rowcount", "0");
			app.declareBindableAppProperty("formId", null);
			app.declareBindableAppProperty("gridTitle", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["grp-title"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			container.bind("enabled").toAppProperty("enabled");
			
			// Layout
			var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
			container.setLayout(responsiveXYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp_title");
			group_1.style.setClasses(["grp-title"]);
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "15px", "40px", "15px", "25px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output("optSumText");
				output_1.value = "[";
				output_1.style.setClasses(["small-black-title"]);
				output_1.style.css({
					"text-align" : "right"
				});
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output("optSumText2");
				output_2.value = "]";
				output_2.style.setClasses(["small-black-title"]);
				container.addChild(output_2, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var output_3 = new cpr.controls.Output("opt_rowcount");
				output_3.value = "";
				output_3.style.setClasses(["small-black-title"]);
				output_3.style.css({
					"text-align" : "center"
				});
				output_3.bind("value").toAppProperty("rowcount");
				container.addChild(output_3, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var output_4 = new cpr.controls.Output("optTilte");
				output_4.style.setClasses(["grid-title"]);
				output_4.bind("value").toAppProperty("gridTitle");
				container.addChild(output_4, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_1 = new cpr.controls.Button("btnExcelExport");
				button_1.value = "";
				button_1.style.css({
					"background-color" : "transparent",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"background-size" : "auto",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-position" : "center",
					"background-image" : "url('theme/images/icon/icon_file_xls.gif')",
					"border-top-style" : "none"
				});
				if(typeof onBtnExcelExportClick == "function") {
					button_1.addEventListener("click", onBtnExcelExportClick);
				}
				container.addChild(button_1, {
					"colIndex": 4,
					"rowIndex": 0,
					"verticalAlign": "fill",
					"height": 20
				});
			})(group_1);
			container.addChild(group_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "0px",
						"right": "0px",
						"left": "0px",
						"height": "25px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"top": "0px",
						"right": "0px",
						"left": "0px",
						"height": "25px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"top": "0px",
						"right": "0px",
						"left": "0px",
						"height": "25px"
					}
				]
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	
	// Type declaration for grid_title
	cpr.utils.Util.ensurePackage("udc.com").grid_title = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.grid_title", internalApp, id);
	};
	
	udc.com.grid_title.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.grid_title.prototype, "type", {
		get : function(){
			return "udc.com.grid_title";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.grid_title.prototype, "gridId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("gridId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("gridId", newValue, true);
		}
	});
	Object.defineProperty(udc.com.grid_title.prototype, "rowcount", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("rowcount");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("rowcount", newValue, true);
		}
	});
	Object.defineProperty(udc.com.grid_title.prototype, "formId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("formId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("formId", newValue, true);
		}
	});
	Object.defineProperty(udc.com.grid_title.prototype, "gridTitle", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("gridTitle");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("gridTitle", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.grid_title
/// start - udc.com.loadmask
/*
 * UDC Qualified Name: udc.com.loadmask
 * App URI: udc/com/loadmask
 * Source Location: udc/com/loadmask.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/loadmask", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output("opt1");
				output_1.value = "Loading...";
				output_1.style.css({
					"padding-top" : "7px",
					"background-repeat" : "no-repeat",
					"font-weight" : "bold",
					"padding-left" : "40px",
					"padding-bottom" : "0px",
					"background-image" : "url('theme/images/loader.gif')",
					"padding-right" : "0px"
				});
				container.addChild(output_1, {
					"width": "138px",
					"height": "32px",
					"left": "calc(50% - 69px)",
					"top": "calc(50% - 16px)"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
		}
	});
	
	// Type declaration for loadmask
	cpr.utils.Util.ensurePackage("udc.com").loadmask = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.loadmask", internalApp, id);
	};
	
	udc.com.loadmask.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.loadmask.prototype, "type", {
		get : function(){
			return "udc.com.loadmask";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.loadmask
/// start - udc.com.loadmaskprogress
/*
 * UDC Qualified Name: udc.com.loadmaskprogress
 * App URI: udc/com/loadmaskprogress
 * Source Location: udc/com/loadmaskprogress.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/loadmaskprogress", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			var intervalID = null;
			
			exports.start = function() {
				var progressbar = app.lookup("progressbar");
				
				if(intervalID) {
					window.clearInterval(intervalID);
					intervalID = null;
				}
				
				intervalID = window.setInterval(function() {
					var pValue = progressbar.numberValue;
					pValue += 4;
					if(pValue > progressbar.max) {
						progressbar.numberValue = 0;
					} else {
						progressbar.numberValue = pValue;
					}
				}, 100);
			}
			
			exports.end = function() {
				if(intervalID) {
					window.clearInterval(intervalID);
					var progressbar = app.lookup("progressbar");
					progressbar.numberValue = 0;
					intervalID = null;
				}
			}
			// End - User Script
			
			// Header
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-dialog"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var progress_1 = new cpr.controls.Progress("progressbar");
				progress_1.value = "0";
				progress_1.max = 100.0;
				container.addChild(progress_1, {
					"top": "50px",
					"right": "20px",
					"left": "20px",
					"height": "20px"
				});
				var output_1 = new cpr.controls.Output();
				output_1.value = "Loading...";
				output_1.style.css({
					"font-weight" : "bold",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"top": "98px",
					"right": "130px",
					"left": "130px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
		}
	});
	
	// Type declaration for loadmaskprogress
	cpr.utils.Util.ensurePackage("udc.com").loadmaskprogress = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.loadmaskprogress", internalApp, id);
	};
	
	udc.com.loadmaskprogress.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.loadmaskprogress.prototype, "type", {
		get : function(){
			return "udc.com.loadmaskprogress";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.loadmaskprogress
/// start - udc.com.pageindex
/*
 * UDC Qualified Name: udc.com.pageindex
 * App URI: udc/com/pageindex
 * Source Location: udc/com/pageindex.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/pageindex", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/**
			 * PageIndexing을 위한 기초 데이터 설정
			 * @param totCnt
			 * @param pageSize
			 * @param rowSize
			 * @param pageIdx
			 */
			exports.setPaging = function(totCnt, pageSize, rowSize, pageIdx) {
				app.lookup("optCurrentIdx").value = pageIdx;
				app.lookup("optTot").value = totCnt;
				
				var pageCnt = 0;
				if(totCnt > 0 && rowSize > 0) {
					pageCnt = Math.ceil(totCnt / rowSize);
				}
				app.lookup("optPageCnt").value = pageCnt;
				
				var pageIndex = app.lookup("pageIndex");
				pageIndex.currentPageIndex = pageIdx;
				pageIndex.totalRowCount = totCnt;
				pageIndex.pageRowCount = rowSize;
				pageIndex.viewPageCount = pageSize;
				
				var pageIndex = app.lookup("pageIndex");
				if(totCnt == 0) {
					pageIndex.visible = false;
				} else {
					pageIndex.visible = true;
				}
				
				app.getContainer().redraw();
			}
			
			/*
			 * 페이지 인덱서에서 before-selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경되기 전에 발생하는 이벤트. 다음 이벤트로 selection-change를 발생합니다.
			 */
			function onPageIndexBeforeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.PageIndexer
				 */
				var pageIndex = e.control;
				
				var selectionEvent = new cpr.events.CSelectionEvent("before-pagechange", {
					oldSelection: e.oldSelection,
					newSelection: e.newSelection
				});
				
				app.dispatchEvent(selectionEvent);
				
				// 기본처리가 중단되었을 때 변경을 취소함.
				if(selectionEvent.defaultPrevented == true) {
					e.preventDefault();
				}
			}
			
			/*
			 * 페이지 인덱서에서 selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경된 후에 발생하는 이벤트.
			 */
			function onPageIndexSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.PageIndexer
				 */
				var pageIndex = e.control;
				
				var selectionEvent = new cpr.events.CSelectionEvent("pagechange", {
					oldSelection: e.oldSelection,
					newSelection: e.newSelection
				});
				
				app.dispatchEvent(selectionEvent);
				
				app.lookup("optCurrentIdx").value = e.newSelection;
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["60px", "60px", "60px", "60px", "10px", "60px", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "총건수 :";
				output_1.style.css({
					"text-align" : "right"
				});
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output("optTot");
				output_2.dataType = "number";
				output_2.format = "999,999,999";
				container.addChild(output_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_3 = new cpr.controls.Output();
				output_3.value = "페이지 :";
				output_3.style.css({
					"text-align" : "right"
				});
				container.addChild(output_3, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var output_4 = new cpr.controls.Output("optCurrentIdx");
				output_4.style.css({
					"text-align" : "right"
				});
				container.addChild(output_4, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var output_5 = new cpr.controls.Output();
				output_5.value = "/";
				output_5.style.css({
					"text-align" : "center"
				});
				container.addChild(output_5, {
					"colIndex": 4,
					"rowIndex": 0
				});
				var output_6 = new cpr.controls.Output("optPageCnt");
				output_6.value = "0";
				container.addChild(output_6, {
					"colIndex": 5,
					"rowIndex": 0
				});
				var pageIndexer_1 = new cpr.controls.PageIndexer("pageIndex");
				pageIndexer_1.viewPageCount = 3;
				pageIndexer_1.visibleFirstButton = false;
				pageIndexer_1.visibleLastButton = false;
				pageIndexer_1.style.css({
					"text-align" : "right"
				});
				pageIndexer_1.init(1, 1, 1);
				if(typeof onPageIndexSelectionChange == "function") {
					pageIndexer_1.addEventListener("selection-change", onPageIndexSelectionChange);
				}
				if(typeof onPageIndexBeforeSelectionChange == "function") {
					pageIndexer_1.addEventListener("before-selection-change", onPageIndexBeforeSelectionChange);
				}
				container.addChild(pageIndexer_1, {
					"colIndex": 6,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 30
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	
	// Type declaration for pageindex
	cpr.utils.Util.ensurePackage("udc.com").pageindex = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.pageindex", internalApp, id);
	};
	
	udc.com.pageindex.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.pageindex.prototype, "type", {
		get : function(){
			return "udc.com.pageindex";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.pageindex
/// start - udc.csr.csrStSearch
/*
 * UDC Qualified Name: udc.csr.csrStSearch
 * App URI: udc/csr/csrStSearch
 * Source Location: udc/csr/csrStSearch.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/csr/csrStSearch", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var utilHost;
			var util = new ComUtil(app);
			
			var skipOnChange = false;
			var openedByChange = false;
			
			function clearCallback(){
				skipOnChange = true;
				app.lookup("ipbSchStudNo").value = ""
				app.lookup("ipbSchStudNm").value = ""	
				skipOnChange = false;
				
				app.setAppProperty("oStudId", "");
				app.setAppProperty("oStudNo", "");
				app.setAppProperty("oStudNm", "");
				app.setAppProperty("oStatNm", "");
				app.setAppProperty("oStatRcd", "");
				app.setAppProperty("oProcRslt", "");
				app.setAppProperty("oProcRsltYear", "");
				app.setAppProperty("oSaNm", "");
				app.setAppProperty("oSaCd", "");
				app.setAppProperty("oSpNm", "");
				app.setAppProperty("oSpCd", "");
				app.setAppProperty("oOgNm", "");
				app.setAppProperty("oOgCd", "");
				app.setAppProperty("oStudDivRcd", "");
				app.setAppProperty("oStudDivNm", "");
				app.setAppProperty("oBirthday", "");
				app.setAppProperty("oGenderRcd", "");
				app.setAppProperty("oGenderNm", "");
			}
			
			/**
			 * 버튼 클릭시 팝업 호출
			 */
			function doOnClickStdCsrPStSearch(psNewObjNm) {
				
			//	if(ExtGroup.isGrpChgImpPopSch(vsEventCtlId)) return false;
			//	
			//	if (moStdCsrPStSearch.openedByChange) {
			//	// 검색어를 입력하고 팝업버튼을 누른경우
			//	// 이미 change 이벤트에 의해 팝업이 떠있기 때문에 다시 띄우지 않는다.
			//	return;
			//	}
				
				var _app = app;
				
				var initValue = {
					strStudId 	: app.getAppProperty("iStudId"),
					strStudNo 	: app.getAppProperty("iStudNo"),
					strStudNm 	: app.getAppProperty("iStudNm"),
					strKeyDate 	: app.getAppProperty("iKeyDate"),
					strObjDivRcd : app.getAppProperty("iObjDivRcd"),
					strObjCd 		: app.getAppProperty("iObjCd"),
					strObjNm 	: app.getAppProperty("iObjNm"),
					strStatRcd 	: app.getAppProperty("iStatRcd"),
					strStudDivRcd : app.getAppProperty("iStudDivRcd")
				};
				
			//	clearCallback();
				
				utilHost.Dialog.open("app/csr/csrPStSearch", 800, 500, function(/* cpr.events.CUIEvent */e){
					var dialog = e.control;
			
					var returnValue = dialog.returnValue;
					if(returnValue != null){
						_app.setAppProperty("oStudId", returnValue.STUD_ID);
						_app.setAppProperty("oStudNo", returnValue.STUD_NO);
						_app.setAppProperty("oStudNm", returnValue.REP_NM);
						_app.setAppProperty("oStatNm", returnValue.STAT_NM);
						_app.setAppProperty("oStatRcd", returnValue.STAT_RCD);
						_app.setAppProperty("oProcRslt", returnValue.PROC_RSLT);
						_app.setAppProperty("oProcRsltYear", returnValue.PROC_RSLT_YEAR);
						_app.setAppProperty("oSaCd", returnValue.SA_CD);
						_app.setAppProperty("oSaNm", returnValue.SA_NM);
						_app.setAppProperty("oSpCd", returnValue.SP_CD);
						_app.setAppProperty("oSpNm", returnValue.SP_NM);
						_app.setAppProperty("oOgCd", returnValue.OG_CD);
						_app.setAppProperty("oOgNm", returnValue.OG_NM);
						_app.setAppProperty("oStudDivRcd", returnValue.STUD_DIV_RCD);
						_app.setAppProperty("oStudDivNm", returnValue.STUD_DIV_NM);
						_app.setAppProperty("oBirthday", returnValue.BIRTHDAY);
						_app.setAppProperty("oGenderRcd", returnValue.GENDER_RCD);
						_app.setAppProperty("oGenderNm", returnValue.GENDER_NM);
						
						skipOnChange = true; //valueChange 이벤트 방지.
						_app.lookup("ipbSchStudNo").value = returnValue.STUD_NO;
						_app.lookup("ipbSchStudNm").value = returnValue.REP_NM
						skipOnChange = false; 
						
						var event = new cpr.events.CUIEvent("searchCallBack");
						_app.dispatchEvent(event);
					}else{
						if(ValueUtil.isNull(util.Control.getValue("ipbSchStudNm")) == true){
							skipOnChange = true; //valueChange 이벤트 방지.
							_app.lookup("ipbSchStudNo").value = "";
							_app.lookup("ipbSchStudNm").value = "";
							skipOnChange = false; 
						}
					}
					openedByChange = false;
				
				}, initValue);
			}
			
			// EVENT ////////////////////////////////////////////////////////////////////////////////////////////
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnPopSearchClick(/* cpr.events.CMouseEvent */ e){
			
				doOnClickStdCsrPStSearch();
			}
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpbSchStudIdValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbSchStudId = e.control;
			
				if(skipOnChange == true||openedByChange == true){
					// 팝업의 콜백으로 값이 세팅되어서 change 이벤트 발생한 경우
					// 이미 팝업을 처리하였기 때문에 다시 띄우지 않는다.
					return false;
				}
				
				var vsSchStudId = ipbSchStudId.value;
				// 이벤트가 발생한 내용 입력해준다.
				// 입력내용 삭제시 팝업없이 관련내용 삭제 -> 삭제인데도, 아래의 체크처리가 이루워짐에 따라 불필요한 메시지 호출됨으로 막아준다.
				//	clearCallback();
				
				if(vsSchStudId == ""){
					clearCallback();
					return false;
				}
				
				if(checkStudValue() == false){
					clearCallback();
					return false;
				}
				
				var voMenuInfo = util.getMenuInfo();
				
				util.DataMap.setValue("dmReq", "authRngRcd", util.getMenuInfo().get("AUTH_RNG_RCD"));
				util.DataMap.setValue("dmReq", "strOprtRoleId", util.getMenuInfo().get("OPRT_ROLE_ID"));
				util.DataMap.setValue("dmReq", "strStudId", app.getAppProperty("iStudId"));
				util.DataMap.setValue("dmReq", "strStudNo", app.getAppProperty("iStudNo"));
				util.DataMap.setValue("dmReq", "strStudNm", app.getAppProperty("iStudNm"));
				util.DataMap.setValue("dmReq", "strKeyDate", app.getAppProperty("iKeyDate"));
				util.DataMap.setValue("dmReq", "strStatus", app.getAppProperty("iStudDivRcd"));
				util.DataMap.setValue("dmReq", "strObjDivRcd", app.getAppProperty("iObjDivRcd"));
				util.DataMap.setValue("dmReq", "strObjCd", app.getAppProperty("iObjCd"));
				util.DataMap.setValue("dmReq", "strStudDivRcd", app.getAppProperty("iStudDivRcd"));
				
				util.Submit.send("subPrecheckStdCsrPStSearch", function(pbSuccess){
					if(pbSuccess){
						var vnCount = util.DataMap.getValue("dmRes", "count");
						
						if(vnCount == 1){
							// 검색결과가 1건이면 팝업없이 바로 값세팅
							app.setAppProperty("oStudId", util.DataMap.getValue("dmResult", "STUD_ID"));
							app.setAppProperty("oStudNo", util.DataMap.getValue("dmResult", "STUD_NO"));
							app.setAppProperty("oStudNm", util.DataMap.getValue("dmResult", "REP_NM"));
							app.setAppProperty("oStatNm", util.DataMap.getValue("dmResult", "STAT_NM"));
							app.setAppProperty("oStatRcd", util.DataMap.getValue("dmResult", "STAT_RCD"));
							app.setAppProperty("oProcRslt", util.DataMap.getValue("dmResult", "PROC_RSLT"));
							app.setAppProperty("oProcRsltYear", util.DataMap.getValue("dmResult", "PROC_RSLT_YEAR"));
							app.setAppProperty("oSaNm", util.DataMap.getValue("dmResult", "SA_NM"));
							app.setAppProperty("oSaCd", util.DataMap.getValue("dmResult", "SA_CD"));
							app.setAppProperty("oSpNm", util.DataMap.getValue("dmResult", "SP_NM"));
							app.setAppProperty("oSpCd", util.DataMap.getValue("dmResult", "SP_CD"));
							app.setAppProperty("oOgNm", util.DataMap.getValue("dmResult", "OG_NM"));
							app.setAppProperty("oOgCd", util.DataMap.getValue("dmResult", "OG_CD"));
							app.setAppProperty("oStudDivRcd	", util.DataMap.getValue("dmResult", "STUD_DIV_RCD"));
							app.setAppProperty("oStudDivNm", util.DataMap.getValue("dmResult", "STUD_DIV_NM"));
							app.setAppProperty("oBirthday", util.DataMap.getValue("dmResult", "BIRTHDAY"));
							app.setAppProperty("oGenderRcd", util.DataMap.getValue("dmResult", "GENDER_RCD"));
							app.setAppProperty("oGenderNm", util.DataMap.getValue("dmResult", "GENDER_NM"));
			
							
							skipOnChange = true;
							app.lookup("ipbSchStudNo").value = app.getAppProperty("oStudNo");
							app.lookup("ipbSchStudNm").value = app.getAppProperty("oStudNm");
							skipOnChange = false;
							
							var event = new cpr.events.CUIEvent("searchCallBack");
							app.dispatchEvent(event);
							
						}else{
							// 검색결과가 여러건이면 팝업.
							app.lookup("btnPopSearch").click();
						}
					}
				});
			}
			
			/**
			 * 입력된 학번 또는 학생 id에 대한 글자 수 체크.  
			 * @return {Object} studNo, studNm.
			 */
			function checkStudValue(){
				// 사용자ID와 사용자명을 체크한다.
				var vsStudNo= app.lookup("ipbSchStudNo").value;
				var vsStudNm = "";
				
				// 입력된 학번이 한글인 경우는 학생 이름으로 검색되도록 하고 숫자인 경우 학번으로 검색되도록 하고 그외의 경우 학생ID로 검색되도록 처리한다.
				if(!ValueUtil.isNull(vsStudNo)){
					if(ValueUtil.isNumber(vsStudNo)){
						vsStudNm = "";
						if(vsStudNo.length < 2){
							util.Msg.warn("M101", [cpr.I18N.INSTANCE.message("NLS-SCR-STUDID"), ""+"2"]);
							return false;
						}
					}else{
						vsStudNo = "";
						vsStudNm = app.lookup("ipbSchStudNo").value;
						if(vsStudNm.length < 2){
							util.Msg.warn("M101", [cpr.I18N.INSTANCE.message("NLS-SCR-NAME"), ""+"2"]);
							return false;
						}
					}
				}else{
					vsStudNo = "";
					vsStudNm = app.lookup("ipbSchStudNo").value;
					if(vsStudNm.length < 2){
						util.Msg.warn("M101", [cpr.I18N.INSTANCE.message("NLS-SCR-NAME"), ""+"2"]);
						return false;
					}
				}
				
				return {studNo: vsStudNo, studNm: vsStudNm};
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				utilHost = new ComUtil(app.getHostAppInstance());
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				var vsProperty = e.property;
				
				if(vsProperty == "iStudNo" || vsProperty == "oStudNo"){
					app.lookup("ipbSchStudNo").redraw();
				}
				
				if(vsProperty == "iStudId" || vsProperty == "oStudId"){
					app.lookup("ipbSchStudNm").redraw();
				}
				
				if(vsProperty == "required"){
					var vsRequired = app.getAppProperty("required");
					if(vsRequired == "Y"){
						var vcIpbUdcUserId = app.lookup("ipbSchStudNo");
						vcIpbUdcUserId.userAttr({
							"required":"Y"
						});
						vcIpbUdcUserId.fieldLabel = app.getAppProperty("fieldLabel");
					}
				}
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbSchStudNoKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbSchStudNo = e.control;
				if(e.keyCode == cpr.events.KeyCode.ENTER){
					e.stopPropagation();
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("iIsParentGrpSearch", false);
			app.declareBindableAppProperty("iStudNo", null);
			app.declareBindableAppProperty("iStudId", null);
			app.declareBindableAppProperty("iStudNm", null);
			app.declareBindableAppProperty("iKeyDate", null);
			app.declareBindableAppProperty("iObjDivRcd", null);
			app.declareBindableAppProperty("iObjCd", null);
			app.declareBindableAppProperty("iObjNm", null);
			app.declareBindableAppProperty("iStatRcd", null);
			app.declareBindableAppProperty("iStudDivRcd", null);
			app.declareBindableAppProperty("oStudId", null);
			app.declareBindableAppProperty("oStudNo", null);
			app.declareBindableAppProperty("oStudNm", null);
			app.declareBindableAppProperty("oStatNm", null);
			app.declareBindableAppProperty("oStatRcd", null);
			app.declareBindableAppProperty("oProcRslt", null);
			app.declareBindableAppProperty("oProcRsltYear", null);
			app.declareBindableAppProperty("oSaCd", null);
			app.declareBindableAppProperty("oSaNm", null);
			app.declareBindableAppProperty("oSpCd", null);
			app.declareBindableAppProperty("oSpNm", null);
			app.declareBindableAppProperty("oOgCd", null);
			app.declareBindableAppProperty("oOgNm", null);
			app.declareBindableAppProperty("oStudDivRcd", null);
			app.declareBindableAppProperty("oStudDivNm", null);
			app.declareBindableAppProperty("oBirthday", null);
			app.declareBindableAppProperty("oGenderRcd", null);
			app.declareBindableAppProperty("oGenderNm", null);
			app.declareBindableAppProperty("value", null);
			var dataMap_1 = new cpr.data.DataMap("dmResult");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "STUD_ID",
						"dataType": "string"
					},
					{
						"name": "STUD_NO",
						"dataType": "string"
					},
					{
						"name": "REP_NM",
						"dataType": "string"
					},
					{
						"name": "STAT_RCD",
						"dataType": "string"
					},
					{
						"name": "STAT_NM",
						"dataType": "string"
					},
					{
						"name": "PROC_RSLT",
						"dataType": "string"
					},
					{
						"name": "PROC_RSLT_YEAR",
						"dataType": "string"
					},
					{
						"name": "SA_CD",
						"dataType": "string"
					},
					{
						"name": "SA_NM",
						"dataType": "string"
					},
					{
						"name": "SP_CD",
						"dataType": "string"
					},
					{
						"name": "SP_NM",
						"dataType": "string"
					},
					{
						"name": "OG_CD",
						"dataType": "string"
					},
					{
						"name": "OG_NM",
						"dataType": "string"
					},
					{
						"name": "BIRTHDAY",
						"dataType": "string"
					},
					{
						"name": "BIRTHDAY_DISP",
						"dataType": "string"
					},
					{
						"name": "GENDER_RCD",
						"dataType": "string"
					},
					{
						"name": "GENDER_NM",
						"dataType": "string"
					},
					{
						"name": "STUD_DIV_RCD",
						"dataType": "string"
					},
					{
						"name": "STUD_DIV_NM",
						"dataType": "string"
					},
					{
						"name": "BANK_RCD",
						"dataType": "string"
					},
					{
						"name": "BANK_NM",
						"dataType": "string"
					},
					{
						"name": "OWNER_NM",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmRes");
			dataMap_2.parseData({
				"columns" : [{
					"name": "count",
					"dataType": "string"
				}]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmReq");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "strStudId",
						"dataType": "string"
					},
					{
						"name": "strStudNo",
						"dataType": "string"
					},
					{
						"name": "strStudNm",
						"dataType": "string"
					},
					{
						"name": "strOprtRoleId",
						"dataType": "string"
					},
					{
						"name": "strKeyDate",
						"dataType": "string"
					},
					{
						"name": "authRngRcd",
						"dataType": "string"
					},
					{
						"name": "strSaCd",
						"dataType": "string"
					},
					{
						"name": "strSaNm",
						"dataType": "string"
					},
					{
						"name": "strStatus",
						"dataType": "string"
					},
					{
						"name": "strObjDivRcd",
						"dataType": "string"
					},
					{
						"name": "strObjCd",
						"dataType": "string"
					},
					{
						"name": "strAuthYN",
						"dataType": "string"
					},
					{
						"name": "strStudDivRcd",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subPrecheckStdCsrPStSearch");
			submission_1.action = "csr/CsrStSearch/preCheckCount.do";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.addRequestData(dataMap_3);
			submission_1.addResponseData(dataMap_1, false);
			submission_1.addResponseData(dataMap_2, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0";
			formLayout_1.setColumns(["7fr", "3fr", "20px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button("btnPopSearch");
				button_1.value = "";
				button_1.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnPopSearchClick == "function") {
					button_1.addEventListener("click", onBtnPopSearchClick);
				}
				container.addChild(button_1, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbSchStudNo");
				inputBox_1.bind("value").toAppProperty("iStudNo");
				if(typeof onIpbSchStudIdValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpbSchStudIdValueChange);
				}
				if(typeof onIpbSchStudNoKeydown == "function") {
					inputBox_1.addEventListener("keydown", onIpbSchStudNoKeydown);
				}
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var inputBox_2 = new cpr.controls.InputBox("ipbSchStudNm");
				inputBox_2.readOnly = true;
				inputBox_2.bind("value").toDataMap(app.lookup("dmReq"), "strStudNm");
				container.addChild(inputBox_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for csrStSearch
	cpr.utils.Util.ensurePackage("udc.csr").csrStSearch = function(id){
		cpr.controls.UDCBase.call(this, "udc.csr.csrStSearch", internalApp, id);
	};
	
	udc.csr.csrStSearch.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.csr.csrStSearch.prototype, "type", {
		get : function(){
			return "udc.csr.csrStSearch";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.csr.csrStSearch.prototype, "iIsParentGrpSearch", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iIsParentGrpSearch");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iIsParentGrpSearch", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "iStudNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStudNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStudNo", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "iStudId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStudId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStudId", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "iStudNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStudNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStudNm", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "iKeyDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iKeyDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iKeyDate", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "iObjDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iObjDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iObjDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "iObjCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iObjCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iObjCd", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "iObjNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iObjNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iObjNm", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "iStatRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStatRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStatRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "iStudDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iStudDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iStudDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oStudId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStudId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStudId", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oStudNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStudNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStudNo", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oStudNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStudNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStudNm", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oStatNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStatNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStatNm", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oStatRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStatRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStatRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oProcRslt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oProcRslt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oProcRslt", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oProcRsltYear", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oProcRsltYear");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oProcRsltYear", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oSaCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oSaCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oSaCd", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oSaNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oSaNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oSaNm", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oSpCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oSpCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oSpCd", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oSpNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oSpNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oSpNm", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oOgCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oOgCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oOgCd", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oOgNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oOgNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oOgNm", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oStudDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStudDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStudDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oStudDivNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStudDivNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStudDivNm", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oBirthday", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oBirthday");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oBirthday", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oGenderRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oGenderRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oGenderRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "oGenderNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oGenderNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oGenderNm", newValue, true);
		}
	});
	Object.defineProperty(udc.csr.csrStSearch.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.csr.csrStSearch
/// start - udc.imp.impSchYearSmt
/*
 * UDC Qualified Name: udc.imp.impSchYearSmt
 * App URI: udc/imp/impSchYearSmt
 * Source Location: udc/imp/impSchYearSmt.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/imp/impSchYearSmt", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var util = new ComUtil(app);
			var hostUtil;
			var skipOnChange = false;
			var openedByChange = false;
			
			function clearCallback(){
				skipOnChange = true;
				app.lookup("dipKeyDate").value = ""
				skipOnChange = false;
				
				app.setAppProperty("oKeyDate", "");
				app.setAppProperty("oSchYearRcd", "");
				app.setAppProperty("oSmtRcd", "");
				app.setAppProperty("oStDt", "");
				app.setAppProperty("oEndDt", "");
				
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				hostUtil = new ComUtil(app.getHostAppInstance());
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				var vsProperty = e.property;
				
				if(vsProperty == "iKeyDate" || vsProperty == "oKeyDate"){
					app.lookup("dipKeyDate").redraw();
				}
				
				if(vsProperty == "required"){
					var vsRequired = app.getAppProperty("required");
					if(vsRequired == "Y"){
						var vcDipKeyDateId = app.lookup("dipKeyDate");
						vcDipKeyDateId.userAttr({
							"required":"Y"
						});
						vcDipKeyDateId.fieldLabel = app.getAppProperty("fieldLabel");
					}
				}
			}
			
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnYearSmtClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnYearSmt = e.control;
				
			//	if(app.getAppProperty("iIsParentGrpSearch")){
			//		if(hostUtil.Group.isGrpChgBtnSch()) return false;
			//	}
				
				if(openedByChange){
					return false;
				}
				
				var initValue = {
					strUnitSystem : app.getAppProperty("iUnitSystem")
				};
				
				
				var voDialogProp = {
			//		"left": e.clientX-voHostActualRect.left,
			//		"top" : e.clientY-voHostActualRect.top,
					headerVisible: false,
					headerMovable: false,
					resizable: false
				}
				
				var voHostActualRect = app.getHostAppInstance().getActualRect();
				var vnLeft = e.clientX - voHostActualRect.left;
				var vnTop = e.clientY - voHostActualRect.top;
				
				if(vnLeft + 325 > voHostActualRect.width){
					voDialogProp.left = vnLeft - 325;
				}else {
					voDialogProp.left = vnLeft;
				}
				
				if(vnTop + 75 > voHostActualRect.height) {
					voDialogProp.top = vnTop - 75;
				}else {
					voDialogProp.top = vnTop;
				}
				
				openedByChange = true;
				
				var _app = app;
				hostUtil.Dialog.open("app/imp/impDialogSchYearSmt", 325, 75, function(/**@type cpr.events.CUIEvent*/ e){
					var dialog = e.control;
					var returnValue = dialog.returnValue;
					
					if(returnValue != null){
						_app.setAppProperty("oKeyDate", returnValue.strStDt);
						_app.setAppProperty("oSchYearRcd", returnValue.strSchYearRcd);
						_app.setAppProperty("oSmtRcd", returnValue.strSmtRcd);
						_app.setAppProperty("oStDt", returnValue.strStDt);
						_app.setAppProperty("oEndDt", returnValue.strEndDt);
						_app.setAppProperty("value", returnValue.strStDt);
						
						skipOnChange = true;
						_app.lookup("dipKeyDate").value = returnValue.strStDt;
						skipOnChange = false;
						
						var event = new cpr.events.CUIEvent("searchCallBack");
						_app.dispatchEvent(event);
					}
					
					openedByChange = false;
				}, initValue, voDialogProp);
			}
			
			
			/*
			 * 데이트 인풋에서 value-change 이벤트 발생 시 호출.
			 * Dateinput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onDipKeyDateValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.DateInput
				 */
				var dipKeyDate = e.control;
				
				if(skipOnChange == true || openedByChange == true){
					return false;
				}
				
				if(ValueUtil.isNull(dipKeyDate.value) == true){
					clearCallback();
					return false;
				}
				
				var event = new cpr.events.CUIEvent("searchCallBack");
				app.dispatchEvent(event);
			}
			
			
			/*
			 * 데이트 인풋에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onDipKeyDateKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.DateInput
				 */
				var dipKeyDate = e.control;
				if(e.keyCode == cpr.events.KeyCode.ENTER){
					e.stopPropagation();
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("iIsParentGrpSearch", null);
			app.declareBindableAppProperty("iKeyDate", null);
			app.declareBindableAppProperty("iUnitSystem", null);
			app.declareBindableAppProperty("oKeyDate", null);
			app.declareBindableAppProperty("oStDt", null);
			app.declareBindableAppProperty("oEndDt", null);
			app.declareBindableAppProperty("oSchYearRcd", null);
			app.declareBindableAppProperty("oSmtRcd", null);
			app.declareBindableAppProperty("value", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
			container.setLayout(responsiveXYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0";
			formLayout_1.verticalSpacing = "5";
			formLayout_1.setColumns(["1fr", "20px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var dateInput_1 = new cpr.controls.DateInput("dipKeyDate");
				dateInput_1.format = "YYYYMMDDHHmmss";
				dateInput_1.bind("value").toAppProperty("iKeyDate");
				if(typeof onDipKeyDateValueChange == "function") {
					dateInput_1.addEventListener("value-change", onDipKeyDateValueChange);
				}
				if(typeof onDipKeyDateKeydown == "function") {
					dateInput_1.addEventListener("keydown", onDipKeyDateKeydown);
				}
				container.addChild(dateInput_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_1 = new cpr.controls.Button("btnYearSmt");
				button_1.style.setClasses(["btn-pop-search"]);
				if(typeof onBtnYearSmtClick == "function") {
					button_1.addEventListener("click", onBtnYearSmtClick);
				}
				container.addChild(button_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"hidden": false,
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"hidden": false,
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					}
				]
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for impSchYearSmt
	cpr.utils.Util.ensurePackage("udc.imp").impSchYearSmt = function(id){
		cpr.controls.UDCBase.call(this, "udc.imp.impSchYearSmt", internalApp, id);
	};
	
	udc.imp.impSchYearSmt.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.imp.impSchYearSmt.prototype, "type", {
		get : function(){
			return "udc.imp.impSchYearSmt";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.imp.impSchYearSmt.prototype, "iIsParentGrpSearch", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iIsParentGrpSearch");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iIsParentGrpSearch", newValue, true);
		}
	});
	Object.defineProperty(udc.imp.impSchYearSmt.prototype, "iKeyDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iKeyDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iKeyDate", newValue, true);
		}
	});
	Object.defineProperty(udc.imp.impSchYearSmt.prototype, "iUnitSystem", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iUnitSystem");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iUnitSystem", newValue, true);
		}
	});
	Object.defineProperty(udc.imp.impSchYearSmt.prototype, "oKeyDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oKeyDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oKeyDate", newValue, true);
		}
	});
	Object.defineProperty(udc.imp.impSchYearSmt.prototype, "oStDt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStDt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStDt", newValue, true);
		}
	});
	Object.defineProperty(udc.imp.impSchYearSmt.prototype, "oEndDt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oEndDt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oEndDt", newValue, true);
		}
	});
	Object.defineProperty(udc.imp.impSchYearSmt.prototype, "oSchYearRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oSchYearRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oSchYearRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.imp.impSchYearSmt.prototype, "oSmtRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oSmtRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oSmtRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.imp.impSchYearSmt.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.imp.impSchYearSmt
/// start - udc.main.header
/*
 * UDC Qualified Name: udc.main.header
 * App URI: udc/main/header
 * Source Location: udc/main/header.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/main/header", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			//cpr.core.NotificationCenter.INSTANCE.subscribe("notice", this, function(msg) {
			//	var glbConsole = app.lookup("glb_console");
			//	glbConsole.info(msg);
			//});
			
			var util = new ComUtil(app);
			
			cpr.core.NotificationCenter.INSTANCE.subscribe("app-logout", this, function(msg) {
				app.lookup("btnLogout").click();
			});
			
			
			function createEventParam(selection) {
				var param = {menuId : null, menuNm : null, appId : null};
				if(selection) {
					var item;
					if(Array.isArray(selection)) {
						if(selection.length > 0) {
							item = selection[0].row;
						} else {
							return param;
						}
					} else {
						item = selection.row;
					}
					param.menuKey = item.getValue("MENU_KEY");
					param.umenuKey = item.getValue("UMENU_KEY");
					param.menuNm = item.getValue("MENU_NM");
					param.appId = item.getValue("CALL_PAGE");
				}
				return param;
			}
			
			
			exports.getAppHeader = function(){
				return app.lookup("ngbHeaderMenu");
			}
			
			exports.getApp = function(){
				return app;
			}
			
			exports.getHeaderId = function(){
				var vcHeaderMenu =  app.lookup("ngbHeaderMenu");
				var items = vcHeaderMenu.getSelection();
				return items[0].value;
			}
			
			
			
			
			
			
			/*
			 * "Logout" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.dispatchEvent(new cpr.events.CUIEvent("logout"));
			}
			
			/*
			 * "X" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.dispatchEvent(new cpr.events.CUIEvent("close"));
			}
			
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var subLoadMenu = app.lookup("sub_header_load");
				subLoadMenu.send();
				
				
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSub_header_loadSubmitSuccess2(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				
				var sub_header_load = e.control;
				var vcNgbHeader = app.lookup("ngbHeaderMenu");
				vcNgbHeader.redraw();
				var vnItemCnt = vcNgbHeader.getItemCount();
				if(vnItemCnt > 0){
					vcNgbHeader.selectItem(0);
				}
				
			}
			
			
			/*
			 * 네비게이션 바에서 selection-change 이벤트 발생 시 호출.
			 * 선택된 Item 값이 저장된 후에 발생하는 이벤트.
			 */
			function onNgbHeaderMenuSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.NavigationBar
				 */
				var menuTree = e.control;
				var oldSelection = e.oldSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
				var newSelection = e.newSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
				
				var eventObject = new cpr.events.CSelectionEvent("headerMenuSelection", { oldSelection: createEventParam(oldSelection), newSelection: createEventParam(newSelection) });
				app.dispatchEvent(eventObject);
				
				// 메뉴의 선택 차단
				if(eventObject.defaultPrevented == true) {
					e.preventDefault();
				}
				
			//	onNgbHeaderMenuItemClick(e);
			//	var ngbHeaderMenu = e.control;
			//	app.dispatchEvent(new cpr.events.CUIEvent("headerMenuSelection"));
				
			}
			
			/*
			 * 네비게이션 바에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onNgbHeaderMenuItemClick(/* cpr.events.CItemEvent */ e){
				/** 
				 * @type cpr.controls.NavigationBar
				 */
				var menuTree = e.control;
				
				var selectedItem = e.item;
				
				var eventObject = new cpr.events.CItemEvent("header_menu_click", { item: createEventParam(selectedItem) });
				app.dispatchEvent(eventObject);
			}
			
			/*
			 * 이미지에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onImageClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Image
				 */
				var image = e.control;
				app.dispatchEvent(new cpr.events.CUIEvent("logo_click"));
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds_top_menu");
			dataSet_1.parseData({
				"columns" : [
					{"name": "MENU_KEY"},
					{"name": "UMENU_KEY"},
					{"name": "MENU_NM"},
					{"name": "CALL_PAGE"},
					{"name": "MENU_LVL"}
				]
			});
			app.register(dataSet_1);
			var submission_1 = new cpr.protocols.Submission("sub_header_load");
			submission_1.action = "Main/getHeaderList.do";
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSub_header_loadSubmitSuccess2 == "function") {
				submission_1.addEventListener("submit-success", onSub_header_loadSubmitSuccess2);
			}
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "main");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
			responsiveXYLayout_1.scrollable = false;
			container.setLayout(responsiveXYLayout_1);
			
			// UI Configuration
			var image_1 = new cpr.controls.Image();
			image_1.src = "theme/images/login/eXCampus_logo.png";
			(function(image_1){
			})(image_1);
			if(typeof onImageClick == "function") {
				image_1.addEventListener("click", onImageClick);
			}
			container.addChild(image_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "12px",
						"left": "0px",
						"width": "170px",
						"height": "30px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"top": "12px",
						"left": "0px",
						"width": "83px",
						"height": "30px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"top": "12px",
						"left": "0px",
						"width": "39px",
						"height": "30px"
					}
				]
			});
			
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output("optHeaderUserInfo");
				output_1.style.css({
					"text-align" : "left"
				});
				container.addChild(output_1, {
					"top": "3px",
					"right": "0px",
					"left": "5px",
					"height": "20px"
				});
				var button_1 = new cpr.controls.Button("btnHeaderHome");
				button_1.style.css({
					"background-color" : "transparent",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-image" : "url('theme/images/main/top_icon3-1.png')",
					"border-top-style" : "none"
				});
				container.addChild(button_1, {
					"top": "26px",
					"left": "84px",
					"width": "24px",
					"height": "24px"
				});
				var button_2 = new cpr.controls.Button("btn3");
				button_2.style.css({
					"background-color" : "transparent",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-image" : "url('theme/images/main/top_icon9-2.png')",
					"border-top-style" : "none"
				});
				container.addChild(button_2, {
					"top": "26px",
					"left": "118px",
					"width": "24px",
					"height": "24px"
				});
				var button_3 = new cpr.controls.Button("btn4");
				button_3.style.css({
					"background-color" : "transparent",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-image" : "url('theme/images/main/top_icon1-1.png')",
					"border-top-style" : "none"
				});
				container.addChild(button_3, {
					"top": "26px",
					"left": "152px",
					"width": "24px",
					"height": "24px"
				});
				var button_4 = new cpr.controls.Button("btnFavorite");
				button_4.style.css({
					"border-right-style" : "none",
					"background-color" : "transparent",
					"background-repeat" : "no-repeat",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-image" : "url('theme/images/main/top_icon4-1.png')",
					"border-top-style" : "none"
				});
				container.addChild(button_4, {
					"top": "26px",
					"left": "184px",
					"width": "24px",
					"height": "24px"
				});
				var button_5 = new cpr.controls.Button("btnLogout");
				button_5.style.css({
					"background-size" : "cover",
					"background-image" : "url('theme/images/main/btnLogout.gif')",
					"background-position" : "center"
				});
				if(typeof onButtonClick == "function") {
					button_5.addEventListener("click", onButtonClick);
				}
				container.addChild(button_5, {
					"top": "26px",
					"left": "5px",
					"width": "74px",
					"height": "24px"
				});
				var button_6 = new cpr.controls.Button("btn5");
				button_6.style.css({
					"background-color" : "transparent",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-image" : "url('theme/images/main/top_icon7-1.png')",
					"border-top-style" : "none"
				});
				container.addChild(button_6, {
					"top": "26px",
					"left": "218px",
					"width": "24px",
					"height": "24px"
				});
			})(group_1);
			container.addChild(group_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "1px",
						"right": "5px",
						"width": "261px",
						"height": "53px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"top": "1px",
						"right": "5px",
						"width": "248px",
						"height": "53px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"top": "1px",
						"left": "250px",
						"width": "200px",
						"height": "53px"
					}
				]
			});
			
			var navigationBar_1 = new cpr.controls.NavigationBar("ngbHeaderMenu");
			navigationBar_1.menuType = "megamenu";
			navigationBar_1.style.setClasses(["menu-top"]);
			(function(navigationBar_1){
				navigationBar_1.setItemSet(app.lookup("ds_top_menu"), {
					"label": "MENU_NM",
					"value": "MENU_KEY",
					"parentValue": "UMENU_KEY",
					"accessKey": ""
				});
			})(navigationBar_1);
			if(typeof onNgbHeaderMenuSelectionChange == "function") {
				navigationBar_1.addEventListener("selection-change", onNgbHeaderMenuSelectionChange);
			}
			if(typeof onNgbHeaderMenuItemClick == "function") {
				navigationBar_1.addEventListener("item-click", onNgbHeaderMenuItemClick);
			}
			container.addChild(navigationBar_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "3px",
						"right": "265px",
						"left": "169px",
						"height": "50px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"top": "3px",
						"left": "82px",
						"width": "679px",
						"height": "50px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"top": "3px",
						"left": "38px",
						"width": "213px",
						"height": "50px"
					}
				]
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for header
	cpr.utils.Util.ensurePackage("udc.main").header = function(id){
		cpr.controls.UDCBase.call(this, "udc.main.header", internalApp, id);
	};
	
	udc.main.header.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.main.header.prototype, "type", {
		get : function(){
			return "udc.main.header";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.main.header
/// start - udc.main.left
/*
 * UDC Qualified Name: udc.main.left
 * App URI: udc/main/left
 * Source Location: udc/main/left.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/main/left", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			//var comUtil = createComUtil(app);
			var util = new ComUtil(app);
			/**
			 * 외부에서 메뉴 선택처리
			 **/
			exports.selectMenu = function(menuId) {
				
			}
			exports.getMenuTreeApp = function(){
				
				return app.lookup("menuTree");
			}
			
			exports.insFavoriteMenu = function(){
				
				util.Submit.send("subFavorSave", function(pbSuccess){
					if(pbSuccess){
						
						doFavoriteMenu();
					}
				});
				
			}
			
			exports.getSubMenuList = function(vsTopMenuId){
				
				var dmReqKey = app.lookup("dmReqKey");
				dmReqKey.setValue("strTopMenuId", vsTopMenuId);
				var subGetMenuList = app.lookup("subGetMenuList");
				subGetMenuList.send();
			}
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
			//	var subGetMenuList = app.lookup("subGetMenuList");
			//	subGetMenuList.send();
				doFavoriteMenu();
			}
			
			function doFavoriteMenu(){
				
				util.Submit.send("subFavorite", function(pbSuccess){
					util.Control.redraw("treFavorite");
				});
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubGetMenuListSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var subGetMenuList = e.control;
				var menuTree = app.lookup("menuTree");
			//	menuTree.expandAllItems();
				menuTree.redraw();
			}
			
			function createEventParam(selection) {
				var param = {menuId : null, menuNm : null, appId : null};
				if(selection) {
					var item;
					if(Array.isArray(selection)) {
						if(selection.length > 0) {
							item = selection[0].row;
						} else {
							return param;
						}
					} else {
						item = selection.row;
					}
					param.menuKey = item.getValue("MENU_KEY");
					param.umenuKey = item.getValue("UMENU_KEY");
					param.menuNm = item.getValue("MENU_NM");
					param.appId = item.getValue("CALL_PAGE");
				}
				
				return param;
			}
			
			/*
			 * 트리에서 before-selection-change 이벤트 발생 시 호출.
			 * 선택된 Item 값이 저장되기 전에 발생하는 이벤트. 다음 이벤트로 selection-change가 발생합니다.
			 */
			function onMenuTreeBeforeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var menuTree = e.control;
				var oldSelection = e.oldSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
				var newSelection = e.newSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
				
				var eventObject = new cpr.events.CSelectionEvent("menu_before_select", { oldSelection: createEventParam(oldSelection), newSelection: createEventParam(newSelection) });
				app.dispatchEvent(eventObject);
				
				// 메뉴의 선택 차단
				if(eventObject.defaultPrevented == true) {
					//e.preventDefault();
				}
			}
			
			/*
			 * 트리에서 selection-change 이벤트 발생 시 호출.
			 * 선택된 Item 값이 저장된 후에 발생하는 이벤트.
			 */
			function onMenuTreeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var menuTree = e.control;
				var oldSelection = e.oldSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
				var newSelection = e.newSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
			
				var eventObject = new cpr.events.CSelectionEvent("menu_select", { oldSelection: createEventParam(oldSelection), newSelection: createEventParam(newSelection) });
				app.dispatchEvent(eventObject);
			}
			
			/*
			 * 트리에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onMenuTreeItemClick(/* cpr.events.CItemEvent */ e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var menuTree = e.control;
				
				var selectedItem = e.item;
				
				var eventObject = new cpr.events.CItemEvent("menu_click", { item: createEventParam(selectedItem) });
				app.dispatchEvent(eventObject);
			}
			
			
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnExpendClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnExpend = e.control;
				var menuTree = app.lookup("menuTree");
				menuTree.expandAllItems();
				menuTree.redraw();
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCollapseClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCollapse = e.control;
				var menuTree = app.lookup("menuTree");
				menuTree.collapseAllItems();
				menuTree.redraw();
				
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbMenuSearchKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbMenuSearch = e.control;
				if (e.keyCode == 13) {
					var vsValue = ipbMenuSearch.value;
					
					var vcTree = app.lookup("menuTree");
					vcTree.collapseAllItems();
					if(!vsValue) return;
					vcTree.getItems().filter(function(item){
						if(item.label.indexOf(vsValue) >-1){
							var vsPValue = item.parentValue;
							var vaChildItem = vcTree.getChildren(item);
							var voParent = vcTree.getItemByValue(vsPValue);
							getParentMenuNode(voParent);
							vcTree.focusItem(item);
						}
						return false;
					});
					
					function getParentMenuNode(poTreeItem){
						
						if(!poTreeItem) return;
						
						if(poTreeItem.parentValue == "root"){
							vcTree.expandItem(poTreeItem);
						}else{
							vcTree.expandItem(poTreeItem);
							getParentMenuNode(vcTree.getItemByValue(poTreeItem.parentValue));
						}
					}
					/*
					var vaTreeItems = vcTree.findItems({label:vsValue});
					
					for(var key in vaTreeItems){
						var vsPValue = vaTreeItems[key].parentValue;
						if(!vsPValue) break;
						var vaChildItem = vcTree.getChildren(vaTreeItems[key]);
						if(vaChildItem.length > 0) break;
						var voParent = vcTree.getItemByValue(vsPValue);
						getParentMenuNode(voParent);
						
					}*/
				}
				
			}
			
			var leftmenuexpended = true;
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMenuExpendClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnMenuExpend = e.control;
				
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var container = app.getRootAppInstance().getContainer();
				var leftmenu = app.getRootAppInstance().lookup("left_menu");
				var mainmdi = app.getRootAppInstance().lookup("main_mdi");
				
				var voRect = app.getContainer().getActualRect();
				
				var vnLeft = Number(voRect.left);
				
				if(vnLeft > 0) {
					//접힘.
					container.updateConstraint(leftmenu,{
						positions: [
									{
										"media": "all and (min-width: 1024px)",
										"top": "60px",
										"bottom": "5px",
										"left": "-200px",
										"width": "215px"
									}, 
									{
										"media": "all and (min-width: 500px) and (max-width: 1024px)",
										"top": "60px",
										"bottom": "5px",
										"left": "-200px",
										"width": "215px"
									}, 
									{
										"media": "all and (max-width: 500px)",
										"top": "60px",
										"bottom": "5px",
										"left": "-200px",
										"width": "215px"
									}
								]
						});
					
					container.updateConstraint(mainmdi,{
						positions: [
									{
										"media": "all and (min-width: 1024px)",
										"top": "60px",
										"right": "5px",
										"bottom": "5px",
										"left": "15px"
									}, 
									{
										"media": "all and (min-width: 500px) and (max-width: 1024px)",
										"top": "60px",
										"right": "2px",
										"bottom": "5px",
										"left": "15px"
									}, 
									{
										"media": "all and (max-width: 500px)",
										"top": "60px",
										"right": "1px",
										"bottom": "5px",
										"left": "15px"
									}
								]
						});
					leftmenuexpended = false;
				} else {
					
					container.updateConstraint(leftmenu,{
						positions: [
								{
									"media": "all and (min-width: 1024px)",
									"top": "60px",
									"bottom": "5px",
									"left": "5px",
									"width": "215px"
								}, 
								{
									"media": "all and (min-width: 500px) and (max-width: 1024px)",
									"top": "60px",
									"bottom": "5px",
									"left": "5px",
									"width": "215px"
								}, 
								{
									"media": "all and (max-width: 500px)",
									"top": "60px",
									"bottom": "5px",
									"left": "5px",
									"width": "215px"
								}
							]
						});
					
					
					container.updateConstraint(mainmdi,{
							positions: [
								{
									"media": "all and (min-width: 1024px)",
									"top": "60px",
									"right": "5px",
									"bottom": "5px",
									"left": "220px"
								}, 
								{
									"media": "all and (min-width: 500px) and (max-width: 1024px)",
									"top": "60px",
									"right": "5px",
									"bottom": "5px",
									"left": "15px"
								}, 
								{
									"media": "all and (max-width: 500px)",
									"top": "60px",
									"right": "5px",
									"bottom": "5px",
									"left": "15px"
								}
							]
						});
					leftmenuexpended = true;
				}
				
			}
			
			/*
			 * 트리에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onTreFavoriteItemClick(/* cpr.events.CItemEvent */ e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var treFavorite = e.control;
				
				var selectedItem = e.item;
				
				var eventObject = new cpr.events.CItemEvent("favorite_menu_click", { item: createEventParam(selectedItem) });
				app.dispatchEvent(eventObject);
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("leftMenuList");
			dataSet_1.parseData({
				"columns" : [
					{"name": "MENU_KEY"},
					{"name": "UMENU_KEY"},
					{"name": "MENU_NM"},
					{"name": "CALL_PAGE"},
					{
						"name": "MENU_LVL",
						"dataType": "number"
					}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsFavoriteMenu");
			dataSet_2.parseData({
				"columns" : [
					{"name": "MENU_KEY"},
					{"name": "UMENU_KEY"},
					{"name": "MENU_NM"},
					{"name": "CALL_PAGE"},
					{
						"name": "MENU_LVL",
						"dataType": "number"
					}
				]
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [{"name": "strTopMenuId"}]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subGetMenuList");
			submission_1.action = "Main/getMenuList.do";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSubGetMenuListSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSubGetMenuListSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subFavorite");
			submission_2.action = "cmn/CmnPriMnuCustom/list.do";
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subFavorSave");
			submission_3.action = "cmn/CmnPriMnuCustom/insStdCmnPriMnu.do";
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (max-width: 1023px)", "tablet");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"background-color" : "#f0eeef",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpLeft");
			group_1.style.css({
				"border-right-style" : "none",
				"border-left-style" : "none",
				"border-bottom-style" : "none",
				"border-top-style" : "none"
			});
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0";
			formLayout_1.setColumns(["1fr", "15px"]);
			formLayout_1.setRows(["45px", "1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grpMenuSearch");
				group_2.style.css({
					"border-right-style" : "none",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"border-top-style" : "none"
				});
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.horizontalSpacing = "2";
				formLayout_2.setColumns(["5px", "1fr", "21px", "21px", "5px"]);
				formLayout_2.setRows(["45px"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var button_1 = new cpr.controls.Button("btnExpend");
					button_1.value = "";
					button_1.style.css({
						"border-radius" : "4px 4px 0px 0px",
						"background-color" : "#ffffff",
						"background-repeat" : "no-repeat",
						"background-position" : "50% 50%",
						"background-image" : "url('theme/images/menu/expand.png')"
					});
					if(typeof onBtnExpendClick == "function") {
						button_1.addEventListener("click", onBtnExpendClick);
					}
					container.addChild(button_1, {
						"colIndex": 2,
						"rowIndex": 0,
						"verticalAlign": "center"
					});
					var button_2 = new cpr.controls.Button("btnCollapse");
					button_2.value = "";
					button_2.style.css({
						"border-radius" : "4px 4px 0px 0px",
						"background-color" : "#ffffff",
						"background-repeat" : "no-repeat",
						"background-position" : "50% 50%",
						"background-image" : "url('theme/images/menu/collapse.png')"
					});
					if(typeof onBtnCollapseClick == "function") {
						button_2.addEventListener("click", onBtnCollapseClick);
					}
					container.addChild(button_2, {
						"colIndex": 3,
						"rowIndex": 0,
						"verticalAlign": "center"
					});
					var inputBox_1 = new cpr.controls.InputBox("ipbMenuSearch");
					inputBox_1.tooltip = "메뉴명을 입력하세요.";
					if(typeof onIpbMenuSearchKeydown == "function") {
						inputBox_1.addEventListener("keydown", onIpbMenuSearchKeydown);
					}
					container.addChild(inputBox_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"colSpan": 1,
						"rowSpan": 1,
						"verticalAlign": "center"
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1
				});
				var tabFolder_1 = new cpr.controls.TabFolder("fldMenu");
				tabFolder_1.style.setClasses(["tab-frame"]);
				
				var tabItem_1 = (function(tabFolder){
					var tabItem_1 = new cpr.controls.TabItem();
					tabItem_1.text = "tab1";
					var group_3 = new cpr.controls.Container("grpMenuTree");
					// Layout
					var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
					group_3.setLayout(responsiveXYLayout_1);
					(function(container){
						var tree_1 = new cpr.controls.Tree("menuTree");
						tree_1.indent = 10;
						tree_1.autoOpen = 0;
						tree_1.style.setClasses(["menu-tree"]);
						tree_1.style.item.css({
							"overflow" : "visible"
						});
						(function(tree_1){
							tree_1.setItemSet(app.lookup("leftMenuList"), {
								"label": "MENU_NM",
								"value": "MENU_KEY",
								"icon": "",
								"parentValue": "UMENU_KEY"
							});
						})(tree_1);
						if(typeof onMenuTreeBeforeSelectionChange == "function") {
							tree_1.addEventListener("before-selection-change", onMenuTreeBeforeSelectionChange);
						}
						if(typeof onMenuTreeSelectionChange == "function") {
							tree_1.addEventListener("selection-change", onMenuTreeSelectionChange);
						}
						if(typeof onMenuTreeItemClick == "function") {
							tree_1.addEventListener("item-click", onMenuTreeItemClick);
						}
						container.addChild(tree_1, {
							positions: [
								{
									"media": "all and (min-width: 1024px)",
									"top": "0px",
									"right": "0px",
									"bottom": "0px",
									"left": "0px"
								}, 
								{
									"media": "all and (max-width: 1023px)",
									"hidden": false,
									"top": "0px",
									"right": "0px",
									"bottom": "0px",
									"left": "0px"
								}
							]
						});
					})(group_3);
					tabItem_1.content = group_3;
					tabItem_1.bind("text").toLanguage("UI-GLS-MENU");
					return tabItem_1;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_1);
				
				var tabItem_2 = (function(tabFolder){
					var tabItem_2 = new cpr.controls.TabItem();
					tabItem_2.text = "즐겨찾기";
					var group_4 = new cpr.controls.Container("grp4");
					// Layout
					var xYLayout_2 = new cpr.controls.layouts.XYLayout();
					group_4.setLayout(xYLayout_2);
					(function(container){
						var tree_2 = new cpr.controls.Tree("treFavorite");
						tree_2.indent = 10;
						tree_2.autoOpen = 0;
						tree_2.style.setClasses(["menu-tree"]);
						tree_2.style.css({
							"font-size" : "12px"
						});
						tree_2.style.item.css({
							"overflow" : "visible"
						});
						(function(tree_2){
							tree_2.setItemSet(app.lookup("dsFavoriteMenu"), {
								"label": "MENU_NM",
								"value": "MENU_KEY",
								"icon": "",
								"parentValue": "UMENU_KEY"
							});
						})(tree_2);
						if(typeof onTreFavoriteItemClick == "function") {
							tree_2.addEventListener("item-click", onTreFavoriteItemClick);
						}
						container.addChild(tree_2, {
							"top": "0px",
							"right": "0px",
							"bottom": "0px",
							"left": "0px"
						});
					})(group_4);
					tabItem_2.content = group_4;
					return tabItem_2;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_2);
				tabFolder_1.setSelectedTabItem(tabItem_1);
				container.addChild(tabFolder_1, {
					"colIndex": 0,
					"rowIndex": 1,
					"colSpan": 1,
					"rowSpan": 1,
					"horizontalAlign": "fill",
					"width": 180
				});
				var button_3 = new cpr.controls.Button("btnMenuExpend");
				button_3.value = "";
				button_3.style.setClasses(["menu-toggler"]);
				button_3.style.css({
					"border-radius" : "0px",
					"border-right-style" : "none",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"border-top-style" : "none"
				});
				if(typeof onBtnMenuExpendClick == "function") {
					button_3.addEventListener("click", onBtnMenuExpendClick);
				}
				container.addChild(button_3, {
					"colIndex": 1,
					"rowIndex": 1,
					"colSpan": 1,
					"rowSpan": 1,
					"horizontalAlign": "fill",
					"width": 15
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for left
	cpr.utils.Util.ensurePackage("udc.main").left = function(id){
		cpr.controls.UDCBase.call(this, "udc.main.left", internalApp, id);
	};
	
	udc.main.left.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.main.left.prototype, "type", {
		get : function(){
			return "udc.main.left";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.main.left
/// start - udc.main.menu
/*
 * UDC Qualified Name: udc.main.menu
 * App URI: udc/main/menu
 * Source Location: udc/main/menu.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/main/menu", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			//var comUtil = createComUtil(app);
			var comUtil = new ComUtil(app);
			/**
			 * 외부에서 메뉴 선택처리
			 **/
			exports.selectMenu = function(menuId) {
				
			}
			
			exports.getSubMenuList = function(vsTopMenuId){
				
				var dmReqKey = app.lookup("dmReqKey");
				dmReqKey.setValue("strTopMenuId", vsTopMenuId);
				var subGetMenuList = app.lookup("subGetMenuList");
				subGetMenuList.send();
			}
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubGetMenuListSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var subGetMenuList = e.control;
				var menuTree = app.lookup("mnu");
			//	menuTree.expandAllItems();
				menuTree.redraw();
			}
			
			function createEventParam(selection) {
				var param = {menuId : null, menuNm : null, appId : null};
				if(selection) {
					var item;
					if(Array.isArray(selection)) {
						if(selection.length > 0) {
							item = selection[0].row;
						} else {
							return param;
						}
					} else {
						item = selection.row;
					}
					param.menuKey = item.getValue("MENU_KEY");
					param.umenuKey = item.getValue("UMENU_KEY");
					param.menuNm = item.getValue("MENU_NM");
					param.appId = item.getValue("CALL_PAGE");
				}
				
				return param;
			}
			
			
			
			/*
			 * 메뉴에서 before-selection-change 이벤트 발생 시 호출.
			 * 선택된 Item 값이 저장되기 전에 발생하는 이벤트. 다음 이벤트로 selection-change가 발생합니다.
			 */
			function onMnuBeforeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Menu
				 */
				var mnu = e.control;
				var oldSelection = e.oldSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
				var newSelection = e.newSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
				
				var eventObject = new cpr.events.CSelectionEvent("menu_before_select", { oldSelection: createEventParam(oldSelection), newSelection: createEventParam(newSelection) });
				app.dispatchEvent(eventObject);
				
				// 메뉴의 선택 차단
				if(eventObject.defaultPrevented == true) {
					e.preventDefault();
				}
				
			}
			
			/*
			 * 메뉴에서 selection-change 이벤트 발생 시 호출.
			 * Menu Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onMnuSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Menu
				 */
				var mnu = e.control;
				var oldSelection = e.oldSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
				var newSelection = e.newSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
			
				var eventObject = new cpr.events.CSelectionEvent("menu_select", { oldSelection: createEventParam(oldSelection), newSelection: createEventParam(newSelection) });
				app.dispatchEvent(eventObject);
				
			}
			
			/*
			 * 메뉴에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onMnuItemClick(/* cpr.events.CItemEvent */ e){
				/** 
				 * @type cpr.controls.Menu
				 */
				var mnu = e.control;
				var selectedItem = e.item;
				var eventObject = new cpr.events.CItemEvent("menu_click", { item: createEventParam(selectedItem) });
				app.dispatchEvent(eventObject);
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("leftMenuList");
			dataSet_1.parseData({
				"columns" : [
					{"name": "MENU_KEY"},
					{"name": "UMENU_KEY"},
					{"name": "MENU_NM"},
					{"name": "CALL_PAGE"}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dmReqKey");
			dataMap_1.parseData({
				"columns" : [{"name": "strTopMenuId"}]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subGetMenuList");
			submission_1.action = "cmn/Main/getMenuList.do";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSubGetMenuListSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSubGetMenuListSubmitSuccess);
			}
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"background-color" : "#f0eeef",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var menu_1 = new cpr.controls.Menu("mnu");
			(function(menu_1){
				menu_1.setItemSet(app.lookup("leftMenuList"), {
					"label": "MENU_NM",
					"value": "MENU_KEY",
					"parentValue": "UMENU_KEY",
					"accessKey": "CALL_PAGE"
				});
			})(menu_1);
			if(typeof onMnuBeforeSelectionChange == "function") {
				menu_1.addEventListener("before-selection-change", onMnuBeforeSelectionChange);
			}
			if(typeof onMnuSelectionChange == "function") {
				menu_1.addEventListener("selection-change", onMnuSelectionChange);
			}
			if(typeof onMnuItemClick == "function") {
				menu_1.addEventListener("item-click", onMnuItemClick);
			}
			container.addChild(menu_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for menu
	cpr.utils.Util.ensurePackage("udc.main").menu = function(id){
		cpr.controls.UDCBase.call(this, "udc.main.menu", internalApp, id);
	};
	
	udc.main.menu.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.main.menu.prototype, "type", {
		get : function(){
			return "udc.main.menu";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.main.menu
